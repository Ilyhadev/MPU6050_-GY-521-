
accDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084b0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016c0  080085c0  080085c0  000095c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c80  08009c80  0000b1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009c80  08009c80  0000ac80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c88  08009c88  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c88  08009c88  0000ac88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c8c  08009c8c  0000ac8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08009c90  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  200001dc  08009e6c  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007f0  08009e6c  0000b7f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c603  00000000  00000000  0000b205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002201  00000000  00000000  00017808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  00019a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000908  00000000  00000000  0001a5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189b4  00000000  00000000  0001aec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed28  00000000  00000000  00033874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087867  00000000  00000000  0004259c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9e03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d4  00000000  00000000  000c9e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000ce11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080085a8 	.word	0x080085a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080085a8 	.word	0x080085a8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <HAL_Init+0x28>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a07      	ldr	r2, [pc, #28]	@ (80010f8 <HAL_Init+0x28>)
 80010da:	f043 0310 	orr.w	r3, r3, #16
 80010de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e0:	2003      	movs	r0, #3
 80010e2:	f000 f947 	bl	8001374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e6:	200f      	movs	r0, #15
 80010e8:	f000 f808 	bl	80010fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ec:	f004 f924 	bl	8005338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40022000 	.word	0x40022000

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001104:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <HAL_InitTick+0x54>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_InitTick+0x58>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001112:	fbb3 f3f1 	udiv	r3, r3, r1
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f95f 	bl	80013de <HAL_SYSTICK_Config>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00e      	b.n	8001148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d80a      	bhi.n	8001146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f000 f927 	bl	800138a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4a06      	ldr	r2, [pc, #24]	@ (8001158 <HAL_InitTick+0x5c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000010 	.word	0x20000010
 8001154:	20000004 	.word	0x20000004
 8001158:	20000000 	.word	0x20000000

0800115c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <HAL_IncTick+0x1c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b05      	ldr	r3, [pc, #20]	@ (800117c <HAL_IncTick+0x20>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a03      	ldr	r2, [pc, #12]	@ (800117c <HAL_IncTick+0x20>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	20000004 	.word	0x20000004
 800117c:	200001f8 	.word	0x200001f8

08001180 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b02      	ldr	r3, [pc, #8]	@ (8001190 <HAL_GetTick+0x10>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	200001f8 	.word	0x200001f8

08001194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800119c:	f7ff fff0 	bl	8001180 <HAL_GetTick>
 80011a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ac:	d005      	beq.n	80011ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ae:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <HAL_Delay+0x44>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	461a      	mov	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4413      	add	r3, r2
 80011b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ba:	bf00      	nop
 80011bc:	f7ff ffe0 	bl	8001180 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d8f7      	bhi.n	80011bc <HAL_Delay+0x28>
  {
  }
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000004 	.word	0x20000004

080011dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011f8:	4013      	ands	r3, r2
 80011fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001204:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001208:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800120c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120e:	4a04      	ldr	r2, [pc, #16]	@ (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	60d3      	str	r3, [r2, #12]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001228:	4b04      	ldr	r3, [pc, #16]	@ (800123c <__NVIC_GetPriorityGrouping+0x18>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	0a1b      	lsrs	r3, r3, #8
 800122e:	f003 0307 	and.w	r3, r3, #7
}
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	2b00      	cmp	r3, #0
 8001250:	db0b      	blt.n	800126a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	f003 021f 	and.w	r2, r3, #31
 8001258:	4906      	ldr	r1, [pc, #24]	@ (8001274 <__NVIC_EnableIRQ+0x34>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	095b      	lsrs	r3, r3, #5
 8001260:	2001      	movs	r0, #1
 8001262:	fa00 f202 	lsl.w	r2, r0, r2
 8001266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	e000e100 	.word	0xe000e100

08001278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001288:	2b00      	cmp	r3, #0
 800128a:	db0a      	blt.n	80012a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	b2da      	uxtb	r2, r3
 8001290:	490c      	ldr	r1, [pc, #48]	@ (80012c4 <__NVIC_SetPriority+0x4c>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	0112      	lsls	r2, r2, #4
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	440b      	add	r3, r1
 800129c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a0:	e00a      	b.n	80012b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4908      	ldr	r1, [pc, #32]	@ (80012c8 <__NVIC_SetPriority+0x50>)
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	3b04      	subs	r3, #4
 80012b0:	0112      	lsls	r2, r2, #4
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	440b      	add	r3, r1
 80012b6:	761a      	strb	r2, [r3, #24]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000e100 	.word	0xe000e100
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	@ 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f1c3 0307 	rsb	r3, r3, #7
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	bf28      	it	cs
 80012ea:	2304      	movcs	r3, #4
 80012ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3304      	adds	r3, #4
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	d902      	bls.n	80012fc <NVIC_EncodePriority+0x30>
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3b03      	subs	r3, #3
 80012fa:	e000      	b.n	80012fe <NVIC_EncodePriority+0x32>
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	f04f 32ff 	mov.w	r2, #4294967295
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43da      	mvns	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	401a      	ands	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001314:	f04f 31ff 	mov.w	r1, #4294967295
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa01 f303 	lsl.w	r3, r1, r3
 800131e:	43d9      	mvns	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	4313      	orrs	r3, r2
         );
}
 8001326:	4618      	mov	r0, r3
 8001328:	3724      	adds	r7, #36	@ 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001340:	d301      	bcc.n	8001346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001342:	2301      	movs	r3, #1
 8001344:	e00f      	b.n	8001366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001346:	4a0a      	ldr	r2, [pc, #40]	@ (8001370 <SysTick_Config+0x40>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134e:	210f      	movs	r1, #15
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f7ff ff90 	bl	8001278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001358:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <SysTick_Config+0x40>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135e:	4b04      	ldr	r3, [pc, #16]	@ (8001370 <SysTick_Config+0x40>)
 8001360:	2207      	movs	r2, #7
 8001362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	e000e010 	.word	0xe000e010

08001374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff2d 	bl	80011dc <__NVIC_SetPriorityGrouping>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800139c:	f7ff ff42 	bl	8001224 <__NVIC_GetPriorityGrouping>
 80013a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	68b9      	ldr	r1, [r7, #8]
 80013a6:	6978      	ldr	r0, [r7, #20]
 80013a8:	f7ff ff90 	bl	80012cc <NVIC_EncodePriority>
 80013ac:	4602      	mov	r2, r0
 80013ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b2:	4611      	mov	r1, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff5f 	bl	8001278 <__NVIC_SetPriority>
}
 80013ba:	bf00      	nop
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff35 	bl	8001240 <__NVIC_EnableIRQ>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ffa2 	bl	8001330 <SysTick_Config>
 80013ec:	4603      	mov	r3, r0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b085      	sub	sp, #20
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d008      	beq.n	8001420 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2204      	movs	r2, #4
 8001412:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e020      	b.n	8001462 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 020e 	bic.w	r2, r2, #14
 800142e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0201 	bic.w	r2, r2, #1
 800143e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001448:	2101      	movs	r1, #1
 800144a:	fa01 f202 	lsl.w	r2, r1, r2
 800144e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001460:	7bfb      	ldrb	r3, [r7, #15]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d005      	beq.n	8001490 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2204      	movs	r2, #4
 8001488:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	e051      	b.n	8001534 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 020e 	bic.w	r2, r2, #14
 800149e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0201 	bic.w	r2, r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a22      	ldr	r2, [pc, #136]	@ (8001540 <HAL_DMA_Abort_IT+0xd4>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d029      	beq.n	800150e <HAL_DMA_Abort_IT+0xa2>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a21      	ldr	r2, [pc, #132]	@ (8001544 <HAL_DMA_Abort_IT+0xd8>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d022      	beq.n	800150a <HAL_DMA_Abort_IT+0x9e>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001548 <HAL_DMA_Abort_IT+0xdc>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d01a      	beq.n	8001504 <HAL_DMA_Abort_IT+0x98>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a1e      	ldr	r2, [pc, #120]	@ (800154c <HAL_DMA_Abort_IT+0xe0>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d012      	beq.n	80014fe <HAL_DMA_Abort_IT+0x92>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001550 <HAL_DMA_Abort_IT+0xe4>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d00a      	beq.n	80014f8 <HAL_DMA_Abort_IT+0x8c>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001554 <HAL_DMA_Abort_IT+0xe8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d102      	bne.n	80014f2 <HAL_DMA_Abort_IT+0x86>
 80014ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014f0:	e00e      	b.n	8001510 <HAL_DMA_Abort_IT+0xa4>
 80014f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014f6:	e00b      	b.n	8001510 <HAL_DMA_Abort_IT+0xa4>
 80014f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014fc:	e008      	b.n	8001510 <HAL_DMA_Abort_IT+0xa4>
 80014fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001502:	e005      	b.n	8001510 <HAL_DMA_Abort_IT+0xa4>
 8001504:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001508:	e002      	b.n	8001510 <HAL_DMA_Abort_IT+0xa4>
 800150a:	2310      	movs	r3, #16
 800150c:	e000      	b.n	8001510 <HAL_DMA_Abort_IT+0xa4>
 800150e:	2301      	movs	r3, #1
 8001510:	4a11      	ldr	r2, [pc, #68]	@ (8001558 <HAL_DMA_Abort_IT+0xec>)
 8001512:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	4798      	blx	r3
    } 
  }
  return status;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40020008 	.word	0x40020008
 8001544:	4002001c 	.word	0x4002001c
 8001548:	40020030 	.word	0x40020030
 800154c:	40020044 	.word	0x40020044
 8001550:	40020058 	.word	0x40020058
 8001554:	4002006c 	.word	0x4002006c
 8001558:	40020000 	.word	0x40020000

0800155c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800155c:	b480      	push	{r7}
 800155e:	b08b      	sub	sp, #44	@ 0x2c
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156e:	e169      	b.n	8001844 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001570:	2201      	movs	r2, #1
 8001572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	429a      	cmp	r2, r3
 800158a:	f040 8158 	bne.w	800183e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	4a9a      	ldr	r2, [pc, #616]	@ (80017fc <HAL_GPIO_Init+0x2a0>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d05e      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
 8001598:	4a98      	ldr	r2, [pc, #608]	@ (80017fc <HAL_GPIO_Init+0x2a0>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d875      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 800159e:	4a98      	ldr	r2, [pc, #608]	@ (8001800 <HAL_GPIO_Init+0x2a4>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d058      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
 80015a4:	4a96      	ldr	r2, [pc, #600]	@ (8001800 <HAL_GPIO_Init+0x2a4>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d86f      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 80015aa:	4a96      	ldr	r2, [pc, #600]	@ (8001804 <HAL_GPIO_Init+0x2a8>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d052      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
 80015b0:	4a94      	ldr	r2, [pc, #592]	@ (8001804 <HAL_GPIO_Init+0x2a8>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d869      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 80015b6:	4a94      	ldr	r2, [pc, #592]	@ (8001808 <HAL_GPIO_Init+0x2ac>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d04c      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
 80015bc:	4a92      	ldr	r2, [pc, #584]	@ (8001808 <HAL_GPIO_Init+0x2ac>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d863      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 80015c2:	4a92      	ldr	r2, [pc, #584]	@ (800180c <HAL_GPIO_Init+0x2b0>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d046      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
 80015c8:	4a90      	ldr	r2, [pc, #576]	@ (800180c <HAL_GPIO_Init+0x2b0>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d85d      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 80015ce:	2b12      	cmp	r3, #18
 80015d0:	d82a      	bhi.n	8001628 <HAL_GPIO_Init+0xcc>
 80015d2:	2b12      	cmp	r3, #18
 80015d4:	d859      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 80015d6:	a201      	add	r2, pc, #4	@ (adr r2, 80015dc <HAL_GPIO_Init+0x80>)
 80015d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015dc:	08001657 	.word	0x08001657
 80015e0:	08001631 	.word	0x08001631
 80015e4:	08001643 	.word	0x08001643
 80015e8:	08001685 	.word	0x08001685
 80015ec:	0800168b 	.word	0x0800168b
 80015f0:	0800168b 	.word	0x0800168b
 80015f4:	0800168b 	.word	0x0800168b
 80015f8:	0800168b 	.word	0x0800168b
 80015fc:	0800168b 	.word	0x0800168b
 8001600:	0800168b 	.word	0x0800168b
 8001604:	0800168b 	.word	0x0800168b
 8001608:	0800168b 	.word	0x0800168b
 800160c:	0800168b 	.word	0x0800168b
 8001610:	0800168b 	.word	0x0800168b
 8001614:	0800168b 	.word	0x0800168b
 8001618:	0800168b 	.word	0x0800168b
 800161c:	0800168b 	.word	0x0800168b
 8001620:	08001639 	.word	0x08001639
 8001624:	0800164d 	.word	0x0800164d
 8001628:	4a79      	ldr	r2, [pc, #484]	@ (8001810 <HAL_GPIO_Init+0x2b4>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d013      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800162e:	e02c      	b.n	800168a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	623b      	str	r3, [r7, #32]
          break;
 8001636:	e029      	b.n	800168c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	3304      	adds	r3, #4
 800163e:	623b      	str	r3, [r7, #32]
          break;
 8001640:	e024      	b.n	800168c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	3308      	adds	r3, #8
 8001648:	623b      	str	r3, [r7, #32]
          break;
 800164a:	e01f      	b.n	800168c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	330c      	adds	r3, #12
 8001652:	623b      	str	r3, [r7, #32]
          break;
 8001654:	e01a      	b.n	800168c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d102      	bne.n	8001664 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800165e:	2304      	movs	r3, #4
 8001660:	623b      	str	r3, [r7, #32]
          break;
 8001662:	e013      	b.n	800168c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d105      	bne.n	8001678 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800166c:	2308      	movs	r3, #8
 800166e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	611a      	str	r2, [r3, #16]
          break;
 8001676:	e009      	b.n	800168c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001678:	2308      	movs	r3, #8
 800167a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	615a      	str	r2, [r3, #20]
          break;
 8001682:	e003      	b.n	800168c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001684:	2300      	movs	r3, #0
 8001686:	623b      	str	r3, [r7, #32]
          break;
 8001688:	e000      	b.n	800168c <HAL_GPIO_Init+0x130>
          break;
 800168a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2bff      	cmp	r3, #255	@ 0xff
 8001690:	d801      	bhi.n	8001696 <HAL_GPIO_Init+0x13a>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	e001      	b.n	800169a <HAL_GPIO_Init+0x13e>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3304      	adds	r3, #4
 800169a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2bff      	cmp	r3, #255	@ 0xff
 80016a0:	d802      	bhi.n	80016a8 <HAL_GPIO_Init+0x14c>
 80016a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	e002      	b.n	80016ae <HAL_GPIO_Init+0x152>
 80016a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016aa:	3b08      	subs	r3, #8
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	210f      	movs	r1, #15
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	401a      	ands	r2, r3
 80016c0:	6a39      	ldr	r1, [r7, #32]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	fa01 f303 	lsl.w	r3, r1, r3
 80016c8:	431a      	orrs	r2, r3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 80b1 	beq.w	800183e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001814 <HAL_GPIO_Init+0x2b8>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001814 <HAL_GPIO_Init+0x2b8>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	6193      	str	r3, [r2, #24]
 80016e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001814 <HAL_GPIO_Init+0x2b8>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016f4:	4a48      	ldr	r2, [pc, #288]	@ (8001818 <HAL_GPIO_Init+0x2bc>)
 80016f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f8:	089b      	lsrs	r3, r3, #2
 80016fa:	3302      	adds	r3, #2
 80016fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001700:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	220f      	movs	r2, #15
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	4013      	ands	r3, r2
 8001716:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a40      	ldr	r2, [pc, #256]	@ (800181c <HAL_GPIO_Init+0x2c0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d013      	beq.n	8001748 <HAL_GPIO_Init+0x1ec>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a3f      	ldr	r2, [pc, #252]	@ (8001820 <HAL_GPIO_Init+0x2c4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d00d      	beq.n	8001744 <HAL_GPIO_Init+0x1e8>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a3e      	ldr	r2, [pc, #248]	@ (8001824 <HAL_GPIO_Init+0x2c8>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d007      	beq.n	8001740 <HAL_GPIO_Init+0x1e4>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a3d      	ldr	r2, [pc, #244]	@ (8001828 <HAL_GPIO_Init+0x2cc>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d101      	bne.n	800173c <HAL_GPIO_Init+0x1e0>
 8001738:	2303      	movs	r3, #3
 800173a:	e006      	b.n	800174a <HAL_GPIO_Init+0x1ee>
 800173c:	2304      	movs	r3, #4
 800173e:	e004      	b.n	800174a <HAL_GPIO_Init+0x1ee>
 8001740:	2302      	movs	r3, #2
 8001742:	e002      	b.n	800174a <HAL_GPIO_Init+0x1ee>
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <HAL_GPIO_Init+0x1ee>
 8001748:	2300      	movs	r3, #0
 800174a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800174c:	f002 0203 	and.w	r2, r2, #3
 8001750:	0092      	lsls	r2, r2, #2
 8001752:	4093      	lsls	r3, r2
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	4313      	orrs	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800175a:	492f      	ldr	r1, [pc, #188]	@ (8001818 <HAL_GPIO_Init+0x2bc>)
 800175c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175e:	089b      	lsrs	r3, r3, #2
 8001760:	3302      	adds	r3, #2
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d006      	beq.n	8001782 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001774:	4b2d      	ldr	r3, [pc, #180]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	492c      	ldr	r1, [pc, #176]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	608b      	str	r3, [r1, #8]
 8001780:	e006      	b.n	8001790 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001782:	4b2a      	ldr	r3, [pc, #168]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	43db      	mvns	r3, r3
 800178a:	4928      	ldr	r1, [pc, #160]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 800178c:	4013      	ands	r3, r2
 800178e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d006      	beq.n	80017aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800179c:	4b23      	ldr	r3, [pc, #140]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 800179e:	68da      	ldr	r2, [r3, #12]
 80017a0:	4922      	ldr	r1, [pc, #136]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	60cb      	str	r3, [r1, #12]
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017aa:	4b20      	ldr	r3, [pc, #128]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	491e      	ldr	r1, [pc, #120]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d006      	beq.n	80017d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017c4:	4b19      	ldr	r3, [pc, #100]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	4918      	ldr	r1, [pc, #96]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017d2:	4b16      	ldr	r3, [pc, #88]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	43db      	mvns	r3, r3
 80017da:	4914      	ldr	r1, [pc, #80]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 80017dc:	4013      	ands	r3, r2
 80017de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d021      	beq.n	8001830 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017ec:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	490e      	ldr	r1, [pc, #56]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]
 80017f8:	e021      	b.n	800183e <HAL_GPIO_Init+0x2e2>
 80017fa:	bf00      	nop
 80017fc:	10320000 	.word	0x10320000
 8001800:	10310000 	.word	0x10310000
 8001804:	10220000 	.word	0x10220000
 8001808:	10210000 	.word	0x10210000
 800180c:	10120000 	.word	0x10120000
 8001810:	10110000 	.word	0x10110000
 8001814:	40021000 	.word	0x40021000
 8001818:	40010000 	.word	0x40010000
 800181c:	40010800 	.word	0x40010800
 8001820:	40010c00 	.word	0x40010c00
 8001824:	40011000 	.word	0x40011000
 8001828:	40011400 	.word	0x40011400
 800182c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001830:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <HAL_GPIO_Init+0x304>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	43db      	mvns	r3, r3
 8001838:	4909      	ldr	r1, [pc, #36]	@ (8001860 <HAL_GPIO_Init+0x304>)
 800183a:	4013      	ands	r3, r2
 800183c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	3301      	adds	r3, #1
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184a:	fa22 f303 	lsr.w	r3, r2, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	f47f ae8e 	bne.w	8001570 <HAL_GPIO_Init+0x14>
  }
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	372c      	adds	r7, #44	@ 0x2c
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	40010400 	.word	0x40010400

08001864 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e12b      	b.n	8001ace <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d106      	bne.n	8001890 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f003 fd86 	bl	800539c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2224      	movs	r2, #36	@ 0x24
 8001894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0201 	bic.w	r2, r2, #1
 80018a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018c8:	f001 feaa 	bl	8003620 <HAL_RCC_GetPCLK1Freq>
 80018cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4a81      	ldr	r2, [pc, #516]	@ (8001ad8 <HAL_I2C_Init+0x274>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d807      	bhi.n	80018e8 <HAL_I2C_Init+0x84>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4a80      	ldr	r2, [pc, #512]	@ (8001adc <HAL_I2C_Init+0x278>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	bf94      	ite	ls
 80018e0:	2301      	movls	r3, #1
 80018e2:	2300      	movhi	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	e006      	b.n	80018f6 <HAL_I2C_Init+0x92>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4a7d      	ldr	r2, [pc, #500]	@ (8001ae0 <HAL_I2C_Init+0x27c>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	bf94      	ite	ls
 80018f0:	2301      	movls	r3, #1
 80018f2:	2300      	movhi	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e0e7      	b.n	8001ace <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4a78      	ldr	r2, [pc, #480]	@ (8001ae4 <HAL_I2C_Init+0x280>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	0c9b      	lsrs	r3, r3, #18
 8001908:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	430a      	orrs	r2, r1
 800191c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ad8 <HAL_I2C_Init+0x274>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d802      	bhi.n	8001938 <HAL_I2C_Init+0xd4>
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	3301      	adds	r3, #1
 8001936:	e009      	b.n	800194c <HAL_I2C_Init+0xe8>
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800193e:	fb02 f303 	mul.w	r3, r2, r3
 8001942:	4a69      	ldr	r2, [pc, #420]	@ (8001ae8 <HAL_I2C_Init+0x284>)
 8001944:	fba2 2303 	umull	r2, r3, r2, r3
 8001948:	099b      	lsrs	r3, r3, #6
 800194a:	3301      	adds	r3, #1
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	430b      	orrs	r3, r1
 8001952:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800195e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	495c      	ldr	r1, [pc, #368]	@ (8001ad8 <HAL_I2C_Init+0x274>)
 8001968:	428b      	cmp	r3, r1
 800196a:	d819      	bhi.n	80019a0 <HAL_I2C_Init+0x13c>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	1e59      	subs	r1, r3, #1
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	fbb1 f3f3 	udiv	r3, r1, r3
 800197a:	1c59      	adds	r1, r3, #1
 800197c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001980:	400b      	ands	r3, r1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00a      	beq.n	800199c <HAL_I2C_Init+0x138>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1e59      	subs	r1, r3, #1
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fbb1 f3f3 	udiv	r3, r1, r3
 8001994:	3301      	adds	r3, #1
 8001996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800199a:	e051      	b.n	8001a40 <HAL_I2C_Init+0x1dc>
 800199c:	2304      	movs	r3, #4
 800199e:	e04f      	b.n	8001a40 <HAL_I2C_Init+0x1dc>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d111      	bne.n	80019cc <HAL_I2C_Init+0x168>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1e58      	subs	r0, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6859      	ldr	r1, [r3, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	440b      	add	r3, r1
 80019b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ba:	3301      	adds	r3, #1
 80019bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bf0c      	ite	eq
 80019c4:	2301      	moveq	r3, #1
 80019c6:	2300      	movne	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	e012      	b.n	80019f2 <HAL_I2C_Init+0x18e>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1e58      	subs	r0, r3, #1
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6859      	ldr	r1, [r3, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	0099      	lsls	r1, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	fbb0 f3f3 	udiv	r3, r0, r3
 80019e2:	3301      	adds	r3, #1
 80019e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	bf0c      	ite	eq
 80019ec:	2301      	moveq	r3, #1
 80019ee:	2300      	movne	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_I2C_Init+0x196>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e022      	b.n	8001a40 <HAL_I2C_Init+0x1dc>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10e      	bne.n	8001a20 <HAL_I2C_Init+0x1bc>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	1e58      	subs	r0, r3, #1
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6859      	ldr	r1, [r3, #4]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	440b      	add	r3, r1
 8001a10:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a1e:	e00f      	b.n	8001a40 <HAL_I2C_Init+0x1dc>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1e58      	subs	r0, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6859      	ldr	r1, [r3, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	0099      	lsls	r1, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a36:	3301      	adds	r3, #1
 8001a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	6809      	ldr	r1, [r1, #0]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69da      	ldr	r2, [r3, #28]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6911      	ldr	r1, [r2, #16]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68d2      	ldr	r2, [r2, #12]
 8001a7a:	4311      	orrs	r1, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	430b      	orrs	r3, r1
 8001a82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2220      	movs	r2, #32
 8001aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	000186a0 	.word	0x000186a0
 8001adc:	001e847f 	.word	0x001e847f
 8001ae0:	003d08ff 	.word	0x003d08ff
 8001ae4:	431bde83 	.word	0x431bde83
 8001ae8:	10624dd3 	.word	0x10624dd3

08001aec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af02      	add	r7, sp, #8
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	461a      	mov	r2, r3
 8001af8:	460b      	mov	r3, r1
 8001afa:	817b      	strh	r3, [r7, #10]
 8001afc:	4613      	mov	r3, r2
 8001afe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b00:	f7ff fb3e 	bl	8001180 <HAL_GetTick>
 8001b04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b20      	cmp	r3, #32
 8001b10:	f040 80e0 	bne.w	8001cd4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2319      	movs	r3, #25
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4970      	ldr	r1, [pc, #448]	@ (8001ce0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 ff7e 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e0d3      	b.n	8001cd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_I2C_Master_Transmit+0x50>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e0cc      	b.n	8001cd6 <HAL_I2C_Master_Transmit+0x1ea>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d007      	beq.n	8001b62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 0201 	orr.w	r2, r2, #1
 8001b60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2221      	movs	r2, #33	@ 0x21
 8001b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2210      	movs	r2, #16
 8001b7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	893a      	ldrh	r2, [r7, #8]
 8001b92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4a50      	ldr	r2, [pc, #320]	@ (8001ce4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ba2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ba4:	8979      	ldrh	r1, [r7, #10]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	6a3a      	ldr	r2, [r7, #32]
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 fd38 	bl	8002620 <I2C_MasterRequestWrite>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e08d      	b.n	8001cd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001bd0:	e066      	b.n	8001ca0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	6a39      	ldr	r1, [r7, #32]
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f001 f83c 	bl	8002c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00d      	beq.n	8001bfe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d107      	bne.n	8001bfa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bf8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e06b      	b.n	8001cd6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c02:	781a      	ldrb	r2, [r3, #0]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c26:	3b01      	subs	r3, #1
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d11b      	bne.n	8001c74 <HAL_I2C_Master_Transmit+0x188>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d017      	beq.n	8001c74 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c48:	781a      	ldrb	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	6a39      	ldr	r1, [r7, #32]
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f001 f833 	bl	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00d      	beq.n	8001ca0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d107      	bne.n	8001c9c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c9a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e01a      	b.n	8001cd6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d194      	bne.n	8001bd2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	e000      	b.n	8001cd6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001cd4:	2302      	movs	r3, #2
  }
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	00100002 	.word	0x00100002
 8001ce4:	ffff0000 	.word	0xffff0000

08001ce8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	4608      	mov	r0, r1
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	817b      	strh	r3, [r7, #10]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	813b      	strh	r3, [r7, #8]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d02:	f7ff fa3d 	bl	8001180 <HAL_GetTick>
 8001d06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b20      	cmp	r3, #32
 8001d12:	f040 80d9 	bne.w	8001ec8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	2319      	movs	r3, #25
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	496d      	ldr	r1, [pc, #436]	@ (8001ed4 <HAL_I2C_Mem_Write+0x1ec>)
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f000 fe7d 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e0cc      	b.n	8001eca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_I2C_Mem_Write+0x56>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e0c5      	b.n	8001eca <HAL_I2C_Mem_Write+0x1e2>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d007      	beq.n	8001d64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2221      	movs	r2, #33	@ 0x21
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2240      	movs	r2, #64	@ 0x40
 8001d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6a3a      	ldr	r2, [r7, #32]
 8001d8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4a4d      	ldr	r2, [pc, #308]	@ (8001ed8 <HAL_I2C_Mem_Write+0x1f0>)
 8001da4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001da6:	88f8      	ldrh	r0, [r7, #6]
 8001da8:	893a      	ldrh	r2, [r7, #8]
 8001daa:	8979      	ldrh	r1, [r7, #10]
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	4603      	mov	r3, r0
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 fcb4 	bl	8002724 <I2C_RequestMemoryWrite>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d052      	beq.n	8001e68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e081      	b.n	8001eca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 ff42 	bl	8002c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00d      	beq.n	8001df2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d107      	bne.n	8001dee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e06b      	b.n	8001eca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df6:	781a      	ldrb	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d11b      	bne.n	8001e68 <HAL_I2C_Mem_Write+0x180>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d017      	beq.n	8001e68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3c:	781a      	ldrb	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1aa      	bne.n	8001dc6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 ff35 	bl	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00d      	beq.n	8001e9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d107      	bne.n	8001e98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e016      	b.n	8001eca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	e000      	b.n	8001eca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001ec8:	2302      	movs	r3, #2
  }
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	00100002 	.word	0x00100002
 8001ed8:	ffff0000 	.word	0xffff0000

08001edc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08c      	sub	sp, #48	@ 0x30
 8001ee0:	af02      	add	r7, sp, #8
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	4608      	mov	r0, r1
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4603      	mov	r3, r0
 8001eec:	817b      	strh	r3, [r7, #10]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	813b      	strh	r3, [r7, #8]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001efa:	f7ff f941 	bl	8001180 <HAL_GetTick>
 8001efe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	f040 8250 	bne.w	80023ae <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	2319      	movs	r3, #25
 8001f14:	2201      	movs	r2, #1
 8001f16:	4982      	ldr	r1, [pc, #520]	@ (8002120 <HAL_I2C_Mem_Read+0x244>)
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 fd81 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001f24:	2302      	movs	r3, #2
 8001f26:	e243      	b.n	80023b0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_I2C_Mem_Read+0x5a>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e23c      	b.n	80023b0 <HAL_I2C_Mem_Read+0x4d4>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d007      	beq.n	8001f5c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2222      	movs	r2, #34	@ 0x22
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2240      	movs	r2, #64	@ 0x40
 8001f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4a62      	ldr	r2, [pc, #392]	@ (8002124 <HAL_I2C_Mem_Read+0x248>)
 8001f9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f9e:	88f8      	ldrh	r0, [r7, #6]
 8001fa0:	893a      	ldrh	r2, [r7, #8]
 8001fa2:	8979      	ldrh	r1, [r7, #10]
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa6:	9301      	str	r3, [sp, #4]
 8001fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	4603      	mov	r3, r0
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 fc4e 	bl	8002850 <I2C_RequestMemoryRead>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e1f8      	b.n	80023b0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d113      	bne.n	8001fee <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	e1cc      	b.n	8002388 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d11e      	bne.n	8002034 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002004:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002006:	b672      	cpsid	i
}
 8002008:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800202e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002030:	b662      	cpsie	i
}
 8002032:	e035      	b.n	80020a0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002038:	2b02      	cmp	r3, #2
 800203a:	d11e      	bne.n	800207a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800204a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800204c:	b672      	cpsid	i
}
 800204e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002074:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002076:	b662      	cpsie	i
}
 8002078:	e012      	b.n	80020a0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002088:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80020a0:	e172      	b.n	8002388 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	f200 811f 	bhi.w	80022ea <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d123      	bne.n	80020fc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 fe5b 	bl	8002d74 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e173      	b.n	80023b0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691a      	ldr	r2, [r3, #16]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80020fa:	e145      	b.n	8002388 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002100:	2b02      	cmp	r3, #2
 8002102:	d152      	bne.n	80021aa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800210a:	2200      	movs	r2, #0
 800210c:	4906      	ldr	r1, [pc, #24]	@ (8002128 <HAL_I2C_Mem_Read+0x24c>)
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 fc86 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d008      	beq.n	800212c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e148      	b.n	80023b0 <HAL_I2C_Mem_Read+0x4d4>
 800211e:	bf00      	nop
 8002120:	00100002 	.word	0x00100002
 8002124:	ffff0000 	.word	0xffff0000
 8002128:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800212c:	b672      	cpsid	i
}
 800212e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800213e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691a      	ldr	r2, [r3, #16]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800215c:	3b01      	subs	r3, #1
 800215e:	b29a      	uxth	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002168:	b29b      	uxth	r3, r3
 800216a:	3b01      	subs	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002172:	b662      	cpsie	i
}
 8002174:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80021a8:	e0ee      	b.n	8002388 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021b0:	2200      	movs	r2, #0
 80021b2:	4981      	ldr	r1, [pc, #516]	@ (80023b8 <HAL_I2C_Mem_Read+0x4dc>)
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 fc33 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0f5      	b.n	80023b0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021d4:	b672      	cpsid	i
}
 80021d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002200:	b29b      	uxth	r3, r3
 8002202:	3b01      	subs	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800220a:	4b6c      	ldr	r3, [pc, #432]	@ (80023bc <HAL_I2C_Mem_Read+0x4e0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	08db      	lsrs	r3, r3, #3
 8002210:	4a6b      	ldr	r2, [pc, #428]	@ (80023c0 <HAL_I2C_Mem_Read+0x4e4>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	0a1a      	lsrs	r2, r3, #8
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	00da      	lsls	r2, r3, #3
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	3b01      	subs	r3, #1
 8002228:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d118      	bne.n	8002262 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2220      	movs	r2, #32
 800223a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	f043 0220 	orr.w	r2, r3, #32
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002252:	b662      	cpsie	i
}
 8002254:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e0a6      	b.n	80023b0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b04      	cmp	r3, #4
 800226e:	d1d9      	bne.n	8002224 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800227e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800229c:	3b01      	subs	r3, #1
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022b2:	b662      	cpsie	i
}
 80022b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022de:	b29b      	uxth	r3, r3
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80022e8:	e04e      	b.n	8002388 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 fd40 	bl	8002d74 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e058      	b.n	80023b0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800231a:	3b01      	subs	r3, #1
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002326:	b29b      	uxth	r3, r3
 8002328:	3b01      	subs	r3, #1
 800232a:	b29a      	uxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b04      	cmp	r3, #4
 800233c:	d124      	bne.n	8002388 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002342:	2b03      	cmp	r3, #3
 8002344:	d107      	bne.n	8002356 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002354:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800237e:	b29b      	uxth	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800238c:	2b00      	cmp	r3, #0
 800238e:	f47f ae88 	bne.w	80020a2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e000      	b.n	80023b0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80023ae:	2302      	movs	r3, #2
  }
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3728      	adds	r7, #40	@ 0x28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	00010004 	.word	0x00010004
 80023bc:	20000010 	.word	0x20000010
 80023c0:	14f8b589 	.word	0x14f8b589

080023c4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	@ 0x28
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	460b      	mov	r3, r1
 80023d2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80023d4:	f7fe fed4 	bl	8001180 <HAL_GetTick>
 80023d8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b20      	cmp	r3, #32
 80023e8:	f040 8111 	bne.w	800260e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2319      	movs	r3, #25
 80023f2:	2201      	movs	r2, #1
 80023f4:	4988      	ldr	r1, [pc, #544]	@ (8002618 <HAL_I2C_IsDeviceReady+0x254>)
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 fb12 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002402:	2302      	movs	r3, #2
 8002404:	e104      	b.n	8002610 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_I2C_IsDeviceReady+0x50>
 8002410:	2302      	movs	r3, #2
 8002412:	e0fd      	b.n	8002610 <HAL_I2C_IsDeviceReady+0x24c>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b01      	cmp	r3, #1
 8002428:	d007      	beq.n	800243a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0201 	orr.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002448:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2224      	movs	r2, #36	@ 0x24
 800244e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4a70      	ldr	r2, [pc, #448]	@ (800261c <HAL_I2C_IsDeviceReady+0x258>)
 800245c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800246c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2200      	movs	r2, #0
 8002476:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 fad0 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00d      	beq.n	80024a2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002490:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002494:	d103      	bne.n	800249e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800249c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e0b6      	b.n	8002610 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024a2:	897b      	ldrh	r3, [r7, #10]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	461a      	mov	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80024b0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80024b2:	f7fe fe65 	bl	8001180 <HAL_GetTick>
 80024b6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	bf0c      	ite	eq
 80024c6:	2301      	moveq	r3, #1
 80024c8:	2300      	movne	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024dc:	bf0c      	ite	eq
 80024de:	2301      	moveq	r3, #1
 80024e0:	2300      	movne	r3, #0
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80024e6:	e025      	b.n	8002534 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024e8:	f7fe fe4a 	bl	8001180 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d302      	bcc.n	80024fe <HAL_I2C_IsDeviceReady+0x13a>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d103      	bne.n	8002506 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	22a0      	movs	r2, #160	@ 0xa0
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b02      	cmp	r3, #2
 8002512:	bf0c      	ite	eq
 8002514:	2301      	moveq	r3, #1
 8002516:	2300      	movne	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800252a:	bf0c      	ite	eq
 800252c:	2301      	moveq	r3, #1
 800252e:	2300      	movne	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2ba0      	cmp	r3, #160	@ 0xa0
 800253e:	d005      	beq.n	800254c <HAL_I2C_IsDeviceReady+0x188>
 8002540:	7dfb      	ldrb	r3, [r7, #23]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d102      	bne.n	800254c <HAL_I2C_IsDeviceReady+0x188>
 8002546:	7dbb      	ldrb	r3, [r7, #22]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0cd      	beq.n	80024e8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b02      	cmp	r3, #2
 8002560:	d129      	bne.n	80025b6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002570:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2319      	movs	r3, #25
 800258e:	2201      	movs	r2, #1
 8002590:	4921      	ldr	r1, [pc, #132]	@ (8002618 <HAL_I2C_IsDeviceReady+0x254>)
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 fa44 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e036      	b.n	8002610 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2220      	movs	r2, #32
 80025a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e02c      	b.n	8002610 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025c4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025ce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	2319      	movs	r3, #25
 80025d6:	2201      	movs	r2, #1
 80025d8:	490f      	ldr	r1, [pc, #60]	@ (8002618 <HAL_I2C_IsDeviceReady+0x254>)
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 fa20 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e012      	b.n	8002610 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	3301      	adds	r3, #1
 80025ee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	f4ff af32 	bcc.w	800245e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2220      	movs	r2, #32
 80025fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800260e:	2302      	movs	r3, #2
  }
}
 8002610:	4618      	mov	r0, r3
 8002612:	3720      	adds	r7, #32
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	00100002 	.word	0x00100002
 800261c:	ffff0000 	.word	0xffff0000

08002620 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	607a      	str	r2, [r7, #4]
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	460b      	mov	r3, r1
 800262e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002634:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	2b08      	cmp	r3, #8
 800263a:	d006      	beq.n	800264a <I2C_MasterRequestWrite+0x2a>
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d003      	beq.n	800264a <I2C_MasterRequestWrite+0x2a>
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002648:	d108      	bne.n	800265c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	e00b      	b.n	8002674 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002660:	2b12      	cmp	r3, #18
 8002662:	d107      	bne.n	8002674 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002672:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 f9cd 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00d      	beq.n	80026a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800269a:	d103      	bne.n	80026a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e035      	b.n	8002714 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026b0:	d108      	bne.n	80026c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026b2:	897b      	ldrh	r3, [r7, #10]
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026c0:	611a      	str	r2, [r3, #16]
 80026c2:	e01b      	b.n	80026fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026c4:	897b      	ldrh	r3, [r7, #10]
 80026c6:	11db      	asrs	r3, r3, #7
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	f003 0306 	and.w	r3, r3, #6
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	f063 030f 	orn	r3, r3, #15
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	490e      	ldr	r1, [pc, #56]	@ (800271c <I2C_MasterRequestWrite+0xfc>)
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 fa16 	bl	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e010      	b.n	8002714 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026f2:	897b      	ldrh	r3, [r7, #10]
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	4907      	ldr	r1, [pc, #28]	@ (8002720 <I2C_MasterRequestWrite+0x100>)
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 fa06 	bl	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	00010008 	.word	0x00010008
 8002720:	00010002 	.word	0x00010002

08002724 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af02      	add	r7, sp, #8
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	4608      	mov	r0, r1
 800272e:	4611      	mov	r1, r2
 8002730:	461a      	mov	r2, r3
 8002732:	4603      	mov	r3, r0
 8002734:	817b      	strh	r3, [r7, #10]
 8002736:	460b      	mov	r3, r1
 8002738:	813b      	strh	r3, [r7, #8]
 800273a:	4613      	mov	r3, r2
 800273c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800274c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	2200      	movs	r2, #0
 8002756:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 f960 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00d      	beq.n	8002782 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002774:	d103      	bne.n	800277e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800277c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e05f      	b.n	8002842 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002782:	897b      	ldrh	r3, [r7, #10]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002790:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002794:	6a3a      	ldr	r2, [r7, #32]
 8002796:	492d      	ldr	r1, [pc, #180]	@ (800284c <I2C_RequestMemoryWrite+0x128>)
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f9bb 	bl	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e04c      	b.n	8002842 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027c0:	6a39      	ldr	r1, [r7, #32]
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 fa46 	bl	8002c54 <I2C_WaitOnTXEFlagUntilTimeout>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00d      	beq.n	80027ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d107      	bne.n	80027e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e02b      	b.n	8002842 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d105      	bne.n	80027fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027f0:	893b      	ldrh	r3, [r7, #8]
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	611a      	str	r2, [r3, #16]
 80027fa:	e021      	b.n	8002840 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027fc:	893b      	ldrh	r3, [r7, #8]
 80027fe:	0a1b      	lsrs	r3, r3, #8
 8002800:	b29b      	uxth	r3, r3
 8002802:	b2da      	uxtb	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800280a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800280c:	6a39      	ldr	r1, [r7, #32]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fa20 	bl	8002c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00d      	beq.n	8002836 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	2b04      	cmp	r3, #4
 8002820:	d107      	bne.n	8002832 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002830:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e005      	b.n	8002842 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002836:	893b      	ldrh	r3, [r7, #8]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	00010002 	.word	0x00010002

08002850 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af02      	add	r7, sp, #8
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	4608      	mov	r0, r1
 800285a:	4611      	mov	r1, r2
 800285c:	461a      	mov	r2, r3
 800285e:	4603      	mov	r3, r0
 8002860:	817b      	strh	r3, [r7, #10]
 8002862:	460b      	mov	r3, r1
 8002864:	813b      	strh	r3, [r7, #8]
 8002866:	4613      	mov	r3, r2
 8002868:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002878:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002888:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	2200      	movs	r2, #0
 8002892:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f8c2 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00d      	beq.n	80028be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028b0:	d103      	bne.n	80028ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e0aa      	b.n	8002a14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028be:	897b      	ldrh	r3, [r7, #10]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	461a      	mov	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d0:	6a3a      	ldr	r2, [r7, #32]
 80028d2:	4952      	ldr	r1, [pc, #328]	@ (8002a1c <I2C_RequestMemoryRead+0x1cc>)
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f91d 	bl	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e097      	b.n	8002a14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028fc:	6a39      	ldr	r1, [r7, #32]
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 f9a8 	bl	8002c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00d      	beq.n	8002926 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	2b04      	cmp	r3, #4
 8002910:	d107      	bne.n	8002922 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002920:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e076      	b.n	8002a14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002926:	88fb      	ldrh	r3, [r7, #6]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d105      	bne.n	8002938 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800292c:	893b      	ldrh	r3, [r7, #8]
 800292e:	b2da      	uxtb	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	611a      	str	r2, [r3, #16]
 8002936:	e021      	b.n	800297c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002938:	893b      	ldrh	r3, [r7, #8]
 800293a:	0a1b      	lsrs	r3, r3, #8
 800293c:	b29b      	uxth	r3, r3
 800293e:	b2da      	uxtb	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002948:	6a39      	ldr	r1, [r7, #32]
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 f982 	bl	8002c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00d      	beq.n	8002972 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	2b04      	cmp	r3, #4
 800295c:	d107      	bne.n	800296e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800296c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e050      	b.n	8002a14 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002972:	893b      	ldrh	r3, [r7, #8]
 8002974:	b2da      	uxtb	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800297c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800297e:	6a39      	ldr	r1, [r7, #32]
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f967 	bl	8002c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00d      	beq.n	80029a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002990:	2b04      	cmp	r3, #4
 8002992:	d107      	bne.n	80029a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e035      	b.n	8002a14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	2200      	movs	r2, #0
 80029c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 f82b 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00d      	beq.n	80029ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029de:	d103      	bne.n	80029e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e013      	b.n	8002a14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80029ec:	897b      	ldrh	r3, [r7, #10]
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	6a3a      	ldr	r2, [r7, #32]
 8002a00:	4906      	ldr	r1, [pc, #24]	@ (8002a1c <I2C_RequestMemoryRead+0x1cc>)
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f886 	bl	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	00010002 	.word	0x00010002

08002a20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a30:	e048      	b.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a38:	d044      	beq.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3a:	f7fe fba1 	bl	8001180 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d302      	bcc.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d139      	bne.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	0c1b      	lsrs	r3, r3, #16
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d10d      	bne.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	43da      	mvns	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	4013      	ands	r3, r2
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2301      	moveq	r3, #1
 8002a6e:	2300      	movne	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	e00c      	b.n	8002a90 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	43da      	mvns	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	4013      	ands	r3, r2
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d116      	bne.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	f043 0220 	orr.w	r2, r3, #32
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e023      	b.n	8002b0c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	0c1b      	lsrs	r3, r3, #16
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d10d      	bne.n	8002aea <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	43da      	mvns	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	e00c      	b.n	8002b04 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	43da      	mvns	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	4013      	ands	r3, r2
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d093      	beq.n	8002a32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b22:	e071      	b.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b32:	d123      	bne.n	8002b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b68:	f043 0204 	orr.w	r2, r3, #4
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e067      	b.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b82:	d041      	beq.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b84:	f7fe fafc 	bl	8001180 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d302      	bcc.n	8002b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d136      	bne.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d10c      	bne.n	8002bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	43da      	mvns	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	bf14      	ite	ne
 8002bb6:	2301      	movne	r3, #1
 8002bb8:	2300      	moveq	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	e00b      	b.n	8002bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	43da      	mvns	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf14      	ite	ne
 8002bd0:	2301      	movne	r3, #1
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d016      	beq.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf4:	f043 0220 	orr.w	r2, r3, #32
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e021      	b.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	0c1b      	lsrs	r3, r3, #16
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d10c      	bne.n	8002c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	43da      	mvns	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bf14      	ite	ne
 8002c24:	2301      	movne	r3, #1
 8002c26:	2300      	moveq	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	e00b      	b.n	8002c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	43da      	mvns	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4013      	ands	r3, r2
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	bf14      	ite	ne
 8002c3e:	2301      	movne	r3, #1
 8002c40:	2300      	moveq	r3, #0
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f47f af6d 	bne.w	8002b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c60:	e034      	b.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f8e3 	bl	8002e2e <I2C_IsAcknowledgeFailed>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e034      	b.n	8002cdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d028      	beq.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7a:	f7fe fa81 	bl	8001180 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d302      	bcc.n	8002c90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d11d      	bne.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9a:	2b80      	cmp	r3, #128	@ 0x80
 8002c9c:	d016      	beq.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	f043 0220 	orr.w	r2, r3, #32
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e007      	b.n	8002cdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd6:	2b80      	cmp	r3, #128	@ 0x80
 8002cd8:	d1c3      	bne.n	8002c62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cf0:	e034      	b.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f89b 	bl	8002e2e <I2C_IsAcknowledgeFailed>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e034      	b.n	8002d6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d028      	beq.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0a:	f7fe fa39 	bl	8001180 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d302      	bcc.n	8002d20 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d11d      	bne.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d016      	beq.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d48:	f043 0220 	orr.w	r2, r3, #32
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e007      	b.n	8002d6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d1c3      	bne.n	8002cf2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d80:	e049      	b.n	8002e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b10      	cmp	r3, #16
 8002d8e:	d119      	bne.n	8002dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0210 	mvn.w	r2, #16
 8002d98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e030      	b.n	8002e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc4:	f7fe f9dc 	bl	8001180 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d302      	bcc.n	8002dda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d11d      	bne.n	8002e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de4:	2b40      	cmp	r3, #64	@ 0x40
 8002de6:	d016      	beq.n	8002e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e02:	f043 0220 	orr.w	r2, r3, #32
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e007      	b.n	8002e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e20:	2b40      	cmp	r3, #64	@ 0x40
 8002e22:	d1ae      	bne.n	8002d82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e44:	d11b      	bne.n	8002e7e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e4e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	f043 0204 	orr.w	r2, r3, #4
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr
	...

08002e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e272      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 8087 	beq.w	8002fba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eac:	4b92      	ldr	r3, [pc, #584]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 030c 	and.w	r3, r3, #12
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d00c      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002eb8:	4b8f      	ldr	r3, [pc, #572]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 030c 	and.w	r3, r3, #12
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d112      	bne.n	8002eea <HAL_RCC_OscConfig+0x5e>
 8002ec4:	4b8c      	ldr	r3, [pc, #560]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ed0:	d10b      	bne.n	8002eea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed2:	4b89      	ldr	r3, [pc, #548]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d06c      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x12c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d168      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e24c      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ef2:	d106      	bne.n	8002f02 <HAL_RCC_OscConfig+0x76>
 8002ef4:	4b80      	ldr	r3, [pc, #512]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a7f      	ldr	r2, [pc, #508]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002efa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	e02e      	b.n	8002f60 <HAL_RCC_OscConfig+0xd4>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10c      	bne.n	8002f24 <HAL_RCC_OscConfig+0x98>
 8002f0a:	4b7b      	ldr	r3, [pc, #492]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a7a      	ldr	r2, [pc, #488]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	4b78      	ldr	r3, [pc, #480]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a77      	ldr	r2, [pc, #476]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	e01d      	b.n	8002f60 <HAL_RCC_OscConfig+0xd4>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RCC_OscConfig+0xbc>
 8002f2e:	4b72      	ldr	r3, [pc, #456]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a71      	ldr	r2, [pc, #452]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	4b6f      	ldr	r3, [pc, #444]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a6e      	ldr	r2, [pc, #440]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	e00b      	b.n	8002f60 <HAL_RCC_OscConfig+0xd4>
 8002f48:	4b6b      	ldr	r3, [pc, #428]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a6a      	ldr	r2, [pc, #424]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	4b68      	ldr	r3, [pc, #416]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a67      	ldr	r2, [pc, #412]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d013      	beq.n	8002f90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f68:	f7fe f90a 	bl	8001180 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f70:	f7fe f906 	bl	8001180 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b64      	cmp	r3, #100	@ 0x64
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e200      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f82:	4b5d      	ldr	r3, [pc, #372]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0xe4>
 8002f8e:	e014      	b.n	8002fba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f90:	f7fe f8f6 	bl	8001180 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f98:	f7fe f8f2 	bl	8001180 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b64      	cmp	r3, #100	@ 0x64
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e1ec      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002faa:	4b53      	ldr	r3, [pc, #332]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x10c>
 8002fb6:	e000      	b.n	8002fba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d063      	beq.n	800308e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fc6:	4b4c      	ldr	r3, [pc, #304]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00b      	beq.n	8002fea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fd2:	4b49      	ldr	r3, [pc, #292]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d11c      	bne.n	8003018 <HAL_RCC_OscConfig+0x18c>
 8002fde:	4b46      	ldr	r3, [pc, #280]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d116      	bne.n	8003018 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fea:	4b43      	ldr	r3, [pc, #268]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d005      	beq.n	8003002 <HAL_RCC_OscConfig+0x176>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d001      	beq.n	8003002 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e1c0      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003002:	4b3d      	ldr	r3, [pc, #244]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4939      	ldr	r1, [pc, #228]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8003012:	4313      	orrs	r3, r2
 8003014:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003016:	e03a      	b.n	800308e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d020      	beq.n	8003062 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003020:	4b36      	ldr	r3, [pc, #216]	@ (80030fc <HAL_RCC_OscConfig+0x270>)
 8003022:	2201      	movs	r2, #1
 8003024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003026:	f7fe f8ab 	bl	8001180 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800302e:	f7fe f8a7 	bl	8001180 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e1a1      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003040:	4b2d      	ldr	r3, [pc, #180]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304c:	4b2a      	ldr	r3, [pc, #168]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4927      	ldr	r1, [pc, #156]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 800305c:	4313      	orrs	r3, r2
 800305e:	600b      	str	r3, [r1, #0]
 8003060:	e015      	b.n	800308e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003062:	4b26      	ldr	r3, [pc, #152]	@ (80030fc <HAL_RCC_OscConfig+0x270>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003068:	f7fe f88a 	bl	8001180 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003070:	f7fe f886 	bl	8001180 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e180      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003082:	4b1d      	ldr	r3, [pc, #116]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d03a      	beq.n	8003110 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d019      	beq.n	80030d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a2:	4b17      	ldr	r3, [pc, #92]	@ (8003100 <HAL_RCC_OscConfig+0x274>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a8:	f7fe f86a 	bl	8001180 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030b0:	f7fe f866 	bl	8001180 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e160      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c2:	4b0d      	ldr	r3, [pc, #52]	@ (80030f8 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030ce:	2001      	movs	r0, #1
 80030d0:	f000 face 	bl	8003670 <RCC_Delay>
 80030d4:	e01c      	b.n	8003110 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003100 <HAL_RCC_OscConfig+0x274>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030dc:	f7fe f850 	bl	8001180 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e2:	e00f      	b.n	8003104 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e4:	f7fe f84c 	bl	8001180 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d908      	bls.n	8003104 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e146      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000
 80030fc:	42420000 	.word	0x42420000
 8003100:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003104:	4b92      	ldr	r3, [pc, #584]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 8003106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1e9      	bne.n	80030e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80a6 	beq.w	800326a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311e:	2300      	movs	r3, #0
 8003120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003122:	4b8b      	ldr	r3, [pc, #556]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10d      	bne.n	800314a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312e:	4b88      	ldr	r3, [pc, #544]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	4a87      	ldr	r2, [pc, #540]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 8003134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003138:	61d3      	str	r3, [r2, #28]
 800313a:	4b85      	ldr	r3, [pc, #532]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003142:	60bb      	str	r3, [r7, #8]
 8003144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003146:	2301      	movs	r3, #1
 8003148:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314a:	4b82      	ldr	r3, [pc, #520]	@ (8003354 <HAL_RCC_OscConfig+0x4c8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d118      	bne.n	8003188 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003156:	4b7f      	ldr	r3, [pc, #508]	@ (8003354 <HAL_RCC_OscConfig+0x4c8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a7e      	ldr	r2, [pc, #504]	@ (8003354 <HAL_RCC_OscConfig+0x4c8>)
 800315c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003162:	f7fe f80d 	bl	8001180 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316a:	f7fe f809 	bl	8001180 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b64      	cmp	r3, #100	@ 0x64
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e103      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317c:	4b75      	ldr	r3, [pc, #468]	@ (8003354 <HAL_RCC_OscConfig+0x4c8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f0      	beq.n	800316a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d106      	bne.n	800319e <HAL_RCC_OscConfig+0x312>
 8003190:	4b6f      	ldr	r3, [pc, #444]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	4a6e      	ldr	r2, [pc, #440]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	6213      	str	r3, [r2, #32]
 800319c:	e02d      	b.n	80031fa <HAL_RCC_OscConfig+0x36e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x334>
 80031a6:	4b6a      	ldr	r3, [pc, #424]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	4a69      	ldr	r2, [pc, #420]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031ac:	f023 0301 	bic.w	r3, r3, #1
 80031b0:	6213      	str	r3, [r2, #32]
 80031b2:	4b67      	ldr	r3, [pc, #412]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	4a66      	ldr	r2, [pc, #408]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	f023 0304 	bic.w	r3, r3, #4
 80031bc:	6213      	str	r3, [r2, #32]
 80031be:	e01c      	b.n	80031fa <HAL_RCC_OscConfig+0x36e>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2b05      	cmp	r3, #5
 80031c6:	d10c      	bne.n	80031e2 <HAL_RCC_OscConfig+0x356>
 80031c8:	4b61      	ldr	r3, [pc, #388]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	4a60      	ldr	r2, [pc, #384]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031ce:	f043 0304 	orr.w	r3, r3, #4
 80031d2:	6213      	str	r3, [r2, #32]
 80031d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	6213      	str	r3, [r2, #32]
 80031e0:	e00b      	b.n	80031fa <HAL_RCC_OscConfig+0x36e>
 80031e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	4a5a      	ldr	r2, [pc, #360]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031e8:	f023 0301 	bic.w	r3, r3, #1
 80031ec:	6213      	str	r3, [r2, #32]
 80031ee:	4b58      	ldr	r3, [pc, #352]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	4a57      	ldr	r2, [pc, #348]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031f4:	f023 0304 	bic.w	r3, r3, #4
 80031f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d015      	beq.n	800322e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003202:	f7fd ffbd 	bl	8001180 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003208:	e00a      	b.n	8003220 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320a:	f7fd ffb9 	bl	8001180 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003218:	4293      	cmp	r3, r2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e0b1      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003220:	4b4b      	ldr	r3, [pc, #300]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0ee      	beq.n	800320a <HAL_RCC_OscConfig+0x37e>
 800322c:	e014      	b.n	8003258 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322e:	f7fd ffa7 	bl	8001180 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003234:	e00a      	b.n	800324c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003236:	f7fd ffa3 	bl	8001180 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003244:	4293      	cmp	r3, r2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e09b      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800324c:	4b40      	ldr	r3, [pc, #256]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1ee      	bne.n	8003236 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d105      	bne.n	800326a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800325e:	4b3c      	ldr	r3, [pc, #240]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	4a3b      	ldr	r2, [pc, #236]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 8003264:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003268:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 8087 	beq.w	8003382 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003274:	4b36      	ldr	r3, [pc, #216]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 030c 	and.w	r3, r3, #12
 800327c:	2b08      	cmp	r3, #8
 800327e:	d061      	beq.n	8003344 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	2b02      	cmp	r3, #2
 8003286:	d146      	bne.n	8003316 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003288:	4b33      	ldr	r3, [pc, #204]	@ (8003358 <HAL_RCC_OscConfig+0x4cc>)
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328e:	f7fd ff77 	bl	8001180 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003296:	f7fd ff73 	bl	8001180 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e06d      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a8:	4b29      	ldr	r3, [pc, #164]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1f0      	bne.n	8003296 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032bc:	d108      	bne.n	80032d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032be:	4b24      	ldr	r3, [pc, #144]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	4921      	ldr	r1, [pc, #132]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a19      	ldr	r1, [r3, #32]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	430b      	orrs	r3, r1
 80032e2:	491b      	ldr	r1, [pc, #108]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003358 <HAL_RCC_OscConfig+0x4cc>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ee:	f7fd ff47 	bl	8001180 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f6:	f7fd ff43 	bl	8001180 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e03d      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003308:	4b11      	ldr	r3, [pc, #68]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x46a>
 8003314:	e035      	b.n	8003382 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003316:	4b10      	ldr	r3, [pc, #64]	@ (8003358 <HAL_RCC_OscConfig+0x4cc>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331c:	f7fd ff30 	bl	8001180 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003324:	f7fd ff2c 	bl	8001180 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e026      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003336:	4b06      	ldr	r3, [pc, #24]	@ (8003350 <HAL_RCC_OscConfig+0x4c4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x498>
 8003342:	e01e      	b.n	8003382 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d107      	bne.n	800335c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e019      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
 8003350:	40021000 	.word	0x40021000
 8003354:	40007000 	.word	0x40007000
 8003358:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800335c:	4b0b      	ldr	r3, [pc, #44]	@ (800338c <HAL_RCC_OscConfig+0x500>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	429a      	cmp	r2, r3
 800336e:	d106      	bne.n	800337e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337a:	429a      	cmp	r2, r3
 800337c:	d001      	beq.n	8003382 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40021000 	.word	0x40021000

08003390 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0d0      	b.n	8003546 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003550 <HAL_RCC_ClockConfig+0x1c0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d910      	bls.n	80033d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b2:	4b67      	ldr	r3, [pc, #412]	@ (8003550 <HAL_RCC_ClockConfig+0x1c0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f023 0207 	bic.w	r2, r3, #7
 80033ba:	4965      	ldr	r1, [pc, #404]	@ (8003550 <HAL_RCC_ClockConfig+0x1c0>)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c2:	4b63      	ldr	r3, [pc, #396]	@ (8003550 <HAL_RCC_ClockConfig+0x1c0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0b8      	b.n	8003546 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d020      	beq.n	8003422 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033ec:	4b59      	ldr	r3, [pc, #356]	@ (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4a58      	ldr	r2, [pc, #352]	@ (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 80033f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003404:	4b53      	ldr	r3, [pc, #332]	@ (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	4a52      	ldr	r2, [pc, #328]	@ (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 800340a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800340e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003410:	4b50      	ldr	r3, [pc, #320]	@ (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	494d      	ldr	r1, [pc, #308]	@ (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 800341e:	4313      	orrs	r3, r2
 8003420:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d040      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d107      	bne.n	8003446 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	4b47      	ldr	r3, [pc, #284]	@ (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d115      	bne.n	800346e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e07f      	b.n	8003546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d107      	bne.n	800345e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800344e:	4b41      	ldr	r3, [pc, #260]	@ (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d109      	bne.n	800346e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e073      	b.n	8003546 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345e:	4b3d      	ldr	r3, [pc, #244]	@ (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e06b      	b.n	8003546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800346e:	4b39      	ldr	r3, [pc, #228]	@ (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f023 0203 	bic.w	r2, r3, #3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4936      	ldr	r1, [pc, #216]	@ (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	4313      	orrs	r3, r2
 800347e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003480:	f7fd fe7e 	bl	8001180 <HAL_GetTick>
 8003484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003486:	e00a      	b.n	800349e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003488:	f7fd fe7a 	bl	8001180 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003496:	4293      	cmp	r3, r2
 8003498:	d901      	bls.n	800349e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e053      	b.n	8003546 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349e:	4b2d      	ldr	r3, [pc, #180]	@ (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 020c 	and.w	r2, r3, #12
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d1eb      	bne.n	8003488 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034b0:	4b27      	ldr	r3, [pc, #156]	@ (8003550 <HAL_RCC_ClockConfig+0x1c0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d210      	bcs.n	80034e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b24      	ldr	r3, [pc, #144]	@ (8003550 <HAL_RCC_ClockConfig+0x1c0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 0207 	bic.w	r2, r3, #7
 80034c6:	4922      	ldr	r1, [pc, #136]	@ (8003550 <HAL_RCC_ClockConfig+0x1c0>)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ce:	4b20      	ldr	r3, [pc, #128]	@ (8003550 <HAL_RCC_ClockConfig+0x1c0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e032      	b.n	8003546 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034ec:	4b19      	ldr	r3, [pc, #100]	@ (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4916      	ldr	r1, [pc, #88]	@ (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d009      	beq.n	800351e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800350a:	4b12      	ldr	r3, [pc, #72]	@ (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	490e      	ldr	r1, [pc, #56]	@ (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 800351a:	4313      	orrs	r3, r2
 800351c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800351e:	f000 f821 	bl	8003564 <HAL_RCC_GetSysClockFreq>
 8003522:	4602      	mov	r2, r0
 8003524:	4b0b      	ldr	r3, [pc, #44]	@ (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	091b      	lsrs	r3, r3, #4
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	490a      	ldr	r1, [pc, #40]	@ (8003558 <HAL_RCC_ClockConfig+0x1c8>)
 8003530:	5ccb      	ldrb	r3, [r1, r3]
 8003532:	fa22 f303 	lsr.w	r3, r2, r3
 8003536:	4a09      	ldr	r2, [pc, #36]	@ (800355c <HAL_RCC_ClockConfig+0x1cc>)
 8003538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800353a:	4b09      	ldr	r3, [pc, #36]	@ (8003560 <HAL_RCC_ClockConfig+0x1d0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fd fddc 	bl	80010fc <HAL_InitTick>

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40022000 	.word	0x40022000
 8003554:	40021000 	.word	0x40021000
 8003558:	080098e0 	.word	0x080098e0
 800355c:	20000010 	.word	0x20000010
 8003560:	20000000 	.word	0x20000000

08003564 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	2300      	movs	r3, #0
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	2300      	movs	r3, #0
 8003578:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800357e:	4b1e      	ldr	r3, [pc, #120]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 030c 	and.w	r3, r3, #12
 800358a:	2b04      	cmp	r3, #4
 800358c:	d002      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0x30>
 800358e:	2b08      	cmp	r3, #8
 8003590:	d003      	beq.n	800359a <HAL_RCC_GetSysClockFreq+0x36>
 8003592:	e027      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003594:	4b19      	ldr	r3, [pc, #100]	@ (80035fc <HAL_RCC_GetSysClockFreq+0x98>)
 8003596:	613b      	str	r3, [r7, #16]
      break;
 8003598:	e027      	b.n	80035ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	0c9b      	lsrs	r3, r3, #18
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	4a17      	ldr	r2, [pc, #92]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035a4:	5cd3      	ldrb	r3, [r2, r3]
 80035a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d010      	beq.n	80035d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035b2:	4b11      	ldr	r3, [pc, #68]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	0c5b      	lsrs	r3, r3, #17
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	4a11      	ldr	r2, [pc, #68]	@ (8003604 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035be:	5cd3      	ldrb	r3, [r2, r3]
 80035c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a0d      	ldr	r2, [pc, #52]	@ (80035fc <HAL_RCC_GetSysClockFreq+0x98>)
 80035c6:	fb03 f202 	mul.w	r2, r3, r2
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	e004      	b.n	80035de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a0c      	ldr	r2, [pc, #48]	@ (8003608 <HAL_RCC_GetSysClockFreq+0xa4>)
 80035d8:	fb02 f303 	mul.w	r3, r2, r3
 80035dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	613b      	str	r3, [r7, #16]
      break;
 80035e2:	e002      	b.n	80035ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035e4:	4b05      	ldr	r3, [pc, #20]	@ (80035fc <HAL_RCC_GetSysClockFreq+0x98>)
 80035e6:	613b      	str	r3, [r7, #16]
      break;
 80035e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ea:	693b      	ldr	r3, [r7, #16]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	371c      	adds	r7, #28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000
 80035fc:	007a1200 	.word	0x007a1200
 8003600:	0800860c 	.word	0x0800860c
 8003604:	0800861c 	.word	0x0800861c
 8003608:	003d0900 	.word	0x003d0900

0800360c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003610:	4b02      	ldr	r3, [pc, #8]	@ (800361c <HAL_RCC_GetHCLKFreq+0x10>)
 8003612:	681b      	ldr	r3, [r3, #0]
}
 8003614:	4618      	mov	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	20000010 	.word	0x20000010

08003620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003624:	f7ff fff2 	bl	800360c <HAL_RCC_GetHCLKFreq>
 8003628:	4602      	mov	r2, r0
 800362a:	4b05      	ldr	r3, [pc, #20]	@ (8003640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	0a1b      	lsrs	r3, r3, #8
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	4903      	ldr	r1, [pc, #12]	@ (8003644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003636:	5ccb      	ldrb	r3, [r1, r3]
 8003638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800363c:	4618      	mov	r0, r3
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40021000 	.word	0x40021000
 8003644:	080098f0 	.word	0x080098f0

08003648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800364c:	f7ff ffde 	bl	800360c <HAL_RCC_GetHCLKFreq>
 8003650:	4602      	mov	r2, r0
 8003652:	4b05      	ldr	r3, [pc, #20]	@ (8003668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	0adb      	lsrs	r3, r3, #11
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	4903      	ldr	r1, [pc, #12]	@ (800366c <HAL_RCC_GetPCLK2Freq+0x24>)
 800365e:	5ccb      	ldrb	r3, [r1, r3]
 8003660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003664:	4618      	mov	r0, r3
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000
 800366c:	080098f0 	.word	0x080098f0

08003670 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003678:	4b0a      	ldr	r3, [pc, #40]	@ (80036a4 <RCC_Delay+0x34>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a0a      	ldr	r2, [pc, #40]	@ (80036a8 <RCC_Delay+0x38>)
 800367e:	fba2 2303 	umull	r2, r3, r2, r3
 8003682:	0a5b      	lsrs	r3, r3, #9
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	fb02 f303 	mul.w	r3, r2, r3
 800368a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800368c:	bf00      	nop
  }
  while (Delay --);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	1e5a      	subs	r2, r3, #1
 8003692:	60fa      	str	r2, [r7, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1f9      	bne.n	800368c <RCC_Delay+0x1c>
}
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr
 80036a4:	20000010 	.word	0x20000010
 80036a8:	10624dd3 	.word	0x10624dd3

080036ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e042      	b.n	8003744 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d106      	bne.n	80036d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f001 fea0 	bl	8005418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2224      	movs	r2, #36	@ 0x24
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 fd5b 	bl	80041ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003704:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695a      	ldr	r2, [r3, #20]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003714:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003724:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08a      	sub	sp, #40	@ 0x28
 8003750:	af02      	add	r7, sp, #8
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	603b      	str	r3, [r7, #0]
 8003758:	4613      	mov	r3, r2
 800375a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b20      	cmp	r3, #32
 800376a:	d175      	bne.n	8003858 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <HAL_UART_Transmit+0x2c>
 8003772:	88fb      	ldrh	r3, [r7, #6]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e06e      	b.n	800385a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2221      	movs	r2, #33	@ 0x21
 8003786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800378a:	f7fd fcf9 	bl	8001180 <HAL_GetTick>
 800378e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	88fa      	ldrh	r2, [r7, #6]
 8003794:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	88fa      	ldrh	r2, [r7, #6]
 800379a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a4:	d108      	bne.n	80037b8 <HAL_UART_Transmit+0x6c>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d104      	bne.n	80037b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	e003      	b.n	80037c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037bc:	2300      	movs	r3, #0
 80037be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037c0:	e02e      	b.n	8003820 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2200      	movs	r2, #0
 80037ca:	2180      	movs	r1, #128	@ 0x80
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 faf8 	bl	8003dc2 <UART_WaitOnFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e03a      	b.n	800385a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10b      	bne.n	8003802 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	3302      	adds	r3, #2
 80037fe:	61bb      	str	r3, [r7, #24]
 8003800:	e007      	b.n	8003812 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	781a      	ldrb	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	3301      	adds	r3, #1
 8003810:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1cb      	bne.n	80037c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2200      	movs	r2, #0
 8003832:	2140      	movs	r1, #64	@ 0x40
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 fac4 	bl	8003dc2 <UART_WaitOnFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e006      	b.n	800385a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	e000      	b.n	800385a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003858:	2302      	movs	r3, #2
  }
}
 800385a:	4618      	mov	r0, r3
 800385c:	3720      	adds	r7, #32
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b0ba      	sub	sp, #232	@ 0xe8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800388a:	2300      	movs	r3, #0
 800388c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003890:	2300      	movs	r3, #0
 8003892:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80038a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10f      	bne.n	80038ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <HAL_UART_IRQHandler+0x66>
 80038b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fbb3 	bl	800402e <UART_Receive_IT>
      return;
 80038c8:	e25b      	b.n	8003d82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 80de 	beq.w	8003a90 <HAL_UART_IRQHandler+0x22c>
 80038d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d106      	bne.n	80038ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 80d1 	beq.w	8003a90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00b      	beq.n	8003912 <HAL_UART_IRQHandler+0xae>
 80038fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390a:	f043 0201 	orr.w	r2, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00b      	beq.n	8003936 <HAL_UART_IRQHandler+0xd2>
 800391e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392e:	f043 0202 	orr.w	r2, r3, #2
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00b      	beq.n	800395a <HAL_UART_IRQHandler+0xf6>
 8003942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003952:	f043 0204 	orr.w	r2, r3, #4
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800395a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d011      	beq.n	800398a <HAL_UART_IRQHandler+0x126>
 8003966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b00      	cmp	r3, #0
 8003970:	d105      	bne.n	800397e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d005      	beq.n	800398a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003982:	f043 0208 	orr.w	r2, r3, #8
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 81f2 	beq.w	8003d78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <HAL_UART_IRQHandler+0x14e>
 80039a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039a4:	f003 0320 	and.w	r3, r3, #32
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 fb3e 	bl	800402e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	bf14      	ite	ne
 80039c0:	2301      	movne	r3, #1
 80039c2:	2300      	moveq	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d103      	bne.n	80039de <HAL_UART_IRQHandler+0x17a>
 80039d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d04f      	beq.n	8003a7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fa48 	bl	8003e74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d041      	beq.n	8003a76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3314      	adds	r3, #20
 80039f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3314      	adds	r3, #20
 8003a1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003a36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1d9      	bne.n	80039f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d013      	beq.n	8003a6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a4a:	4a7e      	ldr	r2, [pc, #504]	@ (8003c44 <HAL_UART_IRQHandler+0x3e0>)
 8003a4c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fd fd0a 	bl	800146c <HAL_DMA_Abort_IT>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d016      	beq.n	8003a8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a68:	4610      	mov	r0, r2
 8003a6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6c:	e00e      	b.n	8003a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f993 	bl	8003d9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a74:	e00a      	b.n	8003a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f98f 	bl	8003d9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a7c:	e006      	b.n	8003a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f98b 	bl	8003d9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003a8a:	e175      	b.n	8003d78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	bf00      	nop
    return;
 8003a8e:	e173      	b.n	8003d78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	f040 814f 	bne.w	8003d38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a9e:	f003 0310 	and.w	r3, r3, #16
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 8148 	beq.w	8003d38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aac:	f003 0310 	and.w	r3, r3, #16
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 8141 	beq.w	8003d38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 80b6 	beq.w	8003c48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ae8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 8145 	beq.w	8003d7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003af6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003afa:	429a      	cmp	r2, r3
 8003afc:	f080 813e 	bcs.w	8003d7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	f000 8088 	beq.w	8003c24 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b22:	e853 3f00 	ldrex	r3, [r3]
 8003b26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003b2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	330c      	adds	r3, #12
 8003b3c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003b40:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b48:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003b4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b50:	e841 2300 	strex	r3, r2, [r1]
 8003b54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1d9      	bne.n	8003b14 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3314      	adds	r3, #20
 8003b66:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b6a:	e853 3f00 	ldrex	r3, [r3]
 8003b6e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b72:	f023 0301 	bic.w	r3, r3, #1
 8003b76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3314      	adds	r3, #20
 8003b80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b84:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b88:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e1      	bne.n	8003b60 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3314      	adds	r3, #20
 8003ba2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003bac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3314      	adds	r3, #20
 8003bbc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003bc0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003bc2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003bc6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003bc8:	e841 2300 	strex	r3, r2, [r1]
 8003bcc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003bce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e3      	bne.n	8003b9c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	330c      	adds	r3, #12
 8003be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003bf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bf4:	f023 0310 	bic.w	r3, r3, #16
 8003bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	330c      	adds	r3, #12
 8003c02:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003c06:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c08:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c0e:	e841 2300 	strex	r3, r2, [r1]
 8003c12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1e3      	bne.n	8003be2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fd fbe9 	bl	80013f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	4619      	mov	r1, r3
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f8b6 	bl	8003dac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c40:	e09c      	b.n	8003d7c <HAL_UART_IRQHandler+0x518>
 8003c42:	bf00      	nop
 8003c44:	08003f39 	.word	0x08003f39
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 808e 	beq.w	8003d80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 8089 	beq.w	8003d80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	330c      	adds	r3, #12
 8003c74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c78:	e853 3f00 	ldrex	r3, [r3]
 8003c7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003c92:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c9a:	e841 2300 	strex	r3, r2, [r1]
 8003c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1e3      	bne.n	8003c6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3314      	adds	r3, #20
 8003cac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb0:	e853 3f00 	ldrex	r3, [r3]
 8003cb4:	623b      	str	r3, [r7, #32]
   return(result);
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	f023 0301 	bic.w	r3, r3, #1
 8003cbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3314      	adds	r3, #20
 8003cc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003cca:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cd2:	e841 2300 	strex	r3, r2, [r1]
 8003cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1e3      	bne.n	8003ca6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	330c      	adds	r3, #12
 8003cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	e853 3f00 	ldrex	r3, [r3]
 8003cfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 0310 	bic.w	r3, r3, #16
 8003d02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	330c      	adds	r3, #12
 8003d0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003d10:	61fa      	str	r2, [r7, #28]
 8003d12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d14:	69b9      	ldr	r1, [r7, #24]
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	e841 2300 	strex	r3, r2, [r1]
 8003d1c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1e3      	bne.n	8003cec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d2e:	4619      	mov	r1, r3
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f83b 	bl	8003dac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d36:	e023      	b.n	8003d80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d009      	beq.n	8003d58 <HAL_UART_IRQHandler+0x4f4>
 8003d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f905 	bl	8003f60 <UART_Transmit_IT>
    return;
 8003d56:	e014      	b.n	8003d82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00e      	beq.n	8003d82 <HAL_UART_IRQHandler+0x51e>
 8003d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f944 	bl	8003ffe <UART_EndTransmit_IT>
    return;
 8003d76:	e004      	b.n	8003d82 <HAL_UART_IRQHandler+0x51e>
    return;
 8003d78:	bf00      	nop
 8003d7a:	e002      	b.n	8003d82 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d7c:	bf00      	nop
 8003d7e:	e000      	b.n	8003d82 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d80:	bf00      	nop
  }
}
 8003d82:	37e8      	adds	r7, #232	@ 0xe8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr

08003d9a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr

08003dac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr

08003dc2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b086      	sub	sp, #24
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	603b      	str	r3, [r7, #0]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd2:	e03b      	b.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dda:	d037      	beq.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ddc:	f7fd f9d0 	bl	8001180 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	6a3a      	ldr	r2, [r7, #32]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d302      	bcc.n	8003df2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e03a      	b.n	8003e6c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d023      	beq.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b80      	cmp	r3, #128	@ 0x80
 8003e08:	d020      	beq.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b40      	cmp	r3, #64	@ 0x40
 8003e0e:	d01d      	beq.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d116      	bne.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	617b      	str	r3, [r7, #20]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f81d 	bl	8003e74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2208      	movs	r2, #8
 8003e3e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e00f      	b.n	8003e6c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	4013      	ands	r3, r2
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	bf0c      	ite	eq
 8003e5c:	2301      	moveq	r3, #1
 8003e5e:	2300      	movne	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d0b4      	beq.n	8003dd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b095      	sub	sp, #84	@ 0x54
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	330c      	adds	r3, #12
 8003e82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e86:	e853 3f00 	ldrex	r3, [r3]
 8003e8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	330c      	adds	r3, #12
 8003e9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e9c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ea2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ea4:	e841 2300 	strex	r3, r2, [r1]
 8003ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1e5      	bne.n	8003e7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3314      	adds	r3, #20
 8003eb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	e853 3f00 	ldrex	r3, [r3]
 8003ebe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f023 0301 	bic.w	r3, r3, #1
 8003ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3314      	adds	r3, #20
 8003ece:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ed0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ed6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ed8:	e841 2300 	strex	r3, r2, [r1]
 8003edc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1e5      	bne.n	8003eb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d119      	bne.n	8003f20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	330c      	adds	r3, #12
 8003ef2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	e853 3f00 	ldrex	r3, [r3]
 8003efa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f023 0310 	bic.w	r3, r3, #16
 8003f02:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	330c      	adds	r3, #12
 8003f0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f0c:	61ba      	str	r2, [r7, #24]
 8003f0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f10:	6979      	ldr	r1, [r7, #20]
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	e841 2300 	strex	r3, r2, [r1]
 8003f18:	613b      	str	r3, [r7, #16]
   return(result);
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1e5      	bne.n	8003eec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f2e:	bf00      	nop
 8003f30:	3754      	adds	r7, #84	@ 0x54
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr

08003f38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f7ff ff21 	bl	8003d9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b21      	cmp	r3, #33	@ 0x21
 8003f72:	d13e      	bne.n	8003ff2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f7c:	d114      	bne.n	8003fa8 <UART_Transmit_IT+0x48>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d110      	bne.n	8003fa8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	1c9a      	adds	r2, r3, #2
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	621a      	str	r2, [r3, #32]
 8003fa6:	e008      	b.n	8003fba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	1c59      	adds	r1, r3, #1
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6211      	str	r1, [r2, #32]
 8003fb2:	781a      	ldrb	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10f      	bne.n	8003fee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fdc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	e000      	b.n	8003ff4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ff2:	2302      	movs	r3, #2
  }
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bc80      	pop	{r7}
 8003ffc:	4770      	bx	lr

08003ffe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004014:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7ff feb2 	bl	8003d88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b08c      	sub	sp, #48	@ 0x30
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b22      	cmp	r3, #34	@ 0x22
 8004040:	f040 80ae 	bne.w	80041a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800404c:	d117      	bne.n	800407e <UART_Receive_IT+0x50>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d113      	bne.n	800407e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004056:	2300      	movs	r3, #0
 8004058:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	b29b      	uxth	r3, r3
 8004068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406c:	b29a      	uxth	r2, r3
 800406e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004070:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004076:	1c9a      	adds	r2, r3, #2
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	@ 0x28
 800407c:	e026      	b.n	80040cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004082:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004084:	2300      	movs	r3, #0
 8004086:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004090:	d007      	beq.n	80040a2 <UART_Receive_IT+0x74>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10a      	bne.n	80040b0 <UART_Receive_IT+0x82>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ac:	701a      	strb	r2, [r3, #0]
 80040ae:	e008      	b.n	80040c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	4619      	mov	r1, r3
 80040da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d15d      	bne.n	800419c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0220 	bic.w	r2, r2, #32
 80040ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0201 	bic.w	r2, r2, #1
 800410e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004122:	2b01      	cmp	r3, #1
 8004124:	d135      	bne.n	8004192 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	330c      	adds	r3, #12
 8004132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	613b      	str	r3, [r7, #16]
   return(result);
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f023 0310 	bic.w	r3, r3, #16
 8004142:	627b      	str	r3, [r7, #36]	@ 0x24
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	330c      	adds	r3, #12
 800414a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800414c:	623a      	str	r2, [r7, #32]
 800414e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004150:	69f9      	ldr	r1, [r7, #28]
 8004152:	6a3a      	ldr	r2, [r7, #32]
 8004154:	e841 2300 	strex	r3, r2, [r1]
 8004158:	61bb      	str	r3, [r7, #24]
   return(result);
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e5      	bne.n	800412c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	2b10      	cmp	r3, #16
 800416c:	d10a      	bne.n	8004184 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004188:	4619      	mov	r1, r3
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7ff fe0e 	bl	8003dac <HAL_UARTEx_RxEventCallback>
 8004190:	e002      	b.n	8004198 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fb60 	bl	8004858 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	e002      	b.n	80041a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	e000      	b.n	80041a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80041a0:	2302      	movs	r3, #2
  }
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3730      	adds	r7, #48	@ 0x30
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80041e6:	f023 030c 	bic.w	r3, r3, #12
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6812      	ldr	r2, [r2, #0]
 80041ee:	68b9      	ldr	r1, [r7, #8]
 80041f0:	430b      	orrs	r3, r1
 80041f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a2c      	ldr	r2, [pc, #176]	@ (80042c0 <UART_SetConfig+0x114>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d103      	bne.n	800421c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004214:	f7ff fa18 	bl	8003648 <HAL_RCC_GetPCLK2Freq>
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	e002      	b.n	8004222 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800421c:	f7ff fa00 	bl	8003620 <HAL_RCC_GetPCLK1Freq>
 8004220:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	009a      	lsls	r2, r3, #2
 800422c:	441a      	add	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	fbb2 f3f3 	udiv	r3, r2, r3
 8004238:	4a22      	ldr	r2, [pc, #136]	@ (80042c4 <UART_SetConfig+0x118>)
 800423a:	fba2 2303 	umull	r2, r3, r2, r3
 800423e:	095b      	lsrs	r3, r3, #5
 8004240:	0119      	lsls	r1, r3, #4
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	4613      	mov	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	009a      	lsls	r2, r3, #2
 800424c:	441a      	add	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	fbb2 f2f3 	udiv	r2, r2, r3
 8004258:	4b1a      	ldr	r3, [pc, #104]	@ (80042c4 <UART_SetConfig+0x118>)
 800425a:	fba3 0302 	umull	r0, r3, r3, r2
 800425e:	095b      	lsrs	r3, r3, #5
 8004260:	2064      	movs	r0, #100	@ 0x64
 8004262:	fb00 f303 	mul.w	r3, r0, r3
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	3332      	adds	r3, #50	@ 0x32
 800426c:	4a15      	ldr	r2, [pc, #84]	@ (80042c4 <UART_SetConfig+0x118>)
 800426e:	fba2 2303 	umull	r2, r3, r2, r3
 8004272:	095b      	lsrs	r3, r3, #5
 8004274:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004278:	4419      	add	r1, r3
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4613      	mov	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	009a      	lsls	r2, r3, #2
 8004284:	441a      	add	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004290:	4b0c      	ldr	r3, [pc, #48]	@ (80042c4 <UART_SetConfig+0x118>)
 8004292:	fba3 0302 	umull	r0, r3, r3, r2
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	2064      	movs	r0, #100	@ 0x64
 800429a:	fb00 f303 	mul.w	r3, r0, r3
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	3332      	adds	r3, #50	@ 0x32
 80042a4:	4a07      	ldr	r2, [pc, #28]	@ (80042c4 <UART_SetConfig+0x118>)
 80042a6:	fba2 2303 	umull	r2, r3, r2, r3
 80042aa:	095b      	lsrs	r3, r3, #5
 80042ac:	f003 020f 	and.w	r2, r3, #15
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	440a      	add	r2, r1
 80042b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042b8:	bf00      	nop
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40013800 	.word	0x40013800
 80042c4:	51eb851f 	.word	0x51eb851f

080042c8 <StepCounter_Init>:
    float filtered_accel;
    uint32_t step_count;
} StepCounter;

// Initialize Step Counter
void StepCounter_Init(StepCounter *sc) {
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
    sc->last_step_time = 0;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
    sc->last_activity_time = 0;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	605a      	str	r2, [r3, #4]
    sc->state = NO_ACTIVITY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	721a      	strb	r2, [r3, #8]
    sc->filtered_accel = 0;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	60da      	str	r2, [r3, #12]
    sc->step_count = 0;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	611a      	str	r2, [r3, #16]
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr
 80042fa:	0000      	movs	r0, r0
 80042fc:	0000      	movs	r0, r0
	...

08004300 <StepCounter_Update>:

// Update Step Detection
void StepCounter_Update(StepCounter *sc,
                        float accel_mag,
                        float gyro_mag,
                        uint32_t timestamp_ms) {
 8004300:	b5b0      	push	{r4, r5, r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
    // 1. Low-pass filter accelerometer magnitude
    sc->filtered_accel = FILTER_ALPHA * accel_mag +
 800430e:	68b8      	ldr	r0, [r7, #8]
 8004310:	f7fc f88a 	bl	8000428 <__aeabi_f2d>
 8004314:	a352      	add	r3, pc, #328	@ (adr r3, 8004460 <StepCounter_Update+0x160>)
 8004316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431a:	f7fc f8dd 	bl	80004d8 <__aeabi_dmul>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4614      	mov	r4, r2
 8004324:	461d      	mov	r5, r3
                         (1 - FILTER_ALPHA) * sc->filtered_accel;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	4618      	mov	r0, r3
 800432c:	f7fc f87c 	bl	8000428 <__aeabi_f2d>
 8004330:	a34d      	add	r3, pc, #308	@ (adr r3, 8004468 <StepCounter_Update+0x168>)
 8004332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004336:	f7fc f8cf 	bl	80004d8 <__aeabi_dmul>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
    sc->filtered_accel = FILTER_ALPHA * accel_mag +
 800433e:	4620      	mov	r0, r4
 8004340:	4629      	mov	r1, r5
 8004342:	f7fb ff13 	bl	800016c <__adddf3>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4610      	mov	r0, r2
 800434c:	4619      	mov	r1, r3
 800434e:	f7fc fb9b 	bl	8000a88 <__aeabi_d2f>
 8004352:	4602      	mov	r2, r0
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	60da      	str	r2, [r3, #12]

    // 2. Check for significant motion
    if (gyro_mag > GYRO_THRESHOLD) {
 8004358:	4949      	ldr	r1, [pc, #292]	@ (8004480 <StepCounter_Update+0x180>)
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fc feae 	bl	80010bc <__aeabi_fcmpgt>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <StepCounter_Update+0x6c>
        sc->last_activity_time = timestamp_ms;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	605a      	str	r2, [r3, #4]
    }

    // 3. State Machine Logic
    switch (sc->state) {
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	7a1b      	ldrb	r3, [r3, #8]
 8004370:	2b03      	cmp	r3, #3
 8004372:	d870      	bhi.n	8004456 <StepCounter_Update+0x156>
 8004374:	a201      	add	r2, pc, #4	@ (adr r2, 800437c <StepCounter_Update+0x7c>)
 8004376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437a:	bf00      	nop
 800437c:	0800438d 	.word	0x0800438d
 8004380:	080043b1 	.word	0x080043b1
 8004384:	080043f7 	.word	0x080043f7
 8004388:	08004433 	.word	0x08004433
        case NO_ACTIVITY:
            if (sc->filtered_accel > ACCEL_THRESHOLD) {
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4618      	mov	r0, r3
 8004392:	f7fc f849 	bl	8000428 <__aeabi_f2d>
 8004396:	a332      	add	r3, pc, #200	@ (adr r3, 8004460 <StepCounter_Update+0x160>)
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	f7fc fb2c 	bl	80009f8 <__aeabi_dcmpgt>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d100      	bne.n	80043a8 <StepCounter_Update+0xa8>
                sc->state = ACCEL_RISING;
            }
            break;
 80043a6:	e056      	b.n	8004456 <StepCounter_Update+0x156>
                sc->state = ACCEL_RISING;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2201      	movs	r2, #1
 80043ac:	721a      	strb	r2, [r3, #8]
            break;
 80043ae:	e052      	b.n	8004456 <StepCounter_Update+0x156>

        case ACCEL_RISING:
            if (sc->filtered_accel < -ACCEL_THRESHOLD) {
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fc f837 	bl	8000428 <__aeabi_f2d>
 80043ba:	a32d      	add	r3, pc, #180	@ (adr r3, 8004470 <StepCounter_Update+0x170>)
 80043bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c0:	f7fc fafc 	bl	80009bc <__aeabi_dcmplt>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <StepCounter_Update+0xd2>
                // Negative peak = foot impact
                sc->state = PEAK_DETECTED;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2202      	movs	r2, #2
 80043ce:	721a      	strb	r2, [r3, #8]
            } else if (sc->filtered_accel < ACCEL_THRESHOLD) {
                // Return to baseline without impact
                sc->state = NO_ACTIVITY;
            }
            break;
 80043d0:	e041      	b.n	8004456 <StepCounter_Update+0x156>
            } else if (sc->filtered_accel < ACCEL_THRESHOLD) {
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fc f826 	bl	8000428 <__aeabi_f2d>
 80043dc:	a320      	add	r3, pc, #128	@ (adr r3, 8004460 <StepCounter_Update+0x160>)
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	f7fc faeb 	bl	80009bc <__aeabi_dcmplt>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d100      	bne.n	80043ee <StepCounter_Update+0xee>
            break;
 80043ec:	e033      	b.n	8004456 <StepCounter_Update+0x156>
                sc->state = NO_ACTIVITY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	721a      	strb	r2, [r3, #8]
            break;
 80043f4:	e02f      	b.n	8004456 <StepCounter_Update+0x156>
        case PEAK_DETECTED:
            // Confirm valid step conditions:
            // a) Minimum time since last step
            // b) Recent gyroscope activity
            // c) Not a false positive (e.g., device shake)
            if ((timestamp_ms - sc->last_step_time > MIN_STEP_INTERVAL_MS) &&
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8004402:	d912      	bls.n	800442a <StepCounter_Update+0x12a>
                (timestamp_ms - sc->last_activity_time < MAX_STEP_PAUSE_MS)) {
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	1ad3      	subs	r3, r2, r3
            if ((timestamp_ms - sc->last_step_time > MIN_STEP_INTERVAL_MS) &&
 800440c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004410:	d20b      	bcs.n	800442a <StepCounter_Update+0x12a>
                sc->step_count++;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	611a      	str	r2, [r3, #16]
                sc->last_step_time = timestamp_ms;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	601a      	str	r2, [r3, #0]
                sc->state = WALKING;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2203      	movs	r2, #3
 8004426:	721a      	strb	r2, [r3, #8]
            } else {
                sc->state = NO_ACTIVITY;
            }
            break;
 8004428:	e015      	b.n	8004456 <StepCounter_Update+0x156>
                sc->state = NO_ACTIVITY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	721a      	strb	r2, [r3, #8]
            break;
 8004430:	e011      	b.n	8004456 <StepCounter_Update+0x156>

        case WALKING:
            // Reset after step completion
            if (sc->filtered_accel < 0.1) {
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fb fff6 	bl	8000428 <__aeabi_f2d>
 800443c:	a30e      	add	r3, pc, #56	@ (adr r3, 8004478 <StepCounter_Update+0x178>)
 800443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004442:	f7fc fabb 	bl	80009bc <__aeabi_dcmplt>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d100      	bne.n	800444e <StepCounter_Update+0x14e>
                sc->state = NO_ACTIVITY;
            }
            break;
 800444c:	e002      	b.n	8004454 <StepCounter_Update+0x154>
                sc->state = NO_ACTIVITY;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	721a      	strb	r2, [r3, #8]
            break;
 8004454:	bf00      	nop
    }
}
 8004456:	bf00      	nop
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bdb0      	pop	{r4, r5, r7, pc}
 800445e:	bf00      	nop
 8004460:	9999999a 	.word	0x9999999a
 8004464:	3fc99999 	.word	0x3fc99999
 8004468:	9999999a 	.word	0x9999999a
 800446c:	3fe99999 	.word	0x3fe99999
 8004470:	9999999a 	.word	0x9999999a
 8004474:	bfc99999 	.word	0xbfc99999
 8004478:	9999999a 	.word	0x9999999a
 800447c:	3fb99999 	.word	0x3fb99999
 8004480:	42480000 	.word	0x42480000

08004484 <StepCounter_GetSteps>:

// Get Current Step Count
uint32_t StepCounter_GetSteps(StepCounter *sc) {
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
    return sc->step_count;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
}
 8004490:	4618      	mov	r0, r3
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr
	...

0800449c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800449c:	b590      	push	{r4, r7, lr}
 800449e:	b0b1      	sub	sp, #196	@ 0xc4
 80044a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80044a2:	f7fc fe15 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80044a6:	f000 f921 	bl	80046ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80044aa:	f000 f9b3 	bl	8004814 <MX_GPIO_Init>
  MX_I2C1_Init();
 80044ae:	f000 f959 	bl	8004764 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80044b2:	f000 f985 	bl	80047c0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  mpu6050_t mpu6050 = MPU6050_Init(&hi2c1);
 80044b6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80044ba:	4985      	ldr	r1, [pc, #532]	@ (80046d0 <main+0x234>)
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 f9f3 	bl	80048a8 <MPU6050_Init>
  StepCounter step_counter;
  StepCounter_Init(&step_counter);
 80044c2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff fefe 	bl	80042c8 <StepCounter_Init>
  SSD1306_Init();
 80044cc:	f000 fc8a 	bl	8004de4 <SSD1306_Init>


  HAL_Delay(100); // Allow sensor to stabilize
 80044d0:	2064      	movs	r0, #100	@ 0x64
 80044d2:	f7fc fe5f 	bl	8001194 <HAL_Delay>
  MPU6050_Reset_FIFO(&mpu6050);
 80044d6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fadb 	bl	8004a96 <MPU6050_Reset_FIFO>
  HAL_Delay(50);
 80044e0:	2032      	movs	r0, #50	@ 0x32
 80044e2:	f7fc fe57 	bl	8001194 <HAL_Delay>
  MPU6050_configure_Fifo(&mpu6050);
 80044e6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fb5e 	bl	8004bac <MPU6050_configure_Fifo>
  HAL_Delay(50);
 80044f0:	2032      	movs	r0, #50	@ 0x32
 80044f2:	f7fc fe4f 	bl	8001194 <HAL_Delay>
  MPU6050_Enable_FIFO(&mpu6050);
 80044f6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 fb2a 	bl	8004b54 <MPU6050_Enable_FIFO>
  HAL_Delay(100); // Allow FIFO to fill
 8004500:	2064      	movs	r0, #100	@ 0x64
 8004502:	f7fc fe47 	bl	8001194 <HAL_Delay>

  // To get Raw values for calibration use corresponding functions in driver.
  float offsetXYZ[3] = {188.75, 240, 3361.5}; // enter your values
 8004506:	4a73      	ldr	r2, [pc, #460]	@ (80046d4 <main+0x238>)
 8004508:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800450c:	ca07      	ldmia	r2, {r0, r1, r2}
 800450e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float scaleXYZ[3] = {16358.75, 16312.67, 16721.5}; // enter your values
 8004512:	4a71      	ldr	r2, [pc, #452]	@ (80046d8 <main+0x23c>)
 8004514:	f107 0320 	add.w	r3, r7, #32
 8004518:	ca07      	ldmia	r2, {r0, r1, r2}
 800451a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  MPU6050_Set_Accel_Offset_Scale(&mpu6050, offsetXYZ, scaleXYZ);
 800451e:	f107 0220 	add.w	r2, r7, #32
 8004522:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8004526:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fa84 	bl	8004a38 <MPU6050_Set_Accel_Offset_Scale>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // 1. Read sensor data via FIFO
	          MPU6050_Read_Fifo(&mpu6050);
 8004530:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004534:	4618      	mov	r0, r3
 8004536:	f000 fb85 	bl	8004c44 <MPU6050_Read_Fifo>

	          // 2. Compute acceleration magnitude (vector sum)
	          float accel_x = mpu6050.accelerometer.Axyz[0];
 800453a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800453c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	          float accel_y = mpu6050.accelerometer.Axyz[1];
 8004540:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004542:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	          float accel_z = mpu6050.accelerometer.Axyz[2];
 8004546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004548:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	          float accel_mag = sqrt(accel_x*accel_x +
 800454c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8004550:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8004554:	f7fc fbf6 	bl	8000d44 <__aeabi_fmul>
 8004558:	4603      	mov	r3, r0
 800455a:	461c      	mov	r4, r3
	                                accel_y*accel_y +
 800455c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8004560:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8004564:	f7fc fbee 	bl	8000d44 <__aeabi_fmul>
 8004568:	4603      	mov	r3, r0
	          float accel_mag = sqrt(accel_x*accel_x +
 800456a:	4619      	mov	r1, r3
 800456c:	4620      	mov	r0, r4
 800456e:	f7fc fae1 	bl	8000b34 <__addsf3>
 8004572:	4603      	mov	r3, r0
 8004574:	461c      	mov	r4, r3
	                                accel_z*accel_z);
 8004576:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 800457a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 800457e:	f7fc fbe1 	bl	8000d44 <__aeabi_fmul>
 8004582:	4603      	mov	r3, r0
	                                accel_y*accel_y +
 8004584:	4619      	mov	r1, r3
 8004586:	4620      	mov	r0, r4
 8004588:	f7fc fad4 	bl	8000b34 <__addsf3>
 800458c:	4603      	mov	r3, r0
	          float accel_mag = sqrt(accel_x*accel_x +
 800458e:	4618      	mov	r0, r3
 8004590:	f7fb ff4a 	bl	8000428 <__aeabi_f2d>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4610      	mov	r0, r2
 800459a:	4619      	mov	r1, r3
 800459c:	f003 ff0e 	bl	80083bc <sqrt>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4610      	mov	r0, r2
 80045a6:	4619      	mov	r1, r3
 80045a8:	f7fc fa6e 	bl	8000a88 <__aeabi_d2f>
 80045ac:	4603      	mov	r3, r0
 80045ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

	          // 3. Compute gyroscope magnitude (vector sum)
	          float gyro_x = mpu6050.gyroscope.Gxyz[0];
 80045b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	          float gyro_y = mpu6050.gyroscope.Gxyz[1];
 80045b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	          float gyro_z = mpu6050.gyroscope.Gxyz[2];
 80045be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	          float gyro_mag = sqrt(gyro_x*gyro_x +
 80045c4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80045c8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80045cc:	f7fc fbba 	bl	8000d44 <__aeabi_fmul>
 80045d0:	4603      	mov	r3, r0
 80045d2:	461c      	mov	r4, r3
	                               gyro_y*gyro_y +
 80045d4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80045d8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80045dc:	f7fc fbb2 	bl	8000d44 <__aeabi_fmul>
 80045e0:	4603      	mov	r3, r0
	          float gyro_mag = sqrt(gyro_x*gyro_x +
 80045e2:	4619      	mov	r1, r3
 80045e4:	4620      	mov	r0, r4
 80045e6:	f7fc faa5 	bl	8000b34 <__addsf3>
 80045ea:	4603      	mov	r3, r0
 80045ec:	461c      	mov	r4, r3
	                               gyro_z*gyro_z);
 80045ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80045f2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80045f6:	f7fc fba5 	bl	8000d44 <__aeabi_fmul>
 80045fa:	4603      	mov	r3, r0
	                               gyro_y*gyro_y +
 80045fc:	4619      	mov	r1, r3
 80045fe:	4620      	mov	r0, r4
 8004600:	f7fc fa98 	bl	8000b34 <__addsf3>
 8004604:	4603      	mov	r3, r0
	          float gyro_mag = sqrt(gyro_x*gyro_x +
 8004606:	4618      	mov	r0, r3
 8004608:	f7fb ff0e 	bl	8000428 <__aeabi_f2d>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4610      	mov	r0, r2
 8004612:	4619      	mov	r1, r3
 8004614:	f003 fed2 	bl	80083bc <sqrt>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4610      	mov	r0, r2
 800461e:	4619      	mov	r1, r3
 8004620:	f7fc fa32 	bl	8000a88 <__aeabi_d2f>
 8004624:	4603      	mov	r3, r0
 8004626:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	          // 4. Update step detector
	          uint32_t now = HAL_GetTick();
 800462a:	f7fc fda9 	bl	8001180 <HAL_GetTick>
 800462e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
	          StepCounter_Update(&step_counter, accel_mag, gyro_mag, now);
 8004632:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8004636:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800463a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800463e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8004642:	f7ff fe5d 	bl	8004300 <StepCounter_Update>

	          // 5. Display step count
	          char buf[32];
	          sprintf(buf, "Steps: %lu", StepCounter_GetSteps(&step_counter));
 8004646:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff ff1a 	bl	8004484 <StepCounter_GetSteps>
 8004650:	4602      	mov	r2, r0
 8004652:	463b      	mov	r3, r7
 8004654:	4921      	ldr	r1, [pc, #132]	@ (80046dc <main+0x240>)
 8004656:	4618      	mov	r0, r3
 8004658:	f001 fd72 	bl	8006140 <siprintf>
	          SSD1306_GotoXY(0, 0);
 800465c:	2100      	movs	r1, #0
 800465e:	2000      	movs	r0, #0
 8004660:	f000 fd22 	bl	80050a8 <SSD1306_GotoXY>
	          SSD1306_Puts(buf, &Font_14x15, 1);
 8004664:	463b      	mov	r3, r7
 8004666:	2201      	movs	r2, #1
 8004668:	491d      	ldr	r1, [pc, #116]	@ (80046e0 <main+0x244>)
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fdb0 	bl	80051d0 <SSD1306_Puts>

	          sprintf(buf, "aM: %.2f", accel_mag);
 8004670:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8004674:	f7fb fed8 	bl	8000428 <__aeabi_f2d>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4638      	mov	r0, r7
 800467e:	4919      	ldr	r1, [pc, #100]	@ (80046e4 <main+0x248>)
 8004680:	f001 fd5e 	bl	8006140 <siprintf>
	          SSD1306_GotoXY(0, 20);
 8004684:	2114      	movs	r1, #20
 8004686:	2000      	movs	r0, #0
 8004688:	f000 fd0e 	bl	80050a8 <SSD1306_GotoXY>
	          SSD1306_Puts(buf, &Font_14x15, 1);
 800468c:	463b      	mov	r3, r7
 800468e:	2201      	movs	r2, #1
 8004690:	4913      	ldr	r1, [pc, #76]	@ (80046e0 <main+0x244>)
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fd9c 	bl	80051d0 <SSD1306_Puts>


	          sprintf(buf, "gM: %.2f", gyro_mag);
 8004698:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800469c:	f7fb fec4 	bl	8000428 <__aeabi_f2d>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4638      	mov	r0, r7
 80046a6:	4910      	ldr	r1, [pc, #64]	@ (80046e8 <main+0x24c>)
 80046a8:	f001 fd4a 	bl	8006140 <siprintf>
	          SSD1306_GotoXY(0, 40);
 80046ac:	2128      	movs	r1, #40	@ 0x28
 80046ae:	2000      	movs	r0, #0
 80046b0:	f000 fcfa 	bl	80050a8 <SSD1306_GotoXY>
	          SSD1306_Puts(buf, &Font_14x15, 1);
 80046b4:	463b      	mov	r3, r7
 80046b6:	2201      	movs	r2, #1
 80046b8:	4909      	ldr	r1, [pc, #36]	@ (80046e0 <main+0x244>)
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fd88 	bl	80051d0 <SSD1306_Puts>
	          SSD1306_UpdateScreen();
 80046c0:	f000 fc4e 	bl	8004f60 <SSD1306_UpdateScreen>

	          HAL_Delay(10); // Adjust based on sampling rate
 80046c4:	200a      	movs	r0, #10
 80046c6:	f7fc fd65 	bl	8001194 <HAL_Delay>
  {
 80046ca:	bf00      	nop
 80046cc:	e730      	b.n	8004530 <main+0x94>
 80046ce:	bf00      	nop
 80046d0:	200001fc 	.word	0x200001fc
 80046d4:	080085e4 	.word	0x080085e4
 80046d8:	080085f0 	.word	0x080085f0
 80046dc:	080085c0 	.word	0x080085c0
 80046e0:	20000008 	.word	0x20000008
 80046e4:	080085cc 	.word	0x080085cc
 80046e8:	080085d8 	.word	0x080085d8

080046ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b090      	sub	sp, #64	@ 0x40
 80046f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046f2:	f107 0318 	add.w	r3, r7, #24
 80046f6:	2228      	movs	r2, #40	@ 0x28
 80046f8:	2100      	movs	r1, #0
 80046fa:	4618      	mov	r0, r3
 80046fc:	f001 fd85 	bl	800620a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004700:	1d3b      	adds	r3, r7, #4
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	605a      	str	r2, [r3, #4]
 8004708:	609a      	str	r2, [r3, #8]
 800470a:	60da      	str	r2, [r3, #12]
 800470c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800470e:	2302      	movs	r3, #2
 8004710:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004712:	2301      	movs	r3, #1
 8004714:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004716:	2310      	movs	r3, #16
 8004718:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800471a:	2300      	movs	r3, #0
 800471c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800471e:	f107 0318 	add.w	r3, r7, #24
 8004722:	4618      	mov	r0, r3
 8004724:	f7fe fbb2 	bl	8002e8c <HAL_RCC_OscConfig>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800472e:	f000 f8b5 	bl	800489c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004732:	230f      	movs	r3, #15
 8004734:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004736:	2300      	movs	r3, #0
 8004738:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800473a:	2300      	movs	r3, #0
 800473c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800473e:	2300      	movs	r3, #0
 8004740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004746:	1d3b      	adds	r3, r7, #4
 8004748:	2100      	movs	r1, #0
 800474a:	4618      	mov	r0, r3
 800474c:	f7fe fe20 	bl	8003390 <HAL_RCC_ClockConfig>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8004756:	f000 f8a1 	bl	800489c <Error_Handler>
  }
}
 800475a:	bf00      	nop
 800475c:	3740      	adds	r7, #64	@ 0x40
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004768:	4b12      	ldr	r3, [pc, #72]	@ (80047b4 <MX_I2C1_Init+0x50>)
 800476a:	4a13      	ldr	r2, [pc, #76]	@ (80047b8 <MX_I2C1_Init+0x54>)
 800476c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800476e:	4b11      	ldr	r3, [pc, #68]	@ (80047b4 <MX_I2C1_Init+0x50>)
 8004770:	4a12      	ldr	r2, [pc, #72]	@ (80047bc <MX_I2C1_Init+0x58>)
 8004772:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004774:	4b0f      	ldr	r3, [pc, #60]	@ (80047b4 <MX_I2C1_Init+0x50>)
 8004776:	2200      	movs	r2, #0
 8004778:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800477a:	4b0e      	ldr	r3, [pc, #56]	@ (80047b4 <MX_I2C1_Init+0x50>)
 800477c:	2200      	movs	r2, #0
 800477e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004780:	4b0c      	ldr	r3, [pc, #48]	@ (80047b4 <MX_I2C1_Init+0x50>)
 8004782:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004786:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004788:	4b0a      	ldr	r3, [pc, #40]	@ (80047b4 <MX_I2C1_Init+0x50>)
 800478a:	2200      	movs	r2, #0
 800478c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800478e:	4b09      	ldr	r3, [pc, #36]	@ (80047b4 <MX_I2C1_Init+0x50>)
 8004790:	2200      	movs	r2, #0
 8004792:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004794:	4b07      	ldr	r3, [pc, #28]	@ (80047b4 <MX_I2C1_Init+0x50>)
 8004796:	2200      	movs	r2, #0
 8004798:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800479a:	4b06      	ldr	r3, [pc, #24]	@ (80047b4 <MX_I2C1_Init+0x50>)
 800479c:	2200      	movs	r2, #0
 800479e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80047a0:	4804      	ldr	r0, [pc, #16]	@ (80047b4 <MX_I2C1_Init+0x50>)
 80047a2:	f7fd f85f 	bl	8001864 <HAL_I2C_Init>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80047ac:	f000 f876 	bl	800489c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80047b0:	bf00      	nop
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	200001fc 	.word	0x200001fc
 80047b8:	40005400 	.word	0x40005400
 80047bc:	00061a80 	.word	0x00061a80

080047c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80047c4:	4b11      	ldr	r3, [pc, #68]	@ (800480c <MX_USART3_UART_Init+0x4c>)
 80047c6:	4a12      	ldr	r2, [pc, #72]	@ (8004810 <MX_USART3_UART_Init+0x50>)
 80047c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80047ca:	4b10      	ldr	r3, [pc, #64]	@ (800480c <MX_USART3_UART_Init+0x4c>)
 80047cc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80047d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80047d2:	4b0e      	ldr	r3, [pc, #56]	@ (800480c <MX_USART3_UART_Init+0x4c>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80047d8:	4b0c      	ldr	r3, [pc, #48]	@ (800480c <MX_USART3_UART_Init+0x4c>)
 80047da:	2200      	movs	r2, #0
 80047dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80047de:	4b0b      	ldr	r3, [pc, #44]	@ (800480c <MX_USART3_UART_Init+0x4c>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80047e4:	4b09      	ldr	r3, [pc, #36]	@ (800480c <MX_USART3_UART_Init+0x4c>)
 80047e6:	220c      	movs	r2, #12
 80047e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047ea:	4b08      	ldr	r3, [pc, #32]	@ (800480c <MX_USART3_UART_Init+0x4c>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80047f0:	4b06      	ldr	r3, [pc, #24]	@ (800480c <MX_USART3_UART_Init+0x4c>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80047f6:	4805      	ldr	r0, [pc, #20]	@ (800480c <MX_USART3_UART_Init+0x4c>)
 80047f8:	f7fe ff58 	bl	80036ac <HAL_UART_Init>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004802:	f000 f84b 	bl	800489c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004806:	bf00      	nop
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20000250 	.word	0x20000250
 8004810:	40004800 	.word	0x40004800

08004814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800481a:	4b0e      	ldr	r3, [pc, #56]	@ (8004854 <MX_GPIO_Init+0x40>)
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	4a0d      	ldr	r2, [pc, #52]	@ (8004854 <MX_GPIO_Init+0x40>)
 8004820:	f043 0308 	orr.w	r3, r3, #8
 8004824:	6193      	str	r3, [r2, #24]
 8004826:	4b0b      	ldr	r3, [pc, #44]	@ (8004854 <MX_GPIO_Init+0x40>)
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	607b      	str	r3, [r7, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004832:	4b08      	ldr	r3, [pc, #32]	@ (8004854 <MX_GPIO_Init+0x40>)
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	4a07      	ldr	r2, [pc, #28]	@ (8004854 <MX_GPIO_Init+0x40>)
 8004838:	f043 0304 	orr.w	r3, r3, #4
 800483c:	6193      	str	r3, [r2, #24]
 800483e:	4b05      	ldr	r3, [pc, #20]	@ (8004854 <MX_GPIO_Init+0x40>)
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr
 8004854:	40021000 	.word	0x40021000

08004858 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a09      	ldr	r2, [pc, #36]	@ (800488c <HAL_UART_RxCpltCallback+0x34>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d10b      	bne.n	8004882 <HAL_UART_RxCpltCallback+0x2a>
        // Echo received config
        HAL_UART_Transmit(&huart3, (uint8_t*)"Received: ", 10, 100);
 800486a:	2364      	movs	r3, #100	@ 0x64
 800486c:	220a      	movs	r2, #10
 800486e:	4908      	ldr	r1, [pc, #32]	@ (8004890 <HAL_UART_RxCpltCallback+0x38>)
 8004870:	4808      	ldr	r0, [pc, #32]	@ (8004894 <HAL_UART_RxCpltCallback+0x3c>)
 8004872:	f7fe ff6b 	bl	800374c <HAL_UART_Transmit>
        //HAL_UART_Transmit(&huart3, config, 4, 100);
        HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, 100);
 8004876:	2364      	movs	r3, #100	@ 0x64
 8004878:	2202      	movs	r2, #2
 800487a:	4907      	ldr	r1, [pc, #28]	@ (8004898 <HAL_UART_RxCpltCallback+0x40>)
 800487c:	4805      	ldr	r0, [pc, #20]	@ (8004894 <HAL_UART_RxCpltCallback+0x3c>)
 800487e:	f7fe ff65 	bl	800374c <HAL_UART_Transmit>

        // to call interrupt again
        //HAL_UART_Receive_IT(&huart3, config, 4);
    }
}
 8004882:	bf00      	nop
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40004800 	.word	0x40004800
 8004890:	080085fc 	.word	0x080085fc
 8004894:	20000250 	.word	0x20000250
 8004898:	08008608 	.word	0x08008608

0800489c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80048a0:	b672      	cpsid	i
}
 80048a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80048a4:	bf00      	nop
 80048a6:	e7fd      	b.n	80048a4 <Error_Handler+0x8>

080048a8 <MPU6050_Init>:
#include <stdbool.h>
#include <string.h>


mpu6050_t MPU6050_Init (I2C_HandleTypeDef *hi2c1) // WHO AM I is to verify the identity of device
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b09e      	sub	sp, #120	@ 0x78
 80048ac:	af04      	add	r7, sp, #16
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint8_t check;
  uint8_t Data;
  mpu6050_t mpu6050 = {0}; // Zero initialise whole struct
 80048b2:	f107 030c 	add.w	r3, r7, #12
 80048b6:	2250      	movs	r2, #80	@ 0x50
 80048b8:	2100      	movs	r1, #0
 80048ba:	4618      	mov	r0, r3
 80048bc:	f001 fca5 	bl	800620a <memset>
  mpu6050._I2C = hi2c1;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	65bb      	str	r3, [r7, #88]	@ 0x58

  HAL_I2C_Mem_Read (hi2c1, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, 1000);  // read WHO_AM_I
 80048c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048c8:	9302      	str	r3, [sp, #8]
 80048ca:	2301      	movs	r3, #1
 80048cc:	9301      	str	r3, [sp, #4]
 80048ce:	f107 035f 	add.w	r3, r7, #95	@ 0x5f
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	2301      	movs	r3, #1
 80048d6:	2275      	movs	r2, #117	@ 0x75
 80048d8:	21d0      	movs	r1, #208	@ 0xd0
 80048da:	6838      	ldr	r0, [r7, #0]
 80048dc:	f7fd fafe 	bl	8001edc <HAL_I2C_Mem_Read>

  HAL_Delay(100); // Small delay
 80048e0:	2064      	movs	r0, #100	@ 0x64
 80048e2:	f7fc fc57 	bl	8001194 <HAL_Delay>

   if (check == MPU6050_ADDR_WO_SHIFT)  // 0x68 will be returned by the sensor if everything goes well
 80048e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80048ea:	2b68      	cmp	r3, #104	@ 0x68
 80048ec:	f040 8096 	bne.w	8004a1c <MPU6050_Init+0x174>
  {
	  Data = 0x80; // Device reset
 80048f0:	2380      	movs	r3, #128	@ 0x80
 80048f2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 1000);
 80048f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048fa:	9302      	str	r3, [sp, #8]
 80048fc:	2301      	movs	r3, #1
 80048fe:	9301      	str	r3, [sp, #4]
 8004900:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	2301      	movs	r3, #1
 8004908:	226b      	movs	r2, #107	@ 0x6b
 800490a:	21d0      	movs	r1, #208	@ 0xd0
 800490c:	6838      	ldr	r0, [r7, #0]
 800490e:	f7fd f9eb 	bl	8001ce8 <HAL_I2C_Mem_Write>
	  HAL_Delay(100);
 8004912:	2064      	movs	r0, #100	@ 0x64
 8004914:	f7fc fc3e 	bl	8001194 <HAL_Delay>

	  // Wake up and set clock source to PLL with X-axis gyro reference
	  Data = 0x01; // Use PLL with X-axis gyro, not internal oscillator
 8004918:	2301      	movs	r3, #1
 800491a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 1000);
 800491e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004922:	9302      	str	r3, [sp, #8]
 8004924:	2301      	movs	r3, #1
 8004926:	9301      	str	r3, [sp, #4]
 8004928:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	2301      	movs	r3, #1
 8004930:	226b      	movs	r2, #107	@ 0x6b
 8004932:	21d0      	movs	r1, #208	@ 0xd0
 8004934:	6838      	ldr	r0, [r7, #0]
 8004936:	f7fd f9d7 	bl	8001ce8 <HAL_I2C_Mem_Write>
	  HAL_Delay(100);
 800493a:	2064      	movs	r0, #100	@ 0x64
 800493c:	f7fc fc2a 	bl	8001194 <HAL_Delay>

	  // Ensure all sensors are enabled
	  Data = 0x00; // Enable all accelerometer and gyroscope axes
 8004940:	2300      	movs	r3, #0
 8004942:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, PWR_MGMT_2, 1, &Data, 1, 1000);
 8004946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800494a:	9302      	str	r3, [sp, #8]
 800494c:	2301      	movs	r3, #1
 800494e:	9301      	str	r3, [sp, #4]
 8004950:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	2301      	movs	r3, #1
 8004958:	226c      	movs	r2, #108	@ 0x6c
 800495a:	21d0      	movs	r1, #208	@ 0xd0
 800495c:	6838      	ldr	r0, [r7, #0]
 800495e:	f7fd f9c3 	bl	8001ce8 <HAL_I2C_Mem_Write>
	  HAL_Delay(50);
 8004962:	2032      	movs	r0, #50	@ 0x32
 8004964:	f7fc fc16 	bl	8001194 <HAL_Delay>

	  // Configure DLPF first (affects sample rate)
	  MPU6050_Configure_DLPF(hi2c1, 0x03); // 42Hz bandwidth instead of 0x01
 8004968:	2103      	movs	r1, #3
 800496a:	6838      	ldr	r0, [r7, #0]
 800496c:	f000 f87c 	bl	8004a68 <MPU6050_Configure_DLPF>

	  // Set sample rate: Sample Rate = 1kHz / (1 + SMPLRT_DIV)
	  // For 100Hz: SMPLRT_DIV = 9
	  Data = 0x09; // 100Hz sample rate
 8004970:	2309      	movs	r3, #9
 8004972:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, SMPLRT_DIV, 1, &Data, 1, 1000);
 8004976:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800497a:	9302      	str	r3, [sp, #8]
 800497c:	2301      	movs	r3, #1
 800497e:	9301      	str	r3, [sp, #4]
 8004980:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	2301      	movs	r3, #1
 8004988:	2219      	movs	r2, #25
 800498a:	21d0      	movs	r1, #208	@ 0xd0
 800498c:	6838      	ldr	r0, [r7, #0]
 800498e:	f7fd f9ab 	bl	8001ce8 <HAL_I2C_Mem_Write>

	  // Set accelerometer configuration in ACCEL_CONFIG Register
	  Data = 0x00;  // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> <strong>±</strong> 2g
 8004992:	2300      	movs	r3, #0
 8004994:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8004998:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800499c:	9302      	str	r3, [sp, #8]
 800499e:	2301      	movs	r3, #1
 80049a0:	9301      	str	r3, [sp, #4]
 80049a2:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	2301      	movs	r3, #1
 80049aa:	221c      	movs	r2, #28
 80049ac:	21d0      	movs	r1, #208	@ 0xd0
 80049ae:	6838      	ldr	r0, [r7, #0]
 80049b0:	f7fd f99a 	bl	8001ce8 <HAL_I2C_Mem_Write>

	  // Set Gyroscopic configuration in GYRO_CONFIG Register
	  Data = 0x00;  // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> <strong>±</strong> 250 ̐/s
 80049b4:	2300      	movs	r3, #0
 80049b6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80049ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049be:	9302      	str	r3, [sp, #8]
 80049c0:	2301      	movs	r3, #1
 80049c2:	9301      	str	r3, [sp, #4]
 80049c4:	f107 035e 	add.w	r3, r7, #94	@ 0x5e
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	2301      	movs	r3, #1
 80049cc:	221b      	movs	r2, #27
 80049ce:	21d0      	movs	r1, #208	@ 0xd0
 80049d0:	6838      	ldr	r0, [r7, #0]
 80049d2:	f7fd f989 	bl	8001ce8 <HAL_I2C_Mem_Write>

	  for (int i = 0; i < 3; i++){
 80049d6:	2300      	movs	r3, #0
 80049d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80049da:	e00b      	b.n	80049f4 <MPU6050_Init+0x14c>
		  mpu6050.accelerometer.scaleXYZ[i] = LSB_SENSITIVITY_ACC_DEFAULT;
 80049dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049de:	3306      	adds	r3, #6
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	3368      	adds	r3, #104	@ 0x68
 80049e4:	443b      	add	r3, r7
 80049e6:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 80049ea:	f843 2c5c 	str.w	r2, [r3, #-92]
	  for (int i = 0; i < 3; i++){
 80049ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049f0:	3301      	adds	r3, #1
 80049f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80049f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	ddf0      	ble.n	80049dc <MPU6050_Init+0x134>
	  }

	  for (int i = 0; i < 3; i++){
 80049fa:	2300      	movs	r3, #0
 80049fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80049fe:	e00a      	b.n	8004a16 <MPU6050_Init+0x16e>
		  mpu6050.gyroscope.scaleXYZ[i] = LSB_SENSITIVITY_GYRO_DEFAULT;
 8004a00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a02:	330e      	adds	r3, #14
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	3368      	adds	r3, #104	@ 0x68
 8004a08:	443b      	add	r3, r7
 8004a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a34 <MPU6050_Init+0x18c>)
 8004a0c:	f843 2c58 	str.w	r2, [r3, #-88]
	  for (int i = 0; i < 3; i++){
 8004a10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a12:	3301      	adds	r3, #1
 8004a14:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	ddf1      	ble.n	8004a00 <MPU6050_Init+0x158>
	  }

  }
   return mpu6050;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f107 030c 	add.w	r3, r7, #12
 8004a24:	2250      	movs	r2, #80	@ 0x50
 8004a26:	4619      	mov	r1, r3
 8004a28:	f001 fc7d 	bl	8006326 <memcpy>
}
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	3768      	adds	r7, #104	@ 0x68
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	43030000 	.word	0x43030000

08004a38 <MPU6050_Set_Accel_Offset_Scale>:
	}
}

// For six point calibration.
// Note: scale is the same as for sensitivity calibration. Generally this function is for purpose when user want to put different scales on each axis
void MPU6050_Set_Accel_Offset_Scale (mpu6050_t *mpu6050, float* offsetXYZ, float* scaleXYZ) {
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
	memcpy(mpu6050->accelerometer.offsetXYZ, offsetXYZ, 3*sizeof(float));
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	330c      	adds	r3, #12
 8004a48:	220c      	movs	r2, #12
 8004a4a:	68b9      	ldr	r1, [r7, #8]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f001 fc6a 	bl	8006326 <memcpy>
	memcpy(mpu6050->accelerometer.scaleXYZ, scaleXYZ, 3*sizeof(float));
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	3318      	adds	r3, #24
 8004a56:	220c      	movs	r2, #12
 8004a58:	6879      	ldr	r1, [r7, #4]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f001 fc63 	bl	8006326 <memcpy>
}
 8004a60:	bf00      	nop
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <MPU6050_Configure_DLPF>:
	memcpy(mpu6050->gyroscope.offsetXYZ, offsetXYZ, 3*sizeof(float));
	memcpy(mpu6050->gyroscope.scaleXYZ, scaleXYZ, 3*sizeof(float));
}

void MPU6050_Configure_DLPF(I2C_HandleTypeDef *hi2c1, uint8_t dlpf_value)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af04      	add	r7, sp, #16
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	70fb      	strb	r3, [r7, #3]
    // Configure DLPF - Register 0x1A (CONFIG)
    // dlpf_value: 1=188Hz, 2=98Hz, 3=42Hz, 4=20Hz, 5=10Hz, 6=5Hz
    HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, CONFIG, 1, &dlpf_value, 1, 1000);
 8004a74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a78:	9302      	str	r3, [sp, #8]
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	9301      	str	r3, [sp, #4]
 8004a7e:	1cfb      	adds	r3, r7, #3
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	2301      	movs	r3, #1
 8004a84:	221a      	movs	r2, #26
 8004a86:	21d0      	movs	r1, #208	@ 0xd0
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7fd f92d 	bl	8001ce8 <HAL_I2C_Mem_Write>
}
 8004a8e:	bf00      	nop
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <MPU6050_Reset_FIFO>:

void MPU6050_Reset_FIFO(mpu6050_t *mpu6050) {
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b088      	sub	sp, #32
 8004a9a:	af04      	add	r7, sp, #16
 8004a9c:	6078      	str	r0, [r7, #4]
    uint8_t current_value = 0x00;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	72fb      	strb	r3, [r7, #11]
    I2C_HandleTypeDef* hi2c1 = mpu6050->_I2C;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aa6:	60fb      	str	r3, [r7, #12]
    // Read current USER_CTRL register
    HAL_I2C_Mem_Read(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 8004aa8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004aac:	9302      	str	r3, [sp, #8]
 8004aae:	2301      	movs	r3, #1
 8004ab0:	9301      	str	r3, [sp, #4]
 8004ab2:	f107 030b 	add.w	r3, r7, #11
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	2301      	movs	r3, #1
 8004aba:	226a      	movs	r2, #106	@ 0x6a
 8004abc:	21d0      	movs	r1, #208	@ 0xd0
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f7fd fa0c 	bl	8001edc <HAL_I2C_Mem_Read>

    // Disable FIFO
    // In that way we remember what registers were on previously and "switch" only one bit
    current_value &= ~0x40; // Clear FIFO_EN bit
 8004ac4:	7afb      	ldrb	r3, [r7, #11]
 8004ac6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 8004ace:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ad2:	9302      	str	r3, [sp, #8]
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	9301      	str	r3, [sp, #4]
 8004ad8:	f107 030b 	add.w	r3, r7, #11
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	2301      	movs	r3, #1
 8004ae0:	226a      	movs	r2, #106	@ 0x6a
 8004ae2:	21d0      	movs	r1, #208	@ 0xd0
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f7fd f8ff 	bl	8001ce8 <HAL_I2C_Mem_Write>
    HAL_Delay(1);
 8004aea:	2001      	movs	r0, #1
 8004aec:	f7fc fb52 	bl	8001194 <HAL_Delay>

    // Reset FIFO
    current_value |= 0x04; // Set FIFO_RESET bit
 8004af0:	7afb      	ldrb	r3, [r7, #11]
 8004af2:	f043 0304 	orr.w	r3, r3, #4
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 8004afa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004afe:	9302      	str	r3, [sp, #8]
 8004b00:	2301      	movs	r3, #1
 8004b02:	9301      	str	r3, [sp, #4]
 8004b04:	f107 030b 	add.w	r3, r7, #11
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	226a      	movs	r2, #106	@ 0x6a
 8004b0e:	21d0      	movs	r1, #208	@ 0xd0
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f7fd f8e9 	bl	8001ce8 <HAL_I2C_Mem_Write>
    HAL_Delay(1);
 8004b16:	2001      	movs	r0, #1
 8004b18:	f7fc fb3c 	bl	8001194 <HAL_Delay>

    // Clear reset bit and re-enable FIFO
    // Here after we reseted FIFO we set this bit to 0 again but "remembering"  what value was stored
    current_value &= ~0x04; // Clear FIFO_RESET bit
 8004b1c:	7afb      	ldrb	r3, [r7, #11]
 8004b1e:	f023 0304 	bic.w	r3, r3, #4
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	72fb      	strb	r3, [r7, #11]
    current_value |= 0x40;  // Set FIFO_EN bit
 8004b26:	7afb      	ldrb	r3, [r7, #11]
 8004b28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 8004b30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b34:	9302      	str	r3, [sp, #8]
 8004b36:	2301      	movs	r3, #1
 8004b38:	9301      	str	r3, [sp, #4]
 8004b3a:	f107 030b 	add.w	r3, r7, #11
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	2301      	movs	r3, #1
 8004b42:	226a      	movs	r2, #106	@ 0x6a
 8004b44:	21d0      	movs	r1, #208	@ 0xd0
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f7fd f8ce 	bl	8001ce8 <HAL_I2C_Mem_Write>
}
 8004b4c:	bf00      	nop
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <MPU6050_Enable_FIFO>:
	float Gz = ((float)Gyro_Z_RAW - mpu6050->gyroscope.offsetXYZ[2])/mpu6050->gyroscope.scaleXYZ[2];
	mpu6050->gyroscope.Gxyz[2] = Gz;
	return Gz;
}

void MPU6050_Enable_FIFO(mpu6050_t *mpu6050) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af04      	add	r7, sp, #16
 8004b5a:	6078      	str	r0, [r7, #4]
	I2C_HandleTypeDef* hi2c1 = mpu6050->_I2C;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b60:	60fb      	str	r3, [r7, #12]
    uint8_t current_value;
    // Read current USER_CTRL register value
    HAL_I2C_Mem_Read(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 8004b62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b66:	9302      	str	r3, [sp, #8]
 8004b68:	2301      	movs	r3, #1
 8004b6a:	9301      	str	r3, [sp, #4]
 8004b6c:	f107 030b 	add.w	r3, r7, #11
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	2301      	movs	r3, #1
 8004b74:	226a      	movs	r2, #106	@ 0x6a
 8004b76:	21d0      	movs	r1, #208	@ 0xd0
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f7fd f9af 	bl	8001edc <HAL_I2C_Mem_Read>

    // Set FIFO_EN bit (bit 6) while preserving other bits
    current_value |= 0x40;
 8004b7e:	7afb      	ldrb	r3, [r7, #11]
 8004b80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 8004b88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b8c:	9302      	str	r3, [sp, #8]
 8004b8e:	2301      	movs	r3, #1
 8004b90:	9301      	str	r3, [sp, #4]
 8004b92:	f107 030b 	add.w	r3, r7, #11
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	2301      	movs	r3, #1
 8004b9a:	226a      	movs	r2, #106	@ 0x6a
 8004b9c:	21d0      	movs	r1, #208	@ 0xd0
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f7fd f8a2 	bl	8001ce8 <HAL_I2C_Mem_Write>
}
 8004ba4:	bf00      	nop
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <MPU6050_configure_Fifo>:

void MPU6050_configure_Fifo (mpu6050_t *mpu6050) // temperature is first 1, next 111 is enable gyroscope from Gx to Gz, and last 1 is for acceleration (000 is about i2c slaves - not relevant in my case)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af04      	add	r7, sp, #16
 8004bb2:	6078      	str	r0, [r7, #4]
	I2C_HandleTypeDef* hi2c1 = mpu6050->_I2C;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bb8:	60fb      	str	r3, [r7, #12]
	uint8_t Data = 0xF8; // To enable fifo on Temperature, gyro and accel (1111 1000)
 8004bba:	23f8      	movs	r3, #248	@ 0xf8
 8004bbc:	72fb      	strb	r3, [r7, #11]
	// If want to change Data to read different in FIFO DON'T FORGET to change FIFO_SAMPLE_SIZE in mpu6050.h
	HAL_I2C_Mem_Write (hi2c1, MPU6050_ADDR, FIFO_ENABLE, 1, &Data, 1, 1000); // 1 byte to transmit
 8004bbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004bc2:	9302      	str	r3, [sp, #8]
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	9301      	str	r3, [sp, #4]
 8004bc8:	f107 030b 	add.w	r3, r7, #11
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	2301      	movs	r3, #1
 8004bd0:	2223      	movs	r2, #35	@ 0x23
 8004bd2:	21d0      	movs	r1, #208	@ 0xd0
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f7fd f887 	bl	8001ce8 <HAL_I2C_Mem_Write>
}
 8004bda:	bf00      	nop
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <MPU6050_Get_FIFO_Count>:

uint16_t MPU6050_Get_FIFO_Count (mpu6050_t *mpu6050)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b088      	sub	sp, #32
 8004be6:	af04      	add	r7, sp, #16
 8004be8:	6078      	str	r0, [r7, #4]
	I2C_HandleTypeDef* hi2c1 = mpu6050->_I2C;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bee:	60fb      	str	r3, [r7, #12]
    uint8_t Data_H, Data_L;
    uint16_t FIFO_Count;

    // Read FIFO_COUNT_H first (this updates both registers)
    HAL_I2C_Mem_Read(hi2c1, MPU6050_ADDR, FIFO_COUNT_H, 1, &Data_H, 1, 1000);
 8004bf0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004bf4:	9302      	str	r3, [sp, #8]
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	9301      	str	r3, [sp, #4]
 8004bfa:	f107 0309 	add.w	r3, r7, #9
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	2301      	movs	r3, #1
 8004c02:	2272      	movs	r2, #114	@ 0x72
 8004c04:	21d0      	movs	r1, #208	@ 0xd0
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f7fd f968 	bl	8001edc <HAL_I2C_Mem_Read>
    // Then read FIFO_COUNT_L
    HAL_I2C_Mem_Read(hi2c1, MPU6050_ADDR, FIFO_COUNT_L, 1, &Data_L, 1, 1000);
 8004c0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c10:	9302      	str	r3, [sp, #8]
 8004c12:	2301      	movs	r3, #1
 8004c14:	9301      	str	r3, [sp, #4]
 8004c16:	f107 0308 	add.w	r3, r7, #8
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	2273      	movs	r2, #115	@ 0x73
 8004c20:	21d0      	movs	r1, #208	@ 0xd0
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f7fd f95a 	bl	8001edc <HAL_I2C_Mem_Read>

    FIFO_Count = (Data_H << 8) | Data_L; // same trick with assembling data from low and high register
 8004c28:	7a7b      	ldrb	r3, [r7, #9]
 8004c2a:	b21b      	sxth	r3, r3
 8004c2c:	021b      	lsls	r3, r3, #8
 8004c2e:	b21a      	sxth	r2, r3
 8004c30:	7a3b      	ldrb	r3, [r7, #8]
 8004c32:	b21b      	sxth	r3, r3
 8004c34:	4313      	orrs	r3, r2
 8004c36:	b21b      	sxth	r3, r3
 8004c38:	817b      	strh	r3, [r7, #10]
    return FIFO_Count;
 8004c3a:	897b      	ldrh	r3, [r7, #10]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <MPU6050_Read_Fifo>:

void MPU6050_Read_Fifo(mpu6050_t *mpu6050) {
 8004c44:	b590      	push	{r4, r7, lr}
 8004c46:	b095      	sub	sp, #84	@ 0x54
 8004c48:	af04      	add	r7, sp, #16
 8004c4a:	6078      	str	r0, [r7, #4]
	I2C_HandleTypeDef* hi2c1 = mpu6050->_I2C;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c50:	62fb      	str	r3, [r7, #44]	@ 0x2c

    uint8_t fifo_buffer[FIFO_SAMPLE_SIZE];
    uint16_t fifo_count = MPU6050_Get_FIFO_Count(mpu6050);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff ffc5 	bl	8004be2 <MPU6050_Get_FIFO_Count>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    int16_t raw_data[FIFO_SAMPLE_SIZE / 2];
    // Check for FIFO overflow
    if (fifo_count >= 1024) {
 8004c5c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c62:	d306      	bcc.n	8004c72 <MPU6050_Read_Fifo+0x2e>
        MPU6050_Reset_FIFO(mpu6050);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff ff16 	bl	8004a96 <MPU6050_Reset_FIFO>
        HAL_Delay(100); // Allow time for new data
 8004c6a:	2064      	movs	r0, #100	@ 0x64
 8004c6c:	f7fc fa92 	bl	8001194 <HAL_Delay>
 8004c70:	e0b1      	b.n	8004dd6 <MPU6050_Read_Fifo+0x192>
        return;
    }

    // Only read if we have at least one complete sample
    if (fifo_count >= FIFO_SAMPLE_SIZE) {
 8004c72:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004c74:	2b0d      	cmp	r3, #13
 8004c76:	f240 80ae 	bls.w	8004dd6 <MPU6050_Read_Fifo+0x192>
        // Read multiple samples if available to prevent overflow
        while (fifo_count >= FIFO_SAMPLE_SIZE && fifo_count < 1024) {
 8004c7a:	e0a4      	b.n	8004dc6 <MPU6050_Read_Fifo+0x182>
            HAL_I2C_Mem_Read(hi2c1, MPU6050_ADDR, FIFO_R_W, 1,
 8004c7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c80:	9302      	str	r3, [sp, #8]
 8004c82:	230e      	movs	r3, #14
 8004c84:	9301      	str	r3, [sp, #4]
 8004c86:	f107 031c 	add.w	r3, r7, #28
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	2274      	movs	r2, #116	@ 0x74
 8004c90:	21d0      	movs	r1, #208	@ 0xd0
 8004c92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c94:	f7fd f922 	bl	8001edc <HAL_I2C_Mem_Read>
                           fifo_buffer, FIFO_SAMPLE_SIZE, 1000);

            // Process the data (your existing processing code)
            for (int i = 0; i < FIFO_SAMPLE_SIZE / 2; i++) {
 8004c98:	2300      	movs	r3, #0
 8004c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c9c:	e01b      	b.n	8004cd6 <MPU6050_Read_Fifo+0x92>
                raw_data[i] = (int16_t)((fifo_buffer[2 * i] << 8) |
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	3340      	adds	r3, #64	@ 0x40
 8004ca4:	443b      	add	r3, r7
 8004ca6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004caa:	b21b      	sxth	r3, r3
 8004cac:	021b      	lsls	r3, r3, #8
 8004cae:	b21a      	sxth	r2, r3
                                      fifo_buffer[2 * i + 1]);
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	3340      	adds	r3, #64	@ 0x40
 8004cb8:	443b      	add	r3, r7
 8004cba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004cbe:	b21b      	sxth	r3, r3
                raw_data[i] = (int16_t)((fifo_buffer[2 * i] << 8) |
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	b21a      	sxth	r2, r3
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	3340      	adds	r3, #64	@ 0x40
 8004cca:	443b      	add	r3, r7
 8004ccc:	f823 2c34 	strh.w	r2, [r3, #-52]
            for (int i = 0; i < FIFO_SAMPLE_SIZE / 2; i++) {
 8004cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd8:	2b06      	cmp	r3, #6
 8004cda:	dde0      	ble.n	8004c9e <MPU6050_Read_Fifo+0x5a>
            }

            for (int i = 0; i < 3; i++) {
 8004cdc:	2300      	movs	r3, #0
 8004cde:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ce0:	e024      	b.n	8004d2c <MPU6050_Read_Fifo+0xe8>
            	mpu6050->accelerometer.Axyz[i] = ((float)raw_data[i] - mpu6050->accelerometer.offsetXYZ[i]) / mpu6050->accelerometer.scaleXYZ[i];
 8004ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	3340      	adds	r3, #64	@ 0x40
 8004ce8:	443b      	add	r3, r7
 8004cea:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fb ffd4 	bl	8000c9c <__aeabi_i2f>
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cf8:	3302      	adds	r3, #2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	4619      	mov	r1, r3
 8004d02:	f7fb ff15 	bl	8000b30 <__aeabi_fsub>
 8004d06:	4603      	mov	r3, r0
 8004d08:	4618      	mov	r0, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d0e:	3206      	adds	r2, #6
 8004d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d14:	4619      	mov	r1, r3
 8004d16:	f7fc f8c9 	bl	8000eac <__aeabi_fdiv>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (int i = 0; i < 3; i++) {
 8004d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d28:	3301      	adds	r3, #1
 8004d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	ddd7      	ble.n	8004ce2 <MPU6050_Read_Fifo+0x9e>
            }

            mpu6050->temperature      = ((float)raw_data[3] / 340.0f) + 36.53f;
 8004d32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fb ffb0 	bl	8000c9c <__aeabi_i2f>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	4927      	ldr	r1, [pc, #156]	@ (8004ddc <MPU6050_Read_Fifo+0x198>)
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fc f8b3 	bl	8000eac <__aeabi_fdiv>
 8004d46:	4603      	mov	r3, r0
 8004d48:	4925      	ldr	r1, [pc, #148]	@ (8004de0 <MPU6050_Read_Fifo+0x19c>)
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fb fef2 	bl	8000b34 <__addsf3>
 8004d50:	4603      	mov	r3, r0
 8004d52:	461a      	mov	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	649a      	str	r2, [r3, #72]	@ 0x48

            for (int i = 4; i < 7; i++) {
 8004d58:	2304      	movs	r3, #4
 8004d5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d5c:	e02b      	b.n	8004db6 <MPU6050_Read_Fifo+0x172>
            	// "[i-4]" due to i beginning from 4 and offsetXYZ being size of 3 float elements
            	mpu6050->gyroscope.Gxyz[i - 4] = ((float)raw_data[i]- mpu6050->gyroscope.offsetXYZ[i - 4])/mpu6050->gyroscope.scaleXYZ[i - 4];
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	3340      	adds	r3, #64	@ 0x40
 8004d64:	443b      	add	r3, r7
 8004d66:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fb ff96 	bl	8000c9c <__aeabi_i2f>
 8004d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d72:	3b04      	subs	r3, #4
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	330a      	adds	r3, #10
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	4619      	mov	r1, r3
 8004d80:	f7fb fed6 	bl	8000b30 <__aeabi_fsub>
 8004d84:	4603      	mov	r3, r0
 8004d86:	4618      	mov	r0, r3
 8004d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8a:	3b04      	subs	r3, #4
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	330e      	adds	r3, #14
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d98:	1f1c      	subs	r4, r3, #4
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	f7fc f886 	bl	8000eac <__aeabi_fdiv>
 8004da0:	4603      	mov	r3, r0
 8004da2:	4619      	mov	r1, r3
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	f104 0308 	add.w	r3, r4, #8
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	6059      	str	r1, [r3, #4]
            for (int i = 4; i < 7; i++) {
 8004db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db2:	3301      	adds	r3, #1
 8004db4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db8:	2b06      	cmp	r3, #6
 8004dba:	ddd0      	ble.n	8004d5e <MPU6050_Read_Fifo+0x11a>
            }


            // Check remaining FIFO count
            fifo_count = MPU6050_Get_FIFO_Count(mpu6050);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff ff10 	bl	8004be2 <MPU6050_Get_FIFO_Count>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        while (fifo_count >= FIFO_SAMPLE_SIZE && fifo_count < 1024) {
 8004dc6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004dc8:	2b0d      	cmp	r3, #13
 8004dca:	d904      	bls.n	8004dd6 <MPU6050_Read_Fifo+0x192>
 8004dcc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dd2:	f4ff af53 	bcc.w	8004c7c <MPU6050_Read_Fifo+0x38>
        }
    }
}
 8004dd6:	3744      	adds	r7, #68	@ 0x44
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd90      	pop	{r4, r7, pc}
 8004ddc:	43aa0000 	.word	0x43aa0000
 8004de0:	42121eb8 	.word	0x42121eb8

08004de4 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8004dea:	f000 fa17 	bl	800521c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8004dee:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8004df2:	2201      	movs	r2, #1
 8004df4:	2178      	movs	r1, #120	@ 0x78
 8004df6:	4858      	ldr	r0, [pc, #352]	@ (8004f58 <SSD1306_Init+0x174>)
 8004df8:	f7fd fae4 	bl	80023c4 <HAL_I2C_IsDeviceReady>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	e0a4      	b.n	8004f50 <SSD1306_Init+0x16c>
	}

	/* A little delay */
	uint32_t p = 2500;
 8004e06:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8004e0a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004e0c:	e002      	b.n	8004e14 <SSD1306_Init+0x30>
		p--;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3b01      	subs	r3, #1
 8004e12:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f9      	bne.n	8004e0e <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8004e1a:	22ae      	movs	r2, #174	@ 0xae
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	2078      	movs	r0, #120	@ 0x78
 8004e20:	f000 fa6c 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8004e24:	2220      	movs	r2, #32
 8004e26:	2100      	movs	r1, #0
 8004e28:	2078      	movs	r0, #120	@ 0x78
 8004e2a:	f000 fa67 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8004e2e:	2210      	movs	r2, #16
 8004e30:	2100      	movs	r1, #0
 8004e32:	2078      	movs	r0, #120	@ 0x78
 8004e34:	f000 fa62 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004e38:	22b0      	movs	r2, #176	@ 0xb0
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	2078      	movs	r0, #120	@ 0x78
 8004e3e:	f000 fa5d 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8004e42:	22c8      	movs	r2, #200	@ 0xc8
 8004e44:	2100      	movs	r1, #0
 8004e46:	2078      	movs	r0, #120	@ 0x78
 8004e48:	f000 fa58 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2100      	movs	r1, #0
 8004e50:	2078      	movs	r0, #120	@ 0x78
 8004e52:	f000 fa53 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8004e56:	2210      	movs	r2, #16
 8004e58:	2100      	movs	r1, #0
 8004e5a:	2078      	movs	r0, #120	@ 0x78
 8004e5c:	f000 fa4e 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8004e60:	2240      	movs	r2, #64	@ 0x40
 8004e62:	2100      	movs	r1, #0
 8004e64:	2078      	movs	r0, #120	@ 0x78
 8004e66:	f000 fa49 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8004e6a:	2281      	movs	r2, #129	@ 0x81
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	2078      	movs	r0, #120	@ 0x78
 8004e70:	f000 fa44 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8004e74:	22ff      	movs	r2, #255	@ 0xff
 8004e76:	2100      	movs	r1, #0
 8004e78:	2078      	movs	r0, #120	@ 0x78
 8004e7a:	f000 fa3f 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8004e7e:	22a1      	movs	r2, #161	@ 0xa1
 8004e80:	2100      	movs	r1, #0
 8004e82:	2078      	movs	r0, #120	@ 0x78
 8004e84:	f000 fa3a 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8004e88:	22a6      	movs	r2, #166	@ 0xa6
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	2078      	movs	r0, #120	@ 0x78
 8004e8e:	f000 fa35 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8004e92:	22a8      	movs	r2, #168	@ 0xa8
 8004e94:	2100      	movs	r1, #0
 8004e96:	2078      	movs	r0, #120	@ 0x78
 8004e98:	f000 fa30 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8004e9c:	223f      	movs	r2, #63	@ 0x3f
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	2078      	movs	r0, #120	@ 0x78
 8004ea2:	f000 fa2b 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004ea6:	22a4      	movs	r2, #164	@ 0xa4
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	2078      	movs	r0, #120	@ 0x78
 8004eac:	f000 fa26 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8004eb0:	22d3      	movs	r2, #211	@ 0xd3
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	2078      	movs	r0, #120	@ 0x78
 8004eb6:	f000 fa21 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	2078      	movs	r0, #120	@ 0x78
 8004ec0:	f000 fa1c 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8004ec4:	22d5      	movs	r2, #213	@ 0xd5
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	2078      	movs	r0, #120	@ 0x78
 8004eca:	f000 fa17 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8004ece:	22f0      	movs	r2, #240	@ 0xf0
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	2078      	movs	r0, #120	@ 0x78
 8004ed4:	f000 fa12 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8004ed8:	22d9      	movs	r2, #217	@ 0xd9
 8004eda:	2100      	movs	r1, #0
 8004edc:	2078      	movs	r0, #120	@ 0x78
 8004ede:	f000 fa0d 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8004ee2:	2222      	movs	r2, #34	@ 0x22
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	2078      	movs	r0, #120	@ 0x78
 8004ee8:	f000 fa08 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8004eec:	22da      	movs	r2, #218	@ 0xda
 8004eee:	2100      	movs	r1, #0
 8004ef0:	2078      	movs	r0, #120	@ 0x78
 8004ef2:	f000 fa03 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8004ef6:	2212      	movs	r2, #18
 8004ef8:	2100      	movs	r1, #0
 8004efa:	2078      	movs	r0, #120	@ 0x78
 8004efc:	f000 f9fe 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8004f00:	22db      	movs	r2, #219	@ 0xdb
 8004f02:	2100      	movs	r1, #0
 8004f04:	2078      	movs	r0, #120	@ 0x78
 8004f06:	f000 f9f9 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	2078      	movs	r0, #120	@ 0x78
 8004f10:	f000 f9f4 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8004f14:	228d      	movs	r2, #141	@ 0x8d
 8004f16:	2100      	movs	r1, #0
 8004f18:	2078      	movs	r0, #120	@ 0x78
 8004f1a:	f000 f9ef 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8004f1e:	2214      	movs	r2, #20
 8004f20:	2100      	movs	r1, #0
 8004f22:	2078      	movs	r0, #120	@ 0x78
 8004f24:	f000 f9ea 	bl	80052fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8004f28:	22af      	movs	r2, #175	@ 0xaf
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	2078      	movs	r0, #120	@ 0x78
 8004f2e:	f000 f9e5 	bl	80052fc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8004f32:	2000      	movs	r0, #0
 8004f34:	f000 f842 	bl	8004fbc <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8004f38:	f000 f812 	bl	8004f60 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8004f3c:	4b07      	ldr	r3, [pc, #28]	@ (8004f5c <SSD1306_Init+0x178>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8004f42:	4b06      	ldr	r3, [pc, #24]	@ (8004f5c <SSD1306_Init+0x178>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8004f48:	4b04      	ldr	r3, [pc, #16]	@ (8004f5c <SSD1306_Init+0x178>)
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8004f4e:	2301      	movs	r3, #1
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	200001fc 	.word	0x200001fc
 8004f5c:	20000698 	.word	0x20000698

08004f60 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8004f66:	2300      	movs	r3, #0
 8004f68:	71fb      	strb	r3, [r7, #7]
 8004f6a:	e01d      	b.n	8004fa8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8004f6c:	79fb      	ldrb	r3, [r7, #7]
 8004f6e:	3b50      	subs	r3, #80	@ 0x50
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	461a      	mov	r2, r3
 8004f74:	2100      	movs	r1, #0
 8004f76:	2078      	movs	r0, #120	@ 0x78
 8004f78:	f000 f9c0 	bl	80052fc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2100      	movs	r1, #0
 8004f80:	2078      	movs	r0, #120	@ 0x78
 8004f82:	f000 f9bb 	bl	80052fc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8004f86:	2210      	movs	r2, #16
 8004f88:	2100      	movs	r1, #0
 8004f8a:	2078      	movs	r0, #120	@ 0x78
 8004f8c:	f000 f9b6 	bl	80052fc <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	01db      	lsls	r3, r3, #7
 8004f94:	4a08      	ldr	r2, [pc, #32]	@ (8004fb8 <SSD1306_UpdateScreen+0x58>)
 8004f96:	441a      	add	r2, r3
 8004f98:	2380      	movs	r3, #128	@ 0x80
 8004f9a:	2140      	movs	r1, #64	@ 0x40
 8004f9c:	2078      	movs	r0, #120	@ 0x78
 8004f9e:	f000 f951 	bl	8005244 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8004fa2:	79fb      	ldrb	r3, [r7, #7]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	71fb      	strb	r3, [r7, #7]
 8004fa8:	79fb      	ldrb	r3, [r7, #7]
 8004faa:	2b07      	cmp	r3, #7
 8004fac:	d9de      	bls.n	8004f6c <SSD1306_UpdateScreen+0xc>
	}
}
 8004fae:	bf00      	nop
 8004fb0:	bf00      	nop
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	20000298 	.word	0x20000298

08004fbc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004fc6:	79fb      	ldrb	r3, [r7, #7]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <SSD1306_Fill+0x14>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	e000      	b.n	8004fd2 <SSD1306_Fill+0x16>
 8004fd0:	23ff      	movs	r3, #255	@ 0xff
 8004fd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	4803      	ldr	r0, [pc, #12]	@ (8004fe8 <SSD1306_Fill+0x2c>)
 8004fda:	f001 f916 	bl	800620a <memset>
}
 8004fde:	bf00      	nop
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000298 	.word	0x20000298

08004fec <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	80fb      	strh	r3, [r7, #6]
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	80bb      	strh	r3, [r7, #4]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	70fb      	strb	r3, [r7, #3]
	if (
 8004ffe:	88fb      	ldrh	r3, [r7, #6]
 8005000:	2b7f      	cmp	r3, #127	@ 0x7f
 8005002:	d848      	bhi.n	8005096 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8005004:	88bb      	ldrh	r3, [r7, #4]
 8005006:	2b3f      	cmp	r3, #63	@ 0x3f
 8005008:	d845      	bhi.n	8005096 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800500a:	4b25      	ldr	r3, [pc, #148]	@ (80050a0 <SSD1306_DrawPixel+0xb4>)
 800500c:	791b      	ldrb	r3, [r3, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d006      	beq.n	8005020 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8005012:	78fb      	ldrb	r3, [r7, #3]
 8005014:	2b00      	cmp	r3, #0
 8005016:	bf0c      	ite	eq
 8005018:	2301      	moveq	r3, #1
 800501a:	2300      	movne	r3, #0
 800501c:	b2db      	uxtb	r3, r3
 800501e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8005020:	78fb      	ldrb	r3, [r7, #3]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d11a      	bne.n	800505c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005026:	88fa      	ldrh	r2, [r7, #6]
 8005028:	88bb      	ldrh	r3, [r7, #4]
 800502a:	08db      	lsrs	r3, r3, #3
 800502c:	b298      	uxth	r0, r3
 800502e:	4603      	mov	r3, r0
 8005030:	01db      	lsls	r3, r3, #7
 8005032:	4413      	add	r3, r2
 8005034:	4a1b      	ldr	r2, [pc, #108]	@ (80050a4 <SSD1306_DrawPixel+0xb8>)
 8005036:	5cd3      	ldrb	r3, [r2, r3]
 8005038:	b25a      	sxtb	r2, r3
 800503a:	88bb      	ldrh	r3, [r7, #4]
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	2101      	movs	r1, #1
 8005042:	fa01 f303 	lsl.w	r3, r1, r3
 8005046:	b25b      	sxtb	r3, r3
 8005048:	4313      	orrs	r3, r2
 800504a:	b259      	sxtb	r1, r3
 800504c:	88fa      	ldrh	r2, [r7, #6]
 800504e:	4603      	mov	r3, r0
 8005050:	01db      	lsls	r3, r3, #7
 8005052:	4413      	add	r3, r2
 8005054:	b2c9      	uxtb	r1, r1
 8005056:	4a13      	ldr	r2, [pc, #76]	@ (80050a4 <SSD1306_DrawPixel+0xb8>)
 8005058:	54d1      	strb	r1, [r2, r3]
 800505a:	e01d      	b.n	8005098 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800505c:	88fa      	ldrh	r2, [r7, #6]
 800505e:	88bb      	ldrh	r3, [r7, #4]
 8005060:	08db      	lsrs	r3, r3, #3
 8005062:	b298      	uxth	r0, r3
 8005064:	4603      	mov	r3, r0
 8005066:	01db      	lsls	r3, r3, #7
 8005068:	4413      	add	r3, r2
 800506a:	4a0e      	ldr	r2, [pc, #56]	@ (80050a4 <SSD1306_DrawPixel+0xb8>)
 800506c:	5cd3      	ldrb	r3, [r2, r3]
 800506e:	b25a      	sxtb	r2, r3
 8005070:	88bb      	ldrh	r3, [r7, #4]
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	2101      	movs	r1, #1
 8005078:	fa01 f303 	lsl.w	r3, r1, r3
 800507c:	b25b      	sxtb	r3, r3
 800507e:	43db      	mvns	r3, r3
 8005080:	b25b      	sxtb	r3, r3
 8005082:	4013      	ands	r3, r2
 8005084:	b259      	sxtb	r1, r3
 8005086:	88fa      	ldrh	r2, [r7, #6]
 8005088:	4603      	mov	r3, r0
 800508a:	01db      	lsls	r3, r3, #7
 800508c:	4413      	add	r3, r2
 800508e:	b2c9      	uxtb	r1, r1
 8005090:	4a04      	ldr	r2, [pc, #16]	@ (80050a4 <SSD1306_DrawPixel+0xb8>)
 8005092:	54d1      	strb	r1, [r2, r3]
 8005094:	e000      	b.n	8005098 <SSD1306_DrawPixel+0xac>
		return;
 8005096:	bf00      	nop
	}
}
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	bc80      	pop	{r7}
 800509e:	4770      	bx	lr
 80050a0:	20000698 	.word	0x20000698
 80050a4:	20000298 	.word	0x20000298

080050a8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	460a      	mov	r2, r1
 80050b2:	80fb      	strh	r3, [r7, #6]
 80050b4:	4613      	mov	r3, r2
 80050b6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80050b8:	4a05      	ldr	r2, [pc, #20]	@ (80050d0 <SSD1306_GotoXY+0x28>)
 80050ba:	88fb      	ldrh	r3, [r7, #6]
 80050bc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80050be:	4a04      	ldr	r2, [pc, #16]	@ (80050d0 <SSD1306_GotoXY+0x28>)
 80050c0:	88bb      	ldrh	r3, [r7, #4]
 80050c2:	8053      	strh	r3, [r2, #2]
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bc80      	pop	{r7}
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	20000698 	.word	0x20000698

080050d4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	6039      	str	r1, [r7, #0]
 80050de:	71fb      	strb	r3, [r7, #7]
 80050e0:	4613      	mov	r3, r2
 80050e2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80050e4:	4b39      	ldr	r3, [pc, #228]	@ (80051cc <SSD1306_Putc+0xf8>)
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	461a      	mov	r2, r3
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	4413      	add	r3, r2
	if (
 80050f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80050f2:	dc07      	bgt.n	8005104 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80050f4:	4b35      	ldr	r3, [pc, #212]	@ (80051cc <SSD1306_Putc+0xf8>)
 80050f6:	885b      	ldrh	r3, [r3, #2]
 80050f8:	461a      	mov	r2, r3
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	785b      	ldrb	r3, [r3, #1]
 80050fe:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8005100:	2b3f      	cmp	r3, #63	@ 0x3f
 8005102:	dd01      	ble.n	8005108 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8005104:	2300      	movs	r3, #0
 8005106:	e05d      	b.n	80051c4 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8005108:	2300      	movs	r3, #0
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	e04b      	b.n	80051a6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	79fb      	ldrb	r3, [r7, #7]
 8005114:	3b20      	subs	r3, #32
 8005116:	6839      	ldr	r1, [r7, #0]
 8005118:	7849      	ldrb	r1, [r1, #1]
 800511a:	fb01 f303 	mul.w	r3, r1, r3
 800511e:	4619      	mov	r1, r3
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	440b      	add	r3, r1
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	4413      	add	r3, r2
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800512c:	2300      	movs	r3, #0
 800512e:	613b      	str	r3, [r7, #16]
 8005130:	e030      	b.n	8005194 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	fa02 f303 	lsl.w	r3, r2, r3
 800513a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d010      	beq.n	8005164 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8005142:	4b22      	ldr	r3, [pc, #136]	@ (80051cc <SSD1306_Putc+0xf8>)
 8005144:	881a      	ldrh	r2, [r3, #0]
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	b29b      	uxth	r3, r3
 800514a:	4413      	add	r3, r2
 800514c:	b298      	uxth	r0, r3
 800514e:	4b1f      	ldr	r3, [pc, #124]	@ (80051cc <SSD1306_Putc+0xf8>)
 8005150:	885a      	ldrh	r2, [r3, #2]
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	b29b      	uxth	r3, r3
 8005156:	4413      	add	r3, r2
 8005158:	b29b      	uxth	r3, r3
 800515a:	79ba      	ldrb	r2, [r7, #6]
 800515c:	4619      	mov	r1, r3
 800515e:	f7ff ff45 	bl	8004fec <SSD1306_DrawPixel>
 8005162:	e014      	b.n	800518e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8005164:	4b19      	ldr	r3, [pc, #100]	@ (80051cc <SSD1306_Putc+0xf8>)
 8005166:	881a      	ldrh	r2, [r3, #0]
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	b29b      	uxth	r3, r3
 800516c:	4413      	add	r3, r2
 800516e:	b298      	uxth	r0, r3
 8005170:	4b16      	ldr	r3, [pc, #88]	@ (80051cc <SSD1306_Putc+0xf8>)
 8005172:	885a      	ldrh	r2, [r3, #2]
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	b29b      	uxth	r3, r3
 8005178:	4413      	add	r3, r2
 800517a:	b299      	uxth	r1, r3
 800517c:	79bb      	ldrb	r3, [r7, #6]
 800517e:	2b00      	cmp	r3, #0
 8005180:	bf0c      	ite	eq
 8005182:	2301      	moveq	r3, #1
 8005184:	2300      	movne	r3, #0
 8005186:	b2db      	uxtb	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	f7ff ff2f 	bl	8004fec <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	3301      	adds	r3, #1
 8005192:	613b      	str	r3, [r7, #16]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	461a      	mov	r2, r3
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4293      	cmp	r3, r2
 800519e:	d3c8      	bcc.n	8005132 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	3301      	adds	r3, #1
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	785b      	ldrb	r3, [r3, #1]
 80051aa:	461a      	mov	r2, r3
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d3ad      	bcc.n	800510e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80051b2:	4b06      	ldr	r3, [pc, #24]	@ (80051cc <SSD1306_Putc+0xf8>)
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	7812      	ldrb	r2, [r2, #0]
 80051ba:	4413      	add	r3, r2
 80051bc:	b29a      	uxth	r2, r3
 80051be:	4b03      	ldr	r3, [pc, #12]	@ (80051cc <SSD1306_Putc+0xf8>)
 80051c0:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80051c2:	79fb      	ldrb	r3, [r7, #7]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	20000698 	.word	0x20000698

080051d0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	4613      	mov	r3, r2
 80051dc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80051de:	e012      	b.n	8005206 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	79fa      	ldrb	r2, [r7, #7]
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff ff73 	bl	80050d4 <SSD1306_Putc>
 80051ee:	4603      	mov	r3, r0
 80051f0:	461a      	mov	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d002      	beq.n	8005200 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	e008      	b.n	8005212 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3301      	adds	r3, #1
 8005204:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1e8      	bne.n	80051e0 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	781b      	ldrb	r3, [r3, #0]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8005222:	4b07      	ldr	r3, [pc, #28]	@ (8005240 <ssd1306_I2C_Init+0x24>)
 8005224:	607b      	str	r3, [r7, #4]
	while(p>0)
 8005226:	e002      	b.n	800522e <ssd1306_I2C_Init+0x12>
		p--;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3b01      	subs	r3, #1
 800522c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1f9      	bne.n	8005228 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr
 8005240:	0003d090 	.word	0x0003d090

08005244 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8005244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005248:	b089      	sub	sp, #36	@ 0x24
 800524a:	af02      	add	r7, sp, #8
 800524c:	603a      	str	r2, [r7, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	4603      	mov	r3, r0
 8005252:	71fb      	strb	r3, [r7, #7]
 8005254:	460b      	mov	r3, r1
 8005256:	71bb      	strb	r3, [r7, #6]
 8005258:	4613      	mov	r3, r2
 800525a:	80bb      	strh	r3, [r7, #4]
 800525c:	466b      	mov	r3, sp
 800525e:	461e      	mov	r6, r3
	uint8_t dt[count + 1];
 8005260:	88bb      	ldrh	r3, [r7, #4]
 8005262:	1c59      	adds	r1, r3, #1
 8005264:	1e4b      	subs	r3, r1, #1
 8005266:	613b      	str	r3, [r7, #16]
 8005268:	460a      	mov	r2, r1
 800526a:	2300      	movs	r3, #0
 800526c:	4690      	mov	r8, r2
 800526e:	4699      	mov	r9, r3
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800527c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005280:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005284:	460a      	mov	r2, r1
 8005286:	2300      	movs	r3, #0
 8005288:	4614      	mov	r4, r2
 800528a:	461d      	mov	r5, r3
 800528c:	f04f 0200 	mov.w	r2, #0
 8005290:	f04f 0300 	mov.w	r3, #0
 8005294:	00eb      	lsls	r3, r5, #3
 8005296:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800529a:	00e2      	lsls	r2, r4, #3
 800529c:	460b      	mov	r3, r1
 800529e:	3307      	adds	r3, #7
 80052a0:	08db      	lsrs	r3, r3, #3
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	ebad 0d03 	sub.w	sp, sp, r3
 80052a8:	ab02      	add	r3, sp, #8
 80052aa:	3300      	adds	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	79ba      	ldrb	r2, [r7, #6]
 80052b2:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 80052b4:	2301      	movs	r3, #1
 80052b6:	75fb      	strb	r3, [r7, #23]
 80052b8:	e00a      	b.n	80052d0 <ssd1306_I2C_WriteMulti+0x8c>
		dt[i] = data[i-1];
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
 80052bc:	3b01      	subs	r3, #1
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	441a      	add	r2, r3
 80052c2:	7dfb      	ldrb	r3, [r7, #23]
 80052c4:	7811      	ldrb	r1, [r2, #0]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 80052ca:	7dfb      	ldrb	r3, [r7, #23]
 80052cc:	3301      	adds	r3, #1
 80052ce:	75fb      	strb	r3, [r7, #23]
 80052d0:	7dfb      	ldrb	r3, [r7, #23]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	88ba      	ldrh	r2, [r7, #4]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d2ef      	bcs.n	80052ba <ssd1306_I2C_WriteMulti+0x76>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 80052da:	79fb      	ldrb	r3, [r7, #7]
 80052dc:	b299      	uxth	r1, r3
 80052de:	88bb      	ldrh	r3, [r7, #4]
 80052e0:	220a      	movs	r2, #10
 80052e2:	9200      	str	r2, [sp, #0]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4804      	ldr	r0, [pc, #16]	@ (80052f8 <ssd1306_I2C_WriteMulti+0xb4>)
 80052e8:	f7fc fc00 	bl	8001aec <HAL_I2C_Master_Transmit>
 80052ec:	46b5      	mov	sp, r6
}
 80052ee:	bf00      	nop
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052f8:	200001fc 	.word	0x200001fc

080052fc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af02      	add	r7, sp, #8
 8005302:	4603      	mov	r3, r0
 8005304:	71fb      	strb	r3, [r7, #7]
 8005306:	460b      	mov	r3, r1
 8005308:	71bb      	strb	r3, [r7, #6]
 800530a:	4613      	mov	r3, r2
 800530c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800530e:	79bb      	ldrb	r3, [r7, #6]
 8005310:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8005312:	797b      	ldrb	r3, [r7, #5]
 8005314:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8005316:	79fb      	ldrb	r3, [r7, #7]
 8005318:	b299      	uxth	r1, r3
 800531a:	f107 020c 	add.w	r2, r7, #12
 800531e:	230a      	movs	r3, #10
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	2302      	movs	r3, #2
 8005324:	4803      	ldr	r0, [pc, #12]	@ (8005334 <ssd1306_I2C_Write+0x38>)
 8005326:	f7fc fbe1 	bl	8001aec <HAL_I2C_Master_Transmit>
}
 800532a:	bf00      	nop
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	200001fc 	.word	0x200001fc

08005338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800533e:	4b15      	ldr	r3, [pc, #84]	@ (8005394 <HAL_MspInit+0x5c>)
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	4a14      	ldr	r2, [pc, #80]	@ (8005394 <HAL_MspInit+0x5c>)
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	6193      	str	r3, [r2, #24]
 800534a:	4b12      	ldr	r3, [pc, #72]	@ (8005394 <HAL_MspInit+0x5c>)
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	60bb      	str	r3, [r7, #8]
 8005354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005356:	4b0f      	ldr	r3, [pc, #60]	@ (8005394 <HAL_MspInit+0x5c>)
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	4a0e      	ldr	r2, [pc, #56]	@ (8005394 <HAL_MspInit+0x5c>)
 800535c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005360:	61d3      	str	r3, [r2, #28]
 8005362:	4b0c      	ldr	r3, [pc, #48]	@ (8005394 <HAL_MspInit+0x5c>)
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800536a:	607b      	str	r3, [r7, #4]
 800536c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800536e:	4b0a      	ldr	r3, [pc, #40]	@ (8005398 <HAL_MspInit+0x60>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800537a:	60fb      	str	r3, [r7, #12]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005382:	60fb      	str	r3, [r7, #12]
 8005384:	4a04      	ldr	r2, [pc, #16]	@ (8005398 <HAL_MspInit+0x60>)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800538a:	bf00      	nop
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	bc80      	pop	{r7}
 8005392:	4770      	bx	lr
 8005394:	40021000 	.word	0x40021000
 8005398:	40010000 	.word	0x40010000

0800539c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b088      	sub	sp, #32
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053a4:	f107 0310 	add.w	r3, r7, #16
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	605a      	str	r2, [r3, #4]
 80053ae:	609a      	str	r2, [r3, #8]
 80053b0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a15      	ldr	r2, [pc, #84]	@ (800540c <HAL_I2C_MspInit+0x70>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d123      	bne.n	8005404 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053bc:	4b14      	ldr	r3, [pc, #80]	@ (8005410 <HAL_I2C_MspInit+0x74>)
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	4a13      	ldr	r2, [pc, #76]	@ (8005410 <HAL_I2C_MspInit+0x74>)
 80053c2:	f043 0308 	orr.w	r3, r3, #8
 80053c6:	6193      	str	r3, [r2, #24]
 80053c8:	4b11      	ldr	r3, [pc, #68]	@ (8005410 <HAL_I2C_MspInit+0x74>)
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	f003 0308 	and.w	r3, r3, #8
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053d4:	23c0      	movs	r3, #192	@ 0xc0
 80053d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80053d8:	2312      	movs	r3, #18
 80053da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053dc:	2303      	movs	r3, #3
 80053de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053e0:	f107 0310 	add.w	r3, r7, #16
 80053e4:	4619      	mov	r1, r3
 80053e6:	480b      	ldr	r0, [pc, #44]	@ (8005414 <HAL_I2C_MspInit+0x78>)
 80053e8:	f7fc f8b8 	bl	800155c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80053ec:	4b08      	ldr	r3, [pc, #32]	@ (8005410 <HAL_I2C_MspInit+0x74>)
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	4a07      	ldr	r2, [pc, #28]	@ (8005410 <HAL_I2C_MspInit+0x74>)
 80053f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80053f6:	61d3      	str	r3, [r2, #28]
 80053f8:	4b05      	ldr	r3, [pc, #20]	@ (8005410 <HAL_I2C_MspInit+0x74>)
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005400:	60bb      	str	r3, [r7, #8]
 8005402:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005404:	bf00      	nop
 8005406:	3720      	adds	r7, #32
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40005400 	.word	0x40005400
 8005410:	40021000 	.word	0x40021000
 8005414:	40010c00 	.word	0x40010c00

08005418 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b088      	sub	sp, #32
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005420:	f107 0310 	add.w	r3, r7, #16
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	605a      	str	r2, [r3, #4]
 800542a:	609a      	str	r2, [r3, #8]
 800542c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a20      	ldr	r2, [pc, #128]	@ (80054b4 <HAL_UART_MspInit+0x9c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d139      	bne.n	80054ac <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005438:	4b1f      	ldr	r3, [pc, #124]	@ (80054b8 <HAL_UART_MspInit+0xa0>)
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	4a1e      	ldr	r2, [pc, #120]	@ (80054b8 <HAL_UART_MspInit+0xa0>)
 800543e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005442:	61d3      	str	r3, [r2, #28]
 8005444:	4b1c      	ldr	r3, [pc, #112]	@ (80054b8 <HAL_UART_MspInit+0xa0>)
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005450:	4b19      	ldr	r3, [pc, #100]	@ (80054b8 <HAL_UART_MspInit+0xa0>)
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	4a18      	ldr	r2, [pc, #96]	@ (80054b8 <HAL_UART_MspInit+0xa0>)
 8005456:	f043 0308 	orr.w	r3, r3, #8
 800545a:	6193      	str	r3, [r2, #24]
 800545c:	4b16      	ldr	r3, [pc, #88]	@ (80054b8 <HAL_UART_MspInit+0xa0>)
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	f003 0308 	and.w	r3, r3, #8
 8005464:	60bb      	str	r3, [r7, #8]
 8005466:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005468:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800546c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800546e:	2302      	movs	r3, #2
 8005470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005472:	2303      	movs	r3, #3
 8005474:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005476:	f107 0310 	add.w	r3, r7, #16
 800547a:	4619      	mov	r1, r3
 800547c:	480f      	ldr	r0, [pc, #60]	@ (80054bc <HAL_UART_MspInit+0xa4>)
 800547e:	f7fc f86d 	bl	800155c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005482:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005488:	2300      	movs	r3, #0
 800548a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800548c:	2300      	movs	r3, #0
 800548e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005490:	f107 0310 	add.w	r3, r7, #16
 8005494:	4619      	mov	r1, r3
 8005496:	4809      	ldr	r0, [pc, #36]	@ (80054bc <HAL_UART_MspInit+0xa4>)
 8005498:	f7fc f860 	bl	800155c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800549c:	2200      	movs	r2, #0
 800549e:	2100      	movs	r1, #0
 80054a0:	2027      	movs	r0, #39	@ 0x27
 80054a2:	f7fb ff72 	bl	800138a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80054a6:	2027      	movs	r0, #39	@ 0x27
 80054a8:	f7fb ff8b 	bl	80013c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80054ac:	bf00      	nop
 80054ae:	3720      	adds	r7, #32
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40004800 	.word	0x40004800
 80054b8:	40021000 	.word	0x40021000
 80054bc:	40010c00 	.word	0x40010c00

080054c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80054c4:	bf00      	nop
 80054c6:	e7fd      	b.n	80054c4 <NMI_Handler+0x4>

080054c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054cc:	bf00      	nop
 80054ce:	e7fd      	b.n	80054cc <HardFault_Handler+0x4>

080054d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80054d4:	bf00      	nop
 80054d6:	e7fd      	b.n	80054d4 <MemManage_Handler+0x4>

080054d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80054dc:	bf00      	nop
 80054de:	e7fd      	b.n	80054dc <BusFault_Handler+0x4>

080054e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80054e4:	bf00      	nop
 80054e6:	e7fd      	b.n	80054e4 <UsageFault_Handler+0x4>

080054e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80054ec:	bf00      	nop
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80054f8:	bf00      	nop
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bc80      	pop	{r7}
 80054fe:	4770      	bx	lr

08005500 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005504:	bf00      	nop
 8005506:	46bd      	mov	sp, r7
 8005508:	bc80      	pop	{r7}
 800550a:	4770      	bx	lr

0800550c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005510:	f7fb fe24 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005514:	bf00      	nop
 8005516:	bd80      	pop	{r7, pc}

08005518 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800551c:	4802      	ldr	r0, [pc, #8]	@ (8005528 <USART3_IRQHandler+0x10>)
 800551e:	f7fe f9a1 	bl	8003864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005522:	bf00      	nop
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20000250 	.word	0x20000250

0800552c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  return 1;
 8005530:	2301      	movs	r3, #1
}
 8005532:	4618      	mov	r0, r3
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr

0800553a <_kill>:

int _kill(int pid, int sig)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b082      	sub	sp, #8
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005544:	f000 feb4 	bl	80062b0 <__errno>
 8005548:	4603      	mov	r3, r0
 800554a:	2216      	movs	r2, #22
 800554c:	601a      	str	r2, [r3, #0]
  return -1;
 800554e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <_exit>:

void _exit (int status)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b082      	sub	sp, #8
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005562:	f04f 31ff 	mov.w	r1, #4294967295
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7ff ffe7 	bl	800553a <_kill>
  while (1) {}    /* Make sure we hang here */
 800556c:	bf00      	nop
 800556e:	e7fd      	b.n	800556c <_exit+0x12>

08005570 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	e00a      	b.n	8005598 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005582:	f3af 8000 	nop.w
 8005586:	4601      	mov	r1, r0
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	60ba      	str	r2, [r7, #8]
 800558e:	b2ca      	uxtb	r2, r1
 8005590:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	3301      	adds	r3, #1
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	429a      	cmp	r2, r3
 800559e:	dbf0      	blt.n	8005582 <_read+0x12>
  }

  return len;
 80055a0:	687b      	ldr	r3, [r7, #4]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3718      	adds	r7, #24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b086      	sub	sp, #24
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055b6:	2300      	movs	r3, #0
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	e009      	b.n	80055d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	1c5a      	adds	r2, r3, #1
 80055c0:	60ba      	str	r2, [r7, #8]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	3301      	adds	r3, #1
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	dbf1      	blt.n	80055bc <_write+0x12>
  }
  return len;
 80055d8:	687b      	ldr	r3, [r7, #4]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <_close>:

int _close(int file)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80055ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc80      	pop	{r7}
 80055f6:	4770      	bx	lr

080055f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005608:	605a      	str	r2, [r3, #4]
  return 0;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	bc80      	pop	{r7}
 8005614:	4770      	bx	lr

08005616 <_isatty>:

int _isatty(int file)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800561e:	2301      	movs	r3, #1
}
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr

0800562a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800562a:	b480      	push	{r7}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	bc80      	pop	{r7}
 8005640:	4770      	bx	lr
	...

08005644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800564c:	4a14      	ldr	r2, [pc, #80]	@ (80056a0 <_sbrk+0x5c>)
 800564e:	4b15      	ldr	r3, [pc, #84]	@ (80056a4 <_sbrk+0x60>)
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005658:	4b13      	ldr	r3, [pc, #76]	@ (80056a8 <_sbrk+0x64>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d102      	bne.n	8005666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005660:	4b11      	ldr	r3, [pc, #68]	@ (80056a8 <_sbrk+0x64>)
 8005662:	4a12      	ldr	r2, [pc, #72]	@ (80056ac <_sbrk+0x68>)
 8005664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005666:	4b10      	ldr	r3, [pc, #64]	@ (80056a8 <_sbrk+0x64>)
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4413      	add	r3, r2
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	429a      	cmp	r2, r3
 8005672:	d207      	bcs.n	8005684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005674:	f000 fe1c 	bl	80062b0 <__errno>
 8005678:	4603      	mov	r3, r0
 800567a:	220c      	movs	r2, #12
 800567c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800567e:	f04f 33ff 	mov.w	r3, #4294967295
 8005682:	e009      	b.n	8005698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005684:	4b08      	ldr	r3, [pc, #32]	@ (80056a8 <_sbrk+0x64>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800568a:	4b07      	ldr	r3, [pc, #28]	@ (80056a8 <_sbrk+0x64>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4413      	add	r3, r2
 8005692:	4a05      	ldr	r2, [pc, #20]	@ (80056a8 <_sbrk+0x64>)
 8005694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005696:	68fb      	ldr	r3, [r7, #12]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	20005000 	.word	0x20005000
 80056a4:	00000400 	.word	0x00000400
 80056a8:	200006a0 	.word	0x200006a0
 80056ac:	200007f0 	.word	0x200007f0

080056b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056b4:	bf00      	nop
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bc80      	pop	{r7}
 80056ba:	4770      	bx	lr

080056bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80056bc:	f7ff fff8 	bl	80056b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80056c0:	480b      	ldr	r0, [pc, #44]	@ (80056f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80056c2:	490c      	ldr	r1, [pc, #48]	@ (80056f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80056c4:	4a0c      	ldr	r2, [pc, #48]	@ (80056f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80056c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80056c8:	e002      	b.n	80056d0 <LoopCopyDataInit>

080056ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056ce:	3304      	adds	r3, #4

080056d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056d4:	d3f9      	bcc.n	80056ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056d6:	4a09      	ldr	r2, [pc, #36]	@ (80056fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80056d8:	4c09      	ldr	r4, [pc, #36]	@ (8005700 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80056da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056dc:	e001      	b.n	80056e2 <LoopFillZerobss>

080056de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056e0:	3204      	adds	r2, #4

080056e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056e4:	d3fb      	bcc.n	80056de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80056e6:	f000 fde9 	bl	80062bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80056ea:	f7fe fed7 	bl	800449c <main>
  bx lr
 80056ee:	4770      	bx	lr
  ldr r0, =_sdata
 80056f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80056f4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80056f8:	08009c90 	.word	0x08009c90
  ldr r2, =_sbss
 80056fc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8005700:	200007f0 	.word	0x200007f0

08005704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005704:	e7fe      	b.n	8005704 <ADC1_2_IRQHandler>

08005706 <__cvt>:
 8005706:	2b00      	cmp	r3, #0
 8005708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800570c:	461d      	mov	r5, r3
 800570e:	bfbb      	ittet	lt
 8005710:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005714:	461d      	movlt	r5, r3
 8005716:	2300      	movge	r3, #0
 8005718:	232d      	movlt	r3, #45	@ 0x2d
 800571a:	b088      	sub	sp, #32
 800571c:	4614      	mov	r4, r2
 800571e:	bfb8      	it	lt
 8005720:	4614      	movlt	r4, r2
 8005722:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005724:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005726:	7013      	strb	r3, [r2, #0]
 8005728:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800572a:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800572e:	f023 0820 	bic.w	r8, r3, #32
 8005732:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005736:	d005      	beq.n	8005744 <__cvt+0x3e>
 8005738:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800573c:	d100      	bne.n	8005740 <__cvt+0x3a>
 800573e:	3601      	adds	r6, #1
 8005740:	2302      	movs	r3, #2
 8005742:	e000      	b.n	8005746 <__cvt+0x40>
 8005744:	2303      	movs	r3, #3
 8005746:	aa07      	add	r2, sp, #28
 8005748:	9204      	str	r2, [sp, #16]
 800574a:	aa06      	add	r2, sp, #24
 800574c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005750:	e9cd 3600 	strd	r3, r6, [sp]
 8005754:	4622      	mov	r2, r4
 8005756:	462b      	mov	r3, r5
 8005758:	f000 fe7e 	bl	8006458 <_dtoa_r>
 800575c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005760:	4607      	mov	r7, r0
 8005762:	d119      	bne.n	8005798 <__cvt+0x92>
 8005764:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005766:	07db      	lsls	r3, r3, #31
 8005768:	d50e      	bpl.n	8005788 <__cvt+0x82>
 800576a:	eb00 0906 	add.w	r9, r0, r6
 800576e:	2200      	movs	r2, #0
 8005770:	2300      	movs	r3, #0
 8005772:	4620      	mov	r0, r4
 8005774:	4629      	mov	r1, r5
 8005776:	f7fb f917 	bl	80009a8 <__aeabi_dcmpeq>
 800577a:	b108      	cbz	r0, 8005780 <__cvt+0x7a>
 800577c:	f8cd 901c 	str.w	r9, [sp, #28]
 8005780:	2230      	movs	r2, #48	@ 0x30
 8005782:	9b07      	ldr	r3, [sp, #28]
 8005784:	454b      	cmp	r3, r9
 8005786:	d31e      	bcc.n	80057c6 <__cvt+0xc0>
 8005788:	4638      	mov	r0, r7
 800578a:	9b07      	ldr	r3, [sp, #28]
 800578c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800578e:	1bdb      	subs	r3, r3, r7
 8005790:	6013      	str	r3, [r2, #0]
 8005792:	b008      	add	sp, #32
 8005794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005798:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800579c:	eb00 0906 	add.w	r9, r0, r6
 80057a0:	d1e5      	bne.n	800576e <__cvt+0x68>
 80057a2:	7803      	ldrb	r3, [r0, #0]
 80057a4:	2b30      	cmp	r3, #48	@ 0x30
 80057a6:	d10a      	bne.n	80057be <__cvt+0xb8>
 80057a8:	2200      	movs	r2, #0
 80057aa:	2300      	movs	r3, #0
 80057ac:	4620      	mov	r0, r4
 80057ae:	4629      	mov	r1, r5
 80057b0:	f7fb f8fa 	bl	80009a8 <__aeabi_dcmpeq>
 80057b4:	b918      	cbnz	r0, 80057be <__cvt+0xb8>
 80057b6:	f1c6 0601 	rsb	r6, r6, #1
 80057ba:	f8ca 6000 	str.w	r6, [sl]
 80057be:	f8da 3000 	ldr.w	r3, [sl]
 80057c2:	4499      	add	r9, r3
 80057c4:	e7d3      	b.n	800576e <__cvt+0x68>
 80057c6:	1c59      	adds	r1, r3, #1
 80057c8:	9107      	str	r1, [sp, #28]
 80057ca:	701a      	strb	r2, [r3, #0]
 80057cc:	e7d9      	b.n	8005782 <__cvt+0x7c>

080057ce <__exponent>:
 80057ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057d0:	2900      	cmp	r1, #0
 80057d2:	bfb6      	itet	lt
 80057d4:	232d      	movlt	r3, #45	@ 0x2d
 80057d6:	232b      	movge	r3, #43	@ 0x2b
 80057d8:	4249      	neglt	r1, r1
 80057da:	2909      	cmp	r1, #9
 80057dc:	7002      	strb	r2, [r0, #0]
 80057de:	7043      	strb	r3, [r0, #1]
 80057e0:	dd29      	ble.n	8005836 <__exponent+0x68>
 80057e2:	f10d 0307 	add.w	r3, sp, #7
 80057e6:	461d      	mov	r5, r3
 80057e8:	270a      	movs	r7, #10
 80057ea:	fbb1 f6f7 	udiv	r6, r1, r7
 80057ee:	461a      	mov	r2, r3
 80057f0:	fb07 1416 	mls	r4, r7, r6, r1
 80057f4:	3430      	adds	r4, #48	@ 0x30
 80057f6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80057fa:	460c      	mov	r4, r1
 80057fc:	2c63      	cmp	r4, #99	@ 0x63
 80057fe:	4631      	mov	r1, r6
 8005800:	f103 33ff 	add.w	r3, r3, #4294967295
 8005804:	dcf1      	bgt.n	80057ea <__exponent+0x1c>
 8005806:	3130      	adds	r1, #48	@ 0x30
 8005808:	1e94      	subs	r4, r2, #2
 800580a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800580e:	4623      	mov	r3, r4
 8005810:	1c41      	adds	r1, r0, #1
 8005812:	42ab      	cmp	r3, r5
 8005814:	d30a      	bcc.n	800582c <__exponent+0x5e>
 8005816:	f10d 0309 	add.w	r3, sp, #9
 800581a:	1a9b      	subs	r3, r3, r2
 800581c:	42ac      	cmp	r4, r5
 800581e:	bf88      	it	hi
 8005820:	2300      	movhi	r3, #0
 8005822:	3302      	adds	r3, #2
 8005824:	4403      	add	r3, r0
 8005826:	1a18      	subs	r0, r3, r0
 8005828:	b003      	add	sp, #12
 800582a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800582c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005830:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005834:	e7ed      	b.n	8005812 <__exponent+0x44>
 8005836:	2330      	movs	r3, #48	@ 0x30
 8005838:	3130      	adds	r1, #48	@ 0x30
 800583a:	7083      	strb	r3, [r0, #2]
 800583c:	70c1      	strb	r1, [r0, #3]
 800583e:	1d03      	adds	r3, r0, #4
 8005840:	e7f1      	b.n	8005826 <__exponent+0x58>
	...

08005844 <_printf_float>:
 8005844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005848:	b091      	sub	sp, #68	@ 0x44
 800584a:	460c      	mov	r4, r1
 800584c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005850:	4616      	mov	r6, r2
 8005852:	461f      	mov	r7, r3
 8005854:	4605      	mov	r5, r0
 8005856:	f000 fce1 	bl	800621c <_localeconv_r>
 800585a:	6803      	ldr	r3, [r0, #0]
 800585c:	4618      	mov	r0, r3
 800585e:	9308      	str	r3, [sp, #32]
 8005860:	f7fa fc76 	bl	8000150 <strlen>
 8005864:	2300      	movs	r3, #0
 8005866:	930e      	str	r3, [sp, #56]	@ 0x38
 8005868:	f8d8 3000 	ldr.w	r3, [r8]
 800586c:	9009      	str	r0, [sp, #36]	@ 0x24
 800586e:	3307      	adds	r3, #7
 8005870:	f023 0307 	bic.w	r3, r3, #7
 8005874:	f103 0208 	add.w	r2, r3, #8
 8005878:	f894 a018 	ldrb.w	sl, [r4, #24]
 800587c:	f8d4 b000 	ldr.w	fp, [r4]
 8005880:	f8c8 2000 	str.w	r2, [r8]
 8005884:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005888:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800588c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800588e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005892:	f04f 32ff 	mov.w	r2, #4294967295
 8005896:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800589a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800589e:	4b9c      	ldr	r3, [pc, #624]	@ (8005b10 <_printf_float+0x2cc>)
 80058a0:	f7fb f8b4 	bl	8000a0c <__aeabi_dcmpun>
 80058a4:	bb70      	cbnz	r0, 8005904 <_printf_float+0xc0>
 80058a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80058aa:	f04f 32ff 	mov.w	r2, #4294967295
 80058ae:	4b98      	ldr	r3, [pc, #608]	@ (8005b10 <_printf_float+0x2cc>)
 80058b0:	f7fb f88e 	bl	80009d0 <__aeabi_dcmple>
 80058b4:	bb30      	cbnz	r0, 8005904 <_printf_float+0xc0>
 80058b6:	2200      	movs	r2, #0
 80058b8:	2300      	movs	r3, #0
 80058ba:	4640      	mov	r0, r8
 80058bc:	4649      	mov	r1, r9
 80058be:	f7fb f87d 	bl	80009bc <__aeabi_dcmplt>
 80058c2:	b110      	cbz	r0, 80058ca <_printf_float+0x86>
 80058c4:	232d      	movs	r3, #45	@ 0x2d
 80058c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058ca:	4a92      	ldr	r2, [pc, #584]	@ (8005b14 <_printf_float+0x2d0>)
 80058cc:	4b92      	ldr	r3, [pc, #584]	@ (8005b18 <_printf_float+0x2d4>)
 80058ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80058d2:	bf8c      	ite	hi
 80058d4:	4690      	movhi	r8, r2
 80058d6:	4698      	movls	r8, r3
 80058d8:	2303      	movs	r3, #3
 80058da:	f04f 0900 	mov.w	r9, #0
 80058de:	6123      	str	r3, [r4, #16]
 80058e0:	f02b 0304 	bic.w	r3, fp, #4
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	4633      	mov	r3, r6
 80058e8:	4621      	mov	r1, r4
 80058ea:	4628      	mov	r0, r5
 80058ec:	9700      	str	r7, [sp, #0]
 80058ee:	aa0f      	add	r2, sp, #60	@ 0x3c
 80058f0:	f000 f9d4 	bl	8005c9c <_printf_common>
 80058f4:	3001      	adds	r0, #1
 80058f6:	f040 8090 	bne.w	8005a1a <_printf_float+0x1d6>
 80058fa:	f04f 30ff 	mov.w	r0, #4294967295
 80058fe:	b011      	add	sp, #68	@ 0x44
 8005900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005904:	4642      	mov	r2, r8
 8005906:	464b      	mov	r3, r9
 8005908:	4640      	mov	r0, r8
 800590a:	4649      	mov	r1, r9
 800590c:	f7fb f87e 	bl	8000a0c <__aeabi_dcmpun>
 8005910:	b148      	cbz	r0, 8005926 <_printf_float+0xe2>
 8005912:	464b      	mov	r3, r9
 8005914:	2b00      	cmp	r3, #0
 8005916:	bfb8      	it	lt
 8005918:	232d      	movlt	r3, #45	@ 0x2d
 800591a:	4a80      	ldr	r2, [pc, #512]	@ (8005b1c <_printf_float+0x2d8>)
 800591c:	bfb8      	it	lt
 800591e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005922:	4b7f      	ldr	r3, [pc, #508]	@ (8005b20 <_printf_float+0x2dc>)
 8005924:	e7d3      	b.n	80058ce <_printf_float+0x8a>
 8005926:	6863      	ldr	r3, [r4, #4]
 8005928:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800592c:	1c5a      	adds	r2, r3, #1
 800592e:	d13f      	bne.n	80059b0 <_printf_float+0x16c>
 8005930:	2306      	movs	r3, #6
 8005932:	6063      	str	r3, [r4, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800593a:	6023      	str	r3, [r4, #0]
 800593c:	9206      	str	r2, [sp, #24]
 800593e:	aa0e      	add	r2, sp, #56	@ 0x38
 8005940:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005944:	aa0d      	add	r2, sp, #52	@ 0x34
 8005946:	9203      	str	r2, [sp, #12]
 8005948:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800594c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005950:	6863      	ldr	r3, [r4, #4]
 8005952:	4642      	mov	r2, r8
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	4628      	mov	r0, r5
 8005958:	464b      	mov	r3, r9
 800595a:	910a      	str	r1, [sp, #40]	@ 0x28
 800595c:	f7ff fed3 	bl	8005706 <__cvt>
 8005960:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005962:	4680      	mov	r8, r0
 8005964:	2947      	cmp	r1, #71	@ 0x47
 8005966:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005968:	d128      	bne.n	80059bc <_printf_float+0x178>
 800596a:	1cc8      	adds	r0, r1, #3
 800596c:	db02      	blt.n	8005974 <_printf_float+0x130>
 800596e:	6863      	ldr	r3, [r4, #4]
 8005970:	4299      	cmp	r1, r3
 8005972:	dd40      	ble.n	80059f6 <_printf_float+0x1b2>
 8005974:	f1aa 0a02 	sub.w	sl, sl, #2
 8005978:	fa5f fa8a 	uxtb.w	sl, sl
 800597c:	4652      	mov	r2, sl
 800597e:	3901      	subs	r1, #1
 8005980:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005984:	910d      	str	r1, [sp, #52]	@ 0x34
 8005986:	f7ff ff22 	bl	80057ce <__exponent>
 800598a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800598c:	4681      	mov	r9, r0
 800598e:	1813      	adds	r3, r2, r0
 8005990:	2a01      	cmp	r2, #1
 8005992:	6123      	str	r3, [r4, #16]
 8005994:	dc02      	bgt.n	800599c <_printf_float+0x158>
 8005996:	6822      	ldr	r2, [r4, #0]
 8005998:	07d2      	lsls	r2, r2, #31
 800599a:	d501      	bpl.n	80059a0 <_printf_float+0x15c>
 800599c:	3301      	adds	r3, #1
 800599e:	6123      	str	r3, [r4, #16]
 80059a0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d09e      	beq.n	80058e6 <_printf_float+0xa2>
 80059a8:	232d      	movs	r3, #45	@ 0x2d
 80059aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059ae:	e79a      	b.n	80058e6 <_printf_float+0xa2>
 80059b0:	2947      	cmp	r1, #71	@ 0x47
 80059b2:	d1bf      	bne.n	8005934 <_printf_float+0xf0>
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1bd      	bne.n	8005934 <_printf_float+0xf0>
 80059b8:	2301      	movs	r3, #1
 80059ba:	e7ba      	b.n	8005932 <_printf_float+0xee>
 80059bc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059c0:	d9dc      	bls.n	800597c <_printf_float+0x138>
 80059c2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80059c6:	d118      	bne.n	80059fa <_printf_float+0x1b6>
 80059c8:	2900      	cmp	r1, #0
 80059ca:	6863      	ldr	r3, [r4, #4]
 80059cc:	dd0b      	ble.n	80059e6 <_printf_float+0x1a2>
 80059ce:	6121      	str	r1, [r4, #16]
 80059d0:	b913      	cbnz	r3, 80059d8 <_printf_float+0x194>
 80059d2:	6822      	ldr	r2, [r4, #0]
 80059d4:	07d0      	lsls	r0, r2, #31
 80059d6:	d502      	bpl.n	80059de <_printf_float+0x19a>
 80059d8:	3301      	adds	r3, #1
 80059da:	440b      	add	r3, r1
 80059dc:	6123      	str	r3, [r4, #16]
 80059de:	f04f 0900 	mov.w	r9, #0
 80059e2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80059e4:	e7dc      	b.n	80059a0 <_printf_float+0x15c>
 80059e6:	b913      	cbnz	r3, 80059ee <_printf_float+0x1aa>
 80059e8:	6822      	ldr	r2, [r4, #0]
 80059ea:	07d2      	lsls	r2, r2, #31
 80059ec:	d501      	bpl.n	80059f2 <_printf_float+0x1ae>
 80059ee:	3302      	adds	r3, #2
 80059f0:	e7f4      	b.n	80059dc <_printf_float+0x198>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e7f2      	b.n	80059dc <_printf_float+0x198>
 80059f6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80059fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059fc:	4299      	cmp	r1, r3
 80059fe:	db05      	blt.n	8005a0c <_printf_float+0x1c8>
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	6121      	str	r1, [r4, #16]
 8005a04:	07d8      	lsls	r0, r3, #31
 8005a06:	d5ea      	bpl.n	80059de <_printf_float+0x19a>
 8005a08:	1c4b      	adds	r3, r1, #1
 8005a0a:	e7e7      	b.n	80059dc <_printf_float+0x198>
 8005a0c:	2900      	cmp	r1, #0
 8005a0e:	bfcc      	ite	gt
 8005a10:	2201      	movgt	r2, #1
 8005a12:	f1c1 0202 	rsble	r2, r1, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	e7e0      	b.n	80059dc <_printf_float+0x198>
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	055a      	lsls	r2, r3, #21
 8005a1e:	d407      	bmi.n	8005a30 <_printf_float+0x1ec>
 8005a20:	6923      	ldr	r3, [r4, #16]
 8005a22:	4642      	mov	r2, r8
 8005a24:	4631      	mov	r1, r6
 8005a26:	4628      	mov	r0, r5
 8005a28:	47b8      	blx	r7
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	d12b      	bne.n	8005a86 <_printf_float+0x242>
 8005a2e:	e764      	b.n	80058fa <_printf_float+0xb6>
 8005a30:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a34:	f240 80dc 	bls.w	8005bf0 <_printf_float+0x3ac>
 8005a38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f7fa ffb2 	bl	80009a8 <__aeabi_dcmpeq>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d033      	beq.n	8005ab0 <_printf_float+0x26c>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	4631      	mov	r1, r6
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	4a35      	ldr	r2, [pc, #212]	@ (8005b24 <_printf_float+0x2e0>)
 8005a50:	47b8      	blx	r7
 8005a52:	3001      	adds	r0, #1
 8005a54:	f43f af51 	beq.w	80058fa <_printf_float+0xb6>
 8005a58:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005a5c:	4543      	cmp	r3, r8
 8005a5e:	db02      	blt.n	8005a66 <_printf_float+0x222>
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	07d8      	lsls	r0, r3, #31
 8005a64:	d50f      	bpl.n	8005a86 <_printf_float+0x242>
 8005a66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	47b8      	blx	r7
 8005a70:	3001      	adds	r0, #1
 8005a72:	f43f af42 	beq.w	80058fa <_printf_float+0xb6>
 8005a76:	f04f 0900 	mov.w	r9, #0
 8005a7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a7e:	f104 0a1a 	add.w	sl, r4, #26
 8005a82:	45c8      	cmp	r8, r9
 8005a84:	dc09      	bgt.n	8005a9a <_printf_float+0x256>
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	079b      	lsls	r3, r3, #30
 8005a8a:	f100 8102 	bmi.w	8005c92 <_printf_float+0x44e>
 8005a8e:	68e0      	ldr	r0, [r4, #12]
 8005a90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a92:	4298      	cmp	r0, r3
 8005a94:	bfb8      	it	lt
 8005a96:	4618      	movlt	r0, r3
 8005a98:	e731      	b.n	80058fe <_printf_float+0xba>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	4652      	mov	r2, sl
 8005a9e:	4631      	mov	r1, r6
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	47b8      	blx	r7
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	f43f af28 	beq.w	80058fa <_printf_float+0xb6>
 8005aaa:	f109 0901 	add.w	r9, r9, #1
 8005aae:	e7e8      	b.n	8005a82 <_printf_float+0x23e>
 8005ab0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	dc38      	bgt.n	8005b28 <_printf_float+0x2e4>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	4631      	mov	r1, r6
 8005aba:	4628      	mov	r0, r5
 8005abc:	4a19      	ldr	r2, [pc, #100]	@ (8005b24 <_printf_float+0x2e0>)
 8005abe:	47b8      	blx	r7
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	f43f af1a 	beq.w	80058fa <_printf_float+0xb6>
 8005ac6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005aca:	ea59 0303 	orrs.w	r3, r9, r3
 8005ace:	d102      	bne.n	8005ad6 <_printf_float+0x292>
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	07d9      	lsls	r1, r3, #31
 8005ad4:	d5d7      	bpl.n	8005a86 <_printf_float+0x242>
 8005ad6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ada:	4631      	mov	r1, r6
 8005adc:	4628      	mov	r0, r5
 8005ade:	47b8      	blx	r7
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	f43f af0a 	beq.w	80058fa <_printf_float+0xb6>
 8005ae6:	f04f 0a00 	mov.w	sl, #0
 8005aea:	f104 0b1a 	add.w	fp, r4, #26
 8005aee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005af0:	425b      	negs	r3, r3
 8005af2:	4553      	cmp	r3, sl
 8005af4:	dc01      	bgt.n	8005afa <_printf_float+0x2b6>
 8005af6:	464b      	mov	r3, r9
 8005af8:	e793      	b.n	8005a22 <_printf_float+0x1de>
 8005afa:	2301      	movs	r3, #1
 8005afc:	465a      	mov	r2, fp
 8005afe:	4631      	mov	r1, r6
 8005b00:	4628      	mov	r0, r5
 8005b02:	47b8      	blx	r7
 8005b04:	3001      	adds	r0, #1
 8005b06:	f43f aef8 	beq.w	80058fa <_printf_float+0xb6>
 8005b0a:	f10a 0a01 	add.w	sl, sl, #1
 8005b0e:	e7ee      	b.n	8005aee <_printf_float+0x2aa>
 8005b10:	7fefffff 	.word	0x7fefffff
 8005b14:	080098fc 	.word	0x080098fc
 8005b18:	080098f8 	.word	0x080098f8
 8005b1c:	08009904 	.word	0x08009904
 8005b20:	08009900 	.word	0x08009900
 8005b24:	08009908 	.word	0x08009908
 8005b28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b2a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005b2e:	4553      	cmp	r3, sl
 8005b30:	bfa8      	it	ge
 8005b32:	4653      	movge	r3, sl
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	4699      	mov	r9, r3
 8005b38:	dc36      	bgt.n	8005ba8 <_printf_float+0x364>
 8005b3a:	f04f 0b00 	mov.w	fp, #0
 8005b3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b42:	f104 021a 	add.w	r2, r4, #26
 8005b46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b48:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b4a:	eba3 0309 	sub.w	r3, r3, r9
 8005b4e:	455b      	cmp	r3, fp
 8005b50:	dc31      	bgt.n	8005bb6 <_printf_float+0x372>
 8005b52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b54:	459a      	cmp	sl, r3
 8005b56:	dc3a      	bgt.n	8005bce <_printf_float+0x38a>
 8005b58:	6823      	ldr	r3, [r4, #0]
 8005b5a:	07da      	lsls	r2, r3, #31
 8005b5c:	d437      	bmi.n	8005bce <_printf_float+0x38a>
 8005b5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b60:	ebaa 0903 	sub.w	r9, sl, r3
 8005b64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b66:	ebaa 0303 	sub.w	r3, sl, r3
 8005b6a:	4599      	cmp	r9, r3
 8005b6c:	bfa8      	it	ge
 8005b6e:	4699      	movge	r9, r3
 8005b70:	f1b9 0f00 	cmp.w	r9, #0
 8005b74:	dc33      	bgt.n	8005bde <_printf_float+0x39a>
 8005b76:	f04f 0800 	mov.w	r8, #0
 8005b7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b7e:	f104 0b1a 	add.w	fp, r4, #26
 8005b82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b84:	ebaa 0303 	sub.w	r3, sl, r3
 8005b88:	eba3 0309 	sub.w	r3, r3, r9
 8005b8c:	4543      	cmp	r3, r8
 8005b8e:	f77f af7a 	ble.w	8005a86 <_printf_float+0x242>
 8005b92:	2301      	movs	r3, #1
 8005b94:	465a      	mov	r2, fp
 8005b96:	4631      	mov	r1, r6
 8005b98:	4628      	mov	r0, r5
 8005b9a:	47b8      	blx	r7
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	f43f aeac 	beq.w	80058fa <_printf_float+0xb6>
 8005ba2:	f108 0801 	add.w	r8, r8, #1
 8005ba6:	e7ec      	b.n	8005b82 <_printf_float+0x33e>
 8005ba8:	4642      	mov	r2, r8
 8005baa:	4631      	mov	r1, r6
 8005bac:	4628      	mov	r0, r5
 8005bae:	47b8      	blx	r7
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	d1c2      	bne.n	8005b3a <_printf_float+0x2f6>
 8005bb4:	e6a1      	b.n	80058fa <_printf_float+0xb6>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	4631      	mov	r1, r6
 8005bba:	4628      	mov	r0, r5
 8005bbc:	920a      	str	r2, [sp, #40]	@ 0x28
 8005bbe:	47b8      	blx	r7
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	f43f ae9a 	beq.w	80058fa <_printf_float+0xb6>
 8005bc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005bc8:	f10b 0b01 	add.w	fp, fp, #1
 8005bcc:	e7bb      	b.n	8005b46 <_printf_float+0x302>
 8005bce:	4631      	mov	r1, r6
 8005bd0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	47b8      	blx	r7
 8005bd8:	3001      	adds	r0, #1
 8005bda:	d1c0      	bne.n	8005b5e <_printf_float+0x31a>
 8005bdc:	e68d      	b.n	80058fa <_printf_float+0xb6>
 8005bde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005be0:	464b      	mov	r3, r9
 8005be2:	4631      	mov	r1, r6
 8005be4:	4628      	mov	r0, r5
 8005be6:	4442      	add	r2, r8
 8005be8:	47b8      	blx	r7
 8005bea:	3001      	adds	r0, #1
 8005bec:	d1c3      	bne.n	8005b76 <_printf_float+0x332>
 8005bee:	e684      	b.n	80058fa <_printf_float+0xb6>
 8005bf0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005bf4:	f1ba 0f01 	cmp.w	sl, #1
 8005bf8:	dc01      	bgt.n	8005bfe <_printf_float+0x3ba>
 8005bfa:	07db      	lsls	r3, r3, #31
 8005bfc:	d536      	bpl.n	8005c6c <_printf_float+0x428>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	4642      	mov	r2, r8
 8005c02:	4631      	mov	r1, r6
 8005c04:	4628      	mov	r0, r5
 8005c06:	47b8      	blx	r7
 8005c08:	3001      	adds	r0, #1
 8005c0a:	f43f ae76 	beq.w	80058fa <_printf_float+0xb6>
 8005c0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c12:	4631      	mov	r1, r6
 8005c14:	4628      	mov	r0, r5
 8005c16:	47b8      	blx	r7
 8005c18:	3001      	adds	r0, #1
 8005c1a:	f43f ae6e 	beq.w	80058fa <_printf_float+0xb6>
 8005c1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c22:	2200      	movs	r2, #0
 8005c24:	2300      	movs	r3, #0
 8005c26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c2a:	f7fa febd 	bl	80009a8 <__aeabi_dcmpeq>
 8005c2e:	b9c0      	cbnz	r0, 8005c62 <_printf_float+0x41e>
 8005c30:	4653      	mov	r3, sl
 8005c32:	f108 0201 	add.w	r2, r8, #1
 8005c36:	4631      	mov	r1, r6
 8005c38:	4628      	mov	r0, r5
 8005c3a:	47b8      	blx	r7
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d10c      	bne.n	8005c5a <_printf_float+0x416>
 8005c40:	e65b      	b.n	80058fa <_printf_float+0xb6>
 8005c42:	2301      	movs	r3, #1
 8005c44:	465a      	mov	r2, fp
 8005c46:	4631      	mov	r1, r6
 8005c48:	4628      	mov	r0, r5
 8005c4a:	47b8      	blx	r7
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	f43f ae54 	beq.w	80058fa <_printf_float+0xb6>
 8005c52:	f108 0801 	add.w	r8, r8, #1
 8005c56:	45d0      	cmp	r8, sl
 8005c58:	dbf3      	blt.n	8005c42 <_printf_float+0x3fe>
 8005c5a:	464b      	mov	r3, r9
 8005c5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005c60:	e6e0      	b.n	8005a24 <_printf_float+0x1e0>
 8005c62:	f04f 0800 	mov.w	r8, #0
 8005c66:	f104 0b1a 	add.w	fp, r4, #26
 8005c6a:	e7f4      	b.n	8005c56 <_printf_float+0x412>
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	4642      	mov	r2, r8
 8005c70:	e7e1      	b.n	8005c36 <_printf_float+0x3f2>
 8005c72:	2301      	movs	r3, #1
 8005c74:	464a      	mov	r2, r9
 8005c76:	4631      	mov	r1, r6
 8005c78:	4628      	mov	r0, r5
 8005c7a:	47b8      	blx	r7
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	f43f ae3c 	beq.w	80058fa <_printf_float+0xb6>
 8005c82:	f108 0801 	add.w	r8, r8, #1
 8005c86:	68e3      	ldr	r3, [r4, #12]
 8005c88:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005c8a:	1a5b      	subs	r3, r3, r1
 8005c8c:	4543      	cmp	r3, r8
 8005c8e:	dcf0      	bgt.n	8005c72 <_printf_float+0x42e>
 8005c90:	e6fd      	b.n	8005a8e <_printf_float+0x24a>
 8005c92:	f04f 0800 	mov.w	r8, #0
 8005c96:	f104 0919 	add.w	r9, r4, #25
 8005c9a:	e7f4      	b.n	8005c86 <_printf_float+0x442>

08005c9c <_printf_common>:
 8005c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca0:	4616      	mov	r6, r2
 8005ca2:	4698      	mov	r8, r3
 8005ca4:	688a      	ldr	r2, [r1, #8]
 8005ca6:	690b      	ldr	r3, [r1, #16]
 8005ca8:	4607      	mov	r7, r0
 8005caa:	4293      	cmp	r3, r2
 8005cac:	bfb8      	it	lt
 8005cae:	4613      	movlt	r3, r2
 8005cb0:	6033      	str	r3, [r6, #0]
 8005cb2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cbc:	b10a      	cbz	r2, 8005cc2 <_printf_common+0x26>
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	6033      	str	r3, [r6, #0]
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	0699      	lsls	r1, r3, #26
 8005cc6:	bf42      	ittt	mi
 8005cc8:	6833      	ldrmi	r3, [r6, #0]
 8005cca:	3302      	addmi	r3, #2
 8005ccc:	6033      	strmi	r3, [r6, #0]
 8005cce:	6825      	ldr	r5, [r4, #0]
 8005cd0:	f015 0506 	ands.w	r5, r5, #6
 8005cd4:	d106      	bne.n	8005ce4 <_printf_common+0x48>
 8005cd6:	f104 0a19 	add.w	sl, r4, #25
 8005cda:	68e3      	ldr	r3, [r4, #12]
 8005cdc:	6832      	ldr	r2, [r6, #0]
 8005cde:	1a9b      	subs	r3, r3, r2
 8005ce0:	42ab      	cmp	r3, r5
 8005ce2:	dc2b      	bgt.n	8005d3c <_printf_common+0xa0>
 8005ce4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ce8:	6822      	ldr	r2, [r4, #0]
 8005cea:	3b00      	subs	r3, #0
 8005cec:	bf18      	it	ne
 8005cee:	2301      	movne	r3, #1
 8005cf0:	0692      	lsls	r2, r2, #26
 8005cf2:	d430      	bmi.n	8005d56 <_printf_common+0xba>
 8005cf4:	4641      	mov	r1, r8
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cfc:	47c8      	blx	r9
 8005cfe:	3001      	adds	r0, #1
 8005d00:	d023      	beq.n	8005d4a <_printf_common+0xae>
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	6922      	ldr	r2, [r4, #16]
 8005d06:	f003 0306 	and.w	r3, r3, #6
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	bf14      	ite	ne
 8005d0e:	2500      	movne	r5, #0
 8005d10:	6833      	ldreq	r3, [r6, #0]
 8005d12:	f04f 0600 	mov.w	r6, #0
 8005d16:	bf08      	it	eq
 8005d18:	68e5      	ldreq	r5, [r4, #12]
 8005d1a:	f104 041a 	add.w	r4, r4, #26
 8005d1e:	bf08      	it	eq
 8005d20:	1aed      	subeq	r5, r5, r3
 8005d22:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005d26:	bf08      	it	eq
 8005d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	bfc4      	itt	gt
 8005d30:	1a9b      	subgt	r3, r3, r2
 8005d32:	18ed      	addgt	r5, r5, r3
 8005d34:	42b5      	cmp	r5, r6
 8005d36:	d11a      	bne.n	8005d6e <_printf_common+0xd2>
 8005d38:	2000      	movs	r0, #0
 8005d3a:	e008      	b.n	8005d4e <_printf_common+0xb2>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	4652      	mov	r2, sl
 8005d40:	4641      	mov	r1, r8
 8005d42:	4638      	mov	r0, r7
 8005d44:	47c8      	blx	r9
 8005d46:	3001      	adds	r0, #1
 8005d48:	d103      	bne.n	8005d52 <_printf_common+0xb6>
 8005d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d52:	3501      	adds	r5, #1
 8005d54:	e7c1      	b.n	8005cda <_printf_common+0x3e>
 8005d56:	2030      	movs	r0, #48	@ 0x30
 8005d58:	18e1      	adds	r1, r4, r3
 8005d5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d5e:	1c5a      	adds	r2, r3, #1
 8005d60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d64:	4422      	add	r2, r4
 8005d66:	3302      	adds	r3, #2
 8005d68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d6c:	e7c2      	b.n	8005cf4 <_printf_common+0x58>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	4622      	mov	r2, r4
 8005d72:	4641      	mov	r1, r8
 8005d74:	4638      	mov	r0, r7
 8005d76:	47c8      	blx	r9
 8005d78:	3001      	adds	r0, #1
 8005d7a:	d0e6      	beq.n	8005d4a <_printf_common+0xae>
 8005d7c:	3601      	adds	r6, #1
 8005d7e:	e7d9      	b.n	8005d34 <_printf_common+0x98>

08005d80 <_printf_i>:
 8005d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d84:	7e0f      	ldrb	r7, [r1, #24]
 8005d86:	4691      	mov	r9, r2
 8005d88:	2f78      	cmp	r7, #120	@ 0x78
 8005d8a:	4680      	mov	r8, r0
 8005d8c:	460c      	mov	r4, r1
 8005d8e:	469a      	mov	sl, r3
 8005d90:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d96:	d807      	bhi.n	8005da8 <_printf_i+0x28>
 8005d98:	2f62      	cmp	r7, #98	@ 0x62
 8005d9a:	d80a      	bhi.n	8005db2 <_printf_i+0x32>
 8005d9c:	2f00      	cmp	r7, #0
 8005d9e:	f000 80d1 	beq.w	8005f44 <_printf_i+0x1c4>
 8005da2:	2f58      	cmp	r7, #88	@ 0x58
 8005da4:	f000 80b8 	beq.w	8005f18 <_printf_i+0x198>
 8005da8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005dac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005db0:	e03a      	b.n	8005e28 <_printf_i+0xa8>
 8005db2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005db6:	2b15      	cmp	r3, #21
 8005db8:	d8f6      	bhi.n	8005da8 <_printf_i+0x28>
 8005dba:	a101      	add	r1, pc, #4	@ (adr r1, 8005dc0 <_printf_i+0x40>)
 8005dbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005dc0:	08005e19 	.word	0x08005e19
 8005dc4:	08005e2d 	.word	0x08005e2d
 8005dc8:	08005da9 	.word	0x08005da9
 8005dcc:	08005da9 	.word	0x08005da9
 8005dd0:	08005da9 	.word	0x08005da9
 8005dd4:	08005da9 	.word	0x08005da9
 8005dd8:	08005e2d 	.word	0x08005e2d
 8005ddc:	08005da9 	.word	0x08005da9
 8005de0:	08005da9 	.word	0x08005da9
 8005de4:	08005da9 	.word	0x08005da9
 8005de8:	08005da9 	.word	0x08005da9
 8005dec:	08005f2b 	.word	0x08005f2b
 8005df0:	08005e57 	.word	0x08005e57
 8005df4:	08005ee5 	.word	0x08005ee5
 8005df8:	08005da9 	.word	0x08005da9
 8005dfc:	08005da9 	.word	0x08005da9
 8005e00:	08005f4d 	.word	0x08005f4d
 8005e04:	08005da9 	.word	0x08005da9
 8005e08:	08005e57 	.word	0x08005e57
 8005e0c:	08005da9 	.word	0x08005da9
 8005e10:	08005da9 	.word	0x08005da9
 8005e14:	08005eed 	.word	0x08005eed
 8005e18:	6833      	ldr	r3, [r6, #0]
 8005e1a:	1d1a      	adds	r2, r3, #4
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6032      	str	r2, [r6, #0]
 8005e20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e09c      	b.n	8005f66 <_printf_i+0x1e6>
 8005e2c:	6833      	ldr	r3, [r6, #0]
 8005e2e:	6820      	ldr	r0, [r4, #0]
 8005e30:	1d19      	adds	r1, r3, #4
 8005e32:	6031      	str	r1, [r6, #0]
 8005e34:	0606      	lsls	r6, r0, #24
 8005e36:	d501      	bpl.n	8005e3c <_printf_i+0xbc>
 8005e38:	681d      	ldr	r5, [r3, #0]
 8005e3a:	e003      	b.n	8005e44 <_printf_i+0xc4>
 8005e3c:	0645      	lsls	r5, r0, #25
 8005e3e:	d5fb      	bpl.n	8005e38 <_printf_i+0xb8>
 8005e40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e44:	2d00      	cmp	r5, #0
 8005e46:	da03      	bge.n	8005e50 <_printf_i+0xd0>
 8005e48:	232d      	movs	r3, #45	@ 0x2d
 8005e4a:	426d      	negs	r5, r5
 8005e4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e50:	230a      	movs	r3, #10
 8005e52:	4858      	ldr	r0, [pc, #352]	@ (8005fb4 <_printf_i+0x234>)
 8005e54:	e011      	b.n	8005e7a <_printf_i+0xfa>
 8005e56:	6821      	ldr	r1, [r4, #0]
 8005e58:	6833      	ldr	r3, [r6, #0]
 8005e5a:	0608      	lsls	r0, r1, #24
 8005e5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e60:	d402      	bmi.n	8005e68 <_printf_i+0xe8>
 8005e62:	0649      	lsls	r1, r1, #25
 8005e64:	bf48      	it	mi
 8005e66:	b2ad      	uxthmi	r5, r5
 8005e68:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e6a:	6033      	str	r3, [r6, #0]
 8005e6c:	bf14      	ite	ne
 8005e6e:	230a      	movne	r3, #10
 8005e70:	2308      	moveq	r3, #8
 8005e72:	4850      	ldr	r0, [pc, #320]	@ (8005fb4 <_printf_i+0x234>)
 8005e74:	2100      	movs	r1, #0
 8005e76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e7a:	6866      	ldr	r6, [r4, #4]
 8005e7c:	2e00      	cmp	r6, #0
 8005e7e:	60a6      	str	r6, [r4, #8]
 8005e80:	db05      	blt.n	8005e8e <_printf_i+0x10e>
 8005e82:	6821      	ldr	r1, [r4, #0]
 8005e84:	432e      	orrs	r6, r5
 8005e86:	f021 0104 	bic.w	r1, r1, #4
 8005e8a:	6021      	str	r1, [r4, #0]
 8005e8c:	d04b      	beq.n	8005f26 <_printf_i+0x1a6>
 8005e8e:	4616      	mov	r6, r2
 8005e90:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e94:	fb03 5711 	mls	r7, r3, r1, r5
 8005e98:	5dc7      	ldrb	r7, [r0, r7]
 8005e9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e9e:	462f      	mov	r7, r5
 8005ea0:	42bb      	cmp	r3, r7
 8005ea2:	460d      	mov	r5, r1
 8005ea4:	d9f4      	bls.n	8005e90 <_printf_i+0x110>
 8005ea6:	2b08      	cmp	r3, #8
 8005ea8:	d10b      	bne.n	8005ec2 <_printf_i+0x142>
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	07df      	lsls	r7, r3, #31
 8005eae:	d508      	bpl.n	8005ec2 <_printf_i+0x142>
 8005eb0:	6923      	ldr	r3, [r4, #16]
 8005eb2:	6861      	ldr	r1, [r4, #4]
 8005eb4:	4299      	cmp	r1, r3
 8005eb6:	bfde      	ittt	le
 8005eb8:	2330      	movle	r3, #48	@ 0x30
 8005eba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ebe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ec2:	1b92      	subs	r2, r2, r6
 8005ec4:	6122      	str	r2, [r4, #16]
 8005ec6:	464b      	mov	r3, r9
 8005ec8:	4621      	mov	r1, r4
 8005eca:	4640      	mov	r0, r8
 8005ecc:	f8cd a000 	str.w	sl, [sp]
 8005ed0:	aa03      	add	r2, sp, #12
 8005ed2:	f7ff fee3 	bl	8005c9c <_printf_common>
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	d14a      	bne.n	8005f70 <_printf_i+0x1f0>
 8005eda:	f04f 30ff 	mov.w	r0, #4294967295
 8005ede:	b004      	add	sp, #16
 8005ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	f043 0320 	orr.w	r3, r3, #32
 8005eea:	6023      	str	r3, [r4, #0]
 8005eec:	2778      	movs	r7, #120	@ 0x78
 8005eee:	4832      	ldr	r0, [pc, #200]	@ (8005fb8 <_printf_i+0x238>)
 8005ef0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	6831      	ldr	r1, [r6, #0]
 8005ef8:	061f      	lsls	r7, r3, #24
 8005efa:	f851 5b04 	ldr.w	r5, [r1], #4
 8005efe:	d402      	bmi.n	8005f06 <_printf_i+0x186>
 8005f00:	065f      	lsls	r7, r3, #25
 8005f02:	bf48      	it	mi
 8005f04:	b2ad      	uxthmi	r5, r5
 8005f06:	6031      	str	r1, [r6, #0]
 8005f08:	07d9      	lsls	r1, r3, #31
 8005f0a:	bf44      	itt	mi
 8005f0c:	f043 0320 	orrmi.w	r3, r3, #32
 8005f10:	6023      	strmi	r3, [r4, #0]
 8005f12:	b11d      	cbz	r5, 8005f1c <_printf_i+0x19c>
 8005f14:	2310      	movs	r3, #16
 8005f16:	e7ad      	b.n	8005e74 <_printf_i+0xf4>
 8005f18:	4826      	ldr	r0, [pc, #152]	@ (8005fb4 <_printf_i+0x234>)
 8005f1a:	e7e9      	b.n	8005ef0 <_printf_i+0x170>
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	f023 0320 	bic.w	r3, r3, #32
 8005f22:	6023      	str	r3, [r4, #0]
 8005f24:	e7f6      	b.n	8005f14 <_printf_i+0x194>
 8005f26:	4616      	mov	r6, r2
 8005f28:	e7bd      	b.n	8005ea6 <_printf_i+0x126>
 8005f2a:	6833      	ldr	r3, [r6, #0]
 8005f2c:	6825      	ldr	r5, [r4, #0]
 8005f2e:	1d18      	adds	r0, r3, #4
 8005f30:	6961      	ldr	r1, [r4, #20]
 8005f32:	6030      	str	r0, [r6, #0]
 8005f34:	062e      	lsls	r6, r5, #24
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	d501      	bpl.n	8005f3e <_printf_i+0x1be>
 8005f3a:	6019      	str	r1, [r3, #0]
 8005f3c:	e002      	b.n	8005f44 <_printf_i+0x1c4>
 8005f3e:	0668      	lsls	r0, r5, #25
 8005f40:	d5fb      	bpl.n	8005f3a <_printf_i+0x1ba>
 8005f42:	8019      	strh	r1, [r3, #0]
 8005f44:	2300      	movs	r3, #0
 8005f46:	4616      	mov	r6, r2
 8005f48:	6123      	str	r3, [r4, #16]
 8005f4a:	e7bc      	b.n	8005ec6 <_printf_i+0x146>
 8005f4c:	6833      	ldr	r3, [r6, #0]
 8005f4e:	2100      	movs	r1, #0
 8005f50:	1d1a      	adds	r2, r3, #4
 8005f52:	6032      	str	r2, [r6, #0]
 8005f54:	681e      	ldr	r6, [r3, #0]
 8005f56:	6862      	ldr	r2, [r4, #4]
 8005f58:	4630      	mov	r0, r6
 8005f5a:	f000 f9d6 	bl	800630a <memchr>
 8005f5e:	b108      	cbz	r0, 8005f64 <_printf_i+0x1e4>
 8005f60:	1b80      	subs	r0, r0, r6
 8005f62:	6060      	str	r0, [r4, #4]
 8005f64:	6863      	ldr	r3, [r4, #4]
 8005f66:	6123      	str	r3, [r4, #16]
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f6e:	e7aa      	b.n	8005ec6 <_printf_i+0x146>
 8005f70:	4632      	mov	r2, r6
 8005f72:	4649      	mov	r1, r9
 8005f74:	4640      	mov	r0, r8
 8005f76:	6923      	ldr	r3, [r4, #16]
 8005f78:	47d0      	blx	sl
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	d0ad      	beq.n	8005eda <_printf_i+0x15a>
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	079b      	lsls	r3, r3, #30
 8005f82:	d413      	bmi.n	8005fac <_printf_i+0x22c>
 8005f84:	68e0      	ldr	r0, [r4, #12]
 8005f86:	9b03      	ldr	r3, [sp, #12]
 8005f88:	4298      	cmp	r0, r3
 8005f8a:	bfb8      	it	lt
 8005f8c:	4618      	movlt	r0, r3
 8005f8e:	e7a6      	b.n	8005ede <_printf_i+0x15e>
 8005f90:	2301      	movs	r3, #1
 8005f92:	4632      	mov	r2, r6
 8005f94:	4649      	mov	r1, r9
 8005f96:	4640      	mov	r0, r8
 8005f98:	47d0      	blx	sl
 8005f9a:	3001      	adds	r0, #1
 8005f9c:	d09d      	beq.n	8005eda <_printf_i+0x15a>
 8005f9e:	3501      	adds	r5, #1
 8005fa0:	68e3      	ldr	r3, [r4, #12]
 8005fa2:	9903      	ldr	r1, [sp, #12]
 8005fa4:	1a5b      	subs	r3, r3, r1
 8005fa6:	42ab      	cmp	r3, r5
 8005fa8:	dcf2      	bgt.n	8005f90 <_printf_i+0x210>
 8005faa:	e7eb      	b.n	8005f84 <_printf_i+0x204>
 8005fac:	2500      	movs	r5, #0
 8005fae:	f104 0619 	add.w	r6, r4, #25
 8005fb2:	e7f5      	b.n	8005fa0 <_printf_i+0x220>
 8005fb4:	0800990a 	.word	0x0800990a
 8005fb8:	0800991b 	.word	0x0800991b

08005fbc <std>:
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	b510      	push	{r4, lr}
 8005fc0:	4604      	mov	r4, r0
 8005fc2:	e9c0 3300 	strd	r3, r3, [r0]
 8005fc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fca:	6083      	str	r3, [r0, #8]
 8005fcc:	8181      	strh	r1, [r0, #12]
 8005fce:	6643      	str	r3, [r0, #100]	@ 0x64
 8005fd0:	81c2      	strh	r2, [r0, #14]
 8005fd2:	6183      	str	r3, [r0, #24]
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	2208      	movs	r2, #8
 8005fd8:	305c      	adds	r0, #92	@ 0x5c
 8005fda:	f000 f916 	bl	800620a <memset>
 8005fde:	4b0d      	ldr	r3, [pc, #52]	@ (8006014 <std+0x58>)
 8005fe0:	6224      	str	r4, [r4, #32]
 8005fe2:	6263      	str	r3, [r4, #36]	@ 0x24
 8005fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8006018 <std+0x5c>)
 8005fe6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800601c <std+0x60>)
 8005fea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005fec:	4b0c      	ldr	r3, [pc, #48]	@ (8006020 <std+0x64>)
 8005fee:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8006024 <std+0x68>)
 8005ff2:	429c      	cmp	r4, r3
 8005ff4:	d006      	beq.n	8006004 <std+0x48>
 8005ff6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ffa:	4294      	cmp	r4, r2
 8005ffc:	d002      	beq.n	8006004 <std+0x48>
 8005ffe:	33d0      	adds	r3, #208	@ 0xd0
 8006000:	429c      	cmp	r4, r3
 8006002:	d105      	bne.n	8006010 <std+0x54>
 8006004:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800600c:	f000 b97a 	b.w	8006304 <__retarget_lock_init_recursive>
 8006010:	bd10      	pop	{r4, pc}
 8006012:	bf00      	nop
 8006014:	08006185 	.word	0x08006185
 8006018:	080061a7 	.word	0x080061a7
 800601c:	080061df 	.word	0x080061df
 8006020:	08006203 	.word	0x08006203
 8006024:	200006a4 	.word	0x200006a4

08006028 <stdio_exit_handler>:
 8006028:	4a02      	ldr	r2, [pc, #8]	@ (8006034 <stdio_exit_handler+0xc>)
 800602a:	4903      	ldr	r1, [pc, #12]	@ (8006038 <stdio_exit_handler+0x10>)
 800602c:	4803      	ldr	r0, [pc, #12]	@ (800603c <stdio_exit_handler+0x14>)
 800602e:	f000 b869 	b.w	8006104 <_fwalk_sglue>
 8006032:	bf00      	nop
 8006034:	20000014 	.word	0x20000014
 8006038:	08007ca1 	.word	0x08007ca1
 800603c:	20000024 	.word	0x20000024

08006040 <cleanup_stdio>:
 8006040:	6841      	ldr	r1, [r0, #4]
 8006042:	4b0c      	ldr	r3, [pc, #48]	@ (8006074 <cleanup_stdio+0x34>)
 8006044:	b510      	push	{r4, lr}
 8006046:	4299      	cmp	r1, r3
 8006048:	4604      	mov	r4, r0
 800604a:	d001      	beq.n	8006050 <cleanup_stdio+0x10>
 800604c:	f001 fe28 	bl	8007ca0 <_fflush_r>
 8006050:	68a1      	ldr	r1, [r4, #8]
 8006052:	4b09      	ldr	r3, [pc, #36]	@ (8006078 <cleanup_stdio+0x38>)
 8006054:	4299      	cmp	r1, r3
 8006056:	d002      	beq.n	800605e <cleanup_stdio+0x1e>
 8006058:	4620      	mov	r0, r4
 800605a:	f001 fe21 	bl	8007ca0 <_fflush_r>
 800605e:	68e1      	ldr	r1, [r4, #12]
 8006060:	4b06      	ldr	r3, [pc, #24]	@ (800607c <cleanup_stdio+0x3c>)
 8006062:	4299      	cmp	r1, r3
 8006064:	d004      	beq.n	8006070 <cleanup_stdio+0x30>
 8006066:	4620      	mov	r0, r4
 8006068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800606c:	f001 be18 	b.w	8007ca0 <_fflush_r>
 8006070:	bd10      	pop	{r4, pc}
 8006072:	bf00      	nop
 8006074:	200006a4 	.word	0x200006a4
 8006078:	2000070c 	.word	0x2000070c
 800607c:	20000774 	.word	0x20000774

08006080 <global_stdio_init.part.0>:
 8006080:	b510      	push	{r4, lr}
 8006082:	4b0b      	ldr	r3, [pc, #44]	@ (80060b0 <global_stdio_init.part.0+0x30>)
 8006084:	4c0b      	ldr	r4, [pc, #44]	@ (80060b4 <global_stdio_init.part.0+0x34>)
 8006086:	4a0c      	ldr	r2, [pc, #48]	@ (80060b8 <global_stdio_init.part.0+0x38>)
 8006088:	4620      	mov	r0, r4
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	2104      	movs	r1, #4
 800608e:	2200      	movs	r2, #0
 8006090:	f7ff ff94 	bl	8005fbc <std>
 8006094:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006098:	2201      	movs	r2, #1
 800609a:	2109      	movs	r1, #9
 800609c:	f7ff ff8e 	bl	8005fbc <std>
 80060a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80060a4:	2202      	movs	r2, #2
 80060a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060aa:	2112      	movs	r1, #18
 80060ac:	f7ff bf86 	b.w	8005fbc <std>
 80060b0:	200007dc 	.word	0x200007dc
 80060b4:	200006a4 	.word	0x200006a4
 80060b8:	08006029 	.word	0x08006029

080060bc <__sfp_lock_acquire>:
 80060bc:	4801      	ldr	r0, [pc, #4]	@ (80060c4 <__sfp_lock_acquire+0x8>)
 80060be:	f000 b922 	b.w	8006306 <__retarget_lock_acquire_recursive>
 80060c2:	bf00      	nop
 80060c4:	200007e5 	.word	0x200007e5

080060c8 <__sfp_lock_release>:
 80060c8:	4801      	ldr	r0, [pc, #4]	@ (80060d0 <__sfp_lock_release+0x8>)
 80060ca:	f000 b91d 	b.w	8006308 <__retarget_lock_release_recursive>
 80060ce:	bf00      	nop
 80060d0:	200007e5 	.word	0x200007e5

080060d4 <__sinit>:
 80060d4:	b510      	push	{r4, lr}
 80060d6:	4604      	mov	r4, r0
 80060d8:	f7ff fff0 	bl	80060bc <__sfp_lock_acquire>
 80060dc:	6a23      	ldr	r3, [r4, #32]
 80060de:	b11b      	cbz	r3, 80060e8 <__sinit+0x14>
 80060e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060e4:	f7ff bff0 	b.w	80060c8 <__sfp_lock_release>
 80060e8:	4b04      	ldr	r3, [pc, #16]	@ (80060fc <__sinit+0x28>)
 80060ea:	6223      	str	r3, [r4, #32]
 80060ec:	4b04      	ldr	r3, [pc, #16]	@ (8006100 <__sinit+0x2c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1f5      	bne.n	80060e0 <__sinit+0xc>
 80060f4:	f7ff ffc4 	bl	8006080 <global_stdio_init.part.0>
 80060f8:	e7f2      	b.n	80060e0 <__sinit+0xc>
 80060fa:	bf00      	nop
 80060fc:	08006041 	.word	0x08006041
 8006100:	200007dc 	.word	0x200007dc

08006104 <_fwalk_sglue>:
 8006104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006108:	4607      	mov	r7, r0
 800610a:	4688      	mov	r8, r1
 800610c:	4614      	mov	r4, r2
 800610e:	2600      	movs	r6, #0
 8006110:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006114:	f1b9 0901 	subs.w	r9, r9, #1
 8006118:	d505      	bpl.n	8006126 <_fwalk_sglue+0x22>
 800611a:	6824      	ldr	r4, [r4, #0]
 800611c:	2c00      	cmp	r4, #0
 800611e:	d1f7      	bne.n	8006110 <_fwalk_sglue+0xc>
 8006120:	4630      	mov	r0, r6
 8006122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006126:	89ab      	ldrh	r3, [r5, #12]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d907      	bls.n	800613c <_fwalk_sglue+0x38>
 800612c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006130:	3301      	adds	r3, #1
 8006132:	d003      	beq.n	800613c <_fwalk_sglue+0x38>
 8006134:	4629      	mov	r1, r5
 8006136:	4638      	mov	r0, r7
 8006138:	47c0      	blx	r8
 800613a:	4306      	orrs	r6, r0
 800613c:	3568      	adds	r5, #104	@ 0x68
 800613e:	e7e9      	b.n	8006114 <_fwalk_sglue+0x10>

08006140 <siprintf>:
 8006140:	b40e      	push	{r1, r2, r3}
 8006142:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006146:	b510      	push	{r4, lr}
 8006148:	2400      	movs	r4, #0
 800614a:	b09d      	sub	sp, #116	@ 0x74
 800614c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800614e:	9002      	str	r0, [sp, #8]
 8006150:	9006      	str	r0, [sp, #24]
 8006152:	9107      	str	r1, [sp, #28]
 8006154:	9104      	str	r1, [sp, #16]
 8006156:	4809      	ldr	r0, [pc, #36]	@ (800617c <siprintf+0x3c>)
 8006158:	4909      	ldr	r1, [pc, #36]	@ (8006180 <siprintf+0x40>)
 800615a:	f853 2b04 	ldr.w	r2, [r3], #4
 800615e:	9105      	str	r1, [sp, #20]
 8006160:	6800      	ldr	r0, [r0, #0]
 8006162:	a902      	add	r1, sp, #8
 8006164:	9301      	str	r3, [sp, #4]
 8006166:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006168:	f001 fc1e 	bl	80079a8 <_svfiprintf_r>
 800616c:	9b02      	ldr	r3, [sp, #8]
 800616e:	701c      	strb	r4, [r3, #0]
 8006170:	b01d      	add	sp, #116	@ 0x74
 8006172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006176:	b003      	add	sp, #12
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	20000020 	.word	0x20000020
 8006180:	ffff0208 	.word	0xffff0208

08006184 <__sread>:
 8006184:	b510      	push	{r4, lr}
 8006186:	460c      	mov	r4, r1
 8006188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800618c:	f000 f86c 	bl	8006268 <_read_r>
 8006190:	2800      	cmp	r0, #0
 8006192:	bfab      	itete	ge
 8006194:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006196:	89a3      	ldrhlt	r3, [r4, #12]
 8006198:	181b      	addge	r3, r3, r0
 800619a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800619e:	bfac      	ite	ge
 80061a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80061a2:	81a3      	strhlt	r3, [r4, #12]
 80061a4:	bd10      	pop	{r4, pc}

080061a6 <__swrite>:
 80061a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061aa:	461f      	mov	r7, r3
 80061ac:	898b      	ldrh	r3, [r1, #12]
 80061ae:	4605      	mov	r5, r0
 80061b0:	05db      	lsls	r3, r3, #23
 80061b2:	460c      	mov	r4, r1
 80061b4:	4616      	mov	r6, r2
 80061b6:	d505      	bpl.n	80061c4 <__swrite+0x1e>
 80061b8:	2302      	movs	r3, #2
 80061ba:	2200      	movs	r2, #0
 80061bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c0:	f000 f840 	bl	8006244 <_lseek_r>
 80061c4:	89a3      	ldrh	r3, [r4, #12]
 80061c6:	4632      	mov	r2, r6
 80061c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061cc:	81a3      	strh	r3, [r4, #12]
 80061ce:	4628      	mov	r0, r5
 80061d0:	463b      	mov	r3, r7
 80061d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061da:	f000 b857 	b.w	800628c <_write_r>

080061de <__sseek>:
 80061de:	b510      	push	{r4, lr}
 80061e0:	460c      	mov	r4, r1
 80061e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e6:	f000 f82d 	bl	8006244 <_lseek_r>
 80061ea:	1c43      	adds	r3, r0, #1
 80061ec:	89a3      	ldrh	r3, [r4, #12]
 80061ee:	bf15      	itete	ne
 80061f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80061f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80061f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80061fa:	81a3      	strheq	r3, [r4, #12]
 80061fc:	bf18      	it	ne
 80061fe:	81a3      	strhne	r3, [r4, #12]
 8006200:	bd10      	pop	{r4, pc}

08006202 <__sclose>:
 8006202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006206:	f000 b80d 	b.w	8006224 <_close_r>

0800620a <memset>:
 800620a:	4603      	mov	r3, r0
 800620c:	4402      	add	r2, r0
 800620e:	4293      	cmp	r3, r2
 8006210:	d100      	bne.n	8006214 <memset+0xa>
 8006212:	4770      	bx	lr
 8006214:	f803 1b01 	strb.w	r1, [r3], #1
 8006218:	e7f9      	b.n	800620e <memset+0x4>
	...

0800621c <_localeconv_r>:
 800621c:	4800      	ldr	r0, [pc, #0]	@ (8006220 <_localeconv_r+0x4>)
 800621e:	4770      	bx	lr
 8006220:	20000160 	.word	0x20000160

08006224 <_close_r>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	2300      	movs	r3, #0
 8006228:	4d05      	ldr	r5, [pc, #20]	@ (8006240 <_close_r+0x1c>)
 800622a:	4604      	mov	r4, r0
 800622c:	4608      	mov	r0, r1
 800622e:	602b      	str	r3, [r5, #0]
 8006230:	f7ff f9d7 	bl	80055e2 <_close>
 8006234:	1c43      	adds	r3, r0, #1
 8006236:	d102      	bne.n	800623e <_close_r+0x1a>
 8006238:	682b      	ldr	r3, [r5, #0]
 800623a:	b103      	cbz	r3, 800623e <_close_r+0x1a>
 800623c:	6023      	str	r3, [r4, #0]
 800623e:	bd38      	pop	{r3, r4, r5, pc}
 8006240:	200007e0 	.word	0x200007e0

08006244 <_lseek_r>:
 8006244:	b538      	push	{r3, r4, r5, lr}
 8006246:	4604      	mov	r4, r0
 8006248:	4608      	mov	r0, r1
 800624a:	4611      	mov	r1, r2
 800624c:	2200      	movs	r2, #0
 800624e:	4d05      	ldr	r5, [pc, #20]	@ (8006264 <_lseek_r+0x20>)
 8006250:	602a      	str	r2, [r5, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	f7ff f9e9 	bl	800562a <_lseek>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d102      	bne.n	8006262 <_lseek_r+0x1e>
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	b103      	cbz	r3, 8006262 <_lseek_r+0x1e>
 8006260:	6023      	str	r3, [r4, #0]
 8006262:	bd38      	pop	{r3, r4, r5, pc}
 8006264:	200007e0 	.word	0x200007e0

08006268 <_read_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	4604      	mov	r4, r0
 800626c:	4608      	mov	r0, r1
 800626e:	4611      	mov	r1, r2
 8006270:	2200      	movs	r2, #0
 8006272:	4d05      	ldr	r5, [pc, #20]	@ (8006288 <_read_r+0x20>)
 8006274:	602a      	str	r2, [r5, #0]
 8006276:	461a      	mov	r2, r3
 8006278:	f7ff f97a 	bl	8005570 <_read>
 800627c:	1c43      	adds	r3, r0, #1
 800627e:	d102      	bne.n	8006286 <_read_r+0x1e>
 8006280:	682b      	ldr	r3, [r5, #0]
 8006282:	b103      	cbz	r3, 8006286 <_read_r+0x1e>
 8006284:	6023      	str	r3, [r4, #0]
 8006286:	bd38      	pop	{r3, r4, r5, pc}
 8006288:	200007e0 	.word	0x200007e0

0800628c <_write_r>:
 800628c:	b538      	push	{r3, r4, r5, lr}
 800628e:	4604      	mov	r4, r0
 8006290:	4608      	mov	r0, r1
 8006292:	4611      	mov	r1, r2
 8006294:	2200      	movs	r2, #0
 8006296:	4d05      	ldr	r5, [pc, #20]	@ (80062ac <_write_r+0x20>)
 8006298:	602a      	str	r2, [r5, #0]
 800629a:	461a      	mov	r2, r3
 800629c:	f7ff f985 	bl	80055aa <_write>
 80062a0:	1c43      	adds	r3, r0, #1
 80062a2:	d102      	bne.n	80062aa <_write_r+0x1e>
 80062a4:	682b      	ldr	r3, [r5, #0]
 80062a6:	b103      	cbz	r3, 80062aa <_write_r+0x1e>
 80062a8:	6023      	str	r3, [r4, #0]
 80062aa:	bd38      	pop	{r3, r4, r5, pc}
 80062ac:	200007e0 	.word	0x200007e0

080062b0 <__errno>:
 80062b0:	4b01      	ldr	r3, [pc, #4]	@ (80062b8 <__errno+0x8>)
 80062b2:	6818      	ldr	r0, [r3, #0]
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	20000020 	.word	0x20000020

080062bc <__libc_init_array>:
 80062bc:	b570      	push	{r4, r5, r6, lr}
 80062be:	2600      	movs	r6, #0
 80062c0:	4d0c      	ldr	r5, [pc, #48]	@ (80062f4 <__libc_init_array+0x38>)
 80062c2:	4c0d      	ldr	r4, [pc, #52]	@ (80062f8 <__libc_init_array+0x3c>)
 80062c4:	1b64      	subs	r4, r4, r5
 80062c6:	10a4      	asrs	r4, r4, #2
 80062c8:	42a6      	cmp	r6, r4
 80062ca:	d109      	bne.n	80062e0 <__libc_init_array+0x24>
 80062cc:	f002 f96c 	bl	80085a8 <_init>
 80062d0:	2600      	movs	r6, #0
 80062d2:	4d0a      	ldr	r5, [pc, #40]	@ (80062fc <__libc_init_array+0x40>)
 80062d4:	4c0a      	ldr	r4, [pc, #40]	@ (8006300 <__libc_init_array+0x44>)
 80062d6:	1b64      	subs	r4, r4, r5
 80062d8:	10a4      	asrs	r4, r4, #2
 80062da:	42a6      	cmp	r6, r4
 80062dc:	d105      	bne.n	80062ea <__libc_init_array+0x2e>
 80062de:	bd70      	pop	{r4, r5, r6, pc}
 80062e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062e4:	4798      	blx	r3
 80062e6:	3601      	adds	r6, #1
 80062e8:	e7ee      	b.n	80062c8 <__libc_init_array+0xc>
 80062ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ee:	4798      	blx	r3
 80062f0:	3601      	adds	r6, #1
 80062f2:	e7f2      	b.n	80062da <__libc_init_array+0x1e>
 80062f4:	08009c88 	.word	0x08009c88
 80062f8:	08009c88 	.word	0x08009c88
 80062fc:	08009c88 	.word	0x08009c88
 8006300:	08009c8c 	.word	0x08009c8c

08006304 <__retarget_lock_init_recursive>:
 8006304:	4770      	bx	lr

08006306 <__retarget_lock_acquire_recursive>:
 8006306:	4770      	bx	lr

08006308 <__retarget_lock_release_recursive>:
 8006308:	4770      	bx	lr

0800630a <memchr>:
 800630a:	4603      	mov	r3, r0
 800630c:	b510      	push	{r4, lr}
 800630e:	b2c9      	uxtb	r1, r1
 8006310:	4402      	add	r2, r0
 8006312:	4293      	cmp	r3, r2
 8006314:	4618      	mov	r0, r3
 8006316:	d101      	bne.n	800631c <memchr+0x12>
 8006318:	2000      	movs	r0, #0
 800631a:	e003      	b.n	8006324 <memchr+0x1a>
 800631c:	7804      	ldrb	r4, [r0, #0]
 800631e:	3301      	adds	r3, #1
 8006320:	428c      	cmp	r4, r1
 8006322:	d1f6      	bne.n	8006312 <memchr+0x8>
 8006324:	bd10      	pop	{r4, pc}

08006326 <memcpy>:
 8006326:	440a      	add	r2, r1
 8006328:	4291      	cmp	r1, r2
 800632a:	f100 33ff 	add.w	r3, r0, #4294967295
 800632e:	d100      	bne.n	8006332 <memcpy+0xc>
 8006330:	4770      	bx	lr
 8006332:	b510      	push	{r4, lr}
 8006334:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006338:	4291      	cmp	r1, r2
 800633a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800633e:	d1f9      	bne.n	8006334 <memcpy+0xe>
 8006340:	bd10      	pop	{r4, pc}

08006342 <quorem>:
 8006342:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006346:	6903      	ldr	r3, [r0, #16]
 8006348:	690c      	ldr	r4, [r1, #16]
 800634a:	4607      	mov	r7, r0
 800634c:	42a3      	cmp	r3, r4
 800634e:	db7e      	blt.n	800644e <quorem+0x10c>
 8006350:	3c01      	subs	r4, #1
 8006352:	00a3      	lsls	r3, r4, #2
 8006354:	f100 0514 	add.w	r5, r0, #20
 8006358:	f101 0814 	add.w	r8, r1, #20
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006362:	9301      	str	r3, [sp, #4]
 8006364:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006368:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800636c:	3301      	adds	r3, #1
 800636e:	429a      	cmp	r2, r3
 8006370:	fbb2 f6f3 	udiv	r6, r2, r3
 8006374:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006378:	d32e      	bcc.n	80063d8 <quorem+0x96>
 800637a:	f04f 0a00 	mov.w	sl, #0
 800637e:	46c4      	mov	ip, r8
 8006380:	46ae      	mov	lr, r5
 8006382:	46d3      	mov	fp, sl
 8006384:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006388:	b298      	uxth	r0, r3
 800638a:	fb06 a000 	mla	r0, r6, r0, sl
 800638e:	0c1b      	lsrs	r3, r3, #16
 8006390:	0c02      	lsrs	r2, r0, #16
 8006392:	fb06 2303 	mla	r3, r6, r3, r2
 8006396:	f8de 2000 	ldr.w	r2, [lr]
 800639a:	b280      	uxth	r0, r0
 800639c:	b292      	uxth	r2, r2
 800639e:	1a12      	subs	r2, r2, r0
 80063a0:	445a      	add	r2, fp
 80063a2:	f8de 0000 	ldr.w	r0, [lr]
 80063a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80063b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80063b4:	b292      	uxth	r2, r2
 80063b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80063ba:	45e1      	cmp	r9, ip
 80063bc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80063c0:	f84e 2b04 	str.w	r2, [lr], #4
 80063c4:	d2de      	bcs.n	8006384 <quorem+0x42>
 80063c6:	9b00      	ldr	r3, [sp, #0]
 80063c8:	58eb      	ldr	r3, [r5, r3]
 80063ca:	b92b      	cbnz	r3, 80063d8 <quorem+0x96>
 80063cc:	9b01      	ldr	r3, [sp, #4]
 80063ce:	3b04      	subs	r3, #4
 80063d0:	429d      	cmp	r5, r3
 80063d2:	461a      	mov	r2, r3
 80063d4:	d32f      	bcc.n	8006436 <quorem+0xf4>
 80063d6:	613c      	str	r4, [r7, #16]
 80063d8:	4638      	mov	r0, r7
 80063da:	f001 f981 	bl	80076e0 <__mcmp>
 80063de:	2800      	cmp	r0, #0
 80063e0:	db25      	blt.n	800642e <quorem+0xec>
 80063e2:	4629      	mov	r1, r5
 80063e4:	2000      	movs	r0, #0
 80063e6:	f858 2b04 	ldr.w	r2, [r8], #4
 80063ea:	f8d1 c000 	ldr.w	ip, [r1]
 80063ee:	fa1f fe82 	uxth.w	lr, r2
 80063f2:	fa1f f38c 	uxth.w	r3, ip
 80063f6:	eba3 030e 	sub.w	r3, r3, lr
 80063fa:	4403      	add	r3, r0
 80063fc:	0c12      	lsrs	r2, r2, #16
 80063fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006402:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006406:	b29b      	uxth	r3, r3
 8006408:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800640c:	45c1      	cmp	r9, r8
 800640e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006412:	f841 3b04 	str.w	r3, [r1], #4
 8006416:	d2e6      	bcs.n	80063e6 <quorem+0xa4>
 8006418:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800641c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006420:	b922      	cbnz	r2, 800642c <quorem+0xea>
 8006422:	3b04      	subs	r3, #4
 8006424:	429d      	cmp	r5, r3
 8006426:	461a      	mov	r2, r3
 8006428:	d30b      	bcc.n	8006442 <quorem+0x100>
 800642a:	613c      	str	r4, [r7, #16]
 800642c:	3601      	adds	r6, #1
 800642e:	4630      	mov	r0, r6
 8006430:	b003      	add	sp, #12
 8006432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006436:	6812      	ldr	r2, [r2, #0]
 8006438:	3b04      	subs	r3, #4
 800643a:	2a00      	cmp	r2, #0
 800643c:	d1cb      	bne.n	80063d6 <quorem+0x94>
 800643e:	3c01      	subs	r4, #1
 8006440:	e7c6      	b.n	80063d0 <quorem+0x8e>
 8006442:	6812      	ldr	r2, [r2, #0]
 8006444:	3b04      	subs	r3, #4
 8006446:	2a00      	cmp	r2, #0
 8006448:	d1ef      	bne.n	800642a <quorem+0xe8>
 800644a:	3c01      	subs	r4, #1
 800644c:	e7ea      	b.n	8006424 <quorem+0xe2>
 800644e:	2000      	movs	r0, #0
 8006450:	e7ee      	b.n	8006430 <quorem+0xee>
 8006452:	0000      	movs	r0, r0
 8006454:	0000      	movs	r0, r0
	...

08006458 <_dtoa_r>:
 8006458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645c:	4614      	mov	r4, r2
 800645e:	461d      	mov	r5, r3
 8006460:	69c7      	ldr	r7, [r0, #28]
 8006462:	b097      	sub	sp, #92	@ 0x5c
 8006464:	4681      	mov	r9, r0
 8006466:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800646a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800646c:	b97f      	cbnz	r7, 800648e <_dtoa_r+0x36>
 800646e:	2010      	movs	r0, #16
 8006470:	f000 fe0e 	bl	8007090 <malloc>
 8006474:	4602      	mov	r2, r0
 8006476:	f8c9 001c 	str.w	r0, [r9, #28]
 800647a:	b920      	cbnz	r0, 8006486 <_dtoa_r+0x2e>
 800647c:	21ef      	movs	r1, #239	@ 0xef
 800647e:	4bac      	ldr	r3, [pc, #688]	@ (8006730 <_dtoa_r+0x2d8>)
 8006480:	48ac      	ldr	r0, [pc, #688]	@ (8006734 <_dtoa_r+0x2dc>)
 8006482:	f001 fc5f 	bl	8007d44 <__assert_func>
 8006486:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800648a:	6007      	str	r7, [r0, #0]
 800648c:	60c7      	str	r7, [r0, #12]
 800648e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006492:	6819      	ldr	r1, [r3, #0]
 8006494:	b159      	cbz	r1, 80064ae <_dtoa_r+0x56>
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	2301      	movs	r3, #1
 800649a:	4093      	lsls	r3, r2
 800649c:	604a      	str	r2, [r1, #4]
 800649e:	608b      	str	r3, [r1, #8]
 80064a0:	4648      	mov	r0, r9
 80064a2:	f000 feeb 	bl	800727c <_Bfree>
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	1e2b      	subs	r3, r5, #0
 80064b0:	bfaf      	iteee	ge
 80064b2:	2300      	movge	r3, #0
 80064b4:	2201      	movlt	r2, #1
 80064b6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80064ba:	9307      	strlt	r3, [sp, #28]
 80064bc:	bfa8      	it	ge
 80064be:	6033      	strge	r3, [r6, #0]
 80064c0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80064c4:	4b9c      	ldr	r3, [pc, #624]	@ (8006738 <_dtoa_r+0x2e0>)
 80064c6:	bfb8      	it	lt
 80064c8:	6032      	strlt	r2, [r6, #0]
 80064ca:	ea33 0308 	bics.w	r3, r3, r8
 80064ce:	d112      	bne.n	80064f6 <_dtoa_r+0x9e>
 80064d0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80064d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80064dc:	4323      	orrs	r3, r4
 80064de:	f000 855e 	beq.w	8006f9e <_dtoa_r+0xb46>
 80064e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80064e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800673c <_dtoa_r+0x2e4>
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 8560 	beq.w	8006fae <_dtoa_r+0xb56>
 80064ee:	f10a 0303 	add.w	r3, sl, #3
 80064f2:	f000 bd5a 	b.w	8006faa <_dtoa_r+0xb52>
 80064f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80064fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006502:	2200      	movs	r2, #0
 8006504:	2300      	movs	r3, #0
 8006506:	f7fa fa4f 	bl	80009a8 <__aeabi_dcmpeq>
 800650a:	4607      	mov	r7, r0
 800650c:	b158      	cbz	r0, 8006526 <_dtoa_r+0xce>
 800650e:	2301      	movs	r3, #1
 8006510:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006512:	6013      	str	r3, [r2, #0]
 8006514:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006516:	b113      	cbz	r3, 800651e <_dtoa_r+0xc6>
 8006518:	4b89      	ldr	r3, [pc, #548]	@ (8006740 <_dtoa_r+0x2e8>)
 800651a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006744 <_dtoa_r+0x2ec>
 8006522:	f000 bd44 	b.w	8006fae <_dtoa_r+0xb56>
 8006526:	ab14      	add	r3, sp, #80	@ 0x50
 8006528:	9301      	str	r3, [sp, #4]
 800652a:	ab15      	add	r3, sp, #84	@ 0x54
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	4648      	mov	r0, r9
 8006530:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006534:	f001 f984 	bl	8007840 <__d2b>
 8006538:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800653c:	9003      	str	r0, [sp, #12]
 800653e:	2e00      	cmp	r6, #0
 8006540:	d078      	beq.n	8006634 <_dtoa_r+0x1dc>
 8006542:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006546:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006548:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800654c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006550:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006554:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006558:	9712      	str	r7, [sp, #72]	@ 0x48
 800655a:	4619      	mov	r1, r3
 800655c:	2200      	movs	r2, #0
 800655e:	4b7a      	ldr	r3, [pc, #488]	@ (8006748 <_dtoa_r+0x2f0>)
 8006560:	f7f9 fe02 	bl	8000168 <__aeabi_dsub>
 8006564:	a36c      	add	r3, pc, #432	@ (adr r3, 8006718 <_dtoa_r+0x2c0>)
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	f7f9 ffb5 	bl	80004d8 <__aeabi_dmul>
 800656e:	a36c      	add	r3, pc, #432	@ (adr r3, 8006720 <_dtoa_r+0x2c8>)
 8006570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006574:	f7f9 fdfa 	bl	800016c <__adddf3>
 8006578:	4604      	mov	r4, r0
 800657a:	4630      	mov	r0, r6
 800657c:	460d      	mov	r5, r1
 800657e:	f7f9 ff41 	bl	8000404 <__aeabi_i2d>
 8006582:	a369      	add	r3, pc, #420	@ (adr r3, 8006728 <_dtoa_r+0x2d0>)
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	f7f9 ffa6 	bl	80004d8 <__aeabi_dmul>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	4620      	mov	r0, r4
 8006592:	4629      	mov	r1, r5
 8006594:	f7f9 fdea 	bl	800016c <__adddf3>
 8006598:	4604      	mov	r4, r0
 800659a:	460d      	mov	r5, r1
 800659c:	f7fa fa4c 	bl	8000a38 <__aeabi_d2iz>
 80065a0:	2200      	movs	r2, #0
 80065a2:	4607      	mov	r7, r0
 80065a4:	2300      	movs	r3, #0
 80065a6:	4620      	mov	r0, r4
 80065a8:	4629      	mov	r1, r5
 80065aa:	f7fa fa07 	bl	80009bc <__aeabi_dcmplt>
 80065ae:	b140      	cbz	r0, 80065c2 <_dtoa_r+0x16a>
 80065b0:	4638      	mov	r0, r7
 80065b2:	f7f9 ff27 	bl	8000404 <__aeabi_i2d>
 80065b6:	4622      	mov	r2, r4
 80065b8:	462b      	mov	r3, r5
 80065ba:	f7fa f9f5 	bl	80009a8 <__aeabi_dcmpeq>
 80065be:	b900      	cbnz	r0, 80065c2 <_dtoa_r+0x16a>
 80065c0:	3f01      	subs	r7, #1
 80065c2:	2f16      	cmp	r7, #22
 80065c4:	d854      	bhi.n	8006670 <_dtoa_r+0x218>
 80065c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065ca:	4b60      	ldr	r3, [pc, #384]	@ (800674c <_dtoa_r+0x2f4>)
 80065cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d4:	f7fa f9f2 	bl	80009bc <__aeabi_dcmplt>
 80065d8:	2800      	cmp	r0, #0
 80065da:	d04b      	beq.n	8006674 <_dtoa_r+0x21c>
 80065dc:	2300      	movs	r3, #0
 80065de:	3f01      	subs	r7, #1
 80065e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80065e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80065e4:	1b9b      	subs	r3, r3, r6
 80065e6:	1e5a      	subs	r2, r3, #1
 80065e8:	bf49      	itett	mi
 80065ea:	f1c3 0301 	rsbmi	r3, r3, #1
 80065ee:	2300      	movpl	r3, #0
 80065f0:	9304      	strmi	r3, [sp, #16]
 80065f2:	2300      	movmi	r3, #0
 80065f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80065f6:	bf54      	ite	pl
 80065f8:	9304      	strpl	r3, [sp, #16]
 80065fa:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80065fc:	2f00      	cmp	r7, #0
 80065fe:	db3b      	blt.n	8006678 <_dtoa_r+0x220>
 8006600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006602:	970e      	str	r7, [sp, #56]	@ 0x38
 8006604:	443b      	add	r3, r7
 8006606:	9309      	str	r3, [sp, #36]	@ 0x24
 8006608:	2300      	movs	r3, #0
 800660a:	930a      	str	r3, [sp, #40]	@ 0x28
 800660c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800660e:	2b09      	cmp	r3, #9
 8006610:	d865      	bhi.n	80066de <_dtoa_r+0x286>
 8006612:	2b05      	cmp	r3, #5
 8006614:	bfc4      	itt	gt
 8006616:	3b04      	subgt	r3, #4
 8006618:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800661a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800661c:	bfc8      	it	gt
 800661e:	2400      	movgt	r4, #0
 8006620:	f1a3 0302 	sub.w	r3, r3, #2
 8006624:	bfd8      	it	le
 8006626:	2401      	movle	r4, #1
 8006628:	2b03      	cmp	r3, #3
 800662a:	d864      	bhi.n	80066f6 <_dtoa_r+0x29e>
 800662c:	e8df f003 	tbb	[pc, r3]
 8006630:	2c385553 	.word	0x2c385553
 8006634:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006638:	441e      	add	r6, r3
 800663a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800663e:	2b20      	cmp	r3, #32
 8006640:	bfc1      	itttt	gt
 8006642:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006646:	fa08 f803 	lslgt.w	r8, r8, r3
 800664a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800664e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006652:	bfd6      	itet	le
 8006654:	f1c3 0320 	rsble	r3, r3, #32
 8006658:	ea48 0003 	orrgt.w	r0, r8, r3
 800665c:	fa04 f003 	lslle.w	r0, r4, r3
 8006660:	f7f9 fec0 	bl	80003e4 <__aeabi_ui2d>
 8006664:	2201      	movs	r2, #1
 8006666:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800666a:	3e01      	subs	r6, #1
 800666c:	9212      	str	r2, [sp, #72]	@ 0x48
 800666e:	e774      	b.n	800655a <_dtoa_r+0x102>
 8006670:	2301      	movs	r3, #1
 8006672:	e7b5      	b.n	80065e0 <_dtoa_r+0x188>
 8006674:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006676:	e7b4      	b.n	80065e2 <_dtoa_r+0x18a>
 8006678:	9b04      	ldr	r3, [sp, #16]
 800667a:	1bdb      	subs	r3, r3, r7
 800667c:	9304      	str	r3, [sp, #16]
 800667e:	427b      	negs	r3, r7
 8006680:	930a      	str	r3, [sp, #40]	@ 0x28
 8006682:	2300      	movs	r3, #0
 8006684:	930e      	str	r3, [sp, #56]	@ 0x38
 8006686:	e7c1      	b.n	800660c <_dtoa_r+0x1b4>
 8006688:	2301      	movs	r3, #1
 800668a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800668c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800668e:	eb07 0b03 	add.w	fp, r7, r3
 8006692:	f10b 0301 	add.w	r3, fp, #1
 8006696:	2b01      	cmp	r3, #1
 8006698:	9308      	str	r3, [sp, #32]
 800669a:	bfb8      	it	lt
 800669c:	2301      	movlt	r3, #1
 800669e:	e006      	b.n	80066ae <_dtoa_r+0x256>
 80066a0:	2301      	movs	r3, #1
 80066a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	dd28      	ble.n	80066fc <_dtoa_r+0x2a4>
 80066aa:	469b      	mov	fp, r3
 80066ac:	9308      	str	r3, [sp, #32]
 80066ae:	2100      	movs	r1, #0
 80066b0:	2204      	movs	r2, #4
 80066b2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80066b6:	f102 0514 	add.w	r5, r2, #20
 80066ba:	429d      	cmp	r5, r3
 80066bc:	d926      	bls.n	800670c <_dtoa_r+0x2b4>
 80066be:	6041      	str	r1, [r0, #4]
 80066c0:	4648      	mov	r0, r9
 80066c2:	f000 fd9b 	bl	80071fc <_Balloc>
 80066c6:	4682      	mov	sl, r0
 80066c8:	2800      	cmp	r0, #0
 80066ca:	d143      	bne.n	8006754 <_dtoa_r+0x2fc>
 80066cc:	4602      	mov	r2, r0
 80066ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80066d2:	4b1f      	ldr	r3, [pc, #124]	@ (8006750 <_dtoa_r+0x2f8>)
 80066d4:	e6d4      	b.n	8006480 <_dtoa_r+0x28>
 80066d6:	2300      	movs	r3, #0
 80066d8:	e7e3      	b.n	80066a2 <_dtoa_r+0x24a>
 80066da:	2300      	movs	r3, #0
 80066dc:	e7d5      	b.n	800668a <_dtoa_r+0x232>
 80066de:	2401      	movs	r4, #1
 80066e0:	2300      	movs	r3, #0
 80066e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80066e4:	9320      	str	r3, [sp, #128]	@ 0x80
 80066e6:	f04f 3bff 	mov.w	fp, #4294967295
 80066ea:	2200      	movs	r2, #0
 80066ec:	2312      	movs	r3, #18
 80066ee:	f8cd b020 	str.w	fp, [sp, #32]
 80066f2:	9221      	str	r2, [sp, #132]	@ 0x84
 80066f4:	e7db      	b.n	80066ae <_dtoa_r+0x256>
 80066f6:	2301      	movs	r3, #1
 80066f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066fa:	e7f4      	b.n	80066e6 <_dtoa_r+0x28e>
 80066fc:	f04f 0b01 	mov.w	fp, #1
 8006700:	465b      	mov	r3, fp
 8006702:	f8cd b020 	str.w	fp, [sp, #32]
 8006706:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800670a:	e7d0      	b.n	80066ae <_dtoa_r+0x256>
 800670c:	3101      	adds	r1, #1
 800670e:	0052      	lsls	r2, r2, #1
 8006710:	e7d1      	b.n	80066b6 <_dtoa_r+0x25e>
 8006712:	bf00      	nop
 8006714:	f3af 8000 	nop.w
 8006718:	636f4361 	.word	0x636f4361
 800671c:	3fd287a7 	.word	0x3fd287a7
 8006720:	8b60c8b3 	.word	0x8b60c8b3
 8006724:	3fc68a28 	.word	0x3fc68a28
 8006728:	509f79fb 	.word	0x509f79fb
 800672c:	3fd34413 	.word	0x3fd34413
 8006730:	08009939 	.word	0x08009939
 8006734:	08009950 	.word	0x08009950
 8006738:	7ff00000 	.word	0x7ff00000
 800673c:	08009935 	.word	0x08009935
 8006740:	08009909 	.word	0x08009909
 8006744:	08009908 	.word	0x08009908
 8006748:	3ff80000 	.word	0x3ff80000
 800674c:	08009aa0 	.word	0x08009aa0
 8006750:	080099a8 	.word	0x080099a8
 8006754:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006758:	6018      	str	r0, [r3, #0]
 800675a:	9b08      	ldr	r3, [sp, #32]
 800675c:	2b0e      	cmp	r3, #14
 800675e:	f200 80a1 	bhi.w	80068a4 <_dtoa_r+0x44c>
 8006762:	2c00      	cmp	r4, #0
 8006764:	f000 809e 	beq.w	80068a4 <_dtoa_r+0x44c>
 8006768:	2f00      	cmp	r7, #0
 800676a:	dd33      	ble.n	80067d4 <_dtoa_r+0x37c>
 800676c:	4b9c      	ldr	r3, [pc, #624]	@ (80069e0 <_dtoa_r+0x588>)
 800676e:	f007 020f 	and.w	r2, r7, #15
 8006772:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006776:	05f8      	lsls	r0, r7, #23
 8006778:	e9d3 3400 	ldrd	r3, r4, [r3]
 800677c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006780:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006784:	d516      	bpl.n	80067b4 <_dtoa_r+0x35c>
 8006786:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800678a:	4b96      	ldr	r3, [pc, #600]	@ (80069e4 <_dtoa_r+0x58c>)
 800678c:	2603      	movs	r6, #3
 800678e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006792:	f7f9 ffcb 	bl	800072c <__aeabi_ddiv>
 8006796:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800679a:	f004 040f 	and.w	r4, r4, #15
 800679e:	4d91      	ldr	r5, [pc, #580]	@ (80069e4 <_dtoa_r+0x58c>)
 80067a0:	b954      	cbnz	r4, 80067b8 <_dtoa_r+0x360>
 80067a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80067a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067aa:	f7f9 ffbf 	bl	800072c <__aeabi_ddiv>
 80067ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80067b2:	e028      	b.n	8006806 <_dtoa_r+0x3ae>
 80067b4:	2602      	movs	r6, #2
 80067b6:	e7f2      	b.n	800679e <_dtoa_r+0x346>
 80067b8:	07e1      	lsls	r1, r4, #31
 80067ba:	d508      	bpl.n	80067ce <_dtoa_r+0x376>
 80067bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80067c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80067c4:	f7f9 fe88 	bl	80004d8 <__aeabi_dmul>
 80067c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80067cc:	3601      	adds	r6, #1
 80067ce:	1064      	asrs	r4, r4, #1
 80067d0:	3508      	adds	r5, #8
 80067d2:	e7e5      	b.n	80067a0 <_dtoa_r+0x348>
 80067d4:	f000 80af 	beq.w	8006936 <_dtoa_r+0x4de>
 80067d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067dc:	427c      	negs	r4, r7
 80067de:	4b80      	ldr	r3, [pc, #512]	@ (80069e0 <_dtoa_r+0x588>)
 80067e0:	f004 020f 	and.w	r2, r4, #15
 80067e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	f7f9 fe74 	bl	80004d8 <__aeabi_dmul>
 80067f0:	2602      	movs	r6, #2
 80067f2:	2300      	movs	r3, #0
 80067f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80067f8:	4d7a      	ldr	r5, [pc, #488]	@ (80069e4 <_dtoa_r+0x58c>)
 80067fa:	1124      	asrs	r4, r4, #4
 80067fc:	2c00      	cmp	r4, #0
 80067fe:	f040 808f 	bne.w	8006920 <_dtoa_r+0x4c8>
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1d3      	bne.n	80067ae <_dtoa_r+0x356>
 8006806:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800680a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 8094 	beq.w	800693a <_dtoa_r+0x4e2>
 8006812:	2200      	movs	r2, #0
 8006814:	4620      	mov	r0, r4
 8006816:	4629      	mov	r1, r5
 8006818:	4b73      	ldr	r3, [pc, #460]	@ (80069e8 <_dtoa_r+0x590>)
 800681a:	f7fa f8cf 	bl	80009bc <__aeabi_dcmplt>
 800681e:	2800      	cmp	r0, #0
 8006820:	f000 808b 	beq.w	800693a <_dtoa_r+0x4e2>
 8006824:	9b08      	ldr	r3, [sp, #32]
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 8087 	beq.w	800693a <_dtoa_r+0x4e2>
 800682c:	f1bb 0f00 	cmp.w	fp, #0
 8006830:	dd34      	ble.n	800689c <_dtoa_r+0x444>
 8006832:	4620      	mov	r0, r4
 8006834:	2200      	movs	r2, #0
 8006836:	4629      	mov	r1, r5
 8006838:	4b6c      	ldr	r3, [pc, #432]	@ (80069ec <_dtoa_r+0x594>)
 800683a:	f7f9 fe4d 	bl	80004d8 <__aeabi_dmul>
 800683e:	465c      	mov	r4, fp
 8006840:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006844:	f107 38ff 	add.w	r8, r7, #4294967295
 8006848:	3601      	adds	r6, #1
 800684a:	4630      	mov	r0, r6
 800684c:	f7f9 fdda 	bl	8000404 <__aeabi_i2d>
 8006850:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006854:	f7f9 fe40 	bl	80004d8 <__aeabi_dmul>
 8006858:	2200      	movs	r2, #0
 800685a:	4b65      	ldr	r3, [pc, #404]	@ (80069f0 <_dtoa_r+0x598>)
 800685c:	f7f9 fc86 	bl	800016c <__adddf3>
 8006860:	4605      	mov	r5, r0
 8006862:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006866:	2c00      	cmp	r4, #0
 8006868:	d16a      	bne.n	8006940 <_dtoa_r+0x4e8>
 800686a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800686e:	2200      	movs	r2, #0
 8006870:	4b60      	ldr	r3, [pc, #384]	@ (80069f4 <_dtoa_r+0x59c>)
 8006872:	f7f9 fc79 	bl	8000168 <__aeabi_dsub>
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800687e:	462a      	mov	r2, r5
 8006880:	4633      	mov	r3, r6
 8006882:	f7fa f8b9 	bl	80009f8 <__aeabi_dcmpgt>
 8006886:	2800      	cmp	r0, #0
 8006888:	f040 8298 	bne.w	8006dbc <_dtoa_r+0x964>
 800688c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006890:	462a      	mov	r2, r5
 8006892:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006896:	f7fa f891 	bl	80009bc <__aeabi_dcmplt>
 800689a:	bb38      	cbnz	r0, 80068ec <_dtoa_r+0x494>
 800689c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80068a0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80068a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f2c0 8157 	blt.w	8006b5a <_dtoa_r+0x702>
 80068ac:	2f0e      	cmp	r7, #14
 80068ae:	f300 8154 	bgt.w	8006b5a <_dtoa_r+0x702>
 80068b2:	4b4b      	ldr	r3, [pc, #300]	@ (80069e0 <_dtoa_r+0x588>)
 80068b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80068b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068bc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80068c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f280 80e5 	bge.w	8006a92 <_dtoa_r+0x63a>
 80068c8:	9b08      	ldr	r3, [sp, #32]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f300 80e1 	bgt.w	8006a92 <_dtoa_r+0x63a>
 80068d0:	d10c      	bne.n	80068ec <_dtoa_r+0x494>
 80068d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068d6:	2200      	movs	r2, #0
 80068d8:	4b46      	ldr	r3, [pc, #280]	@ (80069f4 <_dtoa_r+0x59c>)
 80068da:	f7f9 fdfd 	bl	80004d8 <__aeabi_dmul>
 80068de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068e2:	f7fa f87f 	bl	80009e4 <__aeabi_dcmpge>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	f000 8266 	beq.w	8006db8 <_dtoa_r+0x960>
 80068ec:	2400      	movs	r4, #0
 80068ee:	4625      	mov	r5, r4
 80068f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80068f2:	4656      	mov	r6, sl
 80068f4:	ea6f 0803 	mvn.w	r8, r3
 80068f8:	2700      	movs	r7, #0
 80068fa:	4621      	mov	r1, r4
 80068fc:	4648      	mov	r0, r9
 80068fe:	f000 fcbd 	bl	800727c <_Bfree>
 8006902:	2d00      	cmp	r5, #0
 8006904:	f000 80bd 	beq.w	8006a82 <_dtoa_r+0x62a>
 8006908:	b12f      	cbz	r7, 8006916 <_dtoa_r+0x4be>
 800690a:	42af      	cmp	r7, r5
 800690c:	d003      	beq.n	8006916 <_dtoa_r+0x4be>
 800690e:	4639      	mov	r1, r7
 8006910:	4648      	mov	r0, r9
 8006912:	f000 fcb3 	bl	800727c <_Bfree>
 8006916:	4629      	mov	r1, r5
 8006918:	4648      	mov	r0, r9
 800691a:	f000 fcaf 	bl	800727c <_Bfree>
 800691e:	e0b0      	b.n	8006a82 <_dtoa_r+0x62a>
 8006920:	07e2      	lsls	r2, r4, #31
 8006922:	d505      	bpl.n	8006930 <_dtoa_r+0x4d8>
 8006924:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006928:	f7f9 fdd6 	bl	80004d8 <__aeabi_dmul>
 800692c:	2301      	movs	r3, #1
 800692e:	3601      	adds	r6, #1
 8006930:	1064      	asrs	r4, r4, #1
 8006932:	3508      	adds	r5, #8
 8006934:	e762      	b.n	80067fc <_dtoa_r+0x3a4>
 8006936:	2602      	movs	r6, #2
 8006938:	e765      	b.n	8006806 <_dtoa_r+0x3ae>
 800693a:	46b8      	mov	r8, r7
 800693c:	9c08      	ldr	r4, [sp, #32]
 800693e:	e784      	b.n	800684a <_dtoa_r+0x3f2>
 8006940:	4b27      	ldr	r3, [pc, #156]	@ (80069e0 <_dtoa_r+0x588>)
 8006942:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006944:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006948:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800694c:	4454      	add	r4, sl
 800694e:	2900      	cmp	r1, #0
 8006950:	d054      	beq.n	80069fc <_dtoa_r+0x5a4>
 8006952:	2000      	movs	r0, #0
 8006954:	4928      	ldr	r1, [pc, #160]	@ (80069f8 <_dtoa_r+0x5a0>)
 8006956:	f7f9 fee9 	bl	800072c <__aeabi_ddiv>
 800695a:	4633      	mov	r3, r6
 800695c:	462a      	mov	r2, r5
 800695e:	f7f9 fc03 	bl	8000168 <__aeabi_dsub>
 8006962:	4656      	mov	r6, sl
 8006964:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006968:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800696c:	f7fa f864 	bl	8000a38 <__aeabi_d2iz>
 8006970:	4605      	mov	r5, r0
 8006972:	f7f9 fd47 	bl	8000404 <__aeabi_i2d>
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800697e:	f7f9 fbf3 	bl	8000168 <__aeabi_dsub>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	3530      	adds	r5, #48	@ 0x30
 8006988:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800698c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006990:	f806 5b01 	strb.w	r5, [r6], #1
 8006994:	f7fa f812 	bl	80009bc <__aeabi_dcmplt>
 8006998:	2800      	cmp	r0, #0
 800699a:	d172      	bne.n	8006a82 <_dtoa_r+0x62a>
 800699c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069a0:	2000      	movs	r0, #0
 80069a2:	4911      	ldr	r1, [pc, #68]	@ (80069e8 <_dtoa_r+0x590>)
 80069a4:	f7f9 fbe0 	bl	8000168 <__aeabi_dsub>
 80069a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069ac:	f7fa f806 	bl	80009bc <__aeabi_dcmplt>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	f040 80b4 	bne.w	8006b1e <_dtoa_r+0x6c6>
 80069b6:	42a6      	cmp	r6, r4
 80069b8:	f43f af70 	beq.w	800689c <_dtoa_r+0x444>
 80069bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80069c0:	2200      	movs	r2, #0
 80069c2:	4b0a      	ldr	r3, [pc, #40]	@ (80069ec <_dtoa_r+0x594>)
 80069c4:	f7f9 fd88 	bl	80004d8 <__aeabi_dmul>
 80069c8:	2200      	movs	r2, #0
 80069ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80069ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069d2:	4b06      	ldr	r3, [pc, #24]	@ (80069ec <_dtoa_r+0x594>)
 80069d4:	f7f9 fd80 	bl	80004d8 <__aeabi_dmul>
 80069d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069dc:	e7c4      	b.n	8006968 <_dtoa_r+0x510>
 80069de:	bf00      	nop
 80069e0:	08009aa0 	.word	0x08009aa0
 80069e4:	08009a78 	.word	0x08009a78
 80069e8:	3ff00000 	.word	0x3ff00000
 80069ec:	40240000 	.word	0x40240000
 80069f0:	401c0000 	.word	0x401c0000
 80069f4:	40140000 	.word	0x40140000
 80069f8:	3fe00000 	.word	0x3fe00000
 80069fc:	4631      	mov	r1, r6
 80069fe:	4628      	mov	r0, r5
 8006a00:	f7f9 fd6a 	bl	80004d8 <__aeabi_dmul>
 8006a04:	4656      	mov	r6, sl
 8006a06:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a0a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006a0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a10:	f7fa f812 	bl	8000a38 <__aeabi_d2iz>
 8006a14:	4605      	mov	r5, r0
 8006a16:	f7f9 fcf5 	bl	8000404 <__aeabi_i2d>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a22:	f7f9 fba1 	bl	8000168 <__aeabi_dsub>
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	3530      	adds	r5, #48	@ 0x30
 8006a2c:	f806 5b01 	strb.w	r5, [r6], #1
 8006a30:	42a6      	cmp	r6, r4
 8006a32:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a36:	f04f 0200 	mov.w	r2, #0
 8006a3a:	d124      	bne.n	8006a86 <_dtoa_r+0x62e>
 8006a3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a40:	4bae      	ldr	r3, [pc, #696]	@ (8006cfc <_dtoa_r+0x8a4>)
 8006a42:	f7f9 fb93 	bl	800016c <__adddf3>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a4e:	f7f9 ffd3 	bl	80009f8 <__aeabi_dcmpgt>
 8006a52:	2800      	cmp	r0, #0
 8006a54:	d163      	bne.n	8006b1e <_dtoa_r+0x6c6>
 8006a56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	49a7      	ldr	r1, [pc, #668]	@ (8006cfc <_dtoa_r+0x8a4>)
 8006a5e:	f7f9 fb83 	bl	8000168 <__aeabi_dsub>
 8006a62:	4602      	mov	r2, r0
 8006a64:	460b      	mov	r3, r1
 8006a66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a6a:	f7f9 ffa7 	bl	80009bc <__aeabi_dcmplt>
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	f43f af14 	beq.w	800689c <_dtoa_r+0x444>
 8006a74:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006a76:	1e73      	subs	r3, r6, #1
 8006a78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006a7e:	2b30      	cmp	r3, #48	@ 0x30
 8006a80:	d0f8      	beq.n	8006a74 <_dtoa_r+0x61c>
 8006a82:	4647      	mov	r7, r8
 8006a84:	e03b      	b.n	8006afe <_dtoa_r+0x6a6>
 8006a86:	4b9e      	ldr	r3, [pc, #632]	@ (8006d00 <_dtoa_r+0x8a8>)
 8006a88:	f7f9 fd26 	bl	80004d8 <__aeabi_dmul>
 8006a8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a90:	e7bc      	b.n	8006a0c <_dtoa_r+0x5b4>
 8006a92:	4656      	mov	r6, sl
 8006a94:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006a98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	f7f9 fe44 	bl	800072c <__aeabi_ddiv>
 8006aa4:	f7f9 ffc8 	bl	8000a38 <__aeabi_d2iz>
 8006aa8:	4680      	mov	r8, r0
 8006aaa:	f7f9 fcab 	bl	8000404 <__aeabi_i2d>
 8006aae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ab2:	f7f9 fd11 	bl	80004d8 <__aeabi_dmul>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4620      	mov	r0, r4
 8006abc:	4629      	mov	r1, r5
 8006abe:	f7f9 fb53 	bl	8000168 <__aeabi_dsub>
 8006ac2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006ac6:	9d08      	ldr	r5, [sp, #32]
 8006ac8:	f806 4b01 	strb.w	r4, [r6], #1
 8006acc:	eba6 040a 	sub.w	r4, r6, sl
 8006ad0:	42a5      	cmp	r5, r4
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	d133      	bne.n	8006b40 <_dtoa_r+0x6e8>
 8006ad8:	f7f9 fb48 	bl	800016c <__adddf3>
 8006adc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	460d      	mov	r5, r1
 8006ae4:	f7f9 ff88 	bl	80009f8 <__aeabi_dcmpgt>
 8006ae8:	b9c0      	cbnz	r0, 8006b1c <_dtoa_r+0x6c4>
 8006aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aee:	4620      	mov	r0, r4
 8006af0:	4629      	mov	r1, r5
 8006af2:	f7f9 ff59 	bl	80009a8 <__aeabi_dcmpeq>
 8006af6:	b110      	cbz	r0, 8006afe <_dtoa_r+0x6a6>
 8006af8:	f018 0f01 	tst.w	r8, #1
 8006afc:	d10e      	bne.n	8006b1c <_dtoa_r+0x6c4>
 8006afe:	4648      	mov	r0, r9
 8006b00:	9903      	ldr	r1, [sp, #12]
 8006b02:	f000 fbbb 	bl	800727c <_Bfree>
 8006b06:	2300      	movs	r3, #0
 8006b08:	7033      	strb	r3, [r6, #0]
 8006b0a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006b0c:	3701      	adds	r7, #1
 8006b0e:	601f      	str	r7, [r3, #0]
 8006b10:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 824b 	beq.w	8006fae <_dtoa_r+0xb56>
 8006b18:	601e      	str	r6, [r3, #0]
 8006b1a:	e248      	b.n	8006fae <_dtoa_r+0xb56>
 8006b1c:	46b8      	mov	r8, r7
 8006b1e:	4633      	mov	r3, r6
 8006b20:	461e      	mov	r6, r3
 8006b22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b26:	2a39      	cmp	r2, #57	@ 0x39
 8006b28:	d106      	bne.n	8006b38 <_dtoa_r+0x6e0>
 8006b2a:	459a      	cmp	sl, r3
 8006b2c:	d1f8      	bne.n	8006b20 <_dtoa_r+0x6c8>
 8006b2e:	2230      	movs	r2, #48	@ 0x30
 8006b30:	f108 0801 	add.w	r8, r8, #1
 8006b34:	f88a 2000 	strb.w	r2, [sl]
 8006b38:	781a      	ldrb	r2, [r3, #0]
 8006b3a:	3201      	adds	r2, #1
 8006b3c:	701a      	strb	r2, [r3, #0]
 8006b3e:	e7a0      	b.n	8006a82 <_dtoa_r+0x62a>
 8006b40:	2200      	movs	r2, #0
 8006b42:	4b6f      	ldr	r3, [pc, #444]	@ (8006d00 <_dtoa_r+0x8a8>)
 8006b44:	f7f9 fcc8 	bl	80004d8 <__aeabi_dmul>
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	460d      	mov	r5, r1
 8006b50:	f7f9 ff2a 	bl	80009a8 <__aeabi_dcmpeq>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d09f      	beq.n	8006a98 <_dtoa_r+0x640>
 8006b58:	e7d1      	b.n	8006afe <_dtoa_r+0x6a6>
 8006b5a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006b5c:	2a00      	cmp	r2, #0
 8006b5e:	f000 80ea 	beq.w	8006d36 <_dtoa_r+0x8de>
 8006b62:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006b64:	2a01      	cmp	r2, #1
 8006b66:	f300 80cd 	bgt.w	8006d04 <_dtoa_r+0x8ac>
 8006b6a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006b6c:	2a00      	cmp	r2, #0
 8006b6e:	f000 80c1 	beq.w	8006cf4 <_dtoa_r+0x89c>
 8006b72:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006b76:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006b78:	9e04      	ldr	r6, [sp, #16]
 8006b7a:	9a04      	ldr	r2, [sp, #16]
 8006b7c:	2101      	movs	r1, #1
 8006b7e:	441a      	add	r2, r3
 8006b80:	9204      	str	r2, [sp, #16]
 8006b82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b84:	4648      	mov	r0, r9
 8006b86:	441a      	add	r2, r3
 8006b88:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b8a:	f000 fc2b 	bl	80073e4 <__i2b>
 8006b8e:	4605      	mov	r5, r0
 8006b90:	b166      	cbz	r6, 8006bac <_dtoa_r+0x754>
 8006b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	dd09      	ble.n	8006bac <_dtoa_r+0x754>
 8006b98:	42b3      	cmp	r3, r6
 8006b9a:	bfa8      	it	ge
 8006b9c:	4633      	movge	r3, r6
 8006b9e:	9a04      	ldr	r2, [sp, #16]
 8006ba0:	1af6      	subs	r6, r6, r3
 8006ba2:	1ad2      	subs	r2, r2, r3
 8006ba4:	9204      	str	r2, [sp, #16]
 8006ba6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bae:	b30b      	cbz	r3, 8006bf4 <_dtoa_r+0x79c>
 8006bb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f000 80c6 	beq.w	8006d44 <_dtoa_r+0x8ec>
 8006bb8:	2c00      	cmp	r4, #0
 8006bba:	f000 80c0 	beq.w	8006d3e <_dtoa_r+0x8e6>
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	4622      	mov	r2, r4
 8006bc2:	4648      	mov	r0, r9
 8006bc4:	f000 fcc6 	bl	8007554 <__pow5mult>
 8006bc8:	9a03      	ldr	r2, [sp, #12]
 8006bca:	4601      	mov	r1, r0
 8006bcc:	4605      	mov	r5, r0
 8006bce:	4648      	mov	r0, r9
 8006bd0:	f000 fc1e 	bl	8007410 <__multiply>
 8006bd4:	9903      	ldr	r1, [sp, #12]
 8006bd6:	4680      	mov	r8, r0
 8006bd8:	4648      	mov	r0, r9
 8006bda:	f000 fb4f 	bl	800727c <_Bfree>
 8006bde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006be0:	1b1b      	subs	r3, r3, r4
 8006be2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006be4:	f000 80b1 	beq.w	8006d4a <_dtoa_r+0x8f2>
 8006be8:	4641      	mov	r1, r8
 8006bea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006bec:	4648      	mov	r0, r9
 8006bee:	f000 fcb1 	bl	8007554 <__pow5mult>
 8006bf2:	9003      	str	r0, [sp, #12]
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	4648      	mov	r0, r9
 8006bf8:	f000 fbf4 	bl	80073e4 <__i2b>
 8006bfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bfe:	4604      	mov	r4, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 81d8 	beq.w	8006fb6 <_dtoa_r+0xb5e>
 8006c06:	461a      	mov	r2, r3
 8006c08:	4601      	mov	r1, r0
 8006c0a:	4648      	mov	r0, r9
 8006c0c:	f000 fca2 	bl	8007554 <__pow5mult>
 8006c10:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c12:	4604      	mov	r4, r0
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	f300 809f 	bgt.w	8006d58 <_dtoa_r+0x900>
 8006c1a:	9b06      	ldr	r3, [sp, #24]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f040 8097 	bne.w	8006d50 <_dtoa_r+0x8f8>
 8006c22:	9b07      	ldr	r3, [sp, #28]
 8006c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f040 8093 	bne.w	8006d54 <_dtoa_r+0x8fc>
 8006c2e:	9b07      	ldr	r3, [sp, #28]
 8006c30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c34:	0d1b      	lsrs	r3, r3, #20
 8006c36:	051b      	lsls	r3, r3, #20
 8006c38:	b133      	cbz	r3, 8006c48 <_dtoa_r+0x7f0>
 8006c3a:	9b04      	ldr	r3, [sp, #16]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	9304      	str	r3, [sp, #16]
 8006c40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c42:	3301      	adds	r3, #1
 8006c44:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c46:	2301      	movs	r3, #1
 8006c48:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 81b8 	beq.w	8006fc2 <_dtoa_r+0xb6a>
 8006c52:	6923      	ldr	r3, [r4, #16]
 8006c54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c58:	6918      	ldr	r0, [r3, #16]
 8006c5a:	f000 fb77 	bl	800734c <__hi0bits>
 8006c5e:	f1c0 0020 	rsb	r0, r0, #32
 8006c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c64:	4418      	add	r0, r3
 8006c66:	f010 001f 	ands.w	r0, r0, #31
 8006c6a:	f000 8082 	beq.w	8006d72 <_dtoa_r+0x91a>
 8006c6e:	f1c0 0320 	rsb	r3, r0, #32
 8006c72:	2b04      	cmp	r3, #4
 8006c74:	dd73      	ble.n	8006d5e <_dtoa_r+0x906>
 8006c76:	9b04      	ldr	r3, [sp, #16]
 8006c78:	f1c0 001c 	rsb	r0, r0, #28
 8006c7c:	4403      	add	r3, r0
 8006c7e:	9304      	str	r3, [sp, #16]
 8006c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c82:	4406      	add	r6, r0
 8006c84:	4403      	add	r3, r0
 8006c86:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c88:	9b04      	ldr	r3, [sp, #16]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	dd05      	ble.n	8006c9a <_dtoa_r+0x842>
 8006c8e:	461a      	mov	r2, r3
 8006c90:	4648      	mov	r0, r9
 8006c92:	9903      	ldr	r1, [sp, #12]
 8006c94:	f000 fcb8 	bl	8007608 <__lshift>
 8006c98:	9003      	str	r0, [sp, #12]
 8006c9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	dd05      	ble.n	8006cac <_dtoa_r+0x854>
 8006ca0:	4621      	mov	r1, r4
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	4648      	mov	r0, r9
 8006ca6:	f000 fcaf 	bl	8007608 <__lshift>
 8006caa:	4604      	mov	r4, r0
 8006cac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d061      	beq.n	8006d76 <_dtoa_r+0x91e>
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	9803      	ldr	r0, [sp, #12]
 8006cb6:	f000 fd13 	bl	80076e0 <__mcmp>
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	da5b      	bge.n	8006d76 <_dtoa_r+0x91e>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	220a      	movs	r2, #10
 8006cc2:	4648      	mov	r0, r9
 8006cc4:	9903      	ldr	r1, [sp, #12]
 8006cc6:	f000 fafb 	bl	80072c0 <__multadd>
 8006cca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ccc:	f107 38ff 	add.w	r8, r7, #4294967295
 8006cd0:	9003      	str	r0, [sp, #12]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 8177 	beq.w	8006fc6 <_dtoa_r+0xb6e>
 8006cd8:	4629      	mov	r1, r5
 8006cda:	2300      	movs	r3, #0
 8006cdc:	220a      	movs	r2, #10
 8006cde:	4648      	mov	r0, r9
 8006ce0:	f000 faee 	bl	80072c0 <__multadd>
 8006ce4:	f1bb 0f00 	cmp.w	fp, #0
 8006ce8:	4605      	mov	r5, r0
 8006cea:	dc6f      	bgt.n	8006dcc <_dtoa_r+0x974>
 8006cec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	dc49      	bgt.n	8006d86 <_dtoa_r+0x92e>
 8006cf2:	e06b      	b.n	8006dcc <_dtoa_r+0x974>
 8006cf4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006cf6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006cfa:	e73c      	b.n	8006b76 <_dtoa_r+0x71e>
 8006cfc:	3fe00000 	.word	0x3fe00000
 8006d00:	40240000 	.word	0x40240000
 8006d04:	9b08      	ldr	r3, [sp, #32]
 8006d06:	1e5c      	subs	r4, r3, #1
 8006d08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d0a:	42a3      	cmp	r3, r4
 8006d0c:	db09      	blt.n	8006d22 <_dtoa_r+0x8ca>
 8006d0e:	1b1c      	subs	r4, r3, r4
 8006d10:	9b08      	ldr	r3, [sp, #32]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f6bf af30 	bge.w	8006b78 <_dtoa_r+0x720>
 8006d18:	9b04      	ldr	r3, [sp, #16]
 8006d1a:	9a08      	ldr	r2, [sp, #32]
 8006d1c:	1a9e      	subs	r6, r3, r2
 8006d1e:	2300      	movs	r3, #0
 8006d20:	e72b      	b.n	8006b7a <_dtoa_r+0x722>
 8006d22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d26:	1ae3      	subs	r3, r4, r3
 8006d28:	441a      	add	r2, r3
 8006d2a:	940a      	str	r4, [sp, #40]	@ 0x28
 8006d2c:	9e04      	ldr	r6, [sp, #16]
 8006d2e:	2400      	movs	r4, #0
 8006d30:	9b08      	ldr	r3, [sp, #32]
 8006d32:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d34:	e721      	b.n	8006b7a <_dtoa_r+0x722>
 8006d36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006d38:	9e04      	ldr	r6, [sp, #16]
 8006d3a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006d3c:	e728      	b.n	8006b90 <_dtoa_r+0x738>
 8006d3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006d42:	e751      	b.n	8006be8 <_dtoa_r+0x790>
 8006d44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d46:	9903      	ldr	r1, [sp, #12]
 8006d48:	e750      	b.n	8006bec <_dtoa_r+0x794>
 8006d4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d4e:	e751      	b.n	8006bf4 <_dtoa_r+0x79c>
 8006d50:	2300      	movs	r3, #0
 8006d52:	e779      	b.n	8006c48 <_dtoa_r+0x7f0>
 8006d54:	9b06      	ldr	r3, [sp, #24]
 8006d56:	e777      	b.n	8006c48 <_dtoa_r+0x7f0>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d5c:	e779      	b.n	8006c52 <_dtoa_r+0x7fa>
 8006d5e:	d093      	beq.n	8006c88 <_dtoa_r+0x830>
 8006d60:	9a04      	ldr	r2, [sp, #16]
 8006d62:	331c      	adds	r3, #28
 8006d64:	441a      	add	r2, r3
 8006d66:	9204      	str	r2, [sp, #16]
 8006d68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d6a:	441e      	add	r6, r3
 8006d6c:	441a      	add	r2, r3
 8006d6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d70:	e78a      	b.n	8006c88 <_dtoa_r+0x830>
 8006d72:	4603      	mov	r3, r0
 8006d74:	e7f4      	b.n	8006d60 <_dtoa_r+0x908>
 8006d76:	9b08      	ldr	r3, [sp, #32]
 8006d78:	46b8      	mov	r8, r7
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	dc20      	bgt.n	8006dc0 <_dtoa_r+0x968>
 8006d7e:	469b      	mov	fp, r3
 8006d80:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	dd1e      	ble.n	8006dc4 <_dtoa_r+0x96c>
 8006d86:	f1bb 0f00 	cmp.w	fp, #0
 8006d8a:	f47f adb1 	bne.w	80068f0 <_dtoa_r+0x498>
 8006d8e:	4621      	mov	r1, r4
 8006d90:	465b      	mov	r3, fp
 8006d92:	2205      	movs	r2, #5
 8006d94:	4648      	mov	r0, r9
 8006d96:	f000 fa93 	bl	80072c0 <__multadd>
 8006d9a:	4601      	mov	r1, r0
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	9803      	ldr	r0, [sp, #12]
 8006da0:	f000 fc9e 	bl	80076e0 <__mcmp>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	f77f ada3 	ble.w	80068f0 <_dtoa_r+0x498>
 8006daa:	4656      	mov	r6, sl
 8006dac:	2331      	movs	r3, #49	@ 0x31
 8006dae:	f108 0801 	add.w	r8, r8, #1
 8006db2:	f806 3b01 	strb.w	r3, [r6], #1
 8006db6:	e59f      	b.n	80068f8 <_dtoa_r+0x4a0>
 8006db8:	46b8      	mov	r8, r7
 8006dba:	9c08      	ldr	r4, [sp, #32]
 8006dbc:	4625      	mov	r5, r4
 8006dbe:	e7f4      	b.n	8006daa <_dtoa_r+0x952>
 8006dc0:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006dc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 8101 	beq.w	8006fce <_dtoa_r+0xb76>
 8006dcc:	2e00      	cmp	r6, #0
 8006dce:	dd05      	ble.n	8006ddc <_dtoa_r+0x984>
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	4632      	mov	r2, r6
 8006dd4:	4648      	mov	r0, r9
 8006dd6:	f000 fc17 	bl	8007608 <__lshift>
 8006dda:	4605      	mov	r5, r0
 8006ddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d05c      	beq.n	8006e9c <_dtoa_r+0xa44>
 8006de2:	4648      	mov	r0, r9
 8006de4:	6869      	ldr	r1, [r5, #4]
 8006de6:	f000 fa09 	bl	80071fc <_Balloc>
 8006dea:	4606      	mov	r6, r0
 8006dec:	b928      	cbnz	r0, 8006dfa <_dtoa_r+0x9a2>
 8006dee:	4602      	mov	r2, r0
 8006df0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006df4:	4b80      	ldr	r3, [pc, #512]	@ (8006ff8 <_dtoa_r+0xba0>)
 8006df6:	f7ff bb43 	b.w	8006480 <_dtoa_r+0x28>
 8006dfa:	692a      	ldr	r2, [r5, #16]
 8006dfc:	f105 010c 	add.w	r1, r5, #12
 8006e00:	3202      	adds	r2, #2
 8006e02:	0092      	lsls	r2, r2, #2
 8006e04:	300c      	adds	r0, #12
 8006e06:	f7ff fa8e 	bl	8006326 <memcpy>
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	4631      	mov	r1, r6
 8006e0e:	4648      	mov	r0, r9
 8006e10:	f000 fbfa 	bl	8007608 <__lshift>
 8006e14:	462f      	mov	r7, r5
 8006e16:	4605      	mov	r5, r0
 8006e18:	f10a 0301 	add.w	r3, sl, #1
 8006e1c:	9304      	str	r3, [sp, #16]
 8006e1e:	eb0a 030b 	add.w	r3, sl, fp
 8006e22:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e24:	9b06      	ldr	r3, [sp, #24]
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e2c:	9b04      	ldr	r3, [sp, #16]
 8006e2e:	4621      	mov	r1, r4
 8006e30:	9803      	ldr	r0, [sp, #12]
 8006e32:	f103 3bff 	add.w	fp, r3, #4294967295
 8006e36:	f7ff fa84 	bl	8006342 <quorem>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	4639      	mov	r1, r7
 8006e3e:	3330      	adds	r3, #48	@ 0x30
 8006e40:	9006      	str	r0, [sp, #24]
 8006e42:	9803      	ldr	r0, [sp, #12]
 8006e44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e46:	f000 fc4b 	bl	80076e0 <__mcmp>
 8006e4a:	462a      	mov	r2, r5
 8006e4c:	9008      	str	r0, [sp, #32]
 8006e4e:	4621      	mov	r1, r4
 8006e50:	4648      	mov	r0, r9
 8006e52:	f000 fc61 	bl	8007718 <__mdiff>
 8006e56:	68c2      	ldr	r2, [r0, #12]
 8006e58:	4606      	mov	r6, r0
 8006e5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e5c:	bb02      	cbnz	r2, 8006ea0 <_dtoa_r+0xa48>
 8006e5e:	4601      	mov	r1, r0
 8006e60:	9803      	ldr	r0, [sp, #12]
 8006e62:	f000 fc3d 	bl	80076e0 <__mcmp>
 8006e66:	4602      	mov	r2, r0
 8006e68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e6a:	4631      	mov	r1, r6
 8006e6c:	4648      	mov	r0, r9
 8006e6e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006e72:	f000 fa03 	bl	800727c <_Bfree>
 8006e76:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e78:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006e7a:	9e04      	ldr	r6, [sp, #16]
 8006e7c:	ea42 0103 	orr.w	r1, r2, r3
 8006e80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e82:	4319      	orrs	r1, r3
 8006e84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e86:	d10d      	bne.n	8006ea4 <_dtoa_r+0xa4c>
 8006e88:	2b39      	cmp	r3, #57	@ 0x39
 8006e8a:	d027      	beq.n	8006edc <_dtoa_r+0xa84>
 8006e8c:	9a08      	ldr	r2, [sp, #32]
 8006e8e:	2a00      	cmp	r2, #0
 8006e90:	dd01      	ble.n	8006e96 <_dtoa_r+0xa3e>
 8006e92:	9b06      	ldr	r3, [sp, #24]
 8006e94:	3331      	adds	r3, #49	@ 0x31
 8006e96:	f88b 3000 	strb.w	r3, [fp]
 8006e9a:	e52e      	b.n	80068fa <_dtoa_r+0x4a2>
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	e7b9      	b.n	8006e14 <_dtoa_r+0x9bc>
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	e7e2      	b.n	8006e6a <_dtoa_r+0xa12>
 8006ea4:	9908      	ldr	r1, [sp, #32]
 8006ea6:	2900      	cmp	r1, #0
 8006ea8:	db04      	blt.n	8006eb4 <_dtoa_r+0xa5c>
 8006eaa:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006eac:	4301      	orrs	r1, r0
 8006eae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006eb0:	4301      	orrs	r1, r0
 8006eb2:	d120      	bne.n	8006ef6 <_dtoa_r+0xa9e>
 8006eb4:	2a00      	cmp	r2, #0
 8006eb6:	ddee      	ble.n	8006e96 <_dtoa_r+0xa3e>
 8006eb8:	2201      	movs	r2, #1
 8006eba:	9903      	ldr	r1, [sp, #12]
 8006ebc:	4648      	mov	r0, r9
 8006ebe:	9304      	str	r3, [sp, #16]
 8006ec0:	f000 fba2 	bl	8007608 <__lshift>
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	9003      	str	r0, [sp, #12]
 8006ec8:	f000 fc0a 	bl	80076e0 <__mcmp>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	9b04      	ldr	r3, [sp, #16]
 8006ed0:	dc02      	bgt.n	8006ed8 <_dtoa_r+0xa80>
 8006ed2:	d1e0      	bne.n	8006e96 <_dtoa_r+0xa3e>
 8006ed4:	07da      	lsls	r2, r3, #31
 8006ed6:	d5de      	bpl.n	8006e96 <_dtoa_r+0xa3e>
 8006ed8:	2b39      	cmp	r3, #57	@ 0x39
 8006eda:	d1da      	bne.n	8006e92 <_dtoa_r+0xa3a>
 8006edc:	2339      	movs	r3, #57	@ 0x39
 8006ede:	f88b 3000 	strb.w	r3, [fp]
 8006ee2:	4633      	mov	r3, r6
 8006ee4:	461e      	mov	r6, r3
 8006ee6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	2a39      	cmp	r2, #57	@ 0x39
 8006eee:	d04e      	beq.n	8006f8e <_dtoa_r+0xb36>
 8006ef0:	3201      	adds	r2, #1
 8006ef2:	701a      	strb	r2, [r3, #0]
 8006ef4:	e501      	b.n	80068fa <_dtoa_r+0x4a2>
 8006ef6:	2a00      	cmp	r2, #0
 8006ef8:	dd03      	ble.n	8006f02 <_dtoa_r+0xaaa>
 8006efa:	2b39      	cmp	r3, #57	@ 0x39
 8006efc:	d0ee      	beq.n	8006edc <_dtoa_r+0xa84>
 8006efe:	3301      	adds	r3, #1
 8006f00:	e7c9      	b.n	8006e96 <_dtoa_r+0xa3e>
 8006f02:	9a04      	ldr	r2, [sp, #16]
 8006f04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f06:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f0a:	428a      	cmp	r2, r1
 8006f0c:	d028      	beq.n	8006f60 <_dtoa_r+0xb08>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	220a      	movs	r2, #10
 8006f12:	9903      	ldr	r1, [sp, #12]
 8006f14:	4648      	mov	r0, r9
 8006f16:	f000 f9d3 	bl	80072c0 <__multadd>
 8006f1a:	42af      	cmp	r7, r5
 8006f1c:	9003      	str	r0, [sp, #12]
 8006f1e:	f04f 0300 	mov.w	r3, #0
 8006f22:	f04f 020a 	mov.w	r2, #10
 8006f26:	4639      	mov	r1, r7
 8006f28:	4648      	mov	r0, r9
 8006f2a:	d107      	bne.n	8006f3c <_dtoa_r+0xae4>
 8006f2c:	f000 f9c8 	bl	80072c0 <__multadd>
 8006f30:	4607      	mov	r7, r0
 8006f32:	4605      	mov	r5, r0
 8006f34:	9b04      	ldr	r3, [sp, #16]
 8006f36:	3301      	adds	r3, #1
 8006f38:	9304      	str	r3, [sp, #16]
 8006f3a:	e777      	b.n	8006e2c <_dtoa_r+0x9d4>
 8006f3c:	f000 f9c0 	bl	80072c0 <__multadd>
 8006f40:	4629      	mov	r1, r5
 8006f42:	4607      	mov	r7, r0
 8006f44:	2300      	movs	r3, #0
 8006f46:	220a      	movs	r2, #10
 8006f48:	4648      	mov	r0, r9
 8006f4a:	f000 f9b9 	bl	80072c0 <__multadd>
 8006f4e:	4605      	mov	r5, r0
 8006f50:	e7f0      	b.n	8006f34 <_dtoa_r+0xadc>
 8006f52:	f1bb 0f00 	cmp.w	fp, #0
 8006f56:	bfcc      	ite	gt
 8006f58:	465e      	movgt	r6, fp
 8006f5a:	2601      	movle	r6, #1
 8006f5c:	2700      	movs	r7, #0
 8006f5e:	4456      	add	r6, sl
 8006f60:	2201      	movs	r2, #1
 8006f62:	9903      	ldr	r1, [sp, #12]
 8006f64:	4648      	mov	r0, r9
 8006f66:	9304      	str	r3, [sp, #16]
 8006f68:	f000 fb4e 	bl	8007608 <__lshift>
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	9003      	str	r0, [sp, #12]
 8006f70:	f000 fbb6 	bl	80076e0 <__mcmp>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	dcb4      	bgt.n	8006ee2 <_dtoa_r+0xa8a>
 8006f78:	d102      	bne.n	8006f80 <_dtoa_r+0xb28>
 8006f7a:	9b04      	ldr	r3, [sp, #16]
 8006f7c:	07db      	lsls	r3, r3, #31
 8006f7e:	d4b0      	bmi.n	8006ee2 <_dtoa_r+0xa8a>
 8006f80:	4633      	mov	r3, r6
 8006f82:	461e      	mov	r6, r3
 8006f84:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f88:	2a30      	cmp	r2, #48	@ 0x30
 8006f8a:	d0fa      	beq.n	8006f82 <_dtoa_r+0xb2a>
 8006f8c:	e4b5      	b.n	80068fa <_dtoa_r+0x4a2>
 8006f8e:	459a      	cmp	sl, r3
 8006f90:	d1a8      	bne.n	8006ee4 <_dtoa_r+0xa8c>
 8006f92:	2331      	movs	r3, #49	@ 0x31
 8006f94:	f108 0801 	add.w	r8, r8, #1
 8006f98:	f88a 3000 	strb.w	r3, [sl]
 8006f9c:	e4ad      	b.n	80068fa <_dtoa_r+0x4a2>
 8006f9e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006fa0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006ffc <_dtoa_r+0xba4>
 8006fa4:	b11b      	cbz	r3, 8006fae <_dtoa_r+0xb56>
 8006fa6:	f10a 0308 	add.w	r3, sl, #8
 8006faa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	4650      	mov	r0, sl
 8006fb0:	b017      	add	sp, #92	@ 0x5c
 8006fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	f77f ae2e 	ble.w	8006c1a <_dtoa_r+0x7c2>
 8006fbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fc2:	2001      	movs	r0, #1
 8006fc4:	e64d      	b.n	8006c62 <_dtoa_r+0x80a>
 8006fc6:	f1bb 0f00 	cmp.w	fp, #0
 8006fca:	f77f aed9 	ble.w	8006d80 <_dtoa_r+0x928>
 8006fce:	4656      	mov	r6, sl
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	9803      	ldr	r0, [sp, #12]
 8006fd4:	f7ff f9b5 	bl	8006342 <quorem>
 8006fd8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006fdc:	f806 3b01 	strb.w	r3, [r6], #1
 8006fe0:	eba6 020a 	sub.w	r2, r6, sl
 8006fe4:	4593      	cmp	fp, r2
 8006fe6:	ddb4      	ble.n	8006f52 <_dtoa_r+0xafa>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	220a      	movs	r2, #10
 8006fec:	4648      	mov	r0, r9
 8006fee:	9903      	ldr	r1, [sp, #12]
 8006ff0:	f000 f966 	bl	80072c0 <__multadd>
 8006ff4:	9003      	str	r0, [sp, #12]
 8006ff6:	e7eb      	b.n	8006fd0 <_dtoa_r+0xb78>
 8006ff8:	080099a8 	.word	0x080099a8
 8006ffc:	0800992c 	.word	0x0800992c

08007000 <_free_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4605      	mov	r5, r0
 8007004:	2900      	cmp	r1, #0
 8007006:	d040      	beq.n	800708a <_free_r+0x8a>
 8007008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800700c:	1f0c      	subs	r4, r1, #4
 800700e:	2b00      	cmp	r3, #0
 8007010:	bfb8      	it	lt
 8007012:	18e4      	addlt	r4, r4, r3
 8007014:	f000 f8e6 	bl	80071e4 <__malloc_lock>
 8007018:	4a1c      	ldr	r2, [pc, #112]	@ (800708c <_free_r+0x8c>)
 800701a:	6813      	ldr	r3, [r2, #0]
 800701c:	b933      	cbnz	r3, 800702c <_free_r+0x2c>
 800701e:	6063      	str	r3, [r4, #4]
 8007020:	6014      	str	r4, [r2, #0]
 8007022:	4628      	mov	r0, r5
 8007024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007028:	f000 b8e2 	b.w	80071f0 <__malloc_unlock>
 800702c:	42a3      	cmp	r3, r4
 800702e:	d908      	bls.n	8007042 <_free_r+0x42>
 8007030:	6820      	ldr	r0, [r4, #0]
 8007032:	1821      	adds	r1, r4, r0
 8007034:	428b      	cmp	r3, r1
 8007036:	bf01      	itttt	eq
 8007038:	6819      	ldreq	r1, [r3, #0]
 800703a:	685b      	ldreq	r3, [r3, #4]
 800703c:	1809      	addeq	r1, r1, r0
 800703e:	6021      	streq	r1, [r4, #0]
 8007040:	e7ed      	b.n	800701e <_free_r+0x1e>
 8007042:	461a      	mov	r2, r3
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	b10b      	cbz	r3, 800704c <_free_r+0x4c>
 8007048:	42a3      	cmp	r3, r4
 800704a:	d9fa      	bls.n	8007042 <_free_r+0x42>
 800704c:	6811      	ldr	r1, [r2, #0]
 800704e:	1850      	adds	r0, r2, r1
 8007050:	42a0      	cmp	r0, r4
 8007052:	d10b      	bne.n	800706c <_free_r+0x6c>
 8007054:	6820      	ldr	r0, [r4, #0]
 8007056:	4401      	add	r1, r0
 8007058:	1850      	adds	r0, r2, r1
 800705a:	4283      	cmp	r3, r0
 800705c:	6011      	str	r1, [r2, #0]
 800705e:	d1e0      	bne.n	8007022 <_free_r+0x22>
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	4408      	add	r0, r1
 8007066:	6010      	str	r0, [r2, #0]
 8007068:	6053      	str	r3, [r2, #4]
 800706a:	e7da      	b.n	8007022 <_free_r+0x22>
 800706c:	d902      	bls.n	8007074 <_free_r+0x74>
 800706e:	230c      	movs	r3, #12
 8007070:	602b      	str	r3, [r5, #0]
 8007072:	e7d6      	b.n	8007022 <_free_r+0x22>
 8007074:	6820      	ldr	r0, [r4, #0]
 8007076:	1821      	adds	r1, r4, r0
 8007078:	428b      	cmp	r3, r1
 800707a:	bf01      	itttt	eq
 800707c:	6819      	ldreq	r1, [r3, #0]
 800707e:	685b      	ldreq	r3, [r3, #4]
 8007080:	1809      	addeq	r1, r1, r0
 8007082:	6021      	streq	r1, [r4, #0]
 8007084:	6063      	str	r3, [r4, #4]
 8007086:	6054      	str	r4, [r2, #4]
 8007088:	e7cb      	b.n	8007022 <_free_r+0x22>
 800708a:	bd38      	pop	{r3, r4, r5, pc}
 800708c:	200007ec 	.word	0x200007ec

08007090 <malloc>:
 8007090:	4b02      	ldr	r3, [pc, #8]	@ (800709c <malloc+0xc>)
 8007092:	4601      	mov	r1, r0
 8007094:	6818      	ldr	r0, [r3, #0]
 8007096:	f000 b825 	b.w	80070e4 <_malloc_r>
 800709a:	bf00      	nop
 800709c:	20000020 	.word	0x20000020

080070a0 <sbrk_aligned>:
 80070a0:	b570      	push	{r4, r5, r6, lr}
 80070a2:	4e0f      	ldr	r6, [pc, #60]	@ (80070e0 <sbrk_aligned+0x40>)
 80070a4:	460c      	mov	r4, r1
 80070a6:	6831      	ldr	r1, [r6, #0]
 80070a8:	4605      	mov	r5, r0
 80070aa:	b911      	cbnz	r1, 80070b2 <sbrk_aligned+0x12>
 80070ac:	f000 fe3a 	bl	8007d24 <_sbrk_r>
 80070b0:	6030      	str	r0, [r6, #0]
 80070b2:	4621      	mov	r1, r4
 80070b4:	4628      	mov	r0, r5
 80070b6:	f000 fe35 	bl	8007d24 <_sbrk_r>
 80070ba:	1c43      	adds	r3, r0, #1
 80070bc:	d103      	bne.n	80070c6 <sbrk_aligned+0x26>
 80070be:	f04f 34ff 	mov.w	r4, #4294967295
 80070c2:	4620      	mov	r0, r4
 80070c4:	bd70      	pop	{r4, r5, r6, pc}
 80070c6:	1cc4      	adds	r4, r0, #3
 80070c8:	f024 0403 	bic.w	r4, r4, #3
 80070cc:	42a0      	cmp	r0, r4
 80070ce:	d0f8      	beq.n	80070c2 <sbrk_aligned+0x22>
 80070d0:	1a21      	subs	r1, r4, r0
 80070d2:	4628      	mov	r0, r5
 80070d4:	f000 fe26 	bl	8007d24 <_sbrk_r>
 80070d8:	3001      	adds	r0, #1
 80070da:	d1f2      	bne.n	80070c2 <sbrk_aligned+0x22>
 80070dc:	e7ef      	b.n	80070be <sbrk_aligned+0x1e>
 80070de:	bf00      	nop
 80070e0:	200007e8 	.word	0x200007e8

080070e4 <_malloc_r>:
 80070e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070e8:	1ccd      	adds	r5, r1, #3
 80070ea:	f025 0503 	bic.w	r5, r5, #3
 80070ee:	3508      	adds	r5, #8
 80070f0:	2d0c      	cmp	r5, #12
 80070f2:	bf38      	it	cc
 80070f4:	250c      	movcc	r5, #12
 80070f6:	2d00      	cmp	r5, #0
 80070f8:	4606      	mov	r6, r0
 80070fa:	db01      	blt.n	8007100 <_malloc_r+0x1c>
 80070fc:	42a9      	cmp	r1, r5
 80070fe:	d904      	bls.n	800710a <_malloc_r+0x26>
 8007100:	230c      	movs	r3, #12
 8007102:	6033      	str	r3, [r6, #0]
 8007104:	2000      	movs	r0, #0
 8007106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800710a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071e0 <_malloc_r+0xfc>
 800710e:	f000 f869 	bl	80071e4 <__malloc_lock>
 8007112:	f8d8 3000 	ldr.w	r3, [r8]
 8007116:	461c      	mov	r4, r3
 8007118:	bb44      	cbnz	r4, 800716c <_malloc_r+0x88>
 800711a:	4629      	mov	r1, r5
 800711c:	4630      	mov	r0, r6
 800711e:	f7ff ffbf 	bl	80070a0 <sbrk_aligned>
 8007122:	1c43      	adds	r3, r0, #1
 8007124:	4604      	mov	r4, r0
 8007126:	d158      	bne.n	80071da <_malloc_r+0xf6>
 8007128:	f8d8 4000 	ldr.w	r4, [r8]
 800712c:	4627      	mov	r7, r4
 800712e:	2f00      	cmp	r7, #0
 8007130:	d143      	bne.n	80071ba <_malloc_r+0xd6>
 8007132:	2c00      	cmp	r4, #0
 8007134:	d04b      	beq.n	80071ce <_malloc_r+0xea>
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	4639      	mov	r1, r7
 800713a:	4630      	mov	r0, r6
 800713c:	eb04 0903 	add.w	r9, r4, r3
 8007140:	f000 fdf0 	bl	8007d24 <_sbrk_r>
 8007144:	4581      	cmp	r9, r0
 8007146:	d142      	bne.n	80071ce <_malloc_r+0xea>
 8007148:	6821      	ldr	r1, [r4, #0]
 800714a:	4630      	mov	r0, r6
 800714c:	1a6d      	subs	r5, r5, r1
 800714e:	4629      	mov	r1, r5
 8007150:	f7ff ffa6 	bl	80070a0 <sbrk_aligned>
 8007154:	3001      	adds	r0, #1
 8007156:	d03a      	beq.n	80071ce <_malloc_r+0xea>
 8007158:	6823      	ldr	r3, [r4, #0]
 800715a:	442b      	add	r3, r5
 800715c:	6023      	str	r3, [r4, #0]
 800715e:	f8d8 3000 	ldr.w	r3, [r8]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	bb62      	cbnz	r2, 80071c0 <_malloc_r+0xdc>
 8007166:	f8c8 7000 	str.w	r7, [r8]
 800716a:	e00f      	b.n	800718c <_malloc_r+0xa8>
 800716c:	6822      	ldr	r2, [r4, #0]
 800716e:	1b52      	subs	r2, r2, r5
 8007170:	d420      	bmi.n	80071b4 <_malloc_r+0xd0>
 8007172:	2a0b      	cmp	r2, #11
 8007174:	d917      	bls.n	80071a6 <_malloc_r+0xc2>
 8007176:	1961      	adds	r1, r4, r5
 8007178:	42a3      	cmp	r3, r4
 800717a:	6025      	str	r5, [r4, #0]
 800717c:	bf18      	it	ne
 800717e:	6059      	strne	r1, [r3, #4]
 8007180:	6863      	ldr	r3, [r4, #4]
 8007182:	bf08      	it	eq
 8007184:	f8c8 1000 	streq.w	r1, [r8]
 8007188:	5162      	str	r2, [r4, r5]
 800718a:	604b      	str	r3, [r1, #4]
 800718c:	4630      	mov	r0, r6
 800718e:	f000 f82f 	bl	80071f0 <__malloc_unlock>
 8007192:	f104 000b 	add.w	r0, r4, #11
 8007196:	1d23      	adds	r3, r4, #4
 8007198:	f020 0007 	bic.w	r0, r0, #7
 800719c:	1ac2      	subs	r2, r0, r3
 800719e:	bf1c      	itt	ne
 80071a0:	1a1b      	subne	r3, r3, r0
 80071a2:	50a3      	strne	r3, [r4, r2]
 80071a4:	e7af      	b.n	8007106 <_malloc_r+0x22>
 80071a6:	6862      	ldr	r2, [r4, #4]
 80071a8:	42a3      	cmp	r3, r4
 80071aa:	bf0c      	ite	eq
 80071ac:	f8c8 2000 	streq.w	r2, [r8]
 80071b0:	605a      	strne	r2, [r3, #4]
 80071b2:	e7eb      	b.n	800718c <_malloc_r+0xa8>
 80071b4:	4623      	mov	r3, r4
 80071b6:	6864      	ldr	r4, [r4, #4]
 80071b8:	e7ae      	b.n	8007118 <_malloc_r+0x34>
 80071ba:	463c      	mov	r4, r7
 80071bc:	687f      	ldr	r7, [r7, #4]
 80071be:	e7b6      	b.n	800712e <_malloc_r+0x4a>
 80071c0:	461a      	mov	r2, r3
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	42a3      	cmp	r3, r4
 80071c6:	d1fb      	bne.n	80071c0 <_malloc_r+0xdc>
 80071c8:	2300      	movs	r3, #0
 80071ca:	6053      	str	r3, [r2, #4]
 80071cc:	e7de      	b.n	800718c <_malloc_r+0xa8>
 80071ce:	230c      	movs	r3, #12
 80071d0:	4630      	mov	r0, r6
 80071d2:	6033      	str	r3, [r6, #0]
 80071d4:	f000 f80c 	bl	80071f0 <__malloc_unlock>
 80071d8:	e794      	b.n	8007104 <_malloc_r+0x20>
 80071da:	6005      	str	r5, [r0, #0]
 80071dc:	e7d6      	b.n	800718c <_malloc_r+0xa8>
 80071de:	bf00      	nop
 80071e0:	200007ec 	.word	0x200007ec

080071e4 <__malloc_lock>:
 80071e4:	4801      	ldr	r0, [pc, #4]	@ (80071ec <__malloc_lock+0x8>)
 80071e6:	f7ff b88e 	b.w	8006306 <__retarget_lock_acquire_recursive>
 80071ea:	bf00      	nop
 80071ec:	200007e4 	.word	0x200007e4

080071f0 <__malloc_unlock>:
 80071f0:	4801      	ldr	r0, [pc, #4]	@ (80071f8 <__malloc_unlock+0x8>)
 80071f2:	f7ff b889 	b.w	8006308 <__retarget_lock_release_recursive>
 80071f6:	bf00      	nop
 80071f8:	200007e4 	.word	0x200007e4

080071fc <_Balloc>:
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	69c6      	ldr	r6, [r0, #28]
 8007200:	4604      	mov	r4, r0
 8007202:	460d      	mov	r5, r1
 8007204:	b976      	cbnz	r6, 8007224 <_Balloc+0x28>
 8007206:	2010      	movs	r0, #16
 8007208:	f7ff ff42 	bl	8007090 <malloc>
 800720c:	4602      	mov	r2, r0
 800720e:	61e0      	str	r0, [r4, #28]
 8007210:	b920      	cbnz	r0, 800721c <_Balloc+0x20>
 8007212:	216b      	movs	r1, #107	@ 0x6b
 8007214:	4b17      	ldr	r3, [pc, #92]	@ (8007274 <_Balloc+0x78>)
 8007216:	4818      	ldr	r0, [pc, #96]	@ (8007278 <_Balloc+0x7c>)
 8007218:	f000 fd94 	bl	8007d44 <__assert_func>
 800721c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007220:	6006      	str	r6, [r0, #0]
 8007222:	60c6      	str	r6, [r0, #12]
 8007224:	69e6      	ldr	r6, [r4, #28]
 8007226:	68f3      	ldr	r3, [r6, #12]
 8007228:	b183      	cbz	r3, 800724c <_Balloc+0x50>
 800722a:	69e3      	ldr	r3, [r4, #28]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007232:	b9b8      	cbnz	r0, 8007264 <_Balloc+0x68>
 8007234:	2101      	movs	r1, #1
 8007236:	fa01 f605 	lsl.w	r6, r1, r5
 800723a:	1d72      	adds	r2, r6, #5
 800723c:	4620      	mov	r0, r4
 800723e:	0092      	lsls	r2, r2, #2
 8007240:	f000 fd9e 	bl	8007d80 <_calloc_r>
 8007244:	b160      	cbz	r0, 8007260 <_Balloc+0x64>
 8007246:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800724a:	e00e      	b.n	800726a <_Balloc+0x6e>
 800724c:	2221      	movs	r2, #33	@ 0x21
 800724e:	2104      	movs	r1, #4
 8007250:	4620      	mov	r0, r4
 8007252:	f000 fd95 	bl	8007d80 <_calloc_r>
 8007256:	69e3      	ldr	r3, [r4, #28]
 8007258:	60f0      	str	r0, [r6, #12]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1e4      	bne.n	800722a <_Balloc+0x2e>
 8007260:	2000      	movs	r0, #0
 8007262:	bd70      	pop	{r4, r5, r6, pc}
 8007264:	6802      	ldr	r2, [r0, #0]
 8007266:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800726a:	2300      	movs	r3, #0
 800726c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007270:	e7f7      	b.n	8007262 <_Balloc+0x66>
 8007272:	bf00      	nop
 8007274:	08009939 	.word	0x08009939
 8007278:	080099b9 	.word	0x080099b9

0800727c <_Bfree>:
 800727c:	b570      	push	{r4, r5, r6, lr}
 800727e:	69c6      	ldr	r6, [r0, #28]
 8007280:	4605      	mov	r5, r0
 8007282:	460c      	mov	r4, r1
 8007284:	b976      	cbnz	r6, 80072a4 <_Bfree+0x28>
 8007286:	2010      	movs	r0, #16
 8007288:	f7ff ff02 	bl	8007090 <malloc>
 800728c:	4602      	mov	r2, r0
 800728e:	61e8      	str	r0, [r5, #28]
 8007290:	b920      	cbnz	r0, 800729c <_Bfree+0x20>
 8007292:	218f      	movs	r1, #143	@ 0x8f
 8007294:	4b08      	ldr	r3, [pc, #32]	@ (80072b8 <_Bfree+0x3c>)
 8007296:	4809      	ldr	r0, [pc, #36]	@ (80072bc <_Bfree+0x40>)
 8007298:	f000 fd54 	bl	8007d44 <__assert_func>
 800729c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072a0:	6006      	str	r6, [r0, #0]
 80072a2:	60c6      	str	r6, [r0, #12]
 80072a4:	b13c      	cbz	r4, 80072b6 <_Bfree+0x3a>
 80072a6:	69eb      	ldr	r3, [r5, #28]
 80072a8:	6862      	ldr	r2, [r4, #4]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072b0:	6021      	str	r1, [r4, #0]
 80072b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072b6:	bd70      	pop	{r4, r5, r6, pc}
 80072b8:	08009939 	.word	0x08009939
 80072bc:	080099b9 	.word	0x080099b9

080072c0 <__multadd>:
 80072c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c4:	4607      	mov	r7, r0
 80072c6:	460c      	mov	r4, r1
 80072c8:	461e      	mov	r6, r3
 80072ca:	2000      	movs	r0, #0
 80072cc:	690d      	ldr	r5, [r1, #16]
 80072ce:	f101 0c14 	add.w	ip, r1, #20
 80072d2:	f8dc 3000 	ldr.w	r3, [ip]
 80072d6:	3001      	adds	r0, #1
 80072d8:	b299      	uxth	r1, r3
 80072da:	fb02 6101 	mla	r1, r2, r1, r6
 80072de:	0c1e      	lsrs	r6, r3, #16
 80072e0:	0c0b      	lsrs	r3, r1, #16
 80072e2:	fb02 3306 	mla	r3, r2, r6, r3
 80072e6:	b289      	uxth	r1, r1
 80072e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072ec:	4285      	cmp	r5, r0
 80072ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80072f2:	f84c 1b04 	str.w	r1, [ip], #4
 80072f6:	dcec      	bgt.n	80072d2 <__multadd+0x12>
 80072f8:	b30e      	cbz	r6, 800733e <__multadd+0x7e>
 80072fa:	68a3      	ldr	r3, [r4, #8]
 80072fc:	42ab      	cmp	r3, r5
 80072fe:	dc19      	bgt.n	8007334 <__multadd+0x74>
 8007300:	6861      	ldr	r1, [r4, #4]
 8007302:	4638      	mov	r0, r7
 8007304:	3101      	adds	r1, #1
 8007306:	f7ff ff79 	bl	80071fc <_Balloc>
 800730a:	4680      	mov	r8, r0
 800730c:	b928      	cbnz	r0, 800731a <__multadd+0x5a>
 800730e:	4602      	mov	r2, r0
 8007310:	21ba      	movs	r1, #186	@ 0xba
 8007312:	4b0c      	ldr	r3, [pc, #48]	@ (8007344 <__multadd+0x84>)
 8007314:	480c      	ldr	r0, [pc, #48]	@ (8007348 <__multadd+0x88>)
 8007316:	f000 fd15 	bl	8007d44 <__assert_func>
 800731a:	6922      	ldr	r2, [r4, #16]
 800731c:	f104 010c 	add.w	r1, r4, #12
 8007320:	3202      	adds	r2, #2
 8007322:	0092      	lsls	r2, r2, #2
 8007324:	300c      	adds	r0, #12
 8007326:	f7fe fffe 	bl	8006326 <memcpy>
 800732a:	4621      	mov	r1, r4
 800732c:	4638      	mov	r0, r7
 800732e:	f7ff ffa5 	bl	800727c <_Bfree>
 8007332:	4644      	mov	r4, r8
 8007334:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007338:	3501      	adds	r5, #1
 800733a:	615e      	str	r6, [r3, #20]
 800733c:	6125      	str	r5, [r4, #16]
 800733e:	4620      	mov	r0, r4
 8007340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007344:	080099a8 	.word	0x080099a8
 8007348:	080099b9 	.word	0x080099b9

0800734c <__hi0bits>:
 800734c:	4603      	mov	r3, r0
 800734e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007352:	bf3a      	itte	cc
 8007354:	0403      	lslcc	r3, r0, #16
 8007356:	2010      	movcc	r0, #16
 8007358:	2000      	movcs	r0, #0
 800735a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800735e:	bf3c      	itt	cc
 8007360:	021b      	lslcc	r3, r3, #8
 8007362:	3008      	addcc	r0, #8
 8007364:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007368:	bf3c      	itt	cc
 800736a:	011b      	lslcc	r3, r3, #4
 800736c:	3004      	addcc	r0, #4
 800736e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007372:	bf3c      	itt	cc
 8007374:	009b      	lslcc	r3, r3, #2
 8007376:	3002      	addcc	r0, #2
 8007378:	2b00      	cmp	r3, #0
 800737a:	db05      	blt.n	8007388 <__hi0bits+0x3c>
 800737c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007380:	f100 0001 	add.w	r0, r0, #1
 8007384:	bf08      	it	eq
 8007386:	2020      	moveq	r0, #32
 8007388:	4770      	bx	lr

0800738a <__lo0bits>:
 800738a:	6803      	ldr	r3, [r0, #0]
 800738c:	4602      	mov	r2, r0
 800738e:	f013 0007 	ands.w	r0, r3, #7
 8007392:	d00b      	beq.n	80073ac <__lo0bits+0x22>
 8007394:	07d9      	lsls	r1, r3, #31
 8007396:	d421      	bmi.n	80073dc <__lo0bits+0x52>
 8007398:	0798      	lsls	r0, r3, #30
 800739a:	bf49      	itett	mi
 800739c:	085b      	lsrmi	r3, r3, #1
 800739e:	089b      	lsrpl	r3, r3, #2
 80073a0:	2001      	movmi	r0, #1
 80073a2:	6013      	strmi	r3, [r2, #0]
 80073a4:	bf5c      	itt	pl
 80073a6:	2002      	movpl	r0, #2
 80073a8:	6013      	strpl	r3, [r2, #0]
 80073aa:	4770      	bx	lr
 80073ac:	b299      	uxth	r1, r3
 80073ae:	b909      	cbnz	r1, 80073b4 <__lo0bits+0x2a>
 80073b0:	2010      	movs	r0, #16
 80073b2:	0c1b      	lsrs	r3, r3, #16
 80073b4:	b2d9      	uxtb	r1, r3
 80073b6:	b909      	cbnz	r1, 80073bc <__lo0bits+0x32>
 80073b8:	3008      	adds	r0, #8
 80073ba:	0a1b      	lsrs	r3, r3, #8
 80073bc:	0719      	lsls	r1, r3, #28
 80073be:	bf04      	itt	eq
 80073c0:	091b      	lsreq	r3, r3, #4
 80073c2:	3004      	addeq	r0, #4
 80073c4:	0799      	lsls	r1, r3, #30
 80073c6:	bf04      	itt	eq
 80073c8:	089b      	lsreq	r3, r3, #2
 80073ca:	3002      	addeq	r0, #2
 80073cc:	07d9      	lsls	r1, r3, #31
 80073ce:	d403      	bmi.n	80073d8 <__lo0bits+0x4e>
 80073d0:	085b      	lsrs	r3, r3, #1
 80073d2:	f100 0001 	add.w	r0, r0, #1
 80073d6:	d003      	beq.n	80073e0 <__lo0bits+0x56>
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	4770      	bx	lr
 80073dc:	2000      	movs	r0, #0
 80073de:	4770      	bx	lr
 80073e0:	2020      	movs	r0, #32
 80073e2:	4770      	bx	lr

080073e4 <__i2b>:
 80073e4:	b510      	push	{r4, lr}
 80073e6:	460c      	mov	r4, r1
 80073e8:	2101      	movs	r1, #1
 80073ea:	f7ff ff07 	bl	80071fc <_Balloc>
 80073ee:	4602      	mov	r2, r0
 80073f0:	b928      	cbnz	r0, 80073fe <__i2b+0x1a>
 80073f2:	f240 1145 	movw	r1, #325	@ 0x145
 80073f6:	4b04      	ldr	r3, [pc, #16]	@ (8007408 <__i2b+0x24>)
 80073f8:	4804      	ldr	r0, [pc, #16]	@ (800740c <__i2b+0x28>)
 80073fa:	f000 fca3 	bl	8007d44 <__assert_func>
 80073fe:	2301      	movs	r3, #1
 8007400:	6144      	str	r4, [r0, #20]
 8007402:	6103      	str	r3, [r0, #16]
 8007404:	bd10      	pop	{r4, pc}
 8007406:	bf00      	nop
 8007408:	080099a8 	.word	0x080099a8
 800740c:	080099b9 	.word	0x080099b9

08007410 <__multiply>:
 8007410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007414:	4617      	mov	r7, r2
 8007416:	690a      	ldr	r2, [r1, #16]
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	4689      	mov	r9, r1
 800741c:	429a      	cmp	r2, r3
 800741e:	bfa2      	ittt	ge
 8007420:	463b      	movge	r3, r7
 8007422:	460f      	movge	r7, r1
 8007424:	4699      	movge	r9, r3
 8007426:	693d      	ldr	r5, [r7, #16]
 8007428:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	6879      	ldr	r1, [r7, #4]
 8007430:	eb05 060a 	add.w	r6, r5, sl
 8007434:	42b3      	cmp	r3, r6
 8007436:	b085      	sub	sp, #20
 8007438:	bfb8      	it	lt
 800743a:	3101      	addlt	r1, #1
 800743c:	f7ff fede 	bl	80071fc <_Balloc>
 8007440:	b930      	cbnz	r0, 8007450 <__multiply+0x40>
 8007442:	4602      	mov	r2, r0
 8007444:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007448:	4b40      	ldr	r3, [pc, #256]	@ (800754c <__multiply+0x13c>)
 800744a:	4841      	ldr	r0, [pc, #260]	@ (8007550 <__multiply+0x140>)
 800744c:	f000 fc7a 	bl	8007d44 <__assert_func>
 8007450:	f100 0414 	add.w	r4, r0, #20
 8007454:	4623      	mov	r3, r4
 8007456:	2200      	movs	r2, #0
 8007458:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800745c:	4573      	cmp	r3, lr
 800745e:	d320      	bcc.n	80074a2 <__multiply+0x92>
 8007460:	f107 0814 	add.w	r8, r7, #20
 8007464:	f109 0114 	add.w	r1, r9, #20
 8007468:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800746c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007470:	9302      	str	r3, [sp, #8]
 8007472:	1beb      	subs	r3, r5, r7
 8007474:	3b15      	subs	r3, #21
 8007476:	f023 0303 	bic.w	r3, r3, #3
 800747a:	3304      	adds	r3, #4
 800747c:	3715      	adds	r7, #21
 800747e:	42bd      	cmp	r5, r7
 8007480:	bf38      	it	cc
 8007482:	2304      	movcc	r3, #4
 8007484:	9301      	str	r3, [sp, #4]
 8007486:	9b02      	ldr	r3, [sp, #8]
 8007488:	9103      	str	r1, [sp, #12]
 800748a:	428b      	cmp	r3, r1
 800748c:	d80c      	bhi.n	80074a8 <__multiply+0x98>
 800748e:	2e00      	cmp	r6, #0
 8007490:	dd03      	ble.n	800749a <__multiply+0x8a>
 8007492:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007496:	2b00      	cmp	r3, #0
 8007498:	d055      	beq.n	8007546 <__multiply+0x136>
 800749a:	6106      	str	r6, [r0, #16]
 800749c:	b005      	add	sp, #20
 800749e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a2:	f843 2b04 	str.w	r2, [r3], #4
 80074a6:	e7d9      	b.n	800745c <__multiply+0x4c>
 80074a8:	f8b1 a000 	ldrh.w	sl, [r1]
 80074ac:	f1ba 0f00 	cmp.w	sl, #0
 80074b0:	d01f      	beq.n	80074f2 <__multiply+0xe2>
 80074b2:	46c4      	mov	ip, r8
 80074b4:	46a1      	mov	r9, r4
 80074b6:	2700      	movs	r7, #0
 80074b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80074bc:	f8d9 3000 	ldr.w	r3, [r9]
 80074c0:	fa1f fb82 	uxth.w	fp, r2
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	fb0a 330b 	mla	r3, sl, fp, r3
 80074ca:	443b      	add	r3, r7
 80074cc:	f8d9 7000 	ldr.w	r7, [r9]
 80074d0:	0c12      	lsrs	r2, r2, #16
 80074d2:	0c3f      	lsrs	r7, r7, #16
 80074d4:	fb0a 7202 	mla	r2, sl, r2, r7
 80074d8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80074dc:	b29b      	uxth	r3, r3
 80074de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074e2:	4565      	cmp	r5, ip
 80074e4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80074e8:	f849 3b04 	str.w	r3, [r9], #4
 80074ec:	d8e4      	bhi.n	80074b8 <__multiply+0xa8>
 80074ee:	9b01      	ldr	r3, [sp, #4]
 80074f0:	50e7      	str	r7, [r4, r3]
 80074f2:	9b03      	ldr	r3, [sp, #12]
 80074f4:	3104      	adds	r1, #4
 80074f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80074fa:	f1b9 0f00 	cmp.w	r9, #0
 80074fe:	d020      	beq.n	8007542 <__multiply+0x132>
 8007500:	4647      	mov	r7, r8
 8007502:	46a4      	mov	ip, r4
 8007504:	f04f 0a00 	mov.w	sl, #0
 8007508:	6823      	ldr	r3, [r4, #0]
 800750a:	f8b7 b000 	ldrh.w	fp, [r7]
 800750e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007512:	b29b      	uxth	r3, r3
 8007514:	fb09 220b 	mla	r2, r9, fp, r2
 8007518:	4452      	add	r2, sl
 800751a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800751e:	f84c 3b04 	str.w	r3, [ip], #4
 8007522:	f857 3b04 	ldr.w	r3, [r7], #4
 8007526:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800752a:	f8bc 3000 	ldrh.w	r3, [ip]
 800752e:	42bd      	cmp	r5, r7
 8007530:	fb09 330a 	mla	r3, r9, sl, r3
 8007534:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007538:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800753c:	d8e5      	bhi.n	800750a <__multiply+0xfa>
 800753e:	9a01      	ldr	r2, [sp, #4]
 8007540:	50a3      	str	r3, [r4, r2]
 8007542:	3404      	adds	r4, #4
 8007544:	e79f      	b.n	8007486 <__multiply+0x76>
 8007546:	3e01      	subs	r6, #1
 8007548:	e7a1      	b.n	800748e <__multiply+0x7e>
 800754a:	bf00      	nop
 800754c:	080099a8 	.word	0x080099a8
 8007550:	080099b9 	.word	0x080099b9

08007554 <__pow5mult>:
 8007554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007558:	4615      	mov	r5, r2
 800755a:	f012 0203 	ands.w	r2, r2, #3
 800755e:	4607      	mov	r7, r0
 8007560:	460e      	mov	r6, r1
 8007562:	d007      	beq.n	8007574 <__pow5mult+0x20>
 8007564:	4c25      	ldr	r4, [pc, #148]	@ (80075fc <__pow5mult+0xa8>)
 8007566:	3a01      	subs	r2, #1
 8007568:	2300      	movs	r3, #0
 800756a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800756e:	f7ff fea7 	bl	80072c0 <__multadd>
 8007572:	4606      	mov	r6, r0
 8007574:	10ad      	asrs	r5, r5, #2
 8007576:	d03d      	beq.n	80075f4 <__pow5mult+0xa0>
 8007578:	69fc      	ldr	r4, [r7, #28]
 800757a:	b97c      	cbnz	r4, 800759c <__pow5mult+0x48>
 800757c:	2010      	movs	r0, #16
 800757e:	f7ff fd87 	bl	8007090 <malloc>
 8007582:	4602      	mov	r2, r0
 8007584:	61f8      	str	r0, [r7, #28]
 8007586:	b928      	cbnz	r0, 8007594 <__pow5mult+0x40>
 8007588:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800758c:	4b1c      	ldr	r3, [pc, #112]	@ (8007600 <__pow5mult+0xac>)
 800758e:	481d      	ldr	r0, [pc, #116]	@ (8007604 <__pow5mult+0xb0>)
 8007590:	f000 fbd8 	bl	8007d44 <__assert_func>
 8007594:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007598:	6004      	str	r4, [r0, #0]
 800759a:	60c4      	str	r4, [r0, #12]
 800759c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80075a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075a4:	b94c      	cbnz	r4, 80075ba <__pow5mult+0x66>
 80075a6:	f240 2171 	movw	r1, #625	@ 0x271
 80075aa:	4638      	mov	r0, r7
 80075ac:	f7ff ff1a 	bl	80073e4 <__i2b>
 80075b0:	2300      	movs	r3, #0
 80075b2:	4604      	mov	r4, r0
 80075b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80075b8:	6003      	str	r3, [r0, #0]
 80075ba:	f04f 0900 	mov.w	r9, #0
 80075be:	07eb      	lsls	r3, r5, #31
 80075c0:	d50a      	bpl.n	80075d8 <__pow5mult+0x84>
 80075c2:	4631      	mov	r1, r6
 80075c4:	4622      	mov	r2, r4
 80075c6:	4638      	mov	r0, r7
 80075c8:	f7ff ff22 	bl	8007410 <__multiply>
 80075cc:	4680      	mov	r8, r0
 80075ce:	4631      	mov	r1, r6
 80075d0:	4638      	mov	r0, r7
 80075d2:	f7ff fe53 	bl	800727c <_Bfree>
 80075d6:	4646      	mov	r6, r8
 80075d8:	106d      	asrs	r5, r5, #1
 80075da:	d00b      	beq.n	80075f4 <__pow5mult+0xa0>
 80075dc:	6820      	ldr	r0, [r4, #0]
 80075de:	b938      	cbnz	r0, 80075f0 <__pow5mult+0x9c>
 80075e0:	4622      	mov	r2, r4
 80075e2:	4621      	mov	r1, r4
 80075e4:	4638      	mov	r0, r7
 80075e6:	f7ff ff13 	bl	8007410 <__multiply>
 80075ea:	6020      	str	r0, [r4, #0]
 80075ec:	f8c0 9000 	str.w	r9, [r0]
 80075f0:	4604      	mov	r4, r0
 80075f2:	e7e4      	b.n	80075be <__pow5mult+0x6a>
 80075f4:	4630      	mov	r0, r6
 80075f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075fa:	bf00      	nop
 80075fc:	08009a6c 	.word	0x08009a6c
 8007600:	08009939 	.word	0x08009939
 8007604:	080099b9 	.word	0x080099b9

08007608 <__lshift>:
 8007608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800760c:	460c      	mov	r4, r1
 800760e:	4607      	mov	r7, r0
 8007610:	4691      	mov	r9, r2
 8007612:	6923      	ldr	r3, [r4, #16]
 8007614:	6849      	ldr	r1, [r1, #4]
 8007616:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800761a:	68a3      	ldr	r3, [r4, #8]
 800761c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007620:	f108 0601 	add.w	r6, r8, #1
 8007624:	42b3      	cmp	r3, r6
 8007626:	db0b      	blt.n	8007640 <__lshift+0x38>
 8007628:	4638      	mov	r0, r7
 800762a:	f7ff fde7 	bl	80071fc <_Balloc>
 800762e:	4605      	mov	r5, r0
 8007630:	b948      	cbnz	r0, 8007646 <__lshift+0x3e>
 8007632:	4602      	mov	r2, r0
 8007634:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007638:	4b27      	ldr	r3, [pc, #156]	@ (80076d8 <__lshift+0xd0>)
 800763a:	4828      	ldr	r0, [pc, #160]	@ (80076dc <__lshift+0xd4>)
 800763c:	f000 fb82 	bl	8007d44 <__assert_func>
 8007640:	3101      	adds	r1, #1
 8007642:	005b      	lsls	r3, r3, #1
 8007644:	e7ee      	b.n	8007624 <__lshift+0x1c>
 8007646:	2300      	movs	r3, #0
 8007648:	f100 0114 	add.w	r1, r0, #20
 800764c:	f100 0210 	add.w	r2, r0, #16
 8007650:	4618      	mov	r0, r3
 8007652:	4553      	cmp	r3, sl
 8007654:	db33      	blt.n	80076be <__lshift+0xb6>
 8007656:	6920      	ldr	r0, [r4, #16]
 8007658:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800765c:	f104 0314 	add.w	r3, r4, #20
 8007660:	f019 091f 	ands.w	r9, r9, #31
 8007664:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007668:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800766c:	d02b      	beq.n	80076c6 <__lshift+0xbe>
 800766e:	468a      	mov	sl, r1
 8007670:	2200      	movs	r2, #0
 8007672:	f1c9 0e20 	rsb	lr, r9, #32
 8007676:	6818      	ldr	r0, [r3, #0]
 8007678:	fa00 f009 	lsl.w	r0, r0, r9
 800767c:	4310      	orrs	r0, r2
 800767e:	f84a 0b04 	str.w	r0, [sl], #4
 8007682:	f853 2b04 	ldr.w	r2, [r3], #4
 8007686:	459c      	cmp	ip, r3
 8007688:	fa22 f20e 	lsr.w	r2, r2, lr
 800768c:	d8f3      	bhi.n	8007676 <__lshift+0x6e>
 800768e:	ebac 0304 	sub.w	r3, ip, r4
 8007692:	3b15      	subs	r3, #21
 8007694:	f023 0303 	bic.w	r3, r3, #3
 8007698:	3304      	adds	r3, #4
 800769a:	f104 0015 	add.w	r0, r4, #21
 800769e:	4560      	cmp	r0, ip
 80076a0:	bf88      	it	hi
 80076a2:	2304      	movhi	r3, #4
 80076a4:	50ca      	str	r2, [r1, r3]
 80076a6:	b10a      	cbz	r2, 80076ac <__lshift+0xa4>
 80076a8:	f108 0602 	add.w	r6, r8, #2
 80076ac:	3e01      	subs	r6, #1
 80076ae:	4638      	mov	r0, r7
 80076b0:	4621      	mov	r1, r4
 80076b2:	612e      	str	r6, [r5, #16]
 80076b4:	f7ff fde2 	bl	800727c <_Bfree>
 80076b8:	4628      	mov	r0, r5
 80076ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076be:	f842 0f04 	str.w	r0, [r2, #4]!
 80076c2:	3301      	adds	r3, #1
 80076c4:	e7c5      	b.n	8007652 <__lshift+0x4a>
 80076c6:	3904      	subs	r1, #4
 80076c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80076cc:	459c      	cmp	ip, r3
 80076ce:	f841 2f04 	str.w	r2, [r1, #4]!
 80076d2:	d8f9      	bhi.n	80076c8 <__lshift+0xc0>
 80076d4:	e7ea      	b.n	80076ac <__lshift+0xa4>
 80076d6:	bf00      	nop
 80076d8:	080099a8 	.word	0x080099a8
 80076dc:	080099b9 	.word	0x080099b9

080076e0 <__mcmp>:
 80076e0:	4603      	mov	r3, r0
 80076e2:	690a      	ldr	r2, [r1, #16]
 80076e4:	6900      	ldr	r0, [r0, #16]
 80076e6:	b530      	push	{r4, r5, lr}
 80076e8:	1a80      	subs	r0, r0, r2
 80076ea:	d10e      	bne.n	800770a <__mcmp+0x2a>
 80076ec:	3314      	adds	r3, #20
 80076ee:	3114      	adds	r1, #20
 80076f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80076f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80076f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80076fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007700:	4295      	cmp	r5, r2
 8007702:	d003      	beq.n	800770c <__mcmp+0x2c>
 8007704:	d205      	bcs.n	8007712 <__mcmp+0x32>
 8007706:	f04f 30ff 	mov.w	r0, #4294967295
 800770a:	bd30      	pop	{r4, r5, pc}
 800770c:	42a3      	cmp	r3, r4
 800770e:	d3f3      	bcc.n	80076f8 <__mcmp+0x18>
 8007710:	e7fb      	b.n	800770a <__mcmp+0x2a>
 8007712:	2001      	movs	r0, #1
 8007714:	e7f9      	b.n	800770a <__mcmp+0x2a>
	...

08007718 <__mdiff>:
 8007718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771c:	4689      	mov	r9, r1
 800771e:	4606      	mov	r6, r0
 8007720:	4611      	mov	r1, r2
 8007722:	4648      	mov	r0, r9
 8007724:	4614      	mov	r4, r2
 8007726:	f7ff ffdb 	bl	80076e0 <__mcmp>
 800772a:	1e05      	subs	r5, r0, #0
 800772c:	d112      	bne.n	8007754 <__mdiff+0x3c>
 800772e:	4629      	mov	r1, r5
 8007730:	4630      	mov	r0, r6
 8007732:	f7ff fd63 	bl	80071fc <_Balloc>
 8007736:	4602      	mov	r2, r0
 8007738:	b928      	cbnz	r0, 8007746 <__mdiff+0x2e>
 800773a:	f240 2137 	movw	r1, #567	@ 0x237
 800773e:	4b3e      	ldr	r3, [pc, #248]	@ (8007838 <__mdiff+0x120>)
 8007740:	483e      	ldr	r0, [pc, #248]	@ (800783c <__mdiff+0x124>)
 8007742:	f000 faff 	bl	8007d44 <__assert_func>
 8007746:	2301      	movs	r3, #1
 8007748:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800774c:	4610      	mov	r0, r2
 800774e:	b003      	add	sp, #12
 8007750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007754:	bfbc      	itt	lt
 8007756:	464b      	movlt	r3, r9
 8007758:	46a1      	movlt	r9, r4
 800775a:	4630      	mov	r0, r6
 800775c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007760:	bfba      	itte	lt
 8007762:	461c      	movlt	r4, r3
 8007764:	2501      	movlt	r5, #1
 8007766:	2500      	movge	r5, #0
 8007768:	f7ff fd48 	bl	80071fc <_Balloc>
 800776c:	4602      	mov	r2, r0
 800776e:	b918      	cbnz	r0, 8007778 <__mdiff+0x60>
 8007770:	f240 2145 	movw	r1, #581	@ 0x245
 8007774:	4b30      	ldr	r3, [pc, #192]	@ (8007838 <__mdiff+0x120>)
 8007776:	e7e3      	b.n	8007740 <__mdiff+0x28>
 8007778:	f100 0b14 	add.w	fp, r0, #20
 800777c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007780:	f109 0310 	add.w	r3, r9, #16
 8007784:	60c5      	str	r5, [r0, #12]
 8007786:	f04f 0c00 	mov.w	ip, #0
 800778a:	f109 0514 	add.w	r5, r9, #20
 800778e:	46d9      	mov	r9, fp
 8007790:	6926      	ldr	r6, [r4, #16]
 8007792:	f104 0e14 	add.w	lr, r4, #20
 8007796:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800779a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800779e:	9301      	str	r3, [sp, #4]
 80077a0:	9b01      	ldr	r3, [sp, #4]
 80077a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80077a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80077aa:	b281      	uxth	r1, r0
 80077ac:	9301      	str	r3, [sp, #4]
 80077ae:	fa1f f38a 	uxth.w	r3, sl
 80077b2:	1a5b      	subs	r3, r3, r1
 80077b4:	0c00      	lsrs	r0, r0, #16
 80077b6:	4463      	add	r3, ip
 80077b8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80077bc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80077c6:	4576      	cmp	r6, lr
 80077c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80077cc:	f849 3b04 	str.w	r3, [r9], #4
 80077d0:	d8e6      	bhi.n	80077a0 <__mdiff+0x88>
 80077d2:	1b33      	subs	r3, r6, r4
 80077d4:	3b15      	subs	r3, #21
 80077d6:	f023 0303 	bic.w	r3, r3, #3
 80077da:	3415      	adds	r4, #21
 80077dc:	3304      	adds	r3, #4
 80077de:	42a6      	cmp	r6, r4
 80077e0:	bf38      	it	cc
 80077e2:	2304      	movcc	r3, #4
 80077e4:	441d      	add	r5, r3
 80077e6:	445b      	add	r3, fp
 80077e8:	461e      	mov	r6, r3
 80077ea:	462c      	mov	r4, r5
 80077ec:	4544      	cmp	r4, r8
 80077ee:	d30e      	bcc.n	800780e <__mdiff+0xf6>
 80077f0:	f108 0103 	add.w	r1, r8, #3
 80077f4:	1b49      	subs	r1, r1, r5
 80077f6:	f021 0103 	bic.w	r1, r1, #3
 80077fa:	3d03      	subs	r5, #3
 80077fc:	45a8      	cmp	r8, r5
 80077fe:	bf38      	it	cc
 8007800:	2100      	movcc	r1, #0
 8007802:	440b      	add	r3, r1
 8007804:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007808:	b199      	cbz	r1, 8007832 <__mdiff+0x11a>
 800780a:	6117      	str	r7, [r2, #16]
 800780c:	e79e      	b.n	800774c <__mdiff+0x34>
 800780e:	46e6      	mov	lr, ip
 8007810:	f854 1b04 	ldr.w	r1, [r4], #4
 8007814:	fa1f fc81 	uxth.w	ip, r1
 8007818:	44f4      	add	ip, lr
 800781a:	0c08      	lsrs	r0, r1, #16
 800781c:	4471      	add	r1, lr
 800781e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007822:	b289      	uxth	r1, r1
 8007824:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007828:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800782c:	f846 1b04 	str.w	r1, [r6], #4
 8007830:	e7dc      	b.n	80077ec <__mdiff+0xd4>
 8007832:	3f01      	subs	r7, #1
 8007834:	e7e6      	b.n	8007804 <__mdiff+0xec>
 8007836:	bf00      	nop
 8007838:	080099a8 	.word	0x080099a8
 800783c:	080099b9 	.word	0x080099b9

08007840 <__d2b>:
 8007840:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007844:	2101      	movs	r1, #1
 8007846:	4690      	mov	r8, r2
 8007848:	4699      	mov	r9, r3
 800784a:	9e08      	ldr	r6, [sp, #32]
 800784c:	f7ff fcd6 	bl	80071fc <_Balloc>
 8007850:	4604      	mov	r4, r0
 8007852:	b930      	cbnz	r0, 8007862 <__d2b+0x22>
 8007854:	4602      	mov	r2, r0
 8007856:	f240 310f 	movw	r1, #783	@ 0x30f
 800785a:	4b23      	ldr	r3, [pc, #140]	@ (80078e8 <__d2b+0xa8>)
 800785c:	4823      	ldr	r0, [pc, #140]	@ (80078ec <__d2b+0xac>)
 800785e:	f000 fa71 	bl	8007d44 <__assert_func>
 8007862:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007866:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800786a:	b10d      	cbz	r5, 8007870 <__d2b+0x30>
 800786c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007870:	9301      	str	r3, [sp, #4]
 8007872:	f1b8 0300 	subs.w	r3, r8, #0
 8007876:	d024      	beq.n	80078c2 <__d2b+0x82>
 8007878:	4668      	mov	r0, sp
 800787a:	9300      	str	r3, [sp, #0]
 800787c:	f7ff fd85 	bl	800738a <__lo0bits>
 8007880:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007884:	b1d8      	cbz	r0, 80078be <__d2b+0x7e>
 8007886:	f1c0 0320 	rsb	r3, r0, #32
 800788a:	fa02 f303 	lsl.w	r3, r2, r3
 800788e:	430b      	orrs	r3, r1
 8007890:	40c2      	lsrs	r2, r0
 8007892:	6163      	str	r3, [r4, #20]
 8007894:	9201      	str	r2, [sp, #4]
 8007896:	9b01      	ldr	r3, [sp, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	bf0c      	ite	eq
 800789c:	2201      	moveq	r2, #1
 800789e:	2202      	movne	r2, #2
 80078a0:	61a3      	str	r3, [r4, #24]
 80078a2:	6122      	str	r2, [r4, #16]
 80078a4:	b1ad      	cbz	r5, 80078d2 <__d2b+0x92>
 80078a6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80078aa:	4405      	add	r5, r0
 80078ac:	6035      	str	r5, [r6, #0]
 80078ae:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80078b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078b4:	6018      	str	r0, [r3, #0]
 80078b6:	4620      	mov	r0, r4
 80078b8:	b002      	add	sp, #8
 80078ba:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80078be:	6161      	str	r1, [r4, #20]
 80078c0:	e7e9      	b.n	8007896 <__d2b+0x56>
 80078c2:	a801      	add	r0, sp, #4
 80078c4:	f7ff fd61 	bl	800738a <__lo0bits>
 80078c8:	9b01      	ldr	r3, [sp, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	6163      	str	r3, [r4, #20]
 80078ce:	3020      	adds	r0, #32
 80078d0:	e7e7      	b.n	80078a2 <__d2b+0x62>
 80078d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80078d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80078da:	6030      	str	r0, [r6, #0]
 80078dc:	6918      	ldr	r0, [r3, #16]
 80078de:	f7ff fd35 	bl	800734c <__hi0bits>
 80078e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80078e6:	e7e4      	b.n	80078b2 <__d2b+0x72>
 80078e8:	080099a8 	.word	0x080099a8
 80078ec:	080099b9 	.word	0x080099b9

080078f0 <__ssputs_r>:
 80078f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078f4:	461f      	mov	r7, r3
 80078f6:	688e      	ldr	r6, [r1, #8]
 80078f8:	4682      	mov	sl, r0
 80078fa:	42be      	cmp	r6, r7
 80078fc:	460c      	mov	r4, r1
 80078fe:	4690      	mov	r8, r2
 8007900:	680b      	ldr	r3, [r1, #0]
 8007902:	d82d      	bhi.n	8007960 <__ssputs_r+0x70>
 8007904:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007908:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800790c:	d026      	beq.n	800795c <__ssputs_r+0x6c>
 800790e:	6965      	ldr	r5, [r4, #20]
 8007910:	6909      	ldr	r1, [r1, #16]
 8007912:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007916:	eba3 0901 	sub.w	r9, r3, r1
 800791a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800791e:	1c7b      	adds	r3, r7, #1
 8007920:	444b      	add	r3, r9
 8007922:	106d      	asrs	r5, r5, #1
 8007924:	429d      	cmp	r5, r3
 8007926:	bf38      	it	cc
 8007928:	461d      	movcc	r5, r3
 800792a:	0553      	lsls	r3, r2, #21
 800792c:	d527      	bpl.n	800797e <__ssputs_r+0x8e>
 800792e:	4629      	mov	r1, r5
 8007930:	f7ff fbd8 	bl	80070e4 <_malloc_r>
 8007934:	4606      	mov	r6, r0
 8007936:	b360      	cbz	r0, 8007992 <__ssputs_r+0xa2>
 8007938:	464a      	mov	r2, r9
 800793a:	6921      	ldr	r1, [r4, #16]
 800793c:	f7fe fcf3 	bl	8006326 <memcpy>
 8007940:	89a3      	ldrh	r3, [r4, #12]
 8007942:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800794a:	81a3      	strh	r3, [r4, #12]
 800794c:	6126      	str	r6, [r4, #16]
 800794e:	444e      	add	r6, r9
 8007950:	6026      	str	r6, [r4, #0]
 8007952:	463e      	mov	r6, r7
 8007954:	6165      	str	r5, [r4, #20]
 8007956:	eba5 0509 	sub.w	r5, r5, r9
 800795a:	60a5      	str	r5, [r4, #8]
 800795c:	42be      	cmp	r6, r7
 800795e:	d900      	bls.n	8007962 <__ssputs_r+0x72>
 8007960:	463e      	mov	r6, r7
 8007962:	4632      	mov	r2, r6
 8007964:	4641      	mov	r1, r8
 8007966:	6820      	ldr	r0, [r4, #0]
 8007968:	f000 f9c2 	bl	8007cf0 <memmove>
 800796c:	2000      	movs	r0, #0
 800796e:	68a3      	ldr	r3, [r4, #8]
 8007970:	1b9b      	subs	r3, r3, r6
 8007972:	60a3      	str	r3, [r4, #8]
 8007974:	6823      	ldr	r3, [r4, #0]
 8007976:	4433      	add	r3, r6
 8007978:	6023      	str	r3, [r4, #0]
 800797a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800797e:	462a      	mov	r2, r5
 8007980:	f000 fa24 	bl	8007dcc <_realloc_r>
 8007984:	4606      	mov	r6, r0
 8007986:	2800      	cmp	r0, #0
 8007988:	d1e0      	bne.n	800794c <__ssputs_r+0x5c>
 800798a:	4650      	mov	r0, sl
 800798c:	6921      	ldr	r1, [r4, #16]
 800798e:	f7ff fb37 	bl	8007000 <_free_r>
 8007992:	230c      	movs	r3, #12
 8007994:	f8ca 3000 	str.w	r3, [sl]
 8007998:	89a3      	ldrh	r3, [r4, #12]
 800799a:	f04f 30ff 	mov.w	r0, #4294967295
 800799e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079a2:	81a3      	strh	r3, [r4, #12]
 80079a4:	e7e9      	b.n	800797a <__ssputs_r+0x8a>
	...

080079a8 <_svfiprintf_r>:
 80079a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ac:	4698      	mov	r8, r3
 80079ae:	898b      	ldrh	r3, [r1, #12]
 80079b0:	4607      	mov	r7, r0
 80079b2:	061b      	lsls	r3, r3, #24
 80079b4:	460d      	mov	r5, r1
 80079b6:	4614      	mov	r4, r2
 80079b8:	b09d      	sub	sp, #116	@ 0x74
 80079ba:	d510      	bpl.n	80079de <_svfiprintf_r+0x36>
 80079bc:	690b      	ldr	r3, [r1, #16]
 80079be:	b973      	cbnz	r3, 80079de <_svfiprintf_r+0x36>
 80079c0:	2140      	movs	r1, #64	@ 0x40
 80079c2:	f7ff fb8f 	bl	80070e4 <_malloc_r>
 80079c6:	6028      	str	r0, [r5, #0]
 80079c8:	6128      	str	r0, [r5, #16]
 80079ca:	b930      	cbnz	r0, 80079da <_svfiprintf_r+0x32>
 80079cc:	230c      	movs	r3, #12
 80079ce:	603b      	str	r3, [r7, #0]
 80079d0:	f04f 30ff 	mov.w	r0, #4294967295
 80079d4:	b01d      	add	sp, #116	@ 0x74
 80079d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079da:	2340      	movs	r3, #64	@ 0x40
 80079dc:	616b      	str	r3, [r5, #20]
 80079de:	2300      	movs	r3, #0
 80079e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80079e2:	2320      	movs	r3, #32
 80079e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80079e8:	2330      	movs	r3, #48	@ 0x30
 80079ea:	f04f 0901 	mov.w	r9, #1
 80079ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80079f2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007b8c <_svfiprintf_r+0x1e4>
 80079f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079fa:	4623      	mov	r3, r4
 80079fc:	469a      	mov	sl, r3
 80079fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a02:	b10a      	cbz	r2, 8007a08 <_svfiprintf_r+0x60>
 8007a04:	2a25      	cmp	r2, #37	@ 0x25
 8007a06:	d1f9      	bne.n	80079fc <_svfiprintf_r+0x54>
 8007a08:	ebba 0b04 	subs.w	fp, sl, r4
 8007a0c:	d00b      	beq.n	8007a26 <_svfiprintf_r+0x7e>
 8007a0e:	465b      	mov	r3, fp
 8007a10:	4622      	mov	r2, r4
 8007a12:	4629      	mov	r1, r5
 8007a14:	4638      	mov	r0, r7
 8007a16:	f7ff ff6b 	bl	80078f0 <__ssputs_r>
 8007a1a:	3001      	adds	r0, #1
 8007a1c:	f000 80a7 	beq.w	8007b6e <_svfiprintf_r+0x1c6>
 8007a20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a22:	445a      	add	r2, fp
 8007a24:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a26:	f89a 3000 	ldrb.w	r3, [sl]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 809f 	beq.w	8007b6e <_svfiprintf_r+0x1c6>
 8007a30:	2300      	movs	r3, #0
 8007a32:	f04f 32ff 	mov.w	r2, #4294967295
 8007a36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a3a:	f10a 0a01 	add.w	sl, sl, #1
 8007a3e:	9304      	str	r3, [sp, #16]
 8007a40:	9307      	str	r3, [sp, #28]
 8007a42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a46:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a48:	4654      	mov	r4, sl
 8007a4a:	2205      	movs	r2, #5
 8007a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a50:	484e      	ldr	r0, [pc, #312]	@ (8007b8c <_svfiprintf_r+0x1e4>)
 8007a52:	f7fe fc5a 	bl	800630a <memchr>
 8007a56:	9a04      	ldr	r2, [sp, #16]
 8007a58:	b9d8      	cbnz	r0, 8007a92 <_svfiprintf_r+0xea>
 8007a5a:	06d0      	lsls	r0, r2, #27
 8007a5c:	bf44      	itt	mi
 8007a5e:	2320      	movmi	r3, #32
 8007a60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a64:	0711      	lsls	r1, r2, #28
 8007a66:	bf44      	itt	mi
 8007a68:	232b      	movmi	r3, #43	@ 0x2b
 8007a6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a6e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a72:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a74:	d015      	beq.n	8007aa2 <_svfiprintf_r+0xfa>
 8007a76:	4654      	mov	r4, sl
 8007a78:	2000      	movs	r0, #0
 8007a7a:	f04f 0c0a 	mov.w	ip, #10
 8007a7e:	9a07      	ldr	r2, [sp, #28]
 8007a80:	4621      	mov	r1, r4
 8007a82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a86:	3b30      	subs	r3, #48	@ 0x30
 8007a88:	2b09      	cmp	r3, #9
 8007a8a:	d94b      	bls.n	8007b24 <_svfiprintf_r+0x17c>
 8007a8c:	b1b0      	cbz	r0, 8007abc <_svfiprintf_r+0x114>
 8007a8e:	9207      	str	r2, [sp, #28]
 8007a90:	e014      	b.n	8007abc <_svfiprintf_r+0x114>
 8007a92:	eba0 0308 	sub.w	r3, r0, r8
 8007a96:	fa09 f303 	lsl.w	r3, r9, r3
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	46a2      	mov	sl, r4
 8007a9e:	9304      	str	r3, [sp, #16]
 8007aa0:	e7d2      	b.n	8007a48 <_svfiprintf_r+0xa0>
 8007aa2:	9b03      	ldr	r3, [sp, #12]
 8007aa4:	1d19      	adds	r1, r3, #4
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	9103      	str	r1, [sp, #12]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	bfbb      	ittet	lt
 8007aae:	425b      	neglt	r3, r3
 8007ab0:	f042 0202 	orrlt.w	r2, r2, #2
 8007ab4:	9307      	strge	r3, [sp, #28]
 8007ab6:	9307      	strlt	r3, [sp, #28]
 8007ab8:	bfb8      	it	lt
 8007aba:	9204      	strlt	r2, [sp, #16]
 8007abc:	7823      	ldrb	r3, [r4, #0]
 8007abe:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ac0:	d10a      	bne.n	8007ad8 <_svfiprintf_r+0x130>
 8007ac2:	7863      	ldrb	r3, [r4, #1]
 8007ac4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ac6:	d132      	bne.n	8007b2e <_svfiprintf_r+0x186>
 8007ac8:	9b03      	ldr	r3, [sp, #12]
 8007aca:	3402      	adds	r4, #2
 8007acc:	1d1a      	adds	r2, r3, #4
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	9203      	str	r2, [sp, #12]
 8007ad2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ad6:	9305      	str	r3, [sp, #20]
 8007ad8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007b90 <_svfiprintf_r+0x1e8>
 8007adc:	2203      	movs	r2, #3
 8007ade:	4650      	mov	r0, sl
 8007ae0:	7821      	ldrb	r1, [r4, #0]
 8007ae2:	f7fe fc12 	bl	800630a <memchr>
 8007ae6:	b138      	cbz	r0, 8007af8 <_svfiprintf_r+0x150>
 8007ae8:	2240      	movs	r2, #64	@ 0x40
 8007aea:	9b04      	ldr	r3, [sp, #16]
 8007aec:	eba0 000a 	sub.w	r0, r0, sl
 8007af0:	4082      	lsls	r2, r0
 8007af2:	4313      	orrs	r3, r2
 8007af4:	3401      	adds	r4, #1
 8007af6:	9304      	str	r3, [sp, #16]
 8007af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007afc:	2206      	movs	r2, #6
 8007afe:	4825      	ldr	r0, [pc, #148]	@ (8007b94 <_svfiprintf_r+0x1ec>)
 8007b00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b04:	f7fe fc01 	bl	800630a <memchr>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d036      	beq.n	8007b7a <_svfiprintf_r+0x1d2>
 8007b0c:	4b22      	ldr	r3, [pc, #136]	@ (8007b98 <_svfiprintf_r+0x1f0>)
 8007b0e:	bb1b      	cbnz	r3, 8007b58 <_svfiprintf_r+0x1b0>
 8007b10:	9b03      	ldr	r3, [sp, #12]
 8007b12:	3307      	adds	r3, #7
 8007b14:	f023 0307 	bic.w	r3, r3, #7
 8007b18:	3308      	adds	r3, #8
 8007b1a:	9303      	str	r3, [sp, #12]
 8007b1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b1e:	4433      	add	r3, r6
 8007b20:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b22:	e76a      	b.n	80079fa <_svfiprintf_r+0x52>
 8007b24:	460c      	mov	r4, r1
 8007b26:	2001      	movs	r0, #1
 8007b28:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b2c:	e7a8      	b.n	8007a80 <_svfiprintf_r+0xd8>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	f04f 0c0a 	mov.w	ip, #10
 8007b34:	4619      	mov	r1, r3
 8007b36:	3401      	adds	r4, #1
 8007b38:	9305      	str	r3, [sp, #20]
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b40:	3a30      	subs	r2, #48	@ 0x30
 8007b42:	2a09      	cmp	r2, #9
 8007b44:	d903      	bls.n	8007b4e <_svfiprintf_r+0x1a6>
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d0c6      	beq.n	8007ad8 <_svfiprintf_r+0x130>
 8007b4a:	9105      	str	r1, [sp, #20]
 8007b4c:	e7c4      	b.n	8007ad8 <_svfiprintf_r+0x130>
 8007b4e:	4604      	mov	r4, r0
 8007b50:	2301      	movs	r3, #1
 8007b52:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b56:	e7f0      	b.n	8007b3a <_svfiprintf_r+0x192>
 8007b58:	ab03      	add	r3, sp, #12
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	462a      	mov	r2, r5
 8007b5e:	4638      	mov	r0, r7
 8007b60:	4b0e      	ldr	r3, [pc, #56]	@ (8007b9c <_svfiprintf_r+0x1f4>)
 8007b62:	a904      	add	r1, sp, #16
 8007b64:	f7fd fe6e 	bl	8005844 <_printf_float>
 8007b68:	1c42      	adds	r2, r0, #1
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	d1d6      	bne.n	8007b1c <_svfiprintf_r+0x174>
 8007b6e:	89ab      	ldrh	r3, [r5, #12]
 8007b70:	065b      	lsls	r3, r3, #25
 8007b72:	f53f af2d 	bmi.w	80079d0 <_svfiprintf_r+0x28>
 8007b76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b78:	e72c      	b.n	80079d4 <_svfiprintf_r+0x2c>
 8007b7a:	ab03      	add	r3, sp, #12
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	462a      	mov	r2, r5
 8007b80:	4638      	mov	r0, r7
 8007b82:	4b06      	ldr	r3, [pc, #24]	@ (8007b9c <_svfiprintf_r+0x1f4>)
 8007b84:	a904      	add	r1, sp, #16
 8007b86:	f7fe f8fb 	bl	8005d80 <_printf_i>
 8007b8a:	e7ed      	b.n	8007b68 <_svfiprintf_r+0x1c0>
 8007b8c:	08009a12 	.word	0x08009a12
 8007b90:	08009a18 	.word	0x08009a18
 8007b94:	08009a1c 	.word	0x08009a1c
 8007b98:	08005845 	.word	0x08005845
 8007b9c:	080078f1 	.word	0x080078f1

08007ba0 <__sflush_r>:
 8007ba0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba6:	0716      	lsls	r6, r2, #28
 8007ba8:	4605      	mov	r5, r0
 8007baa:	460c      	mov	r4, r1
 8007bac:	d454      	bmi.n	8007c58 <__sflush_r+0xb8>
 8007bae:	684b      	ldr	r3, [r1, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	dc02      	bgt.n	8007bba <__sflush_r+0x1a>
 8007bb4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	dd48      	ble.n	8007c4c <__sflush_r+0xac>
 8007bba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bbc:	2e00      	cmp	r6, #0
 8007bbe:	d045      	beq.n	8007c4c <__sflush_r+0xac>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007bc6:	682f      	ldr	r7, [r5, #0]
 8007bc8:	6a21      	ldr	r1, [r4, #32]
 8007bca:	602b      	str	r3, [r5, #0]
 8007bcc:	d030      	beq.n	8007c30 <__sflush_r+0x90>
 8007bce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007bd0:	89a3      	ldrh	r3, [r4, #12]
 8007bd2:	0759      	lsls	r1, r3, #29
 8007bd4:	d505      	bpl.n	8007be2 <__sflush_r+0x42>
 8007bd6:	6863      	ldr	r3, [r4, #4]
 8007bd8:	1ad2      	subs	r2, r2, r3
 8007bda:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bdc:	b10b      	cbz	r3, 8007be2 <__sflush_r+0x42>
 8007bde:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007be0:	1ad2      	subs	r2, r2, r3
 8007be2:	2300      	movs	r3, #0
 8007be4:	4628      	mov	r0, r5
 8007be6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007be8:	6a21      	ldr	r1, [r4, #32]
 8007bea:	47b0      	blx	r6
 8007bec:	1c43      	adds	r3, r0, #1
 8007bee:	89a3      	ldrh	r3, [r4, #12]
 8007bf0:	d106      	bne.n	8007c00 <__sflush_r+0x60>
 8007bf2:	6829      	ldr	r1, [r5, #0]
 8007bf4:	291d      	cmp	r1, #29
 8007bf6:	d82b      	bhi.n	8007c50 <__sflush_r+0xb0>
 8007bf8:	4a28      	ldr	r2, [pc, #160]	@ (8007c9c <__sflush_r+0xfc>)
 8007bfa:	40ca      	lsrs	r2, r1
 8007bfc:	07d6      	lsls	r6, r2, #31
 8007bfe:	d527      	bpl.n	8007c50 <__sflush_r+0xb0>
 8007c00:	2200      	movs	r2, #0
 8007c02:	6062      	str	r2, [r4, #4]
 8007c04:	6922      	ldr	r2, [r4, #16]
 8007c06:	04d9      	lsls	r1, r3, #19
 8007c08:	6022      	str	r2, [r4, #0]
 8007c0a:	d504      	bpl.n	8007c16 <__sflush_r+0x76>
 8007c0c:	1c42      	adds	r2, r0, #1
 8007c0e:	d101      	bne.n	8007c14 <__sflush_r+0x74>
 8007c10:	682b      	ldr	r3, [r5, #0]
 8007c12:	b903      	cbnz	r3, 8007c16 <__sflush_r+0x76>
 8007c14:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c16:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c18:	602f      	str	r7, [r5, #0]
 8007c1a:	b1b9      	cbz	r1, 8007c4c <__sflush_r+0xac>
 8007c1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c20:	4299      	cmp	r1, r3
 8007c22:	d002      	beq.n	8007c2a <__sflush_r+0x8a>
 8007c24:	4628      	mov	r0, r5
 8007c26:	f7ff f9eb 	bl	8007000 <_free_r>
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c2e:	e00d      	b.n	8007c4c <__sflush_r+0xac>
 8007c30:	2301      	movs	r3, #1
 8007c32:	4628      	mov	r0, r5
 8007c34:	47b0      	blx	r6
 8007c36:	4602      	mov	r2, r0
 8007c38:	1c50      	adds	r0, r2, #1
 8007c3a:	d1c9      	bne.n	8007bd0 <__sflush_r+0x30>
 8007c3c:	682b      	ldr	r3, [r5, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d0c6      	beq.n	8007bd0 <__sflush_r+0x30>
 8007c42:	2b1d      	cmp	r3, #29
 8007c44:	d001      	beq.n	8007c4a <__sflush_r+0xaa>
 8007c46:	2b16      	cmp	r3, #22
 8007c48:	d11d      	bne.n	8007c86 <__sflush_r+0xe6>
 8007c4a:	602f      	str	r7, [r5, #0]
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	e021      	b.n	8007c94 <__sflush_r+0xf4>
 8007c50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c54:	b21b      	sxth	r3, r3
 8007c56:	e01a      	b.n	8007c8e <__sflush_r+0xee>
 8007c58:	690f      	ldr	r7, [r1, #16]
 8007c5a:	2f00      	cmp	r7, #0
 8007c5c:	d0f6      	beq.n	8007c4c <__sflush_r+0xac>
 8007c5e:	0793      	lsls	r3, r2, #30
 8007c60:	bf18      	it	ne
 8007c62:	2300      	movne	r3, #0
 8007c64:	680e      	ldr	r6, [r1, #0]
 8007c66:	bf08      	it	eq
 8007c68:	694b      	ldreq	r3, [r1, #20]
 8007c6a:	1bf6      	subs	r6, r6, r7
 8007c6c:	600f      	str	r7, [r1, #0]
 8007c6e:	608b      	str	r3, [r1, #8]
 8007c70:	2e00      	cmp	r6, #0
 8007c72:	ddeb      	ble.n	8007c4c <__sflush_r+0xac>
 8007c74:	4633      	mov	r3, r6
 8007c76:	463a      	mov	r2, r7
 8007c78:	4628      	mov	r0, r5
 8007c7a:	6a21      	ldr	r1, [r4, #32]
 8007c7c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007c80:	47e0      	blx	ip
 8007c82:	2800      	cmp	r0, #0
 8007c84:	dc07      	bgt.n	8007c96 <__sflush_r+0xf6>
 8007c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c92:	81a3      	strh	r3, [r4, #12]
 8007c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c96:	4407      	add	r7, r0
 8007c98:	1a36      	subs	r6, r6, r0
 8007c9a:	e7e9      	b.n	8007c70 <__sflush_r+0xd0>
 8007c9c:	20400001 	.word	0x20400001

08007ca0 <_fflush_r>:
 8007ca0:	b538      	push	{r3, r4, r5, lr}
 8007ca2:	690b      	ldr	r3, [r1, #16]
 8007ca4:	4605      	mov	r5, r0
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	b913      	cbnz	r3, 8007cb0 <_fflush_r+0x10>
 8007caa:	2500      	movs	r5, #0
 8007cac:	4628      	mov	r0, r5
 8007cae:	bd38      	pop	{r3, r4, r5, pc}
 8007cb0:	b118      	cbz	r0, 8007cba <_fflush_r+0x1a>
 8007cb2:	6a03      	ldr	r3, [r0, #32]
 8007cb4:	b90b      	cbnz	r3, 8007cba <_fflush_r+0x1a>
 8007cb6:	f7fe fa0d 	bl	80060d4 <__sinit>
 8007cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d0f3      	beq.n	8007caa <_fflush_r+0xa>
 8007cc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007cc4:	07d0      	lsls	r0, r2, #31
 8007cc6:	d404      	bmi.n	8007cd2 <_fflush_r+0x32>
 8007cc8:	0599      	lsls	r1, r3, #22
 8007cca:	d402      	bmi.n	8007cd2 <_fflush_r+0x32>
 8007ccc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cce:	f7fe fb1a 	bl	8006306 <__retarget_lock_acquire_recursive>
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	f7ff ff63 	bl	8007ba0 <__sflush_r>
 8007cda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cdc:	4605      	mov	r5, r0
 8007cde:	07da      	lsls	r2, r3, #31
 8007ce0:	d4e4      	bmi.n	8007cac <_fflush_r+0xc>
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	059b      	lsls	r3, r3, #22
 8007ce6:	d4e1      	bmi.n	8007cac <_fflush_r+0xc>
 8007ce8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cea:	f7fe fb0d 	bl	8006308 <__retarget_lock_release_recursive>
 8007cee:	e7dd      	b.n	8007cac <_fflush_r+0xc>

08007cf0 <memmove>:
 8007cf0:	4288      	cmp	r0, r1
 8007cf2:	b510      	push	{r4, lr}
 8007cf4:	eb01 0402 	add.w	r4, r1, r2
 8007cf8:	d902      	bls.n	8007d00 <memmove+0x10>
 8007cfa:	4284      	cmp	r4, r0
 8007cfc:	4623      	mov	r3, r4
 8007cfe:	d807      	bhi.n	8007d10 <memmove+0x20>
 8007d00:	1e43      	subs	r3, r0, #1
 8007d02:	42a1      	cmp	r1, r4
 8007d04:	d008      	beq.n	8007d18 <memmove+0x28>
 8007d06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d0e:	e7f8      	b.n	8007d02 <memmove+0x12>
 8007d10:	4601      	mov	r1, r0
 8007d12:	4402      	add	r2, r0
 8007d14:	428a      	cmp	r2, r1
 8007d16:	d100      	bne.n	8007d1a <memmove+0x2a>
 8007d18:	bd10      	pop	{r4, pc}
 8007d1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d22:	e7f7      	b.n	8007d14 <memmove+0x24>

08007d24 <_sbrk_r>:
 8007d24:	b538      	push	{r3, r4, r5, lr}
 8007d26:	2300      	movs	r3, #0
 8007d28:	4d05      	ldr	r5, [pc, #20]	@ (8007d40 <_sbrk_r+0x1c>)
 8007d2a:	4604      	mov	r4, r0
 8007d2c:	4608      	mov	r0, r1
 8007d2e:	602b      	str	r3, [r5, #0]
 8007d30:	f7fd fc88 	bl	8005644 <_sbrk>
 8007d34:	1c43      	adds	r3, r0, #1
 8007d36:	d102      	bne.n	8007d3e <_sbrk_r+0x1a>
 8007d38:	682b      	ldr	r3, [r5, #0]
 8007d3a:	b103      	cbz	r3, 8007d3e <_sbrk_r+0x1a>
 8007d3c:	6023      	str	r3, [r4, #0]
 8007d3e:	bd38      	pop	{r3, r4, r5, pc}
 8007d40:	200007e0 	.word	0x200007e0

08007d44 <__assert_func>:
 8007d44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d46:	4614      	mov	r4, r2
 8007d48:	461a      	mov	r2, r3
 8007d4a:	4b09      	ldr	r3, [pc, #36]	@ (8007d70 <__assert_func+0x2c>)
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68d8      	ldr	r0, [r3, #12]
 8007d52:	b14c      	cbz	r4, 8007d68 <__assert_func+0x24>
 8007d54:	4b07      	ldr	r3, [pc, #28]	@ (8007d74 <__assert_func+0x30>)
 8007d56:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d5a:	9100      	str	r1, [sp, #0]
 8007d5c:	462b      	mov	r3, r5
 8007d5e:	4906      	ldr	r1, [pc, #24]	@ (8007d78 <__assert_func+0x34>)
 8007d60:	f000 f870 	bl	8007e44 <fiprintf>
 8007d64:	f000 f880 	bl	8007e68 <abort>
 8007d68:	4b04      	ldr	r3, [pc, #16]	@ (8007d7c <__assert_func+0x38>)
 8007d6a:	461c      	mov	r4, r3
 8007d6c:	e7f3      	b.n	8007d56 <__assert_func+0x12>
 8007d6e:	bf00      	nop
 8007d70:	20000020 	.word	0x20000020
 8007d74:	08009a2d 	.word	0x08009a2d
 8007d78:	08009a3a 	.word	0x08009a3a
 8007d7c:	08009a68 	.word	0x08009a68

08007d80 <_calloc_r>:
 8007d80:	b570      	push	{r4, r5, r6, lr}
 8007d82:	fba1 5402 	umull	r5, r4, r1, r2
 8007d86:	b934      	cbnz	r4, 8007d96 <_calloc_r+0x16>
 8007d88:	4629      	mov	r1, r5
 8007d8a:	f7ff f9ab 	bl	80070e4 <_malloc_r>
 8007d8e:	4606      	mov	r6, r0
 8007d90:	b928      	cbnz	r0, 8007d9e <_calloc_r+0x1e>
 8007d92:	4630      	mov	r0, r6
 8007d94:	bd70      	pop	{r4, r5, r6, pc}
 8007d96:	220c      	movs	r2, #12
 8007d98:	2600      	movs	r6, #0
 8007d9a:	6002      	str	r2, [r0, #0]
 8007d9c:	e7f9      	b.n	8007d92 <_calloc_r+0x12>
 8007d9e:	462a      	mov	r2, r5
 8007da0:	4621      	mov	r1, r4
 8007da2:	f7fe fa32 	bl	800620a <memset>
 8007da6:	e7f4      	b.n	8007d92 <_calloc_r+0x12>

08007da8 <__ascii_mbtowc>:
 8007da8:	b082      	sub	sp, #8
 8007daa:	b901      	cbnz	r1, 8007dae <__ascii_mbtowc+0x6>
 8007dac:	a901      	add	r1, sp, #4
 8007dae:	b142      	cbz	r2, 8007dc2 <__ascii_mbtowc+0x1a>
 8007db0:	b14b      	cbz	r3, 8007dc6 <__ascii_mbtowc+0x1e>
 8007db2:	7813      	ldrb	r3, [r2, #0]
 8007db4:	600b      	str	r3, [r1, #0]
 8007db6:	7812      	ldrb	r2, [r2, #0]
 8007db8:	1e10      	subs	r0, r2, #0
 8007dba:	bf18      	it	ne
 8007dbc:	2001      	movne	r0, #1
 8007dbe:	b002      	add	sp, #8
 8007dc0:	4770      	bx	lr
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	e7fb      	b.n	8007dbe <__ascii_mbtowc+0x16>
 8007dc6:	f06f 0001 	mvn.w	r0, #1
 8007dca:	e7f8      	b.n	8007dbe <__ascii_mbtowc+0x16>

08007dcc <_realloc_r>:
 8007dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd0:	4607      	mov	r7, r0
 8007dd2:	4614      	mov	r4, r2
 8007dd4:	460d      	mov	r5, r1
 8007dd6:	b921      	cbnz	r1, 8007de2 <_realloc_r+0x16>
 8007dd8:	4611      	mov	r1, r2
 8007dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dde:	f7ff b981 	b.w	80070e4 <_malloc_r>
 8007de2:	b92a      	cbnz	r2, 8007df0 <_realloc_r+0x24>
 8007de4:	f7ff f90c 	bl	8007000 <_free_r>
 8007de8:	4625      	mov	r5, r4
 8007dea:	4628      	mov	r0, r5
 8007dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007df0:	f000 f841 	bl	8007e76 <_malloc_usable_size_r>
 8007df4:	4284      	cmp	r4, r0
 8007df6:	4606      	mov	r6, r0
 8007df8:	d802      	bhi.n	8007e00 <_realloc_r+0x34>
 8007dfa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007dfe:	d8f4      	bhi.n	8007dea <_realloc_r+0x1e>
 8007e00:	4621      	mov	r1, r4
 8007e02:	4638      	mov	r0, r7
 8007e04:	f7ff f96e 	bl	80070e4 <_malloc_r>
 8007e08:	4680      	mov	r8, r0
 8007e0a:	b908      	cbnz	r0, 8007e10 <_realloc_r+0x44>
 8007e0c:	4645      	mov	r5, r8
 8007e0e:	e7ec      	b.n	8007dea <_realloc_r+0x1e>
 8007e10:	42b4      	cmp	r4, r6
 8007e12:	4622      	mov	r2, r4
 8007e14:	4629      	mov	r1, r5
 8007e16:	bf28      	it	cs
 8007e18:	4632      	movcs	r2, r6
 8007e1a:	f7fe fa84 	bl	8006326 <memcpy>
 8007e1e:	4629      	mov	r1, r5
 8007e20:	4638      	mov	r0, r7
 8007e22:	f7ff f8ed 	bl	8007000 <_free_r>
 8007e26:	e7f1      	b.n	8007e0c <_realloc_r+0x40>

08007e28 <__ascii_wctomb>:
 8007e28:	4603      	mov	r3, r0
 8007e2a:	4608      	mov	r0, r1
 8007e2c:	b141      	cbz	r1, 8007e40 <__ascii_wctomb+0x18>
 8007e2e:	2aff      	cmp	r2, #255	@ 0xff
 8007e30:	d904      	bls.n	8007e3c <__ascii_wctomb+0x14>
 8007e32:	228a      	movs	r2, #138	@ 0x8a
 8007e34:	f04f 30ff 	mov.w	r0, #4294967295
 8007e38:	601a      	str	r2, [r3, #0]
 8007e3a:	4770      	bx	lr
 8007e3c:	2001      	movs	r0, #1
 8007e3e:	700a      	strb	r2, [r1, #0]
 8007e40:	4770      	bx	lr
	...

08007e44 <fiprintf>:
 8007e44:	b40e      	push	{r1, r2, r3}
 8007e46:	b503      	push	{r0, r1, lr}
 8007e48:	4601      	mov	r1, r0
 8007e4a:	ab03      	add	r3, sp, #12
 8007e4c:	4805      	ldr	r0, [pc, #20]	@ (8007e64 <fiprintf+0x20>)
 8007e4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e52:	6800      	ldr	r0, [r0, #0]
 8007e54:	9301      	str	r3, [sp, #4]
 8007e56:	f000 f83d 	bl	8007ed4 <_vfiprintf_r>
 8007e5a:	b002      	add	sp, #8
 8007e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e60:	b003      	add	sp, #12
 8007e62:	4770      	bx	lr
 8007e64:	20000020 	.word	0x20000020

08007e68 <abort>:
 8007e68:	2006      	movs	r0, #6
 8007e6a:	b508      	push	{r3, lr}
 8007e6c:	f000 fa06 	bl	800827c <raise>
 8007e70:	2001      	movs	r0, #1
 8007e72:	f7fd fb72 	bl	800555a <_exit>

08007e76 <_malloc_usable_size_r>:
 8007e76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e7a:	1f18      	subs	r0, r3, #4
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	bfbc      	itt	lt
 8007e80:	580b      	ldrlt	r3, [r1, r0]
 8007e82:	18c0      	addlt	r0, r0, r3
 8007e84:	4770      	bx	lr

08007e86 <__sfputc_r>:
 8007e86:	6893      	ldr	r3, [r2, #8]
 8007e88:	b410      	push	{r4}
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	6093      	str	r3, [r2, #8]
 8007e90:	da07      	bge.n	8007ea2 <__sfputc_r+0x1c>
 8007e92:	6994      	ldr	r4, [r2, #24]
 8007e94:	42a3      	cmp	r3, r4
 8007e96:	db01      	blt.n	8007e9c <__sfputc_r+0x16>
 8007e98:	290a      	cmp	r1, #10
 8007e9a:	d102      	bne.n	8007ea2 <__sfputc_r+0x1c>
 8007e9c:	bc10      	pop	{r4}
 8007e9e:	f000 b931 	b.w	8008104 <__swbuf_r>
 8007ea2:	6813      	ldr	r3, [r2, #0]
 8007ea4:	1c58      	adds	r0, r3, #1
 8007ea6:	6010      	str	r0, [r2, #0]
 8007ea8:	7019      	strb	r1, [r3, #0]
 8007eaa:	4608      	mov	r0, r1
 8007eac:	bc10      	pop	{r4}
 8007eae:	4770      	bx	lr

08007eb0 <__sfputs_r>:
 8007eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb2:	4606      	mov	r6, r0
 8007eb4:	460f      	mov	r7, r1
 8007eb6:	4614      	mov	r4, r2
 8007eb8:	18d5      	adds	r5, r2, r3
 8007eba:	42ac      	cmp	r4, r5
 8007ebc:	d101      	bne.n	8007ec2 <__sfputs_r+0x12>
 8007ebe:	2000      	movs	r0, #0
 8007ec0:	e007      	b.n	8007ed2 <__sfputs_r+0x22>
 8007ec2:	463a      	mov	r2, r7
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eca:	f7ff ffdc 	bl	8007e86 <__sfputc_r>
 8007ece:	1c43      	adds	r3, r0, #1
 8007ed0:	d1f3      	bne.n	8007eba <__sfputs_r+0xa>
 8007ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ed4 <_vfiprintf_r>:
 8007ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed8:	460d      	mov	r5, r1
 8007eda:	4614      	mov	r4, r2
 8007edc:	4698      	mov	r8, r3
 8007ede:	4606      	mov	r6, r0
 8007ee0:	b09d      	sub	sp, #116	@ 0x74
 8007ee2:	b118      	cbz	r0, 8007eec <_vfiprintf_r+0x18>
 8007ee4:	6a03      	ldr	r3, [r0, #32]
 8007ee6:	b90b      	cbnz	r3, 8007eec <_vfiprintf_r+0x18>
 8007ee8:	f7fe f8f4 	bl	80060d4 <__sinit>
 8007eec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007eee:	07d9      	lsls	r1, r3, #31
 8007ef0:	d405      	bmi.n	8007efe <_vfiprintf_r+0x2a>
 8007ef2:	89ab      	ldrh	r3, [r5, #12]
 8007ef4:	059a      	lsls	r2, r3, #22
 8007ef6:	d402      	bmi.n	8007efe <_vfiprintf_r+0x2a>
 8007ef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007efa:	f7fe fa04 	bl	8006306 <__retarget_lock_acquire_recursive>
 8007efe:	89ab      	ldrh	r3, [r5, #12]
 8007f00:	071b      	lsls	r3, r3, #28
 8007f02:	d501      	bpl.n	8007f08 <_vfiprintf_r+0x34>
 8007f04:	692b      	ldr	r3, [r5, #16]
 8007f06:	b99b      	cbnz	r3, 8007f30 <_vfiprintf_r+0x5c>
 8007f08:	4629      	mov	r1, r5
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	f000 f938 	bl	8008180 <__swsetup_r>
 8007f10:	b170      	cbz	r0, 8007f30 <_vfiprintf_r+0x5c>
 8007f12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f14:	07dc      	lsls	r4, r3, #31
 8007f16:	d504      	bpl.n	8007f22 <_vfiprintf_r+0x4e>
 8007f18:	f04f 30ff 	mov.w	r0, #4294967295
 8007f1c:	b01d      	add	sp, #116	@ 0x74
 8007f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f22:	89ab      	ldrh	r3, [r5, #12]
 8007f24:	0598      	lsls	r0, r3, #22
 8007f26:	d4f7      	bmi.n	8007f18 <_vfiprintf_r+0x44>
 8007f28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f2a:	f7fe f9ed 	bl	8006308 <__retarget_lock_release_recursive>
 8007f2e:	e7f3      	b.n	8007f18 <_vfiprintf_r+0x44>
 8007f30:	2300      	movs	r3, #0
 8007f32:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f34:	2320      	movs	r3, #32
 8007f36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f3a:	2330      	movs	r3, #48	@ 0x30
 8007f3c:	f04f 0901 	mov.w	r9, #1
 8007f40:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f44:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80080f0 <_vfiprintf_r+0x21c>
 8007f48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f4c:	4623      	mov	r3, r4
 8007f4e:	469a      	mov	sl, r3
 8007f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f54:	b10a      	cbz	r2, 8007f5a <_vfiprintf_r+0x86>
 8007f56:	2a25      	cmp	r2, #37	@ 0x25
 8007f58:	d1f9      	bne.n	8007f4e <_vfiprintf_r+0x7a>
 8007f5a:	ebba 0b04 	subs.w	fp, sl, r4
 8007f5e:	d00b      	beq.n	8007f78 <_vfiprintf_r+0xa4>
 8007f60:	465b      	mov	r3, fp
 8007f62:	4622      	mov	r2, r4
 8007f64:	4629      	mov	r1, r5
 8007f66:	4630      	mov	r0, r6
 8007f68:	f7ff ffa2 	bl	8007eb0 <__sfputs_r>
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	f000 80a7 	beq.w	80080c0 <_vfiprintf_r+0x1ec>
 8007f72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f74:	445a      	add	r2, fp
 8007f76:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f78:	f89a 3000 	ldrb.w	r3, [sl]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 809f 	beq.w	80080c0 <_vfiprintf_r+0x1ec>
 8007f82:	2300      	movs	r3, #0
 8007f84:	f04f 32ff 	mov.w	r2, #4294967295
 8007f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f8c:	f10a 0a01 	add.w	sl, sl, #1
 8007f90:	9304      	str	r3, [sp, #16]
 8007f92:	9307      	str	r3, [sp, #28]
 8007f94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f98:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f9a:	4654      	mov	r4, sl
 8007f9c:	2205      	movs	r2, #5
 8007f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fa2:	4853      	ldr	r0, [pc, #332]	@ (80080f0 <_vfiprintf_r+0x21c>)
 8007fa4:	f7fe f9b1 	bl	800630a <memchr>
 8007fa8:	9a04      	ldr	r2, [sp, #16]
 8007faa:	b9d8      	cbnz	r0, 8007fe4 <_vfiprintf_r+0x110>
 8007fac:	06d1      	lsls	r1, r2, #27
 8007fae:	bf44      	itt	mi
 8007fb0:	2320      	movmi	r3, #32
 8007fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fb6:	0713      	lsls	r3, r2, #28
 8007fb8:	bf44      	itt	mi
 8007fba:	232b      	movmi	r3, #43	@ 0x2b
 8007fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8007fc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fc6:	d015      	beq.n	8007ff4 <_vfiprintf_r+0x120>
 8007fc8:	4654      	mov	r4, sl
 8007fca:	2000      	movs	r0, #0
 8007fcc:	f04f 0c0a 	mov.w	ip, #10
 8007fd0:	9a07      	ldr	r2, [sp, #28]
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fd8:	3b30      	subs	r3, #48	@ 0x30
 8007fda:	2b09      	cmp	r3, #9
 8007fdc:	d94b      	bls.n	8008076 <_vfiprintf_r+0x1a2>
 8007fde:	b1b0      	cbz	r0, 800800e <_vfiprintf_r+0x13a>
 8007fe0:	9207      	str	r2, [sp, #28]
 8007fe2:	e014      	b.n	800800e <_vfiprintf_r+0x13a>
 8007fe4:	eba0 0308 	sub.w	r3, r0, r8
 8007fe8:	fa09 f303 	lsl.w	r3, r9, r3
 8007fec:	4313      	orrs	r3, r2
 8007fee:	46a2      	mov	sl, r4
 8007ff0:	9304      	str	r3, [sp, #16]
 8007ff2:	e7d2      	b.n	8007f9a <_vfiprintf_r+0xc6>
 8007ff4:	9b03      	ldr	r3, [sp, #12]
 8007ff6:	1d19      	adds	r1, r3, #4
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	9103      	str	r1, [sp, #12]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	bfbb      	ittet	lt
 8008000:	425b      	neglt	r3, r3
 8008002:	f042 0202 	orrlt.w	r2, r2, #2
 8008006:	9307      	strge	r3, [sp, #28]
 8008008:	9307      	strlt	r3, [sp, #28]
 800800a:	bfb8      	it	lt
 800800c:	9204      	strlt	r2, [sp, #16]
 800800e:	7823      	ldrb	r3, [r4, #0]
 8008010:	2b2e      	cmp	r3, #46	@ 0x2e
 8008012:	d10a      	bne.n	800802a <_vfiprintf_r+0x156>
 8008014:	7863      	ldrb	r3, [r4, #1]
 8008016:	2b2a      	cmp	r3, #42	@ 0x2a
 8008018:	d132      	bne.n	8008080 <_vfiprintf_r+0x1ac>
 800801a:	9b03      	ldr	r3, [sp, #12]
 800801c:	3402      	adds	r4, #2
 800801e:	1d1a      	adds	r2, r3, #4
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	9203      	str	r2, [sp, #12]
 8008024:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008028:	9305      	str	r3, [sp, #20]
 800802a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80080f4 <_vfiprintf_r+0x220>
 800802e:	2203      	movs	r2, #3
 8008030:	4650      	mov	r0, sl
 8008032:	7821      	ldrb	r1, [r4, #0]
 8008034:	f7fe f969 	bl	800630a <memchr>
 8008038:	b138      	cbz	r0, 800804a <_vfiprintf_r+0x176>
 800803a:	2240      	movs	r2, #64	@ 0x40
 800803c:	9b04      	ldr	r3, [sp, #16]
 800803e:	eba0 000a 	sub.w	r0, r0, sl
 8008042:	4082      	lsls	r2, r0
 8008044:	4313      	orrs	r3, r2
 8008046:	3401      	adds	r4, #1
 8008048:	9304      	str	r3, [sp, #16]
 800804a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800804e:	2206      	movs	r2, #6
 8008050:	4829      	ldr	r0, [pc, #164]	@ (80080f8 <_vfiprintf_r+0x224>)
 8008052:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008056:	f7fe f958 	bl	800630a <memchr>
 800805a:	2800      	cmp	r0, #0
 800805c:	d03f      	beq.n	80080de <_vfiprintf_r+0x20a>
 800805e:	4b27      	ldr	r3, [pc, #156]	@ (80080fc <_vfiprintf_r+0x228>)
 8008060:	bb1b      	cbnz	r3, 80080aa <_vfiprintf_r+0x1d6>
 8008062:	9b03      	ldr	r3, [sp, #12]
 8008064:	3307      	adds	r3, #7
 8008066:	f023 0307 	bic.w	r3, r3, #7
 800806a:	3308      	adds	r3, #8
 800806c:	9303      	str	r3, [sp, #12]
 800806e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008070:	443b      	add	r3, r7
 8008072:	9309      	str	r3, [sp, #36]	@ 0x24
 8008074:	e76a      	b.n	8007f4c <_vfiprintf_r+0x78>
 8008076:	460c      	mov	r4, r1
 8008078:	2001      	movs	r0, #1
 800807a:	fb0c 3202 	mla	r2, ip, r2, r3
 800807e:	e7a8      	b.n	8007fd2 <_vfiprintf_r+0xfe>
 8008080:	2300      	movs	r3, #0
 8008082:	f04f 0c0a 	mov.w	ip, #10
 8008086:	4619      	mov	r1, r3
 8008088:	3401      	adds	r4, #1
 800808a:	9305      	str	r3, [sp, #20]
 800808c:	4620      	mov	r0, r4
 800808e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008092:	3a30      	subs	r2, #48	@ 0x30
 8008094:	2a09      	cmp	r2, #9
 8008096:	d903      	bls.n	80080a0 <_vfiprintf_r+0x1cc>
 8008098:	2b00      	cmp	r3, #0
 800809a:	d0c6      	beq.n	800802a <_vfiprintf_r+0x156>
 800809c:	9105      	str	r1, [sp, #20]
 800809e:	e7c4      	b.n	800802a <_vfiprintf_r+0x156>
 80080a0:	4604      	mov	r4, r0
 80080a2:	2301      	movs	r3, #1
 80080a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80080a8:	e7f0      	b.n	800808c <_vfiprintf_r+0x1b8>
 80080aa:	ab03      	add	r3, sp, #12
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	462a      	mov	r2, r5
 80080b0:	4630      	mov	r0, r6
 80080b2:	4b13      	ldr	r3, [pc, #76]	@ (8008100 <_vfiprintf_r+0x22c>)
 80080b4:	a904      	add	r1, sp, #16
 80080b6:	f7fd fbc5 	bl	8005844 <_printf_float>
 80080ba:	4607      	mov	r7, r0
 80080bc:	1c78      	adds	r0, r7, #1
 80080be:	d1d6      	bne.n	800806e <_vfiprintf_r+0x19a>
 80080c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080c2:	07d9      	lsls	r1, r3, #31
 80080c4:	d405      	bmi.n	80080d2 <_vfiprintf_r+0x1fe>
 80080c6:	89ab      	ldrh	r3, [r5, #12]
 80080c8:	059a      	lsls	r2, r3, #22
 80080ca:	d402      	bmi.n	80080d2 <_vfiprintf_r+0x1fe>
 80080cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080ce:	f7fe f91b 	bl	8006308 <__retarget_lock_release_recursive>
 80080d2:	89ab      	ldrh	r3, [r5, #12]
 80080d4:	065b      	lsls	r3, r3, #25
 80080d6:	f53f af1f 	bmi.w	8007f18 <_vfiprintf_r+0x44>
 80080da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080dc:	e71e      	b.n	8007f1c <_vfiprintf_r+0x48>
 80080de:	ab03      	add	r3, sp, #12
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	462a      	mov	r2, r5
 80080e4:	4630      	mov	r0, r6
 80080e6:	4b06      	ldr	r3, [pc, #24]	@ (8008100 <_vfiprintf_r+0x22c>)
 80080e8:	a904      	add	r1, sp, #16
 80080ea:	f7fd fe49 	bl	8005d80 <_printf_i>
 80080ee:	e7e4      	b.n	80080ba <_vfiprintf_r+0x1e6>
 80080f0:	08009a12 	.word	0x08009a12
 80080f4:	08009a18 	.word	0x08009a18
 80080f8:	08009a1c 	.word	0x08009a1c
 80080fc:	08005845 	.word	0x08005845
 8008100:	08007eb1 	.word	0x08007eb1

08008104 <__swbuf_r>:
 8008104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008106:	460e      	mov	r6, r1
 8008108:	4614      	mov	r4, r2
 800810a:	4605      	mov	r5, r0
 800810c:	b118      	cbz	r0, 8008116 <__swbuf_r+0x12>
 800810e:	6a03      	ldr	r3, [r0, #32]
 8008110:	b90b      	cbnz	r3, 8008116 <__swbuf_r+0x12>
 8008112:	f7fd ffdf 	bl	80060d4 <__sinit>
 8008116:	69a3      	ldr	r3, [r4, #24]
 8008118:	60a3      	str	r3, [r4, #8]
 800811a:	89a3      	ldrh	r3, [r4, #12]
 800811c:	071a      	lsls	r2, r3, #28
 800811e:	d501      	bpl.n	8008124 <__swbuf_r+0x20>
 8008120:	6923      	ldr	r3, [r4, #16]
 8008122:	b943      	cbnz	r3, 8008136 <__swbuf_r+0x32>
 8008124:	4621      	mov	r1, r4
 8008126:	4628      	mov	r0, r5
 8008128:	f000 f82a 	bl	8008180 <__swsetup_r>
 800812c:	b118      	cbz	r0, 8008136 <__swbuf_r+0x32>
 800812e:	f04f 37ff 	mov.w	r7, #4294967295
 8008132:	4638      	mov	r0, r7
 8008134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	6922      	ldr	r2, [r4, #16]
 800813a:	b2f6      	uxtb	r6, r6
 800813c:	1a98      	subs	r0, r3, r2
 800813e:	6963      	ldr	r3, [r4, #20]
 8008140:	4637      	mov	r7, r6
 8008142:	4283      	cmp	r3, r0
 8008144:	dc05      	bgt.n	8008152 <__swbuf_r+0x4e>
 8008146:	4621      	mov	r1, r4
 8008148:	4628      	mov	r0, r5
 800814a:	f7ff fda9 	bl	8007ca0 <_fflush_r>
 800814e:	2800      	cmp	r0, #0
 8008150:	d1ed      	bne.n	800812e <__swbuf_r+0x2a>
 8008152:	68a3      	ldr	r3, [r4, #8]
 8008154:	3b01      	subs	r3, #1
 8008156:	60a3      	str	r3, [r4, #8]
 8008158:	6823      	ldr	r3, [r4, #0]
 800815a:	1c5a      	adds	r2, r3, #1
 800815c:	6022      	str	r2, [r4, #0]
 800815e:	701e      	strb	r6, [r3, #0]
 8008160:	6962      	ldr	r2, [r4, #20]
 8008162:	1c43      	adds	r3, r0, #1
 8008164:	429a      	cmp	r2, r3
 8008166:	d004      	beq.n	8008172 <__swbuf_r+0x6e>
 8008168:	89a3      	ldrh	r3, [r4, #12]
 800816a:	07db      	lsls	r3, r3, #31
 800816c:	d5e1      	bpl.n	8008132 <__swbuf_r+0x2e>
 800816e:	2e0a      	cmp	r6, #10
 8008170:	d1df      	bne.n	8008132 <__swbuf_r+0x2e>
 8008172:	4621      	mov	r1, r4
 8008174:	4628      	mov	r0, r5
 8008176:	f7ff fd93 	bl	8007ca0 <_fflush_r>
 800817a:	2800      	cmp	r0, #0
 800817c:	d0d9      	beq.n	8008132 <__swbuf_r+0x2e>
 800817e:	e7d6      	b.n	800812e <__swbuf_r+0x2a>

08008180 <__swsetup_r>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	4b29      	ldr	r3, [pc, #164]	@ (8008228 <__swsetup_r+0xa8>)
 8008184:	4605      	mov	r5, r0
 8008186:	6818      	ldr	r0, [r3, #0]
 8008188:	460c      	mov	r4, r1
 800818a:	b118      	cbz	r0, 8008194 <__swsetup_r+0x14>
 800818c:	6a03      	ldr	r3, [r0, #32]
 800818e:	b90b      	cbnz	r3, 8008194 <__swsetup_r+0x14>
 8008190:	f7fd ffa0 	bl	80060d4 <__sinit>
 8008194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008198:	0719      	lsls	r1, r3, #28
 800819a:	d422      	bmi.n	80081e2 <__swsetup_r+0x62>
 800819c:	06da      	lsls	r2, r3, #27
 800819e:	d407      	bmi.n	80081b0 <__swsetup_r+0x30>
 80081a0:	2209      	movs	r2, #9
 80081a2:	602a      	str	r2, [r5, #0]
 80081a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081a8:	f04f 30ff 	mov.w	r0, #4294967295
 80081ac:	81a3      	strh	r3, [r4, #12]
 80081ae:	e033      	b.n	8008218 <__swsetup_r+0x98>
 80081b0:	0758      	lsls	r0, r3, #29
 80081b2:	d512      	bpl.n	80081da <__swsetup_r+0x5a>
 80081b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081b6:	b141      	cbz	r1, 80081ca <__swsetup_r+0x4a>
 80081b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081bc:	4299      	cmp	r1, r3
 80081be:	d002      	beq.n	80081c6 <__swsetup_r+0x46>
 80081c0:	4628      	mov	r0, r5
 80081c2:	f7fe ff1d 	bl	8007000 <_free_r>
 80081c6:	2300      	movs	r3, #0
 80081c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80081ca:	89a3      	ldrh	r3, [r4, #12]
 80081cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80081d0:	81a3      	strh	r3, [r4, #12]
 80081d2:	2300      	movs	r3, #0
 80081d4:	6063      	str	r3, [r4, #4]
 80081d6:	6923      	ldr	r3, [r4, #16]
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	89a3      	ldrh	r3, [r4, #12]
 80081dc:	f043 0308 	orr.w	r3, r3, #8
 80081e0:	81a3      	strh	r3, [r4, #12]
 80081e2:	6923      	ldr	r3, [r4, #16]
 80081e4:	b94b      	cbnz	r3, 80081fa <__swsetup_r+0x7a>
 80081e6:	89a3      	ldrh	r3, [r4, #12]
 80081e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80081ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081f0:	d003      	beq.n	80081fa <__swsetup_r+0x7a>
 80081f2:	4621      	mov	r1, r4
 80081f4:	4628      	mov	r0, r5
 80081f6:	f000 f882 	bl	80082fe <__smakebuf_r>
 80081fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081fe:	f013 0201 	ands.w	r2, r3, #1
 8008202:	d00a      	beq.n	800821a <__swsetup_r+0x9a>
 8008204:	2200      	movs	r2, #0
 8008206:	60a2      	str	r2, [r4, #8]
 8008208:	6962      	ldr	r2, [r4, #20]
 800820a:	4252      	negs	r2, r2
 800820c:	61a2      	str	r2, [r4, #24]
 800820e:	6922      	ldr	r2, [r4, #16]
 8008210:	b942      	cbnz	r2, 8008224 <__swsetup_r+0xa4>
 8008212:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008216:	d1c5      	bne.n	80081a4 <__swsetup_r+0x24>
 8008218:	bd38      	pop	{r3, r4, r5, pc}
 800821a:	0799      	lsls	r1, r3, #30
 800821c:	bf58      	it	pl
 800821e:	6962      	ldrpl	r2, [r4, #20]
 8008220:	60a2      	str	r2, [r4, #8]
 8008222:	e7f4      	b.n	800820e <__swsetup_r+0x8e>
 8008224:	2000      	movs	r0, #0
 8008226:	e7f7      	b.n	8008218 <__swsetup_r+0x98>
 8008228:	20000020 	.word	0x20000020

0800822c <_raise_r>:
 800822c:	291f      	cmp	r1, #31
 800822e:	b538      	push	{r3, r4, r5, lr}
 8008230:	4605      	mov	r5, r0
 8008232:	460c      	mov	r4, r1
 8008234:	d904      	bls.n	8008240 <_raise_r+0x14>
 8008236:	2316      	movs	r3, #22
 8008238:	6003      	str	r3, [r0, #0]
 800823a:	f04f 30ff 	mov.w	r0, #4294967295
 800823e:	bd38      	pop	{r3, r4, r5, pc}
 8008240:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008242:	b112      	cbz	r2, 800824a <_raise_r+0x1e>
 8008244:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008248:	b94b      	cbnz	r3, 800825e <_raise_r+0x32>
 800824a:	4628      	mov	r0, r5
 800824c:	f000 f830 	bl	80082b0 <_getpid_r>
 8008250:	4622      	mov	r2, r4
 8008252:	4601      	mov	r1, r0
 8008254:	4628      	mov	r0, r5
 8008256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800825a:	f000 b817 	b.w	800828c <_kill_r>
 800825e:	2b01      	cmp	r3, #1
 8008260:	d00a      	beq.n	8008278 <_raise_r+0x4c>
 8008262:	1c59      	adds	r1, r3, #1
 8008264:	d103      	bne.n	800826e <_raise_r+0x42>
 8008266:	2316      	movs	r3, #22
 8008268:	6003      	str	r3, [r0, #0]
 800826a:	2001      	movs	r0, #1
 800826c:	e7e7      	b.n	800823e <_raise_r+0x12>
 800826e:	2100      	movs	r1, #0
 8008270:	4620      	mov	r0, r4
 8008272:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008276:	4798      	blx	r3
 8008278:	2000      	movs	r0, #0
 800827a:	e7e0      	b.n	800823e <_raise_r+0x12>

0800827c <raise>:
 800827c:	4b02      	ldr	r3, [pc, #8]	@ (8008288 <raise+0xc>)
 800827e:	4601      	mov	r1, r0
 8008280:	6818      	ldr	r0, [r3, #0]
 8008282:	f7ff bfd3 	b.w	800822c <_raise_r>
 8008286:	bf00      	nop
 8008288:	20000020 	.word	0x20000020

0800828c <_kill_r>:
 800828c:	b538      	push	{r3, r4, r5, lr}
 800828e:	2300      	movs	r3, #0
 8008290:	4d06      	ldr	r5, [pc, #24]	@ (80082ac <_kill_r+0x20>)
 8008292:	4604      	mov	r4, r0
 8008294:	4608      	mov	r0, r1
 8008296:	4611      	mov	r1, r2
 8008298:	602b      	str	r3, [r5, #0]
 800829a:	f7fd f94e 	bl	800553a <_kill>
 800829e:	1c43      	adds	r3, r0, #1
 80082a0:	d102      	bne.n	80082a8 <_kill_r+0x1c>
 80082a2:	682b      	ldr	r3, [r5, #0]
 80082a4:	b103      	cbz	r3, 80082a8 <_kill_r+0x1c>
 80082a6:	6023      	str	r3, [r4, #0]
 80082a8:	bd38      	pop	{r3, r4, r5, pc}
 80082aa:	bf00      	nop
 80082ac:	200007e0 	.word	0x200007e0

080082b0 <_getpid_r>:
 80082b0:	f7fd b93c 	b.w	800552c <_getpid>

080082b4 <__swhatbuf_r>:
 80082b4:	b570      	push	{r4, r5, r6, lr}
 80082b6:	460c      	mov	r4, r1
 80082b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082bc:	4615      	mov	r5, r2
 80082be:	2900      	cmp	r1, #0
 80082c0:	461e      	mov	r6, r3
 80082c2:	b096      	sub	sp, #88	@ 0x58
 80082c4:	da0c      	bge.n	80082e0 <__swhatbuf_r+0x2c>
 80082c6:	89a3      	ldrh	r3, [r4, #12]
 80082c8:	2100      	movs	r1, #0
 80082ca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082ce:	bf14      	ite	ne
 80082d0:	2340      	movne	r3, #64	@ 0x40
 80082d2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082d6:	2000      	movs	r0, #0
 80082d8:	6031      	str	r1, [r6, #0]
 80082da:	602b      	str	r3, [r5, #0]
 80082dc:	b016      	add	sp, #88	@ 0x58
 80082de:	bd70      	pop	{r4, r5, r6, pc}
 80082e0:	466a      	mov	r2, sp
 80082e2:	f000 f849 	bl	8008378 <_fstat_r>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	dbed      	blt.n	80082c6 <__swhatbuf_r+0x12>
 80082ea:	9901      	ldr	r1, [sp, #4]
 80082ec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082f0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082f4:	4259      	negs	r1, r3
 80082f6:	4159      	adcs	r1, r3
 80082f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082fc:	e7eb      	b.n	80082d6 <__swhatbuf_r+0x22>

080082fe <__smakebuf_r>:
 80082fe:	898b      	ldrh	r3, [r1, #12]
 8008300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008302:	079d      	lsls	r5, r3, #30
 8008304:	4606      	mov	r6, r0
 8008306:	460c      	mov	r4, r1
 8008308:	d507      	bpl.n	800831a <__smakebuf_r+0x1c>
 800830a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800830e:	6023      	str	r3, [r4, #0]
 8008310:	6123      	str	r3, [r4, #16]
 8008312:	2301      	movs	r3, #1
 8008314:	6163      	str	r3, [r4, #20]
 8008316:	b003      	add	sp, #12
 8008318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800831a:	466a      	mov	r2, sp
 800831c:	ab01      	add	r3, sp, #4
 800831e:	f7ff ffc9 	bl	80082b4 <__swhatbuf_r>
 8008322:	9f00      	ldr	r7, [sp, #0]
 8008324:	4605      	mov	r5, r0
 8008326:	4639      	mov	r1, r7
 8008328:	4630      	mov	r0, r6
 800832a:	f7fe fedb 	bl	80070e4 <_malloc_r>
 800832e:	b948      	cbnz	r0, 8008344 <__smakebuf_r+0x46>
 8008330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008334:	059a      	lsls	r2, r3, #22
 8008336:	d4ee      	bmi.n	8008316 <__smakebuf_r+0x18>
 8008338:	f023 0303 	bic.w	r3, r3, #3
 800833c:	f043 0302 	orr.w	r3, r3, #2
 8008340:	81a3      	strh	r3, [r4, #12]
 8008342:	e7e2      	b.n	800830a <__smakebuf_r+0xc>
 8008344:	89a3      	ldrh	r3, [r4, #12]
 8008346:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800834a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800834e:	81a3      	strh	r3, [r4, #12]
 8008350:	9b01      	ldr	r3, [sp, #4]
 8008352:	6020      	str	r0, [r4, #0]
 8008354:	b15b      	cbz	r3, 800836e <__smakebuf_r+0x70>
 8008356:	4630      	mov	r0, r6
 8008358:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800835c:	f000 f81e 	bl	800839c <_isatty_r>
 8008360:	b128      	cbz	r0, 800836e <__smakebuf_r+0x70>
 8008362:	89a3      	ldrh	r3, [r4, #12]
 8008364:	f023 0303 	bic.w	r3, r3, #3
 8008368:	f043 0301 	orr.w	r3, r3, #1
 800836c:	81a3      	strh	r3, [r4, #12]
 800836e:	89a3      	ldrh	r3, [r4, #12]
 8008370:	431d      	orrs	r5, r3
 8008372:	81a5      	strh	r5, [r4, #12]
 8008374:	e7cf      	b.n	8008316 <__smakebuf_r+0x18>
	...

08008378 <_fstat_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	2300      	movs	r3, #0
 800837c:	4d06      	ldr	r5, [pc, #24]	@ (8008398 <_fstat_r+0x20>)
 800837e:	4604      	mov	r4, r0
 8008380:	4608      	mov	r0, r1
 8008382:	4611      	mov	r1, r2
 8008384:	602b      	str	r3, [r5, #0]
 8008386:	f7fd f937 	bl	80055f8 <_fstat>
 800838a:	1c43      	adds	r3, r0, #1
 800838c:	d102      	bne.n	8008394 <_fstat_r+0x1c>
 800838e:	682b      	ldr	r3, [r5, #0]
 8008390:	b103      	cbz	r3, 8008394 <_fstat_r+0x1c>
 8008392:	6023      	str	r3, [r4, #0]
 8008394:	bd38      	pop	{r3, r4, r5, pc}
 8008396:	bf00      	nop
 8008398:	200007e0 	.word	0x200007e0

0800839c <_isatty_r>:
 800839c:	b538      	push	{r3, r4, r5, lr}
 800839e:	2300      	movs	r3, #0
 80083a0:	4d05      	ldr	r5, [pc, #20]	@ (80083b8 <_isatty_r+0x1c>)
 80083a2:	4604      	mov	r4, r0
 80083a4:	4608      	mov	r0, r1
 80083a6:	602b      	str	r3, [r5, #0]
 80083a8:	f7fd f935 	bl	8005616 <_isatty>
 80083ac:	1c43      	adds	r3, r0, #1
 80083ae:	d102      	bne.n	80083b6 <_isatty_r+0x1a>
 80083b0:	682b      	ldr	r3, [r5, #0]
 80083b2:	b103      	cbz	r3, 80083b6 <_isatty_r+0x1a>
 80083b4:	6023      	str	r3, [r4, #0]
 80083b6:	bd38      	pop	{r3, r4, r5, pc}
 80083b8:	200007e0 	.word	0x200007e0

080083bc <sqrt>:
 80083bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083be:	4606      	mov	r6, r0
 80083c0:	460f      	mov	r7, r1
 80083c2:	f000 f81f 	bl	8008404 <__ieee754_sqrt>
 80083c6:	4632      	mov	r2, r6
 80083c8:	4604      	mov	r4, r0
 80083ca:	460d      	mov	r5, r1
 80083cc:	463b      	mov	r3, r7
 80083ce:	4630      	mov	r0, r6
 80083d0:	4639      	mov	r1, r7
 80083d2:	f7f8 fb1b 	bl	8000a0c <__aeabi_dcmpun>
 80083d6:	b990      	cbnz	r0, 80083fe <sqrt+0x42>
 80083d8:	2200      	movs	r2, #0
 80083da:	2300      	movs	r3, #0
 80083dc:	4630      	mov	r0, r6
 80083de:	4639      	mov	r1, r7
 80083e0:	f7f8 faec 	bl	80009bc <__aeabi_dcmplt>
 80083e4:	b158      	cbz	r0, 80083fe <sqrt+0x42>
 80083e6:	f7fd ff63 	bl	80062b0 <__errno>
 80083ea:	2321      	movs	r3, #33	@ 0x21
 80083ec:	2200      	movs	r2, #0
 80083ee:	6003      	str	r3, [r0, #0]
 80083f0:	2300      	movs	r3, #0
 80083f2:	4610      	mov	r0, r2
 80083f4:	4619      	mov	r1, r3
 80083f6:	f7f8 f999 	bl	800072c <__aeabi_ddiv>
 80083fa:	4604      	mov	r4, r0
 80083fc:	460d      	mov	r5, r1
 80083fe:	4620      	mov	r0, r4
 8008400:	4629      	mov	r1, r5
 8008402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008404 <__ieee754_sqrt>:
 8008404:	4a65      	ldr	r2, [pc, #404]	@ (800859c <__ieee754_sqrt+0x198>)
 8008406:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840a:	438a      	bics	r2, r1
 800840c:	4606      	mov	r6, r0
 800840e:	460f      	mov	r7, r1
 8008410:	460b      	mov	r3, r1
 8008412:	4604      	mov	r4, r0
 8008414:	d10e      	bne.n	8008434 <__ieee754_sqrt+0x30>
 8008416:	4602      	mov	r2, r0
 8008418:	f7f8 f85e 	bl	80004d8 <__aeabi_dmul>
 800841c:	4602      	mov	r2, r0
 800841e:	460b      	mov	r3, r1
 8008420:	4630      	mov	r0, r6
 8008422:	4639      	mov	r1, r7
 8008424:	f7f7 fea2 	bl	800016c <__adddf3>
 8008428:	4606      	mov	r6, r0
 800842a:	460f      	mov	r7, r1
 800842c:	4630      	mov	r0, r6
 800842e:	4639      	mov	r1, r7
 8008430:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008434:	2900      	cmp	r1, #0
 8008436:	dc0c      	bgt.n	8008452 <__ieee754_sqrt+0x4e>
 8008438:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800843c:	4302      	orrs	r2, r0
 800843e:	d0f5      	beq.n	800842c <__ieee754_sqrt+0x28>
 8008440:	b189      	cbz	r1, 8008466 <__ieee754_sqrt+0x62>
 8008442:	4602      	mov	r2, r0
 8008444:	f7f7 fe90 	bl	8000168 <__aeabi_dsub>
 8008448:	4602      	mov	r2, r0
 800844a:	460b      	mov	r3, r1
 800844c:	f7f8 f96e 	bl	800072c <__aeabi_ddiv>
 8008450:	e7ea      	b.n	8008428 <__ieee754_sqrt+0x24>
 8008452:	150a      	asrs	r2, r1, #20
 8008454:	d115      	bne.n	8008482 <__ieee754_sqrt+0x7e>
 8008456:	2100      	movs	r1, #0
 8008458:	e009      	b.n	800846e <__ieee754_sqrt+0x6a>
 800845a:	0ae3      	lsrs	r3, r4, #11
 800845c:	3a15      	subs	r2, #21
 800845e:	0564      	lsls	r4, r4, #21
 8008460:	2b00      	cmp	r3, #0
 8008462:	d0fa      	beq.n	800845a <__ieee754_sqrt+0x56>
 8008464:	e7f7      	b.n	8008456 <__ieee754_sqrt+0x52>
 8008466:	460a      	mov	r2, r1
 8008468:	e7fa      	b.n	8008460 <__ieee754_sqrt+0x5c>
 800846a:	005b      	lsls	r3, r3, #1
 800846c:	3101      	adds	r1, #1
 800846e:	02d8      	lsls	r0, r3, #11
 8008470:	d5fb      	bpl.n	800846a <__ieee754_sqrt+0x66>
 8008472:	1e48      	subs	r0, r1, #1
 8008474:	1a12      	subs	r2, r2, r0
 8008476:	f1c1 0020 	rsb	r0, r1, #32
 800847a:	fa24 f000 	lsr.w	r0, r4, r0
 800847e:	4303      	orrs	r3, r0
 8008480:	408c      	lsls	r4, r1
 8008482:	2700      	movs	r7, #0
 8008484:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8008488:	2116      	movs	r1, #22
 800848a:	07d2      	lsls	r2, r2, #31
 800848c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008490:	463a      	mov	r2, r7
 8008492:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008496:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800849a:	bf5c      	itt	pl
 800849c:	005b      	lslpl	r3, r3, #1
 800849e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80084a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80084a6:	bf58      	it	pl
 80084a8:	0064      	lslpl	r4, r4, #1
 80084aa:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80084ae:	ea4f 0868 	mov.w	r8, r8, asr #1
 80084b2:	0064      	lsls	r4, r4, #1
 80084b4:	1815      	adds	r5, r2, r0
 80084b6:	429d      	cmp	r5, r3
 80084b8:	bfde      	ittt	le
 80084ba:	182a      	addle	r2, r5, r0
 80084bc:	1b5b      	suble	r3, r3, r5
 80084be:	183f      	addle	r7, r7, r0
 80084c0:	0fe5      	lsrs	r5, r4, #31
 80084c2:	3901      	subs	r1, #1
 80084c4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80084c8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80084cc:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80084d0:	d1f0      	bne.n	80084b4 <__ieee754_sqrt+0xb0>
 80084d2:	460d      	mov	r5, r1
 80084d4:	2620      	movs	r6, #32
 80084d6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80084da:	4293      	cmp	r3, r2
 80084dc:	eb00 0c01 	add.w	ip, r0, r1
 80084e0:	dc02      	bgt.n	80084e8 <__ieee754_sqrt+0xe4>
 80084e2:	d113      	bne.n	800850c <__ieee754_sqrt+0x108>
 80084e4:	45a4      	cmp	ip, r4
 80084e6:	d811      	bhi.n	800850c <__ieee754_sqrt+0x108>
 80084e8:	f1bc 0f00 	cmp.w	ip, #0
 80084ec:	eb0c 0100 	add.w	r1, ip, r0
 80084f0:	da3e      	bge.n	8008570 <__ieee754_sqrt+0x16c>
 80084f2:	2900      	cmp	r1, #0
 80084f4:	db3c      	blt.n	8008570 <__ieee754_sqrt+0x16c>
 80084f6:	f102 0e01 	add.w	lr, r2, #1
 80084fa:	1a9b      	subs	r3, r3, r2
 80084fc:	4672      	mov	r2, lr
 80084fe:	45a4      	cmp	ip, r4
 8008500:	bf88      	it	hi
 8008502:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008506:	eba4 040c 	sub.w	r4, r4, ip
 800850a:	4405      	add	r5, r0
 800850c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8008510:	3e01      	subs	r6, #1
 8008512:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8008516:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800851a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800851e:	d1dc      	bne.n	80084da <__ieee754_sqrt+0xd6>
 8008520:	431c      	orrs	r4, r3
 8008522:	d01a      	beq.n	800855a <__ieee754_sqrt+0x156>
 8008524:	4c1e      	ldr	r4, [pc, #120]	@ (80085a0 <__ieee754_sqrt+0x19c>)
 8008526:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 80085a4 <__ieee754_sqrt+0x1a0>
 800852a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800852e:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008532:	f7f7 fe19 	bl	8000168 <__aeabi_dsub>
 8008536:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	4650      	mov	r0, sl
 8008540:	4659      	mov	r1, fp
 8008542:	f7f8 fa45 	bl	80009d0 <__aeabi_dcmple>
 8008546:	b140      	cbz	r0, 800855a <__ieee754_sqrt+0x156>
 8008548:	e9d4 0100 	ldrd	r0, r1, [r4]
 800854c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008550:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008554:	d10e      	bne.n	8008574 <__ieee754_sqrt+0x170>
 8008556:	4635      	mov	r5, r6
 8008558:	3701      	adds	r7, #1
 800855a:	107b      	asrs	r3, r7, #1
 800855c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8008560:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8008564:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8008568:	086b      	lsrs	r3, r5, #1
 800856a:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800856e:	e75b      	b.n	8008428 <__ieee754_sqrt+0x24>
 8008570:	4696      	mov	lr, r2
 8008572:	e7c2      	b.n	80084fa <__ieee754_sqrt+0xf6>
 8008574:	f7f7 fdfa 	bl	800016c <__adddf3>
 8008578:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800857c:	4602      	mov	r2, r0
 800857e:	460b      	mov	r3, r1
 8008580:	4650      	mov	r0, sl
 8008582:	4659      	mov	r1, fp
 8008584:	f7f8 fa1a 	bl	80009bc <__aeabi_dcmplt>
 8008588:	b120      	cbz	r0, 8008594 <__ieee754_sqrt+0x190>
 800858a:	1cab      	adds	r3, r5, #2
 800858c:	bf08      	it	eq
 800858e:	3701      	addeq	r7, #1
 8008590:	3502      	adds	r5, #2
 8008592:	e7e2      	b.n	800855a <__ieee754_sqrt+0x156>
 8008594:	1c6b      	adds	r3, r5, #1
 8008596:	f023 0501 	bic.w	r5, r3, #1
 800859a:	e7de      	b.n	800855a <__ieee754_sqrt+0x156>
 800859c:	7ff00000 	.word	0x7ff00000
 80085a0:	08009c78 	.word	0x08009c78
 80085a4:	08009c70 	.word	0x08009c70

080085a8 <_init>:
 80085a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085aa:	bf00      	nop
 80085ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ae:	bc08      	pop	{r3}
 80085b0:	469e      	mov	lr, r3
 80085b2:	4770      	bx	lr

080085b4 <_fini>:
 80085b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b6:	bf00      	nop
 80085b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ba:	bc08      	pop	{r3}
 80085bc:	469e      	mov	lr, r3
 80085be:	4770      	bx	lr
