
accDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fe4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016ac  080080f8  080080f8  000090f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097a4  080097a4  0000b1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080097a4  080097a4  0000a7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097ac  080097ac  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097ac  080097ac  0000a7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080097b0  080097b0  0000a7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  080097b4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  200001dc  08009990  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007f4  08009990  0000b7f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2f8  00000000  00000000  0000b205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002133  00000000  00000000  000174fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  00019630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008dd  00000000  00000000  0001a1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187e8  00000000  00000000  0001aa7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb1f  00000000  00000000  00033265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086de0  00000000  00000000  00041d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8b64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004074  00000000  00000000  000c8ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000ccc1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080080dc 	.word	0x080080dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080080dc 	.word	0x080080dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <HAL_Init+0x28>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	@ (8000f6c <HAL_Init+0x28>)
 8000f4e:	f043 0310 	orr.w	r3, r3, #16
 8000f52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 f947 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	200f      	movs	r0, #15
 8000f5c:	f000 f808 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f004 f87c 	bl	800505c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40022000 	.word	0x40022000

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <HAL_InitTick+0x54>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <HAL_InitTick+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f95f 	bl	8001252 <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 f927 	bl	80011fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	@ (8000fcc <HAL_InitTick+0x5c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000010 	.word	0x20000010
 8000fc8:	20000004 	.word	0x20000004
 8000fcc:	20000000 	.word	0x20000000

08000fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <HAL_IncTick+0x1c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <HAL_IncTick+0x20>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a03      	ldr	r2, [pc, #12]	@ (8000ff0 <HAL_IncTick+0x20>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	20000004 	.word	0x20000004
 8000ff0:	200001f8 	.word	0x200001f8

08000ff4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b02      	ldr	r3, [pc, #8]	@ (8001004 <HAL_GetTick+0x10>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	200001f8 	.word	0x200001f8

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff fff0 	bl	8000ff4 <HAL_GetTick>
 8001014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001020:	d005      	beq.n	800102e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001022:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <HAL_Delay+0x44>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102e:	bf00      	nop
 8001030:	f7ff ffe0 	bl	8000ff4 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f7      	bhi.n	8001030 <HAL_Delay+0x28>
  {
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000004 	.word	0x20000004

08001050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	@ (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db0b      	blt.n	80010de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 021f 	and.w	r2, r3, #31
 80010cc:	4906      	ldr	r1, [pc, #24]	@ (80010e8 <__NVIC_EnableIRQ+0x34>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	2001      	movs	r0, #1
 80010d6:	fa00 f202 	lsl.w	r2, r0, r2
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	@ (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	@ (800113c <__NVIC_SetPriority+0x50>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	@ 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
         );
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	@ 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011b4:	d301      	bcc.n	80011ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00f      	b.n	80011da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <SysTick_Config+0x40>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c2:	210f      	movs	r1, #15
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f7ff ff90 	bl	80010ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <SysTick_Config+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <SysTick_Config+0x40>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff2d 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff42 	bl	8001098 <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff90 	bl	8001140 <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5f 	bl	80010ec <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff35 	bl	80010b4 <__NVIC_EnableIRQ>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffa2 	bl	80011a4 <SysTick_Config>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800126a:	b480      	push	{r7}
 800126c:	b085      	sub	sp, #20
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d008      	beq.n	8001294 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2204      	movs	r2, #4
 8001286:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e020      	b.n	80012d6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 020e 	bic.w	r2, r2, #14
 80012a2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0201 	bic.w	r2, r2, #1
 80012b2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012bc:	2101      	movs	r1, #1
 80012be:	fa01 f202 	lsl.w	r2, r1, r2
 80012c2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d005      	beq.n	8001304 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2204      	movs	r2, #4
 80012fc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	73fb      	strb	r3, [r7, #15]
 8001302:	e051      	b.n	80013a8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 020e 	bic.w	r2, r2, #14
 8001312:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0201 	bic.w	r2, r2, #1
 8001322:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a22      	ldr	r2, [pc, #136]	@ (80013b4 <HAL_DMA_Abort_IT+0xd4>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d029      	beq.n	8001382 <HAL_DMA_Abort_IT+0xa2>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a21      	ldr	r2, [pc, #132]	@ (80013b8 <HAL_DMA_Abort_IT+0xd8>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d022      	beq.n	800137e <HAL_DMA_Abort_IT+0x9e>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a1f      	ldr	r2, [pc, #124]	@ (80013bc <HAL_DMA_Abort_IT+0xdc>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d01a      	beq.n	8001378 <HAL_DMA_Abort_IT+0x98>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a1e      	ldr	r2, [pc, #120]	@ (80013c0 <HAL_DMA_Abort_IT+0xe0>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d012      	beq.n	8001372 <HAL_DMA_Abort_IT+0x92>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a1c      	ldr	r2, [pc, #112]	@ (80013c4 <HAL_DMA_Abort_IT+0xe4>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d00a      	beq.n	800136c <HAL_DMA_Abort_IT+0x8c>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a1b      	ldr	r2, [pc, #108]	@ (80013c8 <HAL_DMA_Abort_IT+0xe8>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d102      	bne.n	8001366 <HAL_DMA_Abort_IT+0x86>
 8001360:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001364:	e00e      	b.n	8001384 <HAL_DMA_Abort_IT+0xa4>
 8001366:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800136a:	e00b      	b.n	8001384 <HAL_DMA_Abort_IT+0xa4>
 800136c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001370:	e008      	b.n	8001384 <HAL_DMA_Abort_IT+0xa4>
 8001372:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001376:	e005      	b.n	8001384 <HAL_DMA_Abort_IT+0xa4>
 8001378:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800137c:	e002      	b.n	8001384 <HAL_DMA_Abort_IT+0xa4>
 800137e:	2310      	movs	r3, #16
 8001380:	e000      	b.n	8001384 <HAL_DMA_Abort_IT+0xa4>
 8001382:	2301      	movs	r3, #1
 8001384:	4a11      	ldr	r2, [pc, #68]	@ (80013cc <HAL_DMA_Abort_IT+0xec>)
 8001386:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	4798      	blx	r3
    } 
  }
  return status;
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40020008 	.word	0x40020008
 80013b8:	4002001c 	.word	0x4002001c
 80013bc:	40020030 	.word	0x40020030
 80013c0:	40020044 	.word	0x40020044
 80013c4:	40020058 	.word	0x40020058
 80013c8:	4002006c 	.word	0x4002006c
 80013cc:	40020000 	.word	0x40020000

080013d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b08b      	sub	sp, #44	@ 0x2c
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e2:	e169      	b.n	80016b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013e4:	2201      	movs	r2, #1
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	69fa      	ldr	r2, [r7, #28]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	f040 8158 	bne.w	80016b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4a9a      	ldr	r2, [pc, #616]	@ (8001670 <HAL_GPIO_Init+0x2a0>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d05e      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 800140c:	4a98      	ldr	r2, [pc, #608]	@ (8001670 <HAL_GPIO_Init+0x2a0>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d875      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 8001412:	4a98      	ldr	r2, [pc, #608]	@ (8001674 <HAL_GPIO_Init+0x2a4>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d058      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 8001418:	4a96      	ldr	r2, [pc, #600]	@ (8001674 <HAL_GPIO_Init+0x2a4>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d86f      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 800141e:	4a96      	ldr	r2, [pc, #600]	@ (8001678 <HAL_GPIO_Init+0x2a8>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d052      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 8001424:	4a94      	ldr	r2, [pc, #592]	@ (8001678 <HAL_GPIO_Init+0x2a8>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d869      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 800142a:	4a94      	ldr	r2, [pc, #592]	@ (800167c <HAL_GPIO_Init+0x2ac>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d04c      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 8001430:	4a92      	ldr	r2, [pc, #584]	@ (800167c <HAL_GPIO_Init+0x2ac>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d863      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 8001436:	4a92      	ldr	r2, [pc, #584]	@ (8001680 <HAL_GPIO_Init+0x2b0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d046      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 800143c:	4a90      	ldr	r2, [pc, #576]	@ (8001680 <HAL_GPIO_Init+0x2b0>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d85d      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 8001442:	2b12      	cmp	r3, #18
 8001444:	d82a      	bhi.n	800149c <HAL_GPIO_Init+0xcc>
 8001446:	2b12      	cmp	r3, #18
 8001448:	d859      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 800144a:	a201      	add	r2, pc, #4	@ (adr r2, 8001450 <HAL_GPIO_Init+0x80>)
 800144c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001450:	080014cb 	.word	0x080014cb
 8001454:	080014a5 	.word	0x080014a5
 8001458:	080014b7 	.word	0x080014b7
 800145c:	080014f9 	.word	0x080014f9
 8001460:	080014ff 	.word	0x080014ff
 8001464:	080014ff 	.word	0x080014ff
 8001468:	080014ff 	.word	0x080014ff
 800146c:	080014ff 	.word	0x080014ff
 8001470:	080014ff 	.word	0x080014ff
 8001474:	080014ff 	.word	0x080014ff
 8001478:	080014ff 	.word	0x080014ff
 800147c:	080014ff 	.word	0x080014ff
 8001480:	080014ff 	.word	0x080014ff
 8001484:	080014ff 	.word	0x080014ff
 8001488:	080014ff 	.word	0x080014ff
 800148c:	080014ff 	.word	0x080014ff
 8001490:	080014ff 	.word	0x080014ff
 8001494:	080014ad 	.word	0x080014ad
 8001498:	080014c1 	.word	0x080014c1
 800149c:	4a79      	ldr	r2, [pc, #484]	@ (8001684 <HAL_GPIO_Init+0x2b4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d013      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014a2:	e02c      	b.n	80014fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	623b      	str	r3, [r7, #32]
          break;
 80014aa:	e029      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	3304      	adds	r3, #4
 80014b2:	623b      	str	r3, [r7, #32]
          break;
 80014b4:	e024      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	3308      	adds	r3, #8
 80014bc:	623b      	str	r3, [r7, #32]
          break;
 80014be:	e01f      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	330c      	adds	r3, #12
 80014c6:	623b      	str	r3, [r7, #32]
          break;
 80014c8:	e01a      	b.n	8001500 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d102      	bne.n	80014d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014d2:	2304      	movs	r3, #4
 80014d4:	623b      	str	r3, [r7, #32]
          break;
 80014d6:	e013      	b.n	8001500 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d105      	bne.n	80014ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014e0:	2308      	movs	r3, #8
 80014e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69fa      	ldr	r2, [r7, #28]
 80014e8:	611a      	str	r2, [r3, #16]
          break;
 80014ea:	e009      	b.n	8001500 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014ec:	2308      	movs	r3, #8
 80014ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	615a      	str	r2, [r3, #20]
          break;
 80014f6:	e003      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
          break;
 80014fc:	e000      	b.n	8001500 <HAL_GPIO_Init+0x130>
          break;
 80014fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2bff      	cmp	r3, #255	@ 0xff
 8001504:	d801      	bhi.n	800150a <HAL_GPIO_Init+0x13a>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	e001      	b.n	800150e <HAL_GPIO_Init+0x13e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3304      	adds	r3, #4
 800150e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	2bff      	cmp	r3, #255	@ 0xff
 8001514:	d802      	bhi.n	800151c <HAL_GPIO_Init+0x14c>
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	e002      	b.n	8001522 <HAL_GPIO_Init+0x152>
 800151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151e:	3b08      	subs	r3, #8
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	210f      	movs	r1, #15
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	fa01 f303 	lsl.w	r3, r1, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	401a      	ands	r2, r3
 8001534:	6a39      	ldr	r1, [r7, #32]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	fa01 f303 	lsl.w	r3, r1, r3
 800153c:	431a      	orrs	r2, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 80b1 	beq.w	80016b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001550:	4b4d      	ldr	r3, [pc, #308]	@ (8001688 <HAL_GPIO_Init+0x2b8>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a4c      	ldr	r2, [pc, #304]	@ (8001688 <HAL_GPIO_Init+0x2b8>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b4a      	ldr	r3, [pc, #296]	@ (8001688 <HAL_GPIO_Init+0x2b8>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001568:	4a48      	ldr	r2, [pc, #288]	@ (800168c <HAL_GPIO_Init+0x2bc>)
 800156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156c:	089b      	lsrs	r3, r3, #2
 800156e:	3302      	adds	r3, #2
 8001570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001574:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	220f      	movs	r2, #15
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	4013      	ands	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a40      	ldr	r2, [pc, #256]	@ (8001690 <HAL_GPIO_Init+0x2c0>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d013      	beq.n	80015bc <HAL_GPIO_Init+0x1ec>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a3f      	ldr	r2, [pc, #252]	@ (8001694 <HAL_GPIO_Init+0x2c4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d00d      	beq.n	80015b8 <HAL_GPIO_Init+0x1e8>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a3e      	ldr	r2, [pc, #248]	@ (8001698 <HAL_GPIO_Init+0x2c8>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d007      	beq.n	80015b4 <HAL_GPIO_Init+0x1e4>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a3d      	ldr	r2, [pc, #244]	@ (800169c <HAL_GPIO_Init+0x2cc>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d101      	bne.n	80015b0 <HAL_GPIO_Init+0x1e0>
 80015ac:	2303      	movs	r3, #3
 80015ae:	e006      	b.n	80015be <HAL_GPIO_Init+0x1ee>
 80015b0:	2304      	movs	r3, #4
 80015b2:	e004      	b.n	80015be <HAL_GPIO_Init+0x1ee>
 80015b4:	2302      	movs	r3, #2
 80015b6:	e002      	b.n	80015be <HAL_GPIO_Init+0x1ee>
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <HAL_GPIO_Init+0x1ee>
 80015bc:	2300      	movs	r3, #0
 80015be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015c0:	f002 0203 	and.w	r2, r2, #3
 80015c4:	0092      	lsls	r2, r2, #2
 80015c6:	4093      	lsls	r3, r2
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015ce:	492f      	ldr	r1, [pc, #188]	@ (800168c <HAL_GPIO_Init+0x2bc>)
 80015d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d2:	089b      	lsrs	r3, r3, #2
 80015d4:	3302      	adds	r3, #2
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d006      	beq.n	80015f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015e8:	4b2d      	ldr	r3, [pc, #180]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	492c      	ldr	r1, [pc, #176]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	608b      	str	r3, [r1, #8]
 80015f4:	e006      	b.n	8001604 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015f6:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	4928      	ldr	r1, [pc, #160]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001600:	4013      	ands	r3, r2
 8001602:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001610:	4b23      	ldr	r3, [pc, #140]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	4922      	ldr	r1, [pc, #136]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	60cb      	str	r3, [r1, #12]
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800161e:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	43db      	mvns	r3, r3
 8001626:	491e      	ldr	r1, [pc, #120]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001628:	4013      	ands	r3, r2
 800162a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d006      	beq.n	8001646 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001638:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	4918      	ldr	r1, [pc, #96]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
 8001644:	e006      	b.n	8001654 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001646:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	43db      	mvns	r3, r3
 800164e:	4914      	ldr	r1, [pc, #80]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001650:	4013      	ands	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d021      	beq.n	80016a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	490e      	ldr	r1, [pc, #56]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	600b      	str	r3, [r1, #0]
 800166c:	e021      	b.n	80016b2 <HAL_GPIO_Init+0x2e2>
 800166e:	bf00      	nop
 8001670:	10320000 	.word	0x10320000
 8001674:	10310000 	.word	0x10310000
 8001678:	10220000 	.word	0x10220000
 800167c:	10210000 	.word	0x10210000
 8001680:	10120000 	.word	0x10120000
 8001684:	10110000 	.word	0x10110000
 8001688:	40021000 	.word	0x40021000
 800168c:	40010000 	.word	0x40010000
 8001690:	40010800 	.word	0x40010800
 8001694:	40010c00 	.word	0x40010c00
 8001698:	40011000 	.word	0x40011000
 800169c:	40011400 	.word	0x40011400
 80016a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016a4:	4b0b      	ldr	r3, [pc, #44]	@ (80016d4 <HAL_GPIO_Init+0x304>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	4909      	ldr	r1, [pc, #36]	@ (80016d4 <HAL_GPIO_Init+0x304>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	3301      	adds	r3, #1
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016be:	fa22 f303 	lsr.w	r3, r2, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f47f ae8e 	bne.w	80013e4 <HAL_GPIO_Init+0x14>
  }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	372c      	adds	r7, #44	@ 0x2c
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	40010400 	.word	0x40010400

080016d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e12b      	b.n	8001942 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d106      	bne.n	8001704 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f003 fcde 	bl	80050c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2224      	movs	r2, #36	@ 0x24
 8001708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0201 	bic.w	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800172a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800173a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800173c:	f001 feaa 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
 8001740:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	4a81      	ldr	r2, [pc, #516]	@ (800194c <HAL_I2C_Init+0x274>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d807      	bhi.n	800175c <HAL_I2C_Init+0x84>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4a80      	ldr	r2, [pc, #512]	@ (8001950 <HAL_I2C_Init+0x278>)
 8001750:	4293      	cmp	r3, r2
 8001752:	bf94      	ite	ls
 8001754:	2301      	movls	r3, #1
 8001756:	2300      	movhi	r3, #0
 8001758:	b2db      	uxtb	r3, r3
 800175a:	e006      	b.n	800176a <HAL_I2C_Init+0x92>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4a7d      	ldr	r2, [pc, #500]	@ (8001954 <HAL_I2C_Init+0x27c>)
 8001760:	4293      	cmp	r3, r2
 8001762:	bf94      	ite	ls
 8001764:	2301      	movls	r3, #1
 8001766:	2300      	movhi	r3, #0
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e0e7      	b.n	8001942 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4a78      	ldr	r2, [pc, #480]	@ (8001958 <HAL_I2C_Init+0x280>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	0c9b      	lsrs	r3, r3, #18
 800177c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	430a      	orrs	r2, r1
 8001790:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	4a6a      	ldr	r2, [pc, #424]	@ (800194c <HAL_I2C_Init+0x274>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d802      	bhi.n	80017ac <HAL_I2C_Init+0xd4>
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	3301      	adds	r3, #1
 80017aa:	e009      	b.n	80017c0 <HAL_I2C_Init+0xe8>
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80017b2:	fb02 f303 	mul.w	r3, r2, r3
 80017b6:	4a69      	ldr	r2, [pc, #420]	@ (800195c <HAL_I2C_Init+0x284>)
 80017b8:	fba2 2303 	umull	r2, r3, r2, r3
 80017bc:	099b      	lsrs	r3, r3, #6
 80017be:	3301      	adds	r3, #1
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	430b      	orrs	r3, r1
 80017c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80017d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	495c      	ldr	r1, [pc, #368]	@ (800194c <HAL_I2C_Init+0x274>)
 80017dc:	428b      	cmp	r3, r1
 80017de:	d819      	bhi.n	8001814 <HAL_I2C_Init+0x13c>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1e59      	subs	r1, r3, #1
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ee:	1c59      	adds	r1, r3, #1
 80017f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80017f4:	400b      	ands	r3, r1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00a      	beq.n	8001810 <HAL_I2C_Init+0x138>
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	1e59      	subs	r1, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fbb1 f3f3 	udiv	r3, r1, r3
 8001808:	3301      	adds	r3, #1
 800180a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800180e:	e051      	b.n	80018b4 <HAL_I2C_Init+0x1dc>
 8001810:	2304      	movs	r3, #4
 8001812:	e04f      	b.n	80018b4 <HAL_I2C_Init+0x1dc>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d111      	bne.n	8001840 <HAL_I2C_Init+0x168>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	1e58      	subs	r0, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6859      	ldr	r1, [r3, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	440b      	add	r3, r1
 800182a:	fbb0 f3f3 	udiv	r3, r0, r3
 800182e:	3301      	adds	r3, #1
 8001830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001834:	2b00      	cmp	r3, #0
 8001836:	bf0c      	ite	eq
 8001838:	2301      	moveq	r3, #1
 800183a:	2300      	movne	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	e012      	b.n	8001866 <HAL_I2C_Init+0x18e>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	1e58      	subs	r0, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6859      	ldr	r1, [r3, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	0099      	lsls	r1, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	fbb0 f3f3 	udiv	r3, r0, r3
 8001856:	3301      	adds	r3, #1
 8001858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800185c:	2b00      	cmp	r3, #0
 800185e:	bf0c      	ite	eq
 8001860:	2301      	moveq	r3, #1
 8001862:	2300      	movne	r3, #0
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_I2C_Init+0x196>
 800186a:	2301      	movs	r3, #1
 800186c:	e022      	b.n	80018b4 <HAL_I2C_Init+0x1dc>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10e      	bne.n	8001894 <HAL_I2C_Init+0x1bc>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1e58      	subs	r0, r3, #1
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6859      	ldr	r1, [r3, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	440b      	add	r3, r1
 8001884:	fbb0 f3f3 	udiv	r3, r0, r3
 8001888:	3301      	adds	r3, #1
 800188a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800188e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001892:	e00f      	b.n	80018b4 <HAL_I2C_Init+0x1dc>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	1e58      	subs	r0, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6859      	ldr	r1, [r3, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	0099      	lsls	r1, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018aa:	3301      	adds	r3, #1
 80018ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	6809      	ldr	r1, [r1, #0]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69da      	ldr	r2, [r3, #28]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80018e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6911      	ldr	r1, [r2, #16]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	68d2      	ldr	r2, [r2, #12]
 80018ee:	4311      	orrs	r1, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	430b      	orrs	r3, r1
 80018f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695a      	ldr	r2, [r3, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0201 	orr.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2220      	movs	r2, #32
 800192e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	000186a0 	.word	0x000186a0
 8001950:	001e847f 	.word	0x001e847f
 8001954:	003d08ff 	.word	0x003d08ff
 8001958:	431bde83 	.word	0x431bde83
 800195c:	10624dd3 	.word	0x10624dd3

08001960 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af02      	add	r7, sp, #8
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	461a      	mov	r2, r3
 800196c:	460b      	mov	r3, r1
 800196e:	817b      	strh	r3, [r7, #10]
 8001970:	4613      	mov	r3, r2
 8001972:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff fb3e 	bl	8000ff4 <HAL_GetTick>
 8001978:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b20      	cmp	r3, #32
 8001984:	f040 80e0 	bne.w	8001b48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2319      	movs	r3, #25
 800198e:	2201      	movs	r2, #1
 8001990:	4970      	ldr	r1, [pc, #448]	@ (8001b54 <HAL_I2C_Master_Transmit+0x1f4>)
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 ff7e 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800199e:	2302      	movs	r3, #2
 80019a0:	e0d3      	b.n	8001b4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d101      	bne.n	80019b0 <HAL_I2C_Master_Transmit+0x50>
 80019ac:	2302      	movs	r3, #2
 80019ae:	e0cc      	b.n	8001b4a <HAL_I2C_Master_Transmit+0x1ea>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d007      	beq.n	80019d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0201 	orr.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2221      	movs	r2, #33	@ 0x21
 80019ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2210      	movs	r2, #16
 80019f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	893a      	ldrh	r2, [r7, #8]
 8001a06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4a50      	ldr	r2, [pc, #320]	@ (8001b58 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a18:	8979      	ldrh	r1, [r7, #10]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	6a3a      	ldr	r2, [r7, #32]
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f000 fd38 	bl	8002494 <I2C_MasterRequestWrite>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e08d      	b.n	8001b4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a44:	e066      	b.n	8001b14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	6a39      	ldr	r1, [r7, #32]
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f001 f83c 	bl	8002ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00d      	beq.n	8001a72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d107      	bne.n	8001a6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e06b      	b.n	8001b4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a76:	781a      	ldrb	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d11b      	bne.n	8001ae8 <HAL_I2C_Master_Transmit+0x188>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d017      	beq.n	8001ae8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abc:	781a      	ldrb	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	6a39      	ldr	r1, [r7, #32]
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f001 f833 	bl	8002b58 <I2C_WaitOnBTFFlagUntilTimeout>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00d      	beq.n	8001b14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d107      	bne.n	8001b10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e01a      	b.n	8001b4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d194      	bne.n	8001a46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e000      	b.n	8001b4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b48:	2302      	movs	r3, #2
  }
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	00100002 	.word	0x00100002
 8001b58:	ffff0000 	.word	0xffff0000

08001b5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af02      	add	r7, sp, #8
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	4608      	mov	r0, r1
 8001b66:	4611      	mov	r1, r2
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	817b      	strh	r3, [r7, #10]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	813b      	strh	r3, [r7, #8]
 8001b72:	4613      	mov	r3, r2
 8001b74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b76:	f7ff fa3d 	bl	8000ff4 <HAL_GetTick>
 8001b7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b20      	cmp	r3, #32
 8001b86:	f040 80d9 	bne.w	8001d3c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2319      	movs	r3, #25
 8001b90:	2201      	movs	r2, #1
 8001b92:	496d      	ldr	r1, [pc, #436]	@ (8001d48 <HAL_I2C_Mem_Write+0x1ec>)
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 fe7d 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e0cc      	b.n	8001d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_I2C_Mem_Write+0x56>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e0c5      	b.n	8001d3e <HAL_I2C_Mem_Write+0x1e2>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d007      	beq.n	8001bd8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001be6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2221      	movs	r2, #33	@ 0x21
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2240      	movs	r2, #64	@ 0x40
 8001bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a3a      	ldr	r2, [r7, #32]
 8001c02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4a4d      	ldr	r2, [pc, #308]	@ (8001d4c <HAL_I2C_Mem_Write+0x1f0>)
 8001c18:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c1a:	88f8      	ldrh	r0, [r7, #6]
 8001c1c:	893a      	ldrh	r2, [r7, #8]
 8001c1e:	8979      	ldrh	r1, [r7, #10]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	4603      	mov	r3, r0
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 fcb4 	bl	8002598 <I2C_RequestMemoryWrite>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d052      	beq.n	8001cdc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e081      	b.n	8001d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 ff42 	bl	8002ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00d      	beq.n	8001c66 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d107      	bne.n	8001c62 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e06b      	b.n	8001d3e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6a:	781a      	ldrb	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d11b      	bne.n	8001cdc <HAL_I2C_Mem_Write+0x180>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d017      	beq.n	8001cdc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb0:	781a      	ldrb	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1aa      	bne.n	8001c3a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 ff35 	bl	8002b58 <I2C_WaitOnBTFFlagUntilTimeout>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00d      	beq.n	8001d10 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d107      	bne.n	8001d0c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e016      	b.n	8001d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2220      	movs	r2, #32
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	e000      	b.n	8001d3e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001d3c:	2302      	movs	r3, #2
  }
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	00100002 	.word	0x00100002
 8001d4c:	ffff0000 	.word	0xffff0000

08001d50 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08c      	sub	sp, #48	@ 0x30
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	4608      	mov	r0, r1
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4603      	mov	r3, r0
 8001d60:	817b      	strh	r3, [r7, #10]
 8001d62:	460b      	mov	r3, r1
 8001d64:	813b      	strh	r3, [r7, #8]
 8001d66:	4613      	mov	r3, r2
 8001d68:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d6e:	f7ff f941 	bl	8000ff4 <HAL_GetTick>
 8001d72:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b20      	cmp	r3, #32
 8001d7e:	f040 8250 	bne.w	8002222 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	2319      	movs	r3, #25
 8001d88:	2201      	movs	r2, #1
 8001d8a:	4982      	ldr	r1, [pc, #520]	@ (8001f94 <HAL_I2C_Mem_Read+0x244>)
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 fd81 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e243      	b.n	8002224 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_I2C_Mem_Read+0x5a>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e23c      	b.n	8002224 <HAL_I2C_Mem_Read+0x4d4>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d007      	beq.n	8001dd0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2222      	movs	r2, #34	@ 0x22
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2240      	movs	r2, #64	@ 0x40
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001dfa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001e00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4a62      	ldr	r2, [pc, #392]	@ (8001f98 <HAL_I2C_Mem_Read+0x248>)
 8001e10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e12:	88f8      	ldrh	r0, [r7, #6]
 8001e14:	893a      	ldrh	r2, [r7, #8]
 8001e16:	8979      	ldrh	r1, [r7, #10]
 8001e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	4603      	mov	r3, r0
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 fc4e 	bl	80026c4 <I2C_RequestMemoryRead>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e1f8      	b.n	8002224 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d113      	bne.n	8001e62 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	e1cc      	b.n	80021fc <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d11e      	bne.n	8001ea8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e78:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e7a:	b672      	cpsid	i
}
 8001e7c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ea2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ea4:	b662      	cpsie	i
}
 8001ea6:	e035      	b.n	8001f14 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d11e      	bne.n	8001eee <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ebe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec0:	b672      	cpsid	i
}
 8001ec2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ee8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001eea:	b662      	cpsie	i
}
 8001eec:	e012      	b.n	8001f14 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001efc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001f14:	e172      	b.n	80021fc <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	f200 811f 	bhi.w	800215e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d123      	bne.n	8001f70 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f2a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 fe5b 	bl	8002be8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e173      	b.n	8002224 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691a      	ldr	r2, [r3, #16]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f6e:	e145      	b.n	80021fc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d152      	bne.n	800201e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f7e:	2200      	movs	r2, #0
 8001f80:	4906      	ldr	r1, [pc, #24]	@ (8001f9c <HAL_I2C_Mem_Read+0x24c>)
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 fc86 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d008      	beq.n	8001fa0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e148      	b.n	8002224 <HAL_I2C_Mem_Read+0x4d4>
 8001f92:	bf00      	nop
 8001f94:	00100002 	.word	0x00100002
 8001f98:	ffff0000 	.word	0xffff0000
 8001f9c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa0:	b672      	cpsid	i
}
 8001fa2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691a      	ldr	r2, [r3, #16]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001fe6:	b662      	cpsie	i
}
 8001fe8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002012:	b29b      	uxth	r3, r3
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800201c:	e0ee      	b.n	80021fc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800201e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002024:	2200      	movs	r2, #0
 8002026:	4981      	ldr	r1, [pc, #516]	@ (800222c <HAL_I2C_Mem_Read+0x4dc>)
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 fc33 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0f5      	b.n	8002224 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002046:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002048:	b672      	cpsid	i
}
 800204a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691a      	ldr	r2, [r3, #16]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800207e:	4b6c      	ldr	r3, [pc, #432]	@ (8002230 <HAL_I2C_Mem_Read+0x4e0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	08db      	lsrs	r3, r3, #3
 8002084:	4a6b      	ldr	r2, [pc, #428]	@ (8002234 <HAL_I2C_Mem_Read+0x4e4>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	0a1a      	lsrs	r2, r3, #8
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	00da      	lsls	r2, r3, #3
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	3b01      	subs	r3, #1
 800209c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d118      	bne.n	80020d6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2220      	movs	r2, #32
 80020ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	f043 0220 	orr.w	r2, r3, #32
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80020c6:	b662      	cpsie	i
}
 80020c8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0a6      	b.n	8002224 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d1d9      	bne.n	8002098 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691a      	ldr	r2, [r3, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002110:	3b01      	subs	r3, #1
 8002112:	b29a      	uxth	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800211c:	b29b      	uxth	r3, r3
 800211e:	3b01      	subs	r3, #1
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002126:	b662      	cpsie	i
}
 8002128:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002146:	3b01      	subs	r3, #1
 8002148:	b29a      	uxth	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800215c:	e04e      	b.n	80021fc <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800215e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002160:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 fd40 	bl	8002be8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e058      	b.n	8002224 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800218e:	3b01      	subs	r3, #1
 8002190:	b29a      	uxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800219a:	b29b      	uxth	r3, r3
 800219c:	3b01      	subs	r3, #1
 800219e:	b29a      	uxth	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d124      	bne.n	80021fc <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d107      	bne.n	80021ca <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021c8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002200:	2b00      	cmp	r3, #0
 8002202:	f47f ae88 	bne.w	8001f16 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2220      	movs	r2, #32
 800220a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	e000      	b.n	8002224 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002222:	2302      	movs	r3, #2
  }
}
 8002224:	4618      	mov	r0, r3
 8002226:	3728      	adds	r7, #40	@ 0x28
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	00010004 	.word	0x00010004
 8002230:	20000010 	.word	0x20000010
 8002234:	14f8b589 	.word	0x14f8b589

08002238 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	@ 0x28
 800223c:	af02      	add	r7, sp, #8
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	460b      	mov	r3, r1
 8002246:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002248:	f7fe fed4 	bl	8000ff4 <HAL_GetTick>
 800224c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b20      	cmp	r3, #32
 800225c:	f040 8111 	bne.w	8002482 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	2319      	movs	r3, #25
 8002266:	2201      	movs	r2, #1
 8002268:	4988      	ldr	r1, [pc, #544]	@ (800248c <HAL_I2C_IsDeviceReady+0x254>)
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 fb12 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002276:	2302      	movs	r3, #2
 8002278:	e104      	b.n	8002484 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_I2C_IsDeviceReady+0x50>
 8002284:	2302      	movs	r3, #2
 8002286:	e0fd      	b.n	8002484 <HAL_I2C_IsDeviceReady+0x24c>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b01      	cmp	r3, #1
 800229c:	d007      	beq.n	80022ae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0201 	orr.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2224      	movs	r2, #36	@ 0x24
 80022c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4a70      	ldr	r2, [pc, #448]	@ (8002490 <HAL_I2C_IsDeviceReady+0x258>)
 80022d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022e0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 fad0 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00d      	beq.n	8002316 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002304:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002308:	d103      	bne.n	8002312 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002310:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e0b6      	b.n	8002484 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002316:	897b      	ldrh	r3, [r7, #10]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002324:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002326:	f7fe fe65 	bl	8000ff4 <HAL_GetTick>
 800232a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b02      	cmp	r3, #2
 8002338:	bf0c      	ite	eq
 800233a:	2301      	moveq	r3, #1
 800233c:	2300      	movne	r3, #0
 800233e:	b2db      	uxtb	r3, r3
 8002340:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800234c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002350:	bf0c      	ite	eq
 8002352:	2301      	moveq	r3, #1
 8002354:	2300      	movne	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800235a:	e025      	b.n	80023a8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800235c:	f7fe fe4a 	bl	8000ff4 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d302      	bcc.n	8002372 <HAL_I2C_IsDeviceReady+0x13a>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d103      	bne.n	800237a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	22a0      	movs	r2, #160	@ 0xa0
 8002376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b02      	cmp	r3, #2
 8002386:	bf0c      	ite	eq
 8002388:	2301      	moveq	r3, #1
 800238a:	2300      	movne	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800239a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2ba0      	cmp	r3, #160	@ 0xa0
 80023b2:	d005      	beq.n	80023c0 <HAL_I2C_IsDeviceReady+0x188>
 80023b4:	7dfb      	ldrb	r3, [r7, #23]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d102      	bne.n	80023c0 <HAL_I2C_IsDeviceReady+0x188>
 80023ba:	7dbb      	ldrb	r3, [r7, #22]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0cd      	beq.n	800235c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2220      	movs	r2, #32
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d129      	bne.n	800242a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023e4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	2319      	movs	r3, #25
 8002402:	2201      	movs	r2, #1
 8002404:	4921      	ldr	r1, [pc, #132]	@ (800248c <HAL_I2C_IsDeviceReady+0x254>)
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 fa44 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e036      	b.n	8002484 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2220      	movs	r2, #32
 800241a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	e02c      	b.n	8002484 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002438:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002442:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	2319      	movs	r3, #25
 800244a:	2201      	movs	r2, #1
 800244c:	490f      	ldr	r1, [pc, #60]	@ (800248c <HAL_I2C_IsDeviceReady+0x254>)
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 fa20 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e012      	b.n	8002484 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	3301      	adds	r3, #1
 8002462:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	429a      	cmp	r2, r3
 800246a:	f4ff af32 	bcc.w	80022d2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002482:	2302      	movs	r3, #2
  }
}
 8002484:	4618      	mov	r0, r3
 8002486:	3720      	adds	r7, #32
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	00100002 	.word	0x00100002
 8002490:	ffff0000 	.word	0xffff0000

08002494 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	460b      	mov	r3, r1
 80024a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d006      	beq.n	80024be <I2C_MasterRequestWrite+0x2a>
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d003      	beq.n	80024be <I2C_MasterRequestWrite+0x2a>
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80024bc:	d108      	bne.n	80024d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	e00b      	b.n	80024e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d4:	2b12      	cmp	r3, #18
 80024d6:	d107      	bne.n	80024e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 f9cd 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00d      	beq.n	800251c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800250a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800250e:	d103      	bne.n	8002518 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002516:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e035      	b.n	8002588 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002524:	d108      	bne.n	8002538 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002526:	897b      	ldrh	r3, [r7, #10]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	461a      	mov	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002534:	611a      	str	r2, [r3, #16]
 8002536:	e01b      	b.n	8002570 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002538:	897b      	ldrh	r3, [r7, #10]
 800253a:	11db      	asrs	r3, r3, #7
 800253c:	b2db      	uxtb	r3, r3
 800253e:	f003 0306 	and.w	r3, r3, #6
 8002542:	b2db      	uxtb	r3, r3
 8002544:	f063 030f 	orn	r3, r3, #15
 8002548:	b2da      	uxtb	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	490e      	ldr	r1, [pc, #56]	@ (8002590 <I2C_MasterRequestWrite+0xfc>)
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 fa16 	bl	8002988 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e010      	b.n	8002588 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002566:	897b      	ldrh	r3, [r7, #10]
 8002568:	b2da      	uxtb	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	4907      	ldr	r1, [pc, #28]	@ (8002594 <I2C_MasterRequestWrite+0x100>)
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 fa06 	bl	8002988 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	00010008 	.word	0x00010008
 8002594:	00010002 	.word	0x00010002

08002598 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af02      	add	r7, sp, #8
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	4608      	mov	r0, r1
 80025a2:	4611      	mov	r1, r2
 80025a4:	461a      	mov	r2, r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	817b      	strh	r3, [r7, #10]
 80025aa:	460b      	mov	r3, r1
 80025ac:	813b      	strh	r3, [r7, #8]
 80025ae:	4613      	mov	r3, r2
 80025b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f960 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00d      	beq.n	80025f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025e8:	d103      	bne.n	80025f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e05f      	b.n	80026b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025f6:	897b      	ldrh	r3, [r7, #10]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002604:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002608:	6a3a      	ldr	r2, [r7, #32]
 800260a:	492d      	ldr	r1, [pc, #180]	@ (80026c0 <I2C_RequestMemoryWrite+0x128>)
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 f9bb 	bl	8002988 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e04c      	b.n	80026b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002634:	6a39      	ldr	r1, [r7, #32]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 fa46 	bl	8002ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00d      	beq.n	800265e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	2b04      	cmp	r3, #4
 8002648:	d107      	bne.n	800265a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002658:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e02b      	b.n	80026b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d105      	bne.n	8002670 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002664:	893b      	ldrh	r3, [r7, #8]
 8002666:	b2da      	uxtb	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	611a      	str	r2, [r3, #16]
 800266e:	e021      	b.n	80026b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002670:	893b      	ldrh	r3, [r7, #8]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	b29b      	uxth	r3, r3
 8002676:	b2da      	uxtb	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800267e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002680:	6a39      	ldr	r1, [r7, #32]
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 fa20 	bl	8002ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00d      	beq.n	80026aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	2b04      	cmp	r3, #4
 8002694:	d107      	bne.n	80026a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e005      	b.n	80026b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026aa:	893b      	ldrh	r3, [r7, #8]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	00010002 	.word	0x00010002

080026c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	4608      	mov	r0, r1
 80026ce:	4611      	mov	r1, r2
 80026d0:	461a      	mov	r2, r3
 80026d2:	4603      	mov	r3, r0
 80026d4:	817b      	strh	r3, [r7, #10]
 80026d6:	460b      	mov	r3, r1
 80026d8:	813b      	strh	r3, [r7, #8]
 80026da:	4613      	mov	r3, r2
 80026dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	2200      	movs	r2, #0
 8002706:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 f8c2 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00d      	beq.n	8002732 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002720:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002724:	d103      	bne.n	800272e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800272c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e0aa      	b.n	8002888 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002732:	897b      	ldrh	r3, [r7, #10]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	461a      	mov	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002740:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002744:	6a3a      	ldr	r2, [r7, #32]
 8002746:	4952      	ldr	r1, [pc, #328]	@ (8002890 <I2C_RequestMemoryRead+0x1cc>)
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 f91d 	bl	8002988 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e097      	b.n	8002888 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800276e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002770:	6a39      	ldr	r1, [r7, #32]
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f9a8 	bl	8002ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00d      	beq.n	800279a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	2b04      	cmp	r3, #4
 8002784:	d107      	bne.n	8002796 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002794:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e076      	b.n	8002888 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027a0:	893b      	ldrh	r3, [r7, #8]
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	611a      	str	r2, [r3, #16]
 80027aa:	e021      	b.n	80027f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027ac:	893b      	ldrh	r3, [r7, #8]
 80027ae:	0a1b      	lsrs	r3, r3, #8
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027bc:	6a39      	ldr	r1, [r7, #32]
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 f982 	bl	8002ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00d      	beq.n	80027e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d107      	bne.n	80027e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e050      	b.n	8002888 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027e6:	893b      	ldrh	r3, [r7, #8]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f2:	6a39      	ldr	r1, [r7, #32]
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 f967 	bl	8002ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00d      	beq.n	800281c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	2b04      	cmp	r3, #4
 8002806:	d107      	bne.n	8002818 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002816:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e035      	b.n	8002888 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800282a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	2200      	movs	r2, #0
 8002834:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f82b 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00d      	beq.n	8002860 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002852:	d103      	bne.n	800285c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800285a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e013      	b.n	8002888 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002860:	897b      	ldrh	r3, [r7, #10]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	b2da      	uxtb	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002872:	6a3a      	ldr	r2, [r7, #32]
 8002874:	4906      	ldr	r1, [pc, #24]	@ (8002890 <I2C_RequestMemoryRead+0x1cc>)
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f886 	bl	8002988 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	00010002 	.word	0x00010002

08002894 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028a4:	e048      	b.n	8002938 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ac:	d044      	beq.n	8002938 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ae:	f7fe fba1 	bl	8000ff4 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d302      	bcc.n	80028c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d139      	bne.n	8002938 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	0c1b      	lsrs	r3, r3, #16
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d10d      	bne.n	80028ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	43da      	mvns	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	4013      	ands	r3, r2
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bf0c      	ite	eq
 80028e0:	2301      	moveq	r3, #1
 80028e2:	2300      	movne	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	e00c      	b.n	8002904 <I2C_WaitOnFlagUntilTimeout+0x70>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	43da      	mvns	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	4013      	ands	r3, r2
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	429a      	cmp	r2, r3
 8002908:	d116      	bne.n	8002938 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	f043 0220 	orr.w	r2, r3, #32
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e023      	b.n	8002980 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	0c1b      	lsrs	r3, r3, #16
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b01      	cmp	r3, #1
 8002940:	d10d      	bne.n	800295e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	43da      	mvns	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	4013      	ands	r3, r2
 800294e:	b29b      	uxth	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf0c      	ite	eq
 8002954:	2301      	moveq	r3, #1
 8002956:	2300      	movne	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	e00c      	b.n	8002978 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	43da      	mvns	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4013      	ands	r3, r2
 800296a:	b29b      	uxth	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf0c      	ite	eq
 8002970:	2301      	moveq	r3, #1
 8002972:	2300      	movne	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	429a      	cmp	r2, r3
 800297c:	d093      	beq.n	80028a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
 8002994:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002996:	e071      	b.n	8002a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029a6:	d123      	bne.n	80029f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80029c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029dc:	f043 0204 	orr.w	r2, r3, #4
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e067      	b.n	8002ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f6:	d041      	beq.n	8002a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f8:	f7fe fafc 	bl	8000ff4 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d302      	bcc.n	8002a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d136      	bne.n	8002a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	0c1b      	lsrs	r3, r3, #16
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d10c      	bne.n	8002a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	43da      	mvns	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	4013      	ands	r3, r2
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	bf14      	ite	ne
 8002a2a:	2301      	movne	r3, #1
 8002a2c:	2300      	moveq	r3, #0
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	e00b      	b.n	8002a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	43da      	mvns	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bf14      	ite	ne
 8002a44:	2301      	movne	r3, #1
 8002a46:	2300      	moveq	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d016      	beq.n	8002a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	f043 0220 	orr.w	r2, r3, #32
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e021      	b.n	8002ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	0c1b      	lsrs	r3, r3, #16
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d10c      	bne.n	8002aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	43da      	mvns	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	4013      	ands	r3, r2
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	bf14      	ite	ne
 8002a98:	2301      	movne	r3, #1
 8002a9a:	2300      	moveq	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	e00b      	b.n	8002ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bf14      	ite	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f47f af6d 	bne.w	8002998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ad4:	e034      	b.n	8002b40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 f8e3 	bl	8002ca2 <I2C_IsAcknowledgeFailed>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e034      	b.n	8002b50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d028      	beq.n	8002b40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aee:	f7fe fa81 	bl	8000ff4 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d302      	bcc.n	8002b04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d11d      	bne.n	8002b40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b0e:	2b80      	cmp	r3, #128	@ 0x80
 8002b10:	d016      	beq.n	8002b40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	f043 0220 	orr.w	r2, r3, #32
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e007      	b.n	8002b50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b4a:	2b80      	cmp	r3, #128	@ 0x80
 8002b4c:	d1c3      	bne.n	8002ad6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b64:	e034      	b.n	8002bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 f89b 	bl	8002ca2 <I2C_IsAcknowledgeFailed>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e034      	b.n	8002be0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7c:	d028      	beq.n	8002bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b7e:	f7fe fa39 	bl	8000ff4 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d302      	bcc.n	8002b94 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d11d      	bne.n	8002bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d016      	beq.n	8002bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	f043 0220 	orr.w	r2, r3, #32
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e007      	b.n	8002be0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d1c3      	bne.n	8002b66 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bf4:	e049      	b.n	8002c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d119      	bne.n	8002c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0210 	mvn.w	r2, #16
 8002c0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e030      	b.n	8002c9a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c38:	f7fe f9dc 	bl	8000ff4 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d302      	bcc.n	8002c4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d11d      	bne.n	8002c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c58:	2b40      	cmp	r3, #64	@ 0x40
 8002c5a:	d016      	beq.n	8002c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2220      	movs	r2, #32
 8002c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	f043 0220 	orr.w	r2, r3, #32
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e007      	b.n	8002c9a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c94:	2b40      	cmp	r3, #64	@ 0x40
 8002c96:	d1ae      	bne.n	8002bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cb8:	d11b      	bne.n	8002cf2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cc2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cde:	f043 0204 	orr.w	r2, r3, #4
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr
	...

08002d00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e272      	b.n	80031f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 8087 	beq.w	8002e2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d20:	4b92      	ldr	r3, [pc, #584]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 030c 	and.w	r3, r3, #12
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d00c      	beq.n	8002d46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d2c:	4b8f      	ldr	r3, [pc, #572]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 030c 	and.w	r3, r3, #12
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d112      	bne.n	8002d5e <HAL_RCC_OscConfig+0x5e>
 8002d38:	4b8c      	ldr	r3, [pc, #560]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d44:	d10b      	bne.n	8002d5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d46:	4b89      	ldr	r3, [pc, #548]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d06c      	beq.n	8002e2c <HAL_RCC_OscConfig+0x12c>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d168      	bne.n	8002e2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e24c      	b.n	80031f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d66:	d106      	bne.n	8002d76 <HAL_RCC_OscConfig+0x76>
 8002d68:	4b80      	ldr	r3, [pc, #512]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a7f      	ldr	r2, [pc, #508]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	e02e      	b.n	8002dd4 <HAL_RCC_OscConfig+0xd4>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x98>
 8002d7e:	4b7b      	ldr	r3, [pc, #492]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a7a      	ldr	r2, [pc, #488]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002d84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	4b78      	ldr	r3, [pc, #480]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a77      	ldr	r2, [pc, #476]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002d90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e01d      	b.n	8002dd4 <HAL_RCC_OscConfig+0xd4>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCC_OscConfig+0xbc>
 8002da2:	4b72      	ldr	r3, [pc, #456]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a71      	ldr	r2, [pc, #452]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002da8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	4b6f      	ldr	r3, [pc, #444]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a6e      	ldr	r2, [pc, #440]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e00b      	b.n	8002dd4 <HAL_RCC_OscConfig+0xd4>
 8002dbc:	4b6b      	ldr	r3, [pc, #428]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a6a      	ldr	r2, [pc, #424]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	4b68      	ldr	r3, [pc, #416]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a67      	ldr	r2, [pc, #412]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002dce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d013      	beq.n	8002e04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7fe f90a 	bl	8000ff4 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de4:	f7fe f906 	bl	8000ff4 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	@ 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e200      	b.n	80031f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	4b5d      	ldr	r3, [pc, #372]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0xe4>
 8002e02:	e014      	b.n	8002e2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e04:	f7fe f8f6 	bl	8000ff4 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e0c:	f7fe f8f2 	bl	8000ff4 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	@ 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e1ec      	b.n	80031f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1e:	4b53      	ldr	r3, [pc, #332]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x10c>
 8002e2a:	e000      	b.n	8002e2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d063      	beq.n	8002f02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e3a:	4b4c      	ldr	r3, [pc, #304]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00b      	beq.n	8002e5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e46:	4b49      	ldr	r3, [pc, #292]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d11c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x18c>
 8002e52:	4b46      	ldr	r3, [pc, #280]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d116      	bne.n	8002e8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5e:	4b43      	ldr	r3, [pc, #268]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <HAL_RCC_OscConfig+0x176>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d001      	beq.n	8002e76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e1c0      	b.n	80031f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e76:	4b3d      	ldr	r3, [pc, #244]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4939      	ldr	r1, [pc, #228]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8a:	e03a      	b.n	8002f02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d020      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e94:	4b36      	ldr	r3, [pc, #216]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9a:	f7fe f8ab 	bl	8000ff4 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea2:	f7fe f8a7 	bl	8000ff4 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e1a1      	b.n	80031f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4927      	ldr	r1, [pc, #156]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	600b      	str	r3, [r1, #0]
 8002ed4:	e015      	b.n	8002f02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ed6:	4b26      	ldr	r3, [pc, #152]	@ (8002f70 <HAL_RCC_OscConfig+0x270>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7fe f88a 	bl	8000ff4 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee4:	f7fe f886 	bl	8000ff4 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e180      	b.n	80031f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f0      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d03a      	beq.n	8002f84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d019      	beq.n	8002f4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f16:	4b17      	ldr	r3, [pc, #92]	@ (8002f74 <HAL_RCC_OscConfig+0x274>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1c:	f7fe f86a 	bl	8000ff4 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f24:	f7fe f866 	bl	8000ff4 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e160      	b.n	80031f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f36:	4b0d      	ldr	r3, [pc, #52]	@ (8002f6c <HAL_RCC_OscConfig+0x26c>)
 8002f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f42:	2001      	movs	r0, #1
 8002f44:	f000 face 	bl	80034e4 <RCC_Delay>
 8002f48:	e01c      	b.n	8002f84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f74 <HAL_RCC_OscConfig+0x274>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f50:	f7fe f850 	bl	8000ff4 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f56:	e00f      	b.n	8002f78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f58:	f7fe f84c 	bl	8000ff4 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d908      	bls.n	8002f78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e146      	b.n	80031f8 <HAL_RCC_OscConfig+0x4f8>
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	42420000 	.word	0x42420000
 8002f74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f78:	4b92      	ldr	r3, [pc, #584]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1e9      	bne.n	8002f58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 80a6 	beq.w	80030de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f92:	2300      	movs	r3, #0
 8002f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f96:	4b8b      	ldr	r3, [pc, #556]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10d      	bne.n	8002fbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa2:	4b88      	ldr	r3, [pc, #544]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	4a87      	ldr	r2, [pc, #540]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 8002fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fac:	61d3      	str	r3, [r2, #28]
 8002fae:	4b85      	ldr	r3, [pc, #532]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbe:	4b82      	ldr	r3, [pc, #520]	@ (80031c8 <HAL_RCC_OscConfig+0x4c8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d118      	bne.n	8002ffc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fca:	4b7f      	ldr	r3, [pc, #508]	@ (80031c8 <HAL_RCC_OscConfig+0x4c8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a7e      	ldr	r2, [pc, #504]	@ (80031c8 <HAL_RCC_OscConfig+0x4c8>)
 8002fd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd6:	f7fe f80d 	bl	8000ff4 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fde:	f7fe f809 	bl	8000ff4 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b64      	cmp	r3, #100	@ 0x64
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e103      	b.n	80031f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff0:	4b75      	ldr	r3, [pc, #468]	@ (80031c8 <HAL_RCC_OscConfig+0x4c8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d106      	bne.n	8003012 <HAL_RCC_OscConfig+0x312>
 8003004:	4b6f      	ldr	r3, [pc, #444]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4a6e      	ldr	r2, [pc, #440]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	6213      	str	r3, [r2, #32]
 8003010:	e02d      	b.n	800306e <HAL_RCC_OscConfig+0x36e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10c      	bne.n	8003034 <HAL_RCC_OscConfig+0x334>
 800301a:	4b6a      	ldr	r3, [pc, #424]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	4a69      	ldr	r2, [pc, #420]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	6213      	str	r3, [r2, #32]
 8003026:	4b67      	ldr	r3, [pc, #412]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	4a66      	ldr	r2, [pc, #408]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 800302c:	f023 0304 	bic.w	r3, r3, #4
 8003030:	6213      	str	r3, [r2, #32]
 8003032:	e01c      	b.n	800306e <HAL_RCC_OscConfig+0x36e>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	2b05      	cmp	r3, #5
 800303a:	d10c      	bne.n	8003056 <HAL_RCC_OscConfig+0x356>
 800303c:	4b61      	ldr	r3, [pc, #388]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	4a60      	ldr	r2, [pc, #384]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 8003042:	f043 0304 	orr.w	r3, r3, #4
 8003046:	6213      	str	r3, [r2, #32]
 8003048:	4b5e      	ldr	r3, [pc, #376]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	4a5d      	ldr	r2, [pc, #372]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	6213      	str	r3, [r2, #32]
 8003054:	e00b      	b.n	800306e <HAL_RCC_OscConfig+0x36e>
 8003056:	4b5b      	ldr	r3, [pc, #364]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	4a5a      	ldr	r2, [pc, #360]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 800305c:	f023 0301 	bic.w	r3, r3, #1
 8003060:	6213      	str	r3, [r2, #32]
 8003062:	4b58      	ldr	r3, [pc, #352]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	4a57      	ldr	r2, [pc, #348]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 8003068:	f023 0304 	bic.w	r3, r3, #4
 800306c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d015      	beq.n	80030a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003076:	f7fd ffbd 	bl	8000ff4 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307c:	e00a      	b.n	8003094 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307e:	f7fd ffb9 	bl	8000ff4 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800308c:	4293      	cmp	r3, r2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e0b1      	b.n	80031f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003094:	4b4b      	ldr	r3, [pc, #300]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0ee      	beq.n	800307e <HAL_RCC_OscConfig+0x37e>
 80030a0:	e014      	b.n	80030cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a2:	f7fd ffa7 	bl	8000ff4 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a8:	e00a      	b.n	80030c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030aa:	f7fd ffa3 	bl	8000ff4 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e09b      	b.n	80031f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c0:	4b40      	ldr	r3, [pc, #256]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1ee      	bne.n	80030aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030cc:	7dfb      	ldrb	r3, [r7, #23]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d105      	bne.n	80030de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d2:	4b3c      	ldr	r3, [pc, #240]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	4a3b      	ldr	r2, [pc, #236]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 80030d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 8087 	beq.w	80031f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030e8:	4b36      	ldr	r3, [pc, #216]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f003 030c 	and.w	r3, r3, #12
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d061      	beq.n	80031b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d146      	bne.n	800318a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fc:	4b33      	ldr	r3, [pc, #204]	@ (80031cc <HAL_RCC_OscConfig+0x4cc>)
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003102:	f7fd ff77 	bl	8000ff4 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310a:	f7fd ff73 	bl	8000ff4 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e06d      	b.n	80031f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311c:	4b29      	ldr	r3, [pc, #164]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f0      	bne.n	800310a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003130:	d108      	bne.n	8003144 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003132:	4b24      	ldr	r3, [pc, #144]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	4921      	ldr	r1, [pc, #132]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 8003140:	4313      	orrs	r3, r2
 8003142:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003144:	4b1f      	ldr	r3, [pc, #124]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a19      	ldr	r1, [r3, #32]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003154:	430b      	orrs	r3, r1
 8003156:	491b      	ldr	r1, [pc, #108]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 8003158:	4313      	orrs	r3, r2
 800315a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800315c:	4b1b      	ldr	r3, [pc, #108]	@ (80031cc <HAL_RCC_OscConfig+0x4cc>)
 800315e:	2201      	movs	r2, #1
 8003160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003162:	f7fd ff47 	bl	8000ff4 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316a:	f7fd ff43 	bl	8000ff4 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e03d      	b.n	80031f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800317c:	4b11      	ldr	r3, [pc, #68]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f0      	beq.n	800316a <HAL_RCC_OscConfig+0x46a>
 8003188:	e035      	b.n	80031f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318a:	4b10      	ldr	r3, [pc, #64]	@ (80031cc <HAL_RCC_OscConfig+0x4cc>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7fd ff30 	bl	8000ff4 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003198:	f7fd ff2c 	bl	8000ff4 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e026      	b.n	80031f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031aa:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <HAL_RCC_OscConfig+0x4c4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <HAL_RCC_OscConfig+0x498>
 80031b6:	e01e      	b.n	80031f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d107      	bne.n	80031d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e019      	b.n	80031f8 <HAL_RCC_OscConfig+0x4f8>
 80031c4:	40021000 	.word	0x40021000
 80031c8:	40007000 	.word	0x40007000
 80031cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003200 <HAL_RCC_OscConfig+0x500>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d106      	bne.n	80031f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d001      	beq.n	80031f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40021000 	.word	0x40021000

08003204 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0d0      	b.n	80033ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003218:	4b6a      	ldr	r3, [pc, #424]	@ (80033c4 <HAL_RCC_ClockConfig+0x1c0>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d910      	bls.n	8003248 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003226:	4b67      	ldr	r3, [pc, #412]	@ (80033c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 0207 	bic.w	r2, r3, #7
 800322e:	4965      	ldr	r1, [pc, #404]	@ (80033c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	4313      	orrs	r3, r2
 8003234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003236:	4b63      	ldr	r3, [pc, #396]	@ (80033c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0b8      	b.n	80033ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d020      	beq.n	8003296 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003260:	4b59      	ldr	r3, [pc, #356]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	4a58      	ldr	r2, [pc, #352]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003266:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800326a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003278:	4b53      	ldr	r3, [pc, #332]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	4a52      	ldr	r2, [pc, #328]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c4>)
 800327e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003282:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003284:	4b50      	ldr	r3, [pc, #320]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	494d      	ldr	r1, [pc, #308]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003292:	4313      	orrs	r3, r2
 8003294:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d040      	beq.n	8003324 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	4b47      	ldr	r3, [pc, #284]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d115      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e07f      	b.n	80033ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d107      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c2:	4b41      	ldr	r3, [pc, #260]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e073      	b.n	80033ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d2:	4b3d      	ldr	r3, [pc, #244]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c4>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e06b      	b.n	80033ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032e2:	4b39      	ldr	r3, [pc, #228]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c4>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f023 0203 	bic.w	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	4936      	ldr	r1, [pc, #216]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c4>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032f4:	f7fd fe7e 	bl	8000ff4 <HAL_GetTick>
 80032f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fa:	e00a      	b.n	8003312 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032fc:	f7fd fe7a 	bl	8000ff4 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e053      	b.n	80033ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003312:	4b2d      	ldr	r3, [pc, #180]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 020c 	and.w	r2, r3, #12
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	429a      	cmp	r2, r3
 8003322:	d1eb      	bne.n	80032fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003324:	4b27      	ldr	r3, [pc, #156]	@ (80033c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d210      	bcs.n	8003354 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003332:	4b24      	ldr	r3, [pc, #144]	@ (80033c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 0207 	bic.w	r2, r3, #7
 800333a:	4922      	ldr	r1, [pc, #136]	@ (80033c4 <HAL_RCC_ClockConfig+0x1c0>)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	4313      	orrs	r3, r2
 8003340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003342:	4b20      	ldr	r3, [pc, #128]	@ (80033c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d001      	beq.n	8003354 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e032      	b.n	80033ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003360:	4b19      	ldr	r3, [pc, #100]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4916      	ldr	r1, [pc, #88]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	4313      	orrs	r3, r2
 8003370:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d009      	beq.n	8003392 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800337e:	4b12      	ldr	r3, [pc, #72]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	490e      	ldr	r1, [pc, #56]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c4>)
 800338e:	4313      	orrs	r3, r2
 8003390:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003392:	f000 f821 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8003396:	4602      	mov	r2, r0
 8003398:	4b0b      	ldr	r3, [pc, #44]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c4>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	091b      	lsrs	r3, r3, #4
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	490a      	ldr	r1, [pc, #40]	@ (80033cc <HAL_RCC_ClockConfig+0x1c8>)
 80033a4:	5ccb      	ldrb	r3, [r1, r3]
 80033a6:	fa22 f303 	lsr.w	r3, r2, r3
 80033aa:	4a09      	ldr	r2, [pc, #36]	@ (80033d0 <HAL_RCC_ClockConfig+0x1cc>)
 80033ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033ae:	4b09      	ldr	r3, [pc, #36]	@ (80033d4 <HAL_RCC_ClockConfig+0x1d0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd fddc 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40022000 	.word	0x40022000
 80033c8:	40021000 	.word	0x40021000
 80033cc:	08009418 	.word	0x08009418
 80033d0:	20000010 	.word	0x20000010
 80033d4:	20000000 	.word	0x20000000

080033d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	2300      	movs	r3, #0
 80033ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033f2:	4b1e      	ldr	r3, [pc, #120]	@ (800346c <HAL_RCC_GetSysClockFreq+0x94>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d002      	beq.n	8003408 <HAL_RCC_GetSysClockFreq+0x30>
 8003402:	2b08      	cmp	r3, #8
 8003404:	d003      	beq.n	800340e <HAL_RCC_GetSysClockFreq+0x36>
 8003406:	e027      	b.n	8003458 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003408:	4b19      	ldr	r3, [pc, #100]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x98>)
 800340a:	613b      	str	r3, [r7, #16]
      break;
 800340c:	e027      	b.n	800345e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	0c9b      	lsrs	r3, r3, #18
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	4a17      	ldr	r2, [pc, #92]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003418:	5cd3      	ldrb	r3, [r2, r3]
 800341a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d010      	beq.n	8003448 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003426:	4b11      	ldr	r3, [pc, #68]	@ (800346c <HAL_RCC_GetSysClockFreq+0x94>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	0c5b      	lsrs	r3, r3, #17
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	4a11      	ldr	r2, [pc, #68]	@ (8003478 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003432:	5cd3      	ldrb	r3, [r2, r3]
 8003434:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a0d      	ldr	r2, [pc, #52]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x98>)
 800343a:	fb03 f202 	mul.w	r2, r3, r2
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	fbb2 f3f3 	udiv	r3, r2, r3
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	e004      	b.n	8003452 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a0c      	ldr	r2, [pc, #48]	@ (800347c <HAL_RCC_GetSysClockFreq+0xa4>)
 800344c:	fb02 f303 	mul.w	r3, r2, r3
 8003450:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	613b      	str	r3, [r7, #16]
      break;
 8003456:	e002      	b.n	800345e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003458:	4b05      	ldr	r3, [pc, #20]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x98>)
 800345a:	613b      	str	r3, [r7, #16]
      break;
 800345c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800345e:	693b      	ldr	r3, [r7, #16]
}
 8003460:	4618      	mov	r0, r3
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40021000 	.word	0x40021000
 8003470:	007a1200 	.word	0x007a1200
 8003474:	08008144 	.word	0x08008144
 8003478:	08008154 	.word	0x08008154
 800347c:	003d0900 	.word	0x003d0900

08003480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003484:	4b02      	ldr	r3, [pc, #8]	@ (8003490 <HAL_RCC_GetHCLKFreq+0x10>)
 8003486:	681b      	ldr	r3, [r3, #0]
}
 8003488:	4618      	mov	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr
 8003490:	20000010 	.word	0x20000010

08003494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003498:	f7ff fff2 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 800349c:	4602      	mov	r2, r0
 800349e:	4b05      	ldr	r3, [pc, #20]	@ (80034b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	4903      	ldr	r1, [pc, #12]	@ (80034b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034aa:	5ccb      	ldrb	r3, [r1, r3]
 80034ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40021000 	.word	0x40021000
 80034b8:	08009428 	.word	0x08009428

080034bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034c0:	f7ff ffde 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 80034c4:	4602      	mov	r2, r0
 80034c6:	4b05      	ldr	r3, [pc, #20]	@ (80034dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	0adb      	lsrs	r3, r3, #11
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	4903      	ldr	r1, [pc, #12]	@ (80034e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034d2:	5ccb      	ldrb	r3, [r1, r3]
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d8:	4618      	mov	r0, r3
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021000 	.word	0x40021000
 80034e0:	08009428 	.word	0x08009428

080034e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003518 <RCC_Delay+0x34>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a0a      	ldr	r2, [pc, #40]	@ (800351c <RCC_Delay+0x38>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	0a5b      	lsrs	r3, r3, #9
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	fb02 f303 	mul.w	r3, r2, r3
 80034fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003500:	bf00      	nop
  }
  while (Delay --);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1e5a      	subs	r2, r3, #1
 8003506:	60fa      	str	r2, [r7, #12]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f9      	bne.n	8003500 <RCC_Delay+0x1c>
}
 800350c:	bf00      	nop
 800350e:	bf00      	nop
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr
 8003518:	20000010 	.word	0x20000010
 800351c:	10624dd3 	.word	0x10624dd3

08003520 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e042      	b.n	80035b8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f001 fdf8 	bl	800513c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2224      	movs	r2, #36	@ 0x24
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003562:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fdb7 	bl	80040d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	691a      	ldr	r2, [r3, #16]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003578:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695a      	ldr	r2, [r3, #20]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003588:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003598:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08a      	sub	sp, #40	@ 0x28
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	4613      	mov	r3, r2
 80035ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b20      	cmp	r3, #32
 80035de:	d175      	bne.n	80036cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_UART_Transmit+0x2c>
 80035e6:	88fb      	ldrh	r3, [r7, #6]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e06e      	b.n	80036ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2221      	movs	r2, #33	@ 0x21
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035fe:	f7fd fcf9 	bl	8000ff4 <HAL_GetTick>
 8003602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	88fa      	ldrh	r2, [r7, #6]
 8003608:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	88fa      	ldrh	r2, [r7, #6]
 800360e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003618:	d108      	bne.n	800362c <HAL_UART_Transmit+0x6c>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d104      	bne.n	800362c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003622:	2300      	movs	r3, #0
 8003624:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	61bb      	str	r3, [r7, #24]
 800362a:	e003      	b.n	8003634 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003630:	2300      	movs	r3, #0
 8003632:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003634:	e02e      	b.n	8003694 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2200      	movs	r2, #0
 800363e:	2180      	movs	r1, #128	@ 0x80
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 fb1c 	bl	8003c7e <UART_WaitOnFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e03a      	b.n	80036ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10b      	bne.n	8003676 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800366c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	3302      	adds	r3, #2
 8003672:	61bb      	str	r3, [r7, #24]
 8003674:	e007      	b.n	8003686 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	781a      	ldrb	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	3301      	adds	r3, #1
 8003684:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800368a:	b29b      	uxth	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003698:	b29b      	uxth	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1cb      	bne.n	8003636 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2200      	movs	r2, #0
 80036a6:	2140      	movs	r1, #64	@ 0x40
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 fae8 	bl	8003c7e <UART_WaitOnFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e006      	b.n	80036ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	e000      	b.n	80036ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80036cc:	2302      	movs	r3, #2
  }
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3720      	adds	r7, #32
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	4613      	mov	r3, r2
 80036e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d112      	bne.n	8003716 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <HAL_UART_Receive_IT+0x26>
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e00b      	b.n	8003718 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003706:	88fb      	ldrh	r3, [r7, #6]
 8003708:	461a      	mov	r2, r3
 800370a:	68b9      	ldr	r1, [r7, #8]
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 fb0f 	bl	8003d30 <UART_Start_Receive_IT>
 8003712:	4603      	mov	r3, r0
 8003714:	e000      	b.n	8003718 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003716:	2302      	movs	r3, #2
  }
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b0ba      	sub	sp, #232	@ 0xe8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003746:	2300      	movs	r3, #0
 8003748:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800374c:	2300      	movs	r3, #0
 800374e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800375e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10f      	bne.n	8003786 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	d009      	beq.n	8003786 <HAL_UART_IRQHandler+0x66>
 8003772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fbec 	bl	8003f5c <UART_Receive_IT>
      return;
 8003784:	e25b      	b.n	8003c3e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 80de 	beq.w	800394c <HAL_UART_IRQHandler+0x22c>
 8003790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d106      	bne.n	80037aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800379c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 80d1 	beq.w	800394c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00b      	beq.n	80037ce <HAL_UART_IRQHandler+0xae>
 80037b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c6:	f043 0201 	orr.w	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00b      	beq.n	80037f2 <HAL_UART_IRQHandler+0xd2>
 80037da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d005      	beq.n	80037f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ea:	f043 0202 	orr.w	r2, r3, #2
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00b      	beq.n	8003816 <HAL_UART_IRQHandler+0xf6>
 80037fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d005      	beq.n	8003816 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380e:	f043 0204 	orr.w	r2, r3, #4
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d011      	beq.n	8003846 <HAL_UART_IRQHandler+0x126>
 8003822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b00      	cmp	r3, #0
 800382c:	d105      	bne.n	800383a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800382e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383e:	f043 0208 	orr.w	r2, r3, #8
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 81f2 	beq.w	8003c34 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_UART_IRQHandler+0x14e>
 800385c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fb77 	bl	8003f5c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003878:	2b00      	cmp	r3, #0
 800387a:	bf14      	ite	ne
 800387c:	2301      	movne	r3, #1
 800387e:	2300      	moveq	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d103      	bne.n	800389a <HAL_UART_IRQHandler+0x17a>
 8003892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003896:	2b00      	cmp	r3, #0
 8003898:	d04f      	beq.n	800393a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fa81 	bl	8003da2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d041      	beq.n	8003932 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3314      	adds	r3, #20
 80038b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038bc:	e853 3f00 	ldrex	r3, [r3]
 80038c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80038c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80038c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3314      	adds	r3, #20
 80038d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80038de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038ea:	e841 2300 	strex	r3, r2, [r1]
 80038ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1d9      	bne.n	80038ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d013      	beq.n	800392a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003906:	4a7e      	ldr	r2, [pc, #504]	@ (8003b00 <HAL_UART_IRQHandler+0x3e0>)
 8003908:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800390e:	4618      	mov	r0, r3
 8003910:	f7fd fce6 	bl	80012e0 <HAL_DMA_Abort_IT>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d016      	beq.n	8003948 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003924:	4610      	mov	r0, r2
 8003926:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003928:	e00e      	b.n	8003948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f993 	bl	8003c56 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003930:	e00a      	b.n	8003948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f98f 	bl	8003c56 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003938:	e006      	b.n	8003948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f98b 	bl	8003c56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003946:	e175      	b.n	8003c34 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003948:	bf00      	nop
    return;
 800394a:	e173      	b.n	8003c34 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003950:	2b01      	cmp	r3, #1
 8003952:	f040 814f 	bne.w	8003bf4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8148 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8141 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003972:	2300      	movs	r3, #0
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 80b6 	beq.w	8003b04 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 8145 	beq.w	8003c38 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039b6:	429a      	cmp	r2, r3
 80039b8:	f080 813e 	bcs.w	8003c38 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b20      	cmp	r3, #32
 80039cc:	f000 8088 	beq.w	8003ae0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	330c      	adds	r3, #12
 80039d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039de:	e853 3f00 	ldrex	r3, [r3]
 80039e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	330c      	adds	r3, #12
 80039f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80039fc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a04:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a08:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a0c:	e841 2300 	strex	r3, r2, [r1]
 8003a10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1d9      	bne.n	80039d0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3314      	adds	r3, #20
 8003a22:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a26:	e853 3f00 	ldrex	r3, [r3]
 8003a2a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a2e:	f023 0301 	bic.w	r3, r3, #1
 8003a32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3314      	adds	r3, #20
 8003a3c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a40:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a44:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a46:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a48:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a4c:	e841 2300 	strex	r3, r2, [r1]
 8003a50:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e1      	bne.n	8003a1c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3314      	adds	r3, #20
 8003a5e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a62:	e853 3f00 	ldrex	r3, [r3]
 8003a66:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3314      	adds	r3, #20
 8003a78:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a7c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a7e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a80:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a82:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a84:	e841 2300 	strex	r3, r2, [r1]
 8003a88:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1e3      	bne.n	8003a58 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	330c      	adds	r3, #12
 8003aa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003aa8:	e853 3f00 	ldrex	r3, [r3]
 8003aac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003aae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ab0:	f023 0310 	bic.w	r3, r3, #16
 8003ab4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	330c      	adds	r3, #12
 8003abe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003ac2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ac4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ac8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ad0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e3      	bne.n	8003a9e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fd fbc5 	bl	800126a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	4619      	mov	r1, r3
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f8b6 	bl	8003c68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003afc:	e09c      	b.n	8003c38 <HAL_UART_IRQHandler+0x518>
 8003afe:	bf00      	nop
 8003b00:	08003e67 	.word	0x08003e67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 808e 	beq.w	8003c3c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8089 	beq.w	8003c3c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	330c      	adds	r3, #12
 8003b30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b34:	e853 3f00 	ldrex	r3, [r3]
 8003b38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	330c      	adds	r3, #12
 8003b4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b4e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b56:	e841 2300 	strex	r3, r2, [r1]
 8003b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1e3      	bne.n	8003b2a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	3314      	adds	r3, #20
 8003b68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6c:	e853 3f00 	ldrex	r3, [r3]
 8003b70:	623b      	str	r3, [r7, #32]
   return(result);
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	f023 0301 	bic.w	r3, r3, #1
 8003b78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3314      	adds	r3, #20
 8003b82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b86:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b8e:	e841 2300 	strex	r3, r2, [r1]
 8003b92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1e3      	bne.n	8003b62 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	330c      	adds	r3, #12
 8003bae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	e853 3f00 	ldrex	r3, [r3]
 8003bb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0310 	bic.w	r3, r3, #16
 8003bbe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	330c      	adds	r3, #12
 8003bc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003bcc:	61fa      	str	r2, [r7, #28]
 8003bce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd0:	69b9      	ldr	r1, [r7, #24]
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	e841 2300 	strex	r3, r2, [r1]
 8003bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1e3      	bne.n	8003ba8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003be6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bea:	4619      	mov	r1, r3
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f83b 	bl	8003c68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bf2:	e023      	b.n	8003c3c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d009      	beq.n	8003c14 <HAL_UART_IRQHandler+0x4f4>
 8003c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f93e 	bl	8003e8e <UART_Transmit_IT>
    return;
 8003c12:	e014      	b.n	8003c3e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00e      	beq.n	8003c3e <HAL_UART_IRQHandler+0x51e>
 8003c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d008      	beq.n	8003c3e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f97d 	bl	8003f2c <UART_EndTransmit_IT>
    return;
 8003c32:	e004      	b.n	8003c3e <HAL_UART_IRQHandler+0x51e>
    return;
 8003c34:	bf00      	nop
 8003c36:	e002      	b.n	8003c3e <HAL_UART_IRQHandler+0x51e>
      return;
 8003c38:	bf00      	nop
 8003c3a:	e000      	b.n	8003c3e <HAL_UART_IRQHandler+0x51e>
      return;
 8003c3c:	bf00      	nop
  }
}
 8003c3e:	37e8      	adds	r7, #232	@ 0xe8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr

08003c56 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr

08003c68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr

08003c7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b086      	sub	sp, #24
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	603b      	str	r3, [r7, #0]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c8e:	e03b      	b.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c96:	d037      	beq.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c98:	f7fd f9ac 	bl	8000ff4 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	6a3a      	ldr	r2, [r7, #32]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d302      	bcc.n	8003cae <UART_WaitOnFlagUntilTimeout+0x30>
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e03a      	b.n	8003d28 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d023      	beq.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b80      	cmp	r3, #128	@ 0x80
 8003cc4:	d020      	beq.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b40      	cmp	r3, #64	@ 0x40
 8003cca:	d01d      	beq.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d116      	bne.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f856 	bl	8003da2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2208      	movs	r2, #8
 8003cfa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e00f      	b.n	8003d28 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	4013      	ands	r3, r2
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	461a      	mov	r2, r3
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d0b4      	beq.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	88fa      	ldrh	r2, [r7, #6]
 8003d48:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	88fa      	ldrh	r2, [r7, #6]
 8003d4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2222      	movs	r2, #34	@ 0x22
 8003d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d007      	beq.n	8003d76 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d74:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695a      	ldr	r2, [r3, #20]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 0201 	orr.w	r2, r2, #1
 8003d84:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 0220 	orr.w	r2, r2, #32
 8003d94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	4770      	bx	lr

08003da2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b095      	sub	sp, #84	@ 0x54
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	330c      	adds	r3, #12
 8003db0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	330c      	adds	r3, #12
 8003dc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dca:	643a      	str	r2, [r7, #64]	@ 0x40
 8003dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003dd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e5      	bne.n	8003daa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3314      	adds	r3, #20
 8003de4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	e853 3f00 	ldrex	r3, [r3]
 8003dec:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	f023 0301 	bic.w	r3, r3, #1
 8003df4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3314      	adds	r3, #20
 8003dfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e06:	e841 2300 	strex	r3, r2, [r1]
 8003e0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e5      	bne.n	8003dde <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d119      	bne.n	8003e4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	330c      	adds	r3, #12
 8003e20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	e853 3f00 	ldrex	r3, [r3]
 8003e28:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f023 0310 	bic.w	r3, r3, #16
 8003e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	330c      	adds	r3, #12
 8003e38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e3a:	61ba      	str	r2, [r7, #24]
 8003e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3e:	6979      	ldr	r1, [r7, #20]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	e841 2300 	strex	r3, r2, [r1]
 8003e46:	613b      	str	r3, [r7, #16]
   return(result);
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1e5      	bne.n	8003e1a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e5c:	bf00      	nop
 8003e5e:	3754      	adds	r7, #84	@ 0x54
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr

08003e66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b084      	sub	sp, #16
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7ff fee8 	bl	8003c56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e86:	bf00      	nop
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b085      	sub	sp, #20
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b21      	cmp	r3, #33	@ 0x21
 8003ea0:	d13e      	bne.n	8003f20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eaa:	d114      	bne.n	8003ed6 <UART_Transmit_IT+0x48>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d110      	bne.n	8003ed6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ec8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	1c9a      	adds	r2, r3, #2
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	621a      	str	r2, [r3, #32]
 8003ed4:	e008      	b.n	8003ee8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	1c59      	adds	r1, r3, #1
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6211      	str	r1, [r2, #32]
 8003ee0:	781a      	ldrb	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10f      	bne.n	8003f1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	e000      	b.n	8003f22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f20:	2302      	movs	r3, #2
  }
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr

08003f2c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f42:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff fe79 	bl	8003c44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08c      	sub	sp, #48	@ 0x30
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b22      	cmp	r3, #34	@ 0x22
 8003f6e:	f040 80ae 	bne.w	80040ce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f7a:	d117      	bne.n	8003fac <UART_Receive_IT+0x50>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d113      	bne.n	8003fac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f84:	2300      	movs	r3, #0
 8003f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f9e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa4:	1c9a      	adds	r2, r3, #2
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	629a      	str	r2, [r3, #40]	@ 0x28
 8003faa:	e026      	b.n	8003ffa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fbe:	d007      	beq.n	8003fd0 <UART_Receive_IT+0x74>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10a      	bne.n	8003fde <UART_Receive_IT+0x82>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d106      	bne.n	8003fde <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fda:	701a      	strb	r2, [r3, #0]
 8003fdc:	e008      	b.n	8003ff0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b01      	subs	r3, #1
 8004002:	b29b      	uxth	r3, r3
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	4619      	mov	r1, r3
 8004008:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800400a:	2b00      	cmp	r3, #0
 800400c:	d15d      	bne.n	80040ca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0220 	bic.w	r2, r2, #32
 800401c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800402c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695a      	ldr	r2, [r3, #20]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0201 	bic.w	r2, r2, #1
 800403c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004050:	2b01      	cmp	r3, #1
 8004052:	d135      	bne.n	80040c0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	330c      	adds	r3, #12
 8004060:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	613b      	str	r3, [r7, #16]
   return(result);
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f023 0310 	bic.w	r3, r3, #16
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	330c      	adds	r3, #12
 8004078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800407a:	623a      	str	r2, [r7, #32]
 800407c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407e:	69f9      	ldr	r1, [r7, #28]
 8004080:	6a3a      	ldr	r2, [r7, #32]
 8004082:	e841 2300 	strex	r3, r2, [r1]
 8004086:	61bb      	str	r3, [r7, #24]
   return(result);
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1e5      	bne.n	800405a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0310 	and.w	r3, r3, #16
 8004098:	2b10      	cmp	r3, #16
 800409a:	d10a      	bne.n	80040b2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040b6:	4619      	mov	r1, r3
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff fdd5 	bl	8003c68 <HAL_UARTEx_RxEventCallback>
 80040be:	e002      	b.n	80040c6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f9f1 	bl	80044a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	e002      	b.n	80040d0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	e000      	b.n	80040d0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80040ce:	2302      	movs	r3, #2
  }
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3730      	adds	r7, #48	@ 0x30
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	4313      	orrs	r3, r2
 8004106:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004112:	f023 030c 	bic.w	r3, r3, #12
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6812      	ldr	r2, [r2, #0]
 800411a:	68b9      	ldr	r1, [r7, #8]
 800411c:	430b      	orrs	r3, r1
 800411e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699a      	ldr	r2, [r3, #24]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a2c      	ldr	r2, [pc, #176]	@ (80041ec <UART_SetConfig+0x114>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d103      	bne.n	8004148 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004140:	f7ff f9bc 	bl	80034bc <HAL_RCC_GetPCLK2Freq>
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	e002      	b.n	800414e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004148:	f7ff f9a4 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
 800414c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	4613      	mov	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	009a      	lsls	r2, r3, #2
 8004158:	441a      	add	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	fbb2 f3f3 	udiv	r3, r2, r3
 8004164:	4a22      	ldr	r2, [pc, #136]	@ (80041f0 <UART_SetConfig+0x118>)
 8004166:	fba2 2303 	umull	r2, r3, r2, r3
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	0119      	lsls	r1, r3, #4
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	009a      	lsls	r2, r3, #2
 8004178:	441a      	add	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	fbb2 f2f3 	udiv	r2, r2, r3
 8004184:	4b1a      	ldr	r3, [pc, #104]	@ (80041f0 <UART_SetConfig+0x118>)
 8004186:	fba3 0302 	umull	r0, r3, r3, r2
 800418a:	095b      	lsrs	r3, r3, #5
 800418c:	2064      	movs	r0, #100	@ 0x64
 800418e:	fb00 f303 	mul.w	r3, r0, r3
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	3332      	adds	r3, #50	@ 0x32
 8004198:	4a15      	ldr	r2, [pc, #84]	@ (80041f0 <UART_SetConfig+0x118>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041a4:	4419      	add	r1, r3
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	009a      	lsls	r2, r3, #2
 80041b0:	441a      	add	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041bc:	4b0c      	ldr	r3, [pc, #48]	@ (80041f0 <UART_SetConfig+0x118>)
 80041be:	fba3 0302 	umull	r0, r3, r3, r2
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	2064      	movs	r0, #100	@ 0x64
 80041c6:	fb00 f303 	mul.w	r3, r0, r3
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	3332      	adds	r3, #50	@ 0x32
 80041d0:	4a07      	ldr	r2, [pc, #28]	@ (80041f0 <UART_SetConfig+0x118>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	f003 020f 	and.w	r2, r3, #15
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	440a      	add	r2, r1
 80041e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041e4:	bf00      	nop
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40013800 	.word	0x40013800
 80041f0:	51eb851f 	.word	0x51eb851f

080041f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b0b4      	sub	sp, #208	@ 0xd0
 80041f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041fa:	f7fc fea3 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041fe:	f000 f89d 	bl	800433c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004202:	f000 f92f 	bl	8004464 <MX_GPIO_Init>
  MX_I2C1_Init();
 8004206:	f000 f8d5 	bl	80043b4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800420a:	f000 f901 	bl	8004410 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  mpu6050_t mpu6050;
  MPU6050_Init(&mpu6050, &hi2c1);
 800420e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8004212:	4943      	ldr	r1, [pc, #268]	@ (8004320 <main+0x12c>)
 8004214:	4618      	mov	r0, r3
 8004216:	f000 f97b 	bl	8004510 <MPU6050_Init>
  SSD1306_Init();
 800421a:	f000 fc75 	bl	8004b08 <SSD1306_Init>


  HAL_Delay(100); // Allow sensor to stabilize
 800421e:	2064      	movs	r0, #100	@ 0x64
 8004220:	f7fc fef2 	bl	8001008 <HAL_Delay>
  MPU6050_Reset_FIFO(&mpu6050);
 8004224:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fa6a 	bl	8004702 <MPU6050_Reset_FIFO>
  HAL_Delay(50);
 800422e:	2032      	movs	r0, #50	@ 0x32
 8004230:	f7fc feea 	bl	8001008 <HAL_Delay>
  MPU6050_configure_Fifo(&mpu6050);
 8004234:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8004238:	4618      	mov	r0, r3
 800423a:	f000 faed 	bl	8004818 <MPU6050_configure_Fifo>
  HAL_Delay(50);
 800423e:	2032      	movs	r0, #50	@ 0x32
 8004240:	f7fc fee2 	bl	8001008 <HAL_Delay>
  MPU6050_Enable_FIFO(&mpu6050);
 8004244:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8004248:	4618      	mov	r0, r3
 800424a:	f000 fab9 	bl	80047c0 <MPU6050_Enable_FIFO>
  HAL_Delay(100); // Allow FIFO to fill
 800424e:	2064      	movs	r0, #100	@ 0x64
 8004250:	f7fc feda 	bl	8001008 <HAL_Delay>

  float offsetXYZ[3] = {0.01, 0.015, 0.205}; // enter your values
 8004254:	4a33      	ldr	r2, [pc, #204]	@ (8004324 <main+0x130>)
 8004256:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800425a:	ca07      	ldmia	r2, {r0, r1, r2}
 800425c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float scaleXYZ[3] = {1, 0.995, 1.01}; // enter your values
 8004260:	4a31      	ldr	r2, [pc, #196]	@ (8004328 <main+0x134>)
 8004262:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004266:	ca07      	ldmia	r2, {r0, r1, r2}
 8004268:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  MPU6050_Set_Accel_Offset_Scale(&mpu6050, offsetXYZ, scaleXYZ);
 800426c:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8004270:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8004274:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fa13 	bl	80046a4 <MPU6050_Set_Accel_Offset_Scale>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SSD1306_Fill(0);
 800427e:	2000      	movs	r0, #0
 8004280:	f000 fd2e 	bl	8004ce0 <SSD1306_Fill>
	  char buf[100];
	  MPU6050_Read_Fifo(&mpu6050);
 8004284:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fb11 	bl	80048b0 <MPU6050_Read_Fifo>


	  SSD1306_GotoXY (0,0);
 800428e:	2100      	movs	r1, #0
 8004290:	2000      	movs	r0, #0
 8004292:	f000 fd9b 	bl	8004dcc <SSD1306_GotoXY>
	  sprintf (buf, "Ax=%.2f ", mpu6050.accelerometer.Ax);
 8004296:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004298:	4618      	mov	r0, r3
 800429a:	f7fc f8c5 	bl	8000428 <__aeabi_f2d>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	4638      	mov	r0, r7
 80042a4:	4921      	ldr	r1, [pc, #132]	@ (800432c <main+0x138>)
 80042a6:	f001 fddd 	bl	8005e64 <siprintf>
	  SSD1306_Puts (buf, &Font_14x15, 1);
 80042aa:	463b      	mov	r3, r7
 80042ac:	2201      	movs	r2, #1
 80042ae:	4920      	ldr	r1, [pc, #128]	@ (8004330 <main+0x13c>)
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fe1f 	bl	8004ef4 <SSD1306_Puts>

	  SSD1306_GotoXY (0,20);
 80042b6:	2114      	movs	r1, #20
 80042b8:	2000      	movs	r0, #0
 80042ba:	f000 fd87 	bl	8004dcc <SSD1306_GotoXY>
	  strcpy(buf, "");
 80042be:	2300      	movs	r3, #0
 80042c0:	703b      	strb	r3, [r7, #0]
	  sprintf (buf, "Ay=%.2f ", mpu6050.accelerometer.Ay);
 80042c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fc f8ae 	bl	8000428 <__aeabi_f2d>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4638      	mov	r0, r7
 80042d2:	4918      	ldr	r1, [pc, #96]	@ (8004334 <main+0x140>)
 80042d4:	f001 fdc6 	bl	8005e64 <siprintf>
	  SSD1306_Puts (buf, &Font_14x15, 1);
 80042d8:	463b      	mov	r3, r7
 80042da:	2201      	movs	r2, #1
 80042dc:	4914      	ldr	r1, [pc, #80]	@ (8004330 <main+0x13c>)
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fe08 	bl	8004ef4 <SSD1306_Puts>

	  SSD1306_GotoXY (0,40);
 80042e4:	2128      	movs	r1, #40	@ 0x28
 80042e6:	2000      	movs	r0, #0
 80042e8:	f000 fd70 	bl	8004dcc <SSD1306_GotoXY>
	  strcpy(buf, "");
 80042ec:	2300      	movs	r3, #0
 80042ee:	703b      	strb	r3, [r7, #0]
	  sprintf (buf, "Az=%.2f ", mpu6050.accelerometer.Az);
 80042f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fc f897 	bl	8000428 <__aeabi_f2d>
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	4638      	mov	r0, r7
 8004300:	490d      	ldr	r1, [pc, #52]	@ (8004338 <main+0x144>)
 8004302:	f001 fdaf 	bl	8005e64 <siprintf>
	  SSD1306_Puts (buf, &Font_14x15, 1);
 8004306:	463b      	mov	r3, r7
 8004308:	2201      	movs	r2, #1
 800430a:	4909      	ldr	r1, [pc, #36]	@ (8004330 <main+0x13c>)
 800430c:	4618      	mov	r0, r3
 800430e:	f000 fdf1 	bl	8004ef4 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8004312:	f000 fcb7 	bl	8004c84 <SSD1306_UpdateScreen>
	  HAL_Delay(1);
 8004316:	2001      	movs	r0, #1
 8004318:	f7fc fe76 	bl	8001008 <HAL_Delay>
  {
 800431c:	bf00      	nop
 800431e:	e7ae      	b.n	800427e <main+0x8a>
 8004320:	200001fc 	.word	0x200001fc
 8004324:	0800811c 	.word	0x0800811c
 8004328:	08008128 	.word	0x08008128
 800432c:	080080f8 	.word	0x080080f8
 8004330:	20000008 	.word	0x20000008
 8004334:	08008104 	.word	0x08008104
 8004338:	08008110 	.word	0x08008110

0800433c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b090      	sub	sp, #64	@ 0x40
 8004340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004342:	f107 0318 	add.w	r3, r7, #24
 8004346:	2228      	movs	r2, #40	@ 0x28
 8004348:	2100      	movs	r1, #0
 800434a:	4618      	mov	r0, r3
 800434c:	f001 fdef 	bl	8005f2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004350:	1d3b      	adds	r3, r7, #4
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	605a      	str	r2, [r3, #4]
 8004358:	609a      	str	r2, [r3, #8]
 800435a:	60da      	str	r2, [r3, #12]
 800435c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800435e:	2302      	movs	r3, #2
 8004360:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004362:	2301      	movs	r3, #1
 8004364:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004366:	2310      	movs	r3, #16
 8004368:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800436a:	2300      	movs	r3, #0
 800436c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800436e:	f107 0318 	add.w	r3, r7, #24
 8004372:	4618      	mov	r0, r3
 8004374:	f7fe fcc4 	bl	8002d00 <HAL_RCC_OscConfig>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800437e:	f000 f8c1 	bl	8004504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004382:	230f      	movs	r3, #15
 8004384:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004386:	2300      	movs	r3, #0
 8004388:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800438e:	2300      	movs	r3, #0
 8004390:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004396:	1d3b      	adds	r3, r7, #4
 8004398:	2100      	movs	r1, #0
 800439a:	4618      	mov	r0, r3
 800439c:	f7fe ff32 	bl	8003204 <HAL_RCC_ClockConfig>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80043a6:	f000 f8ad 	bl	8004504 <Error_Handler>
  }
}
 80043aa:	bf00      	nop
 80043ac:	3740      	adds	r7, #64	@ 0x40
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80043b8:	4b12      	ldr	r3, [pc, #72]	@ (8004404 <MX_I2C1_Init+0x50>)
 80043ba:	4a13      	ldr	r2, [pc, #76]	@ (8004408 <MX_I2C1_Init+0x54>)
 80043bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80043be:	4b11      	ldr	r3, [pc, #68]	@ (8004404 <MX_I2C1_Init+0x50>)
 80043c0:	4a12      	ldr	r2, [pc, #72]	@ (800440c <MX_I2C1_Init+0x58>)
 80043c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80043c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004404 <MX_I2C1_Init+0x50>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80043ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004404 <MX_I2C1_Init+0x50>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80043d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004404 <MX_I2C1_Init+0x50>)
 80043d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80043d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80043d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004404 <MX_I2C1_Init+0x50>)
 80043da:	2200      	movs	r2, #0
 80043dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80043de:	4b09      	ldr	r3, [pc, #36]	@ (8004404 <MX_I2C1_Init+0x50>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80043e4:	4b07      	ldr	r3, [pc, #28]	@ (8004404 <MX_I2C1_Init+0x50>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80043ea:	4b06      	ldr	r3, [pc, #24]	@ (8004404 <MX_I2C1_Init+0x50>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80043f0:	4804      	ldr	r0, [pc, #16]	@ (8004404 <MX_I2C1_Init+0x50>)
 80043f2:	f7fd f971 	bl	80016d8 <HAL_I2C_Init>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80043fc:	f000 f882 	bl	8004504 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004400:	bf00      	nop
 8004402:	bd80      	pop	{r7, pc}
 8004404:	200001fc 	.word	0x200001fc
 8004408:	40005400 	.word	0x40005400
 800440c:	00061a80 	.word	0x00061a80

08004410 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004414:	4b11      	ldr	r3, [pc, #68]	@ (800445c <MX_USART3_UART_Init+0x4c>)
 8004416:	4a12      	ldr	r2, [pc, #72]	@ (8004460 <MX_USART3_UART_Init+0x50>)
 8004418:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800441a:	4b10      	ldr	r3, [pc, #64]	@ (800445c <MX_USART3_UART_Init+0x4c>)
 800441c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004420:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004422:	4b0e      	ldr	r3, [pc, #56]	@ (800445c <MX_USART3_UART_Init+0x4c>)
 8004424:	2200      	movs	r2, #0
 8004426:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004428:	4b0c      	ldr	r3, [pc, #48]	@ (800445c <MX_USART3_UART_Init+0x4c>)
 800442a:	2200      	movs	r2, #0
 800442c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800442e:	4b0b      	ldr	r3, [pc, #44]	@ (800445c <MX_USART3_UART_Init+0x4c>)
 8004430:	2200      	movs	r2, #0
 8004432:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004434:	4b09      	ldr	r3, [pc, #36]	@ (800445c <MX_USART3_UART_Init+0x4c>)
 8004436:	220c      	movs	r2, #12
 8004438:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800443a:	4b08      	ldr	r3, [pc, #32]	@ (800445c <MX_USART3_UART_Init+0x4c>)
 800443c:	2200      	movs	r2, #0
 800443e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004440:	4b06      	ldr	r3, [pc, #24]	@ (800445c <MX_USART3_UART_Init+0x4c>)
 8004442:	2200      	movs	r2, #0
 8004444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004446:	4805      	ldr	r0, [pc, #20]	@ (800445c <MX_USART3_UART_Init+0x4c>)
 8004448:	f7ff f86a 	bl	8003520 <HAL_UART_Init>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004452:	f000 f857 	bl	8004504 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004456:	bf00      	nop
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000250 	.word	0x20000250
 8004460:	40004800 	.word	0x40004800

08004464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800446a:	4b0e      	ldr	r3, [pc, #56]	@ (80044a4 <MX_GPIO_Init+0x40>)
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	4a0d      	ldr	r2, [pc, #52]	@ (80044a4 <MX_GPIO_Init+0x40>)
 8004470:	f043 0308 	orr.w	r3, r3, #8
 8004474:	6193      	str	r3, [r2, #24]
 8004476:	4b0b      	ldr	r3, [pc, #44]	@ (80044a4 <MX_GPIO_Init+0x40>)
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f003 0308 	and.w	r3, r3, #8
 800447e:	607b      	str	r3, [r7, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004482:	4b08      	ldr	r3, [pc, #32]	@ (80044a4 <MX_GPIO_Init+0x40>)
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	4a07      	ldr	r2, [pc, #28]	@ (80044a4 <MX_GPIO_Init+0x40>)
 8004488:	f043 0304 	orr.w	r3, r3, #4
 800448c:	6193      	str	r3, [r2, #24]
 800448e:	4b05      	ldr	r3, [pc, #20]	@ (80044a4 <MX_GPIO_Init+0x40>)
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr
 80044a4:	40021000 	.word	0x40021000

080044a8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a0e      	ldr	r2, [pc, #56]	@ (80044f0 <HAL_UART_RxCpltCallback+0x48>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d116      	bne.n	80044e8 <HAL_UART_RxCpltCallback+0x40>
        // Echo received config
        HAL_UART_Transmit(&huart3, (uint8_t*)"Received: ", 10, 100);
 80044ba:	2364      	movs	r3, #100	@ 0x64
 80044bc:	220a      	movs	r2, #10
 80044be:	490d      	ldr	r1, [pc, #52]	@ (80044f4 <HAL_UART_RxCpltCallback+0x4c>)
 80044c0:	480d      	ldr	r0, [pc, #52]	@ (80044f8 <HAL_UART_RxCpltCallback+0x50>)
 80044c2:	f7ff f87d 	bl	80035c0 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart3, config, 4, 100);
 80044c6:	2364      	movs	r3, #100	@ 0x64
 80044c8:	2204      	movs	r2, #4
 80044ca:	490c      	ldr	r1, [pc, #48]	@ (80044fc <HAL_UART_RxCpltCallback+0x54>)
 80044cc:	480a      	ldr	r0, [pc, #40]	@ (80044f8 <HAL_UART_RxCpltCallback+0x50>)
 80044ce:	f7ff f877 	bl	80035c0 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, 100);
 80044d2:	2364      	movs	r3, #100	@ 0x64
 80044d4:	2202      	movs	r2, #2
 80044d6:	490a      	ldr	r1, [pc, #40]	@ (8004500 <HAL_UART_RxCpltCallback+0x58>)
 80044d8:	4807      	ldr	r0, [pc, #28]	@ (80044f8 <HAL_UART_RxCpltCallback+0x50>)
 80044da:	f7ff f871 	bl	80035c0 <HAL_UART_Transmit>

        // to call interrupt again
        HAL_UART_Receive_IT(&huart3, config, 4);
 80044de:	2204      	movs	r2, #4
 80044e0:	4906      	ldr	r1, [pc, #24]	@ (80044fc <HAL_UART_RxCpltCallback+0x54>)
 80044e2:	4805      	ldr	r0, [pc, #20]	@ (80044f8 <HAL_UART_RxCpltCallback+0x50>)
 80044e4:	f7ff f8f7 	bl	80036d6 <HAL_UART_Receive_IT>
    }
}
 80044e8:	bf00      	nop
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40004800 	.word	0x40004800
 80044f4:	08008134 	.word	0x08008134
 80044f8:	20000250 	.word	0x20000250
 80044fc:	20000298 	.word	0x20000298
 8004500:	08008140 	.word	0x08008140

08004504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004508:	b672      	cpsid	i
}
 800450a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800450c:	bf00      	nop
 800450e:	e7fd      	b.n	800450c <Error_Handler+0x8>

08004510 <MPU6050_Init>:
#include <stdbool.h>
#include <string.h>


void MPU6050_Init (mpu6050_t *mpu6050, I2C_HandleTypeDef *hi2c1) // WHO AM I is to verify the identity of device
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af04      	add	r7, sp, #16
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint8_t check;
  uint8_t Data;
  mpu6050->_I2C = hi2c1;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	651a      	str	r2, [r3, #80]	@ 0x50

  HAL_I2C_Mem_Read (hi2c1, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, 1000);  // read WHO_AM_I
 8004520:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004524:	9302      	str	r3, [sp, #8]
 8004526:	2301      	movs	r3, #1
 8004528:	9301      	str	r3, [sp, #4]
 800452a:	f107 030f 	add.w	r3, r7, #15
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	2301      	movs	r3, #1
 8004532:	2275      	movs	r2, #117	@ 0x75
 8004534:	21d0      	movs	r1, #208	@ 0xd0
 8004536:	6838      	ldr	r0, [r7, #0]
 8004538:	f7fd fc0a 	bl	8001d50 <HAL_I2C_Mem_Read>

  HAL_Delay(100); // Small delay
 800453c:	2064      	movs	r0, #100	@ 0x64
 800453e:	f7fc fd63 	bl	8001008 <HAL_Delay>

   if (check == MPU6050_ADDR_WO_SHIFT)  // 0x68 will be returned by the sensor if everything goes well
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	2b68      	cmp	r3, #104	@ 0x68
 8004546:	f040 80a9 	bne.w	800469c <MPU6050_Init+0x18c>
  {
	  Data = 0x80; // Device reset
 800454a:	2380      	movs	r3, #128	@ 0x80
 800454c:	73bb      	strb	r3, [r7, #14]
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 1000);
 800454e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004552:	9302      	str	r3, [sp, #8]
 8004554:	2301      	movs	r3, #1
 8004556:	9301      	str	r3, [sp, #4]
 8004558:	f107 030e 	add.w	r3, r7, #14
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	2301      	movs	r3, #1
 8004560:	226b      	movs	r2, #107	@ 0x6b
 8004562:	21d0      	movs	r1, #208	@ 0xd0
 8004564:	6838      	ldr	r0, [r7, #0]
 8004566:	f7fd faf9 	bl	8001b5c <HAL_I2C_Mem_Write>
	  HAL_Delay(100);
 800456a:	2064      	movs	r0, #100	@ 0x64
 800456c:	f7fc fd4c 	bl	8001008 <HAL_Delay>

	  // Wake up and set clock source to PLL with X-axis gyro reference
	  Data = 0x01; // Use PLL with X-axis gyro, not internal oscillator
 8004570:	2301      	movs	r3, #1
 8004572:	73bb      	strb	r3, [r7, #14]
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 1000);
 8004574:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004578:	9302      	str	r3, [sp, #8]
 800457a:	2301      	movs	r3, #1
 800457c:	9301      	str	r3, [sp, #4]
 800457e:	f107 030e 	add.w	r3, r7, #14
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	2301      	movs	r3, #1
 8004586:	226b      	movs	r2, #107	@ 0x6b
 8004588:	21d0      	movs	r1, #208	@ 0xd0
 800458a:	6838      	ldr	r0, [r7, #0]
 800458c:	f7fd fae6 	bl	8001b5c <HAL_I2C_Mem_Write>
	  HAL_Delay(100);
 8004590:	2064      	movs	r0, #100	@ 0x64
 8004592:	f7fc fd39 	bl	8001008 <HAL_Delay>

	  // Ensure all sensors are enabled
	  Data = 0x00; // Enable all accelerometer and gyroscope axes
 8004596:	2300      	movs	r3, #0
 8004598:	73bb      	strb	r3, [r7, #14]
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, PWR_MGMT_2, 1, &Data, 1, 1000);
 800459a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800459e:	9302      	str	r3, [sp, #8]
 80045a0:	2301      	movs	r3, #1
 80045a2:	9301      	str	r3, [sp, #4]
 80045a4:	f107 030e 	add.w	r3, r7, #14
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	2301      	movs	r3, #1
 80045ac:	226c      	movs	r2, #108	@ 0x6c
 80045ae:	21d0      	movs	r1, #208	@ 0xd0
 80045b0:	6838      	ldr	r0, [r7, #0]
 80045b2:	f7fd fad3 	bl	8001b5c <HAL_I2C_Mem_Write>
	  HAL_Delay(50);
 80045b6:	2032      	movs	r0, #50	@ 0x32
 80045b8:	f7fc fd26 	bl	8001008 <HAL_Delay>

	  // Configure DLPF first (affects sample rate)
	  MPU6050_Configure_DLPF(hi2c1, 0x03); // 42Hz bandwidth instead of 0x01
 80045bc:	2103      	movs	r1, #3
 80045be:	6838      	ldr	r0, [r7, #0]
 80045c0:	f000 f888 	bl	80046d4 <MPU6050_Configure_DLPF>

	  // Set sample rate: Sample Rate = 1kHz / (1 + SMPLRT_DIV)
	  // For 100Hz: SMPLRT_DIV = 9
	  Data = 0x09; // 100Hz sample rate
 80045c4:	2309      	movs	r3, #9
 80045c6:	73bb      	strb	r3, [r7, #14]
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, SMPLRT_DIV, 1, &Data, 1, 1000);
 80045c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045cc:	9302      	str	r3, [sp, #8]
 80045ce:	2301      	movs	r3, #1
 80045d0:	9301      	str	r3, [sp, #4]
 80045d2:	f107 030e 	add.w	r3, r7, #14
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	2301      	movs	r3, #1
 80045da:	2219      	movs	r2, #25
 80045dc:	21d0      	movs	r1, #208	@ 0xd0
 80045de:	6838      	ldr	r0, [r7, #0]
 80045e0:	f7fd fabc 	bl	8001b5c <HAL_I2C_Mem_Write>

	  // Set accelerometer configuration in ACCEL_CONFIG Register
	  Data = 0x00;  // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> <strong>±</strong> 2g
 80045e4:	2300      	movs	r3, #0
 80045e6:	73bb      	strb	r3, [r7, #14]
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80045e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045ec:	9302      	str	r3, [sp, #8]
 80045ee:	2301      	movs	r3, #1
 80045f0:	9301      	str	r3, [sp, #4]
 80045f2:	f107 030e 	add.w	r3, r7, #14
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	2301      	movs	r3, #1
 80045fa:	221c      	movs	r2, #28
 80045fc:	21d0      	movs	r1, #208	@ 0xd0
 80045fe:	6838      	ldr	r0, [r7, #0]
 8004600:	f7fd faac 	bl	8001b5c <HAL_I2C_Mem_Write>

	  // Set Gyroscopic configuration in GYRO_CONFIG Register
	  Data = 0x00;  // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> <strong>±</strong> 250 ̐/s
 8004604:	2300      	movs	r3, #0
 8004606:	73bb      	strb	r3, [r7, #14]
	  HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8004608:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800460c:	9302      	str	r3, [sp, #8]
 800460e:	2301      	movs	r3, #1
 8004610:	9301      	str	r3, [sp, #4]
 8004612:	f107 030e 	add.w	r3, r7, #14
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	2301      	movs	r3, #1
 800461a:	221b      	movs	r2, #27
 800461c:	21d0      	movs	r1, #208	@ 0xd0
 800461e:	6838      	ldr	r0, [r7, #0]
 8004620:	f7fd fa9c 	bl	8001b5c <HAL_I2C_Mem_Write>
	  mpu6050->isInit = true;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

	  mpu6050->accelerometer.Ax = 0;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f04f 0200 	mov.w	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
	  mpu6050->accelerometer.Ay = 0;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	605a      	str	r2, [r3, #4]
	  mpu6050->accelerometer.Az = 0;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	609a      	str	r2, [r3, #8]
	  memset(mpu6050->accelerometer.offsetXYZ, 0, 3 * sizeof(float));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	330c      	adds	r3, #12
 8004648:	220c      	movs	r2, #12
 800464a:	2100      	movs	r1, #0
 800464c:	4618      	mov	r0, r3
 800464e:	f001 fc6e 	bl	8005f2e <memset>
	  memset(mpu6050->accelerometer.scaleXYZ, 1, 3 * sizeof(float));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	3318      	adds	r3, #24
 8004656:	220c      	movs	r2, #12
 8004658:	2101      	movs	r1, #1
 800465a:	4618      	mov	r0, r3
 800465c:	f001 fc67 	bl	8005f2e <memset>

	  mpu6050->gyroscope.Gx = 0;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	625a      	str	r2, [r3, #36]	@ 0x24
	  mpu6050->gyroscope.Gy = 0;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	629a      	str	r2, [r3, #40]	@ 0x28
	  mpu6050->gyroscope.Gz = 0;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	62da      	str	r2, [r3, #44]	@ 0x2c
	  memset(mpu6050->gyroscope.offsetXYZ, 0, 3 * sizeof(float));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3330      	adds	r3, #48	@ 0x30
 800467c:	220c      	movs	r2, #12
 800467e:	2100      	movs	r1, #0
 8004680:	4618      	mov	r0, r3
 8004682:	f001 fc54 	bl	8005f2e <memset>
	  memset(mpu6050->gyroscope.scaleXYZ, 1, 3 * sizeof(float));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	333c      	adds	r3, #60	@ 0x3c
 800468a:	220c      	movs	r2, #12
 800468c:	2101      	movs	r1, #1
 800468e:	4618      	mov	r0, r3
 8004690:	f001 fc4d 	bl	8005f2e <memset>

	  mpu6050->temperature = 0;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	649a      	str	r2, [r3, #72]	@ 0x48

  }
}
 800469c:	bf00      	nop
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <MPU6050_Set_Accel_Offset_Scale>:

void MPU6050_Set_Accel_Offset_Scale (mpu6050_t *mpu6050, float* offsetXYZ, float* scaleXYZ) {
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
	memcpy(mpu6050->accelerometer.offsetXYZ, offsetXYZ, 3*sizeof(float));
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	330c      	adds	r3, #12
 80046b4:	220c      	movs	r2, #12
 80046b6:	68b9      	ldr	r1, [r7, #8]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f001 fcc6 	bl	800604a <memcpy>
	memcpy(mpu6050->accelerometer.scaleXYZ, scaleXYZ, 3*sizeof(float));
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3318      	adds	r3, #24
 80046c2:	220c      	movs	r2, #12
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f001 fcbf 	bl	800604a <memcpy>
}
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <MPU6050_Configure_DLPF>:
	memcpy(mpu6050->gyroscope.offsetXYZ, offsetXYZ, 3*sizeof(float));
	memcpy(mpu6050->gyroscope.scaleXYZ, scaleXYZ, 3*sizeof(float));
}

void MPU6050_Configure_DLPF(I2C_HandleTypeDef *hi2c1, uint8_t dlpf_value)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af04      	add	r7, sp, #16
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	70fb      	strb	r3, [r7, #3]
    // Configure DLPF - Register 0x1A (CONFIG)
    // dlpf_value: 1=188Hz, 2=98Hz, 3=42Hz, 4=20Hz, 5=10Hz, 6=5Hz
    HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, CONFIG, 1, &dlpf_value, 1, 1000);
 80046e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046e4:	9302      	str	r3, [sp, #8]
 80046e6:	2301      	movs	r3, #1
 80046e8:	9301      	str	r3, [sp, #4]
 80046ea:	1cfb      	adds	r3, r7, #3
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	2301      	movs	r3, #1
 80046f0:	221a      	movs	r2, #26
 80046f2:	21d0      	movs	r1, #208	@ 0xd0
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7fd fa31 	bl	8001b5c <HAL_I2C_Mem_Write>
}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <MPU6050_Reset_FIFO>:

void MPU6050_Reset_FIFO(mpu6050_t *mpu6050) {
 8004702:	b580      	push	{r7, lr}
 8004704:	b088      	sub	sp, #32
 8004706:	af04      	add	r7, sp, #16
 8004708:	6078      	str	r0, [r7, #4]
    uint8_t current_value = 0x00;
 800470a:	2300      	movs	r3, #0
 800470c:	72fb      	strb	r3, [r7, #11]
    I2C_HandleTypeDef* hi2c1 = mpu6050->_I2C;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004712:	60fb      	str	r3, [r7, #12]
    // Read current USER_CTRL register
    HAL_I2C_Mem_Read(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 8004714:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004718:	9302      	str	r3, [sp, #8]
 800471a:	2301      	movs	r3, #1
 800471c:	9301      	str	r3, [sp, #4]
 800471e:	f107 030b 	add.w	r3, r7, #11
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	2301      	movs	r3, #1
 8004726:	226a      	movs	r2, #106	@ 0x6a
 8004728:	21d0      	movs	r1, #208	@ 0xd0
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f7fd fb10 	bl	8001d50 <HAL_I2C_Mem_Read>

    // Disable FIFO
    // In that way we remember what registers were on previously and "switch" only one bit
    current_value &= ~0x40; // Clear FIFO_EN bit
 8004730:	7afb      	ldrb	r3, [r7, #11]
 8004732:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004736:	b2db      	uxtb	r3, r3
 8004738:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 800473a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800473e:	9302      	str	r3, [sp, #8]
 8004740:	2301      	movs	r3, #1
 8004742:	9301      	str	r3, [sp, #4]
 8004744:	f107 030b 	add.w	r3, r7, #11
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	2301      	movs	r3, #1
 800474c:	226a      	movs	r2, #106	@ 0x6a
 800474e:	21d0      	movs	r1, #208	@ 0xd0
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f7fd fa03 	bl	8001b5c <HAL_I2C_Mem_Write>
    HAL_Delay(1);
 8004756:	2001      	movs	r0, #1
 8004758:	f7fc fc56 	bl	8001008 <HAL_Delay>

    // Reset FIFO
    current_value |= 0x04; // Set FIFO_RESET bit
 800475c:	7afb      	ldrb	r3, [r7, #11]
 800475e:	f043 0304 	orr.w	r3, r3, #4
 8004762:	b2db      	uxtb	r3, r3
 8004764:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 8004766:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800476a:	9302      	str	r3, [sp, #8]
 800476c:	2301      	movs	r3, #1
 800476e:	9301      	str	r3, [sp, #4]
 8004770:	f107 030b 	add.w	r3, r7, #11
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	2301      	movs	r3, #1
 8004778:	226a      	movs	r2, #106	@ 0x6a
 800477a:	21d0      	movs	r1, #208	@ 0xd0
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f7fd f9ed 	bl	8001b5c <HAL_I2C_Mem_Write>
    HAL_Delay(1);
 8004782:	2001      	movs	r0, #1
 8004784:	f7fc fc40 	bl	8001008 <HAL_Delay>

    // Clear reset bit and re-enable FIFO
    // Here after we reseted FIFO we set this bit to 0 again but "remembering"  what value was stored
    current_value &= ~0x04; // Clear FIFO_RESET bit
 8004788:	7afb      	ldrb	r3, [r7, #11]
 800478a:	f023 0304 	bic.w	r3, r3, #4
 800478e:	b2db      	uxtb	r3, r3
 8004790:	72fb      	strb	r3, [r7, #11]
    current_value |= 0x40;  // Set FIFO_EN bit
 8004792:	7afb      	ldrb	r3, [r7, #11]
 8004794:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004798:	b2db      	uxtb	r3, r3
 800479a:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 800479c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047a0:	9302      	str	r3, [sp, #8]
 80047a2:	2301      	movs	r3, #1
 80047a4:	9301      	str	r3, [sp, #4]
 80047a6:	f107 030b 	add.w	r3, r7, #11
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	2301      	movs	r3, #1
 80047ae:	226a      	movs	r2, #106	@ 0x6a
 80047b0:	21d0      	movs	r1, #208	@ 0xd0
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f7fd f9d2 	bl	8001b5c <HAL_I2C_Mem_Write>
}
 80047b8:	bf00      	nop
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <MPU6050_Enable_FIFO>:
	float Gz = (float)Gyro_Z_RAW/LSB_SENSITIVITY_GYRO;
	mpu6050->gyroscope.Gz = Gz;
	return Gz;
}

void MPU6050_Enable_FIFO(mpu6050_t *mpu6050) {
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af04      	add	r7, sp, #16
 80047c6:	6078      	str	r0, [r7, #4]
	I2C_HandleTypeDef* hi2c1 = mpu6050->_I2C;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047cc:	60fb      	str	r3, [r7, #12]
    uint8_t current_value;
    // Read current USER_CTRL register value
    HAL_I2C_Mem_Read(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 80047ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047d2:	9302      	str	r3, [sp, #8]
 80047d4:	2301      	movs	r3, #1
 80047d6:	9301      	str	r3, [sp, #4]
 80047d8:	f107 030b 	add.w	r3, r7, #11
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	2301      	movs	r3, #1
 80047e0:	226a      	movs	r2, #106	@ 0x6a
 80047e2:	21d0      	movs	r1, #208	@ 0xd0
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f7fd fab3 	bl	8001d50 <HAL_I2C_Mem_Read>

    // Set FIFO_EN bit (bit 6) while preserving other bits
    current_value |= 0x40;
 80047ea:	7afb      	ldrb	r3, [r7, #11]
 80047ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, USER_CTRL, 1, &current_value, 1, 1000);
 80047f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047f8:	9302      	str	r3, [sp, #8]
 80047fa:	2301      	movs	r3, #1
 80047fc:	9301      	str	r3, [sp, #4]
 80047fe:	f107 030b 	add.w	r3, r7, #11
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	2301      	movs	r3, #1
 8004806:	226a      	movs	r2, #106	@ 0x6a
 8004808:	21d0      	movs	r1, #208	@ 0xd0
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7fd f9a6 	bl	8001b5c <HAL_I2C_Mem_Write>
}
 8004810:	bf00      	nop
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <MPU6050_configure_Fifo>:

void MPU6050_configure_Fifo (mpu6050_t *mpu6050) // temperature is first 1, next 111 is enable gyroscope from Gx to Gz, and last 1 is for acceleration (000 is about i2c slaves - not relevant in my case)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b088      	sub	sp, #32
 800481c:	af04      	add	r7, sp, #16
 800481e:	6078      	str	r0, [r7, #4]
	I2C_HandleTypeDef* hi2c1 = mpu6050->_I2C;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004824:	60fb      	str	r3, [r7, #12]
	uint8_t Data = 0xF8; // To enable fifo on Temperature, gyro and accel (1111 1000)
 8004826:	23f8      	movs	r3, #248	@ 0xf8
 8004828:	72fb      	strb	r3, [r7, #11]
	// If want to change Data to read different in FIFO DON'T FORGET to change FIFO_SAMPLE_SIZE in mpu6050.h
	HAL_I2C_Mem_Write (hi2c1, MPU6050_ADDR, FIFO_ENABLE, 1, &Data, 1, 1000); // 1 byte to transmit
 800482a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800482e:	9302      	str	r3, [sp, #8]
 8004830:	2301      	movs	r3, #1
 8004832:	9301      	str	r3, [sp, #4]
 8004834:	f107 030b 	add.w	r3, r7, #11
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	2301      	movs	r3, #1
 800483c:	2223      	movs	r2, #35	@ 0x23
 800483e:	21d0      	movs	r1, #208	@ 0xd0
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f7fd f98b 	bl	8001b5c <HAL_I2C_Mem_Write>
}
 8004846:	bf00      	nop
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <MPU6050_Get_FIFO_Count>:

uint16_t MPU6050_Get_FIFO_Count (mpu6050_t *mpu6050)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b088      	sub	sp, #32
 8004852:	af04      	add	r7, sp, #16
 8004854:	6078      	str	r0, [r7, #4]
	I2C_HandleTypeDef* hi2c1 = mpu6050->_I2C;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800485a:	60fb      	str	r3, [r7, #12]
    uint8_t Data_H, Data_L;
    uint16_t FIFO_Count;

    // Read FIFO_COUNT_H first (this updates both registers)
    HAL_I2C_Mem_Read(hi2c1, MPU6050_ADDR, FIFO_COUNT_H, 1, &Data_H, 1, 1000);
 800485c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004860:	9302      	str	r3, [sp, #8]
 8004862:	2301      	movs	r3, #1
 8004864:	9301      	str	r3, [sp, #4]
 8004866:	f107 0309 	add.w	r3, r7, #9
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	2301      	movs	r3, #1
 800486e:	2272      	movs	r2, #114	@ 0x72
 8004870:	21d0      	movs	r1, #208	@ 0xd0
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f7fd fa6c 	bl	8001d50 <HAL_I2C_Mem_Read>
    // Then read FIFO_COUNT_L
    HAL_I2C_Mem_Read(hi2c1, MPU6050_ADDR, FIFO_COUNT_L, 1, &Data_L, 1, 1000);
 8004878:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800487c:	9302      	str	r3, [sp, #8]
 800487e:	2301      	movs	r3, #1
 8004880:	9301      	str	r3, [sp, #4]
 8004882:	f107 0308 	add.w	r3, r7, #8
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	2301      	movs	r3, #1
 800488a:	2273      	movs	r2, #115	@ 0x73
 800488c:	21d0      	movs	r1, #208	@ 0xd0
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f7fd fa5e 	bl	8001d50 <HAL_I2C_Mem_Read>

    FIFO_Count = (Data_H << 8) | Data_L; // same trick with assembling data from low and high register
 8004894:	7a7b      	ldrb	r3, [r7, #9]
 8004896:	b21b      	sxth	r3, r3
 8004898:	021b      	lsls	r3, r3, #8
 800489a:	b21a      	sxth	r2, r3
 800489c:	7a3b      	ldrb	r3, [r7, #8]
 800489e:	b21b      	sxth	r3, r3
 80048a0:	4313      	orrs	r3, r2
 80048a2:	b21b      	sxth	r3, r3
 80048a4:	817b      	strh	r3, [r7, #10]
    return FIFO_Count;
 80048a6:	897b      	ldrh	r3, [r7, #10]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <MPU6050_Read_Fifo>:

void MPU6050_Read_Fifo(mpu6050_t *mpu6050) {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b092      	sub	sp, #72	@ 0x48
 80048b4:	af04      	add	r7, sp, #16
 80048b6:	6078      	str	r0, [r7, #4]
	I2C_HandleTypeDef* hi2c1 = mpu6050->_I2C;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    uint8_t fifo_buffer[FIFO_SAMPLE_SIZE];
    uint16_t fifo_count = MPU6050_Get_FIFO_Count(mpu6050);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7ff ffc5 	bl	800484e <MPU6050_Get_FIFO_Count>
 80048c4:	4603      	mov	r3, r0
 80048c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
    int16_t raw_data[FIFO_SAMPLE_SIZE / 2];
    // Check for FIFO overflow
    if (fifo_count >= 1024) {
 80048c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80048ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ce:	d306      	bcc.n	80048de <MPU6050_Read_Fifo+0x2e>
        MPU6050_Reset_FIFO(mpu6050);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7ff ff16 	bl	8004702 <MPU6050_Reset_FIFO>
        HAL_Delay(100); // Allow time for new data
 80048d6:	2064      	movs	r0, #100	@ 0x64
 80048d8:	f7fc fb96 	bl	8001008 <HAL_Delay>
 80048dc:	e10b      	b.n	8004af6 <MPU6050_Read_Fifo+0x246>
        return;
    }

    // Only read if we have at least one complete sample
    if (fifo_count >= FIFO_SAMPLE_SIZE) {
 80048de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80048e0:	2b0d      	cmp	r3, #13
 80048e2:	f240 8108 	bls.w	8004af6 <MPU6050_Read_Fifo+0x246>
        // Read multiple samples if available to prevent overflow
        while (fifo_count >= FIFO_SAMPLE_SIZE && fifo_count < 1024) {
 80048e6:	e0fe      	b.n	8004ae6 <MPU6050_Read_Fifo+0x236>
            HAL_I2C_Mem_Read(hi2c1, MPU6050_ADDR, FIFO_R_W, 1,
 80048e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048ec:	9302      	str	r3, [sp, #8]
 80048ee:	230e      	movs	r3, #14
 80048f0:	9301      	str	r3, [sp, #4]
 80048f2:	f107 031c 	add.w	r3, r7, #28
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	2301      	movs	r3, #1
 80048fa:	2274      	movs	r2, #116	@ 0x74
 80048fc:	21d0      	movs	r1, #208	@ 0xd0
 80048fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004900:	f7fd fa26 	bl	8001d50 <HAL_I2C_Mem_Read>
                           fifo_buffer, FIFO_SAMPLE_SIZE, 1000);

            // Process the data (your existing processing code)
            for (int i = 0; i < FIFO_SAMPLE_SIZE / 2; i++) {
 8004904:	2300      	movs	r3, #0
 8004906:	633b      	str	r3, [r7, #48]	@ 0x30
 8004908:	e01b      	b.n	8004942 <MPU6050_Read_Fifo+0x92>
                raw_data[i] = (int16_t)((fifo_buffer[2 * i] << 8) |
 800490a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	3338      	adds	r3, #56	@ 0x38
 8004910:	443b      	add	r3, r7
 8004912:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004916:	b21b      	sxth	r3, r3
 8004918:	021b      	lsls	r3, r3, #8
 800491a:	b21a      	sxth	r2, r3
                                      fifo_buffer[2 * i + 1]);
 800491c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	3301      	adds	r3, #1
 8004922:	3338      	adds	r3, #56	@ 0x38
 8004924:	443b      	add	r3, r7
 8004926:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800492a:	b21b      	sxth	r3, r3
                raw_data[i] = (int16_t)((fifo_buffer[2 * i] << 8) |
 800492c:	4313      	orrs	r3, r2
 800492e:	b21a      	sxth	r2, r3
 8004930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	3338      	adds	r3, #56	@ 0x38
 8004936:	443b      	add	r3, r7
 8004938:	f823 2c2c 	strh.w	r2, [r3, #-44]
            for (int i = 0; i < FIFO_SAMPLE_SIZE / 2; i++) {
 800493c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493e:	3301      	adds	r3, #1
 8004940:	633b      	str	r3, [r7, #48]	@ 0x30
 8004942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004944:	2b06      	cmp	r3, #6
 8004946:	dde0      	ble.n	800490a <MPU6050_Read_Fifo+0x5a>
            }

            mpu6050->accelerometer.Ax = (((float)raw_data[0] / LSB_SENSITIVITY_ACC) - mpu6050->accelerometer.offsetXYZ[0])/mpu6050->accelerometer.scaleXYZ[0];
 8004948:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800494c:	4618      	mov	r0, r3
 800494e:	f7fc f955 	bl	8000bfc <__aeabi_i2f>
 8004952:	4603      	mov	r3, r0
 8004954:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8004958:	4618      	mov	r0, r3
 800495a:	f7fc fa57 	bl	8000e0c <__aeabi_fdiv>
 800495e:	4603      	mov	r3, r0
 8004960:	461a      	mov	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	4619      	mov	r1, r3
 8004968:	4610      	mov	r0, r2
 800496a:	f7fc f891 	bl	8000a90 <__aeabi_fsub>
 800496e:	4603      	mov	r3, r0
 8004970:	461a      	mov	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	4619      	mov	r1, r3
 8004978:	4610      	mov	r0, r2
 800497a:	f7fc fa47 	bl	8000e0c <__aeabi_fdiv>
 800497e:	4603      	mov	r3, r0
 8004980:	461a      	mov	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	601a      	str	r2, [r3, #0]
            mpu6050->accelerometer.Ay = (((float)raw_data[1] / LSB_SENSITIVITY_ACC) - mpu6050->accelerometer.offsetXYZ[1])/mpu6050->accelerometer.scaleXYZ[1];
 8004986:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800498a:	4618      	mov	r0, r3
 800498c:	f7fc f936 	bl	8000bfc <__aeabi_i2f>
 8004990:	4603      	mov	r3, r0
 8004992:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8004996:	4618      	mov	r0, r3
 8004998:	f7fc fa38 	bl	8000e0c <__aeabi_fdiv>
 800499c:	4603      	mov	r3, r0
 800499e:	461a      	mov	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	4619      	mov	r1, r3
 80049a6:	4610      	mov	r0, r2
 80049a8:	f7fc f872 	bl	8000a90 <__aeabi_fsub>
 80049ac:	4603      	mov	r3, r0
 80049ae:	461a      	mov	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	4619      	mov	r1, r3
 80049b6:	4610      	mov	r0, r2
 80049b8:	f7fc fa28 	bl	8000e0c <__aeabi_fdiv>
 80049bc:	4603      	mov	r3, r0
 80049be:	461a      	mov	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	605a      	str	r2, [r3, #4]
            mpu6050->accelerometer.Az = (((float)raw_data[2] / LSB_SENSITIVITY_ACC) - mpu6050->accelerometer.offsetXYZ[2])/mpu6050->accelerometer.scaleXYZ[2];
 80049c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fc f917 	bl	8000bfc <__aeabi_i2f>
 80049ce:	4603      	mov	r3, r0
 80049d0:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fc fa19 	bl	8000e0c <__aeabi_fdiv>
 80049da:	4603      	mov	r3, r0
 80049dc:	461a      	mov	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	4619      	mov	r1, r3
 80049e4:	4610      	mov	r0, r2
 80049e6:	f7fc f853 	bl	8000a90 <__aeabi_fsub>
 80049ea:	4603      	mov	r3, r0
 80049ec:	461a      	mov	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	4619      	mov	r1, r3
 80049f4:	4610      	mov	r0, r2
 80049f6:	f7fc fa09 	bl	8000e0c <__aeabi_fdiv>
 80049fa:	4603      	mov	r3, r0
 80049fc:	461a      	mov	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	609a      	str	r2, [r3, #8]

            mpu6050->temperature      = ((float)raw_data[3] / 340.0f) + 36.53f;
 8004a02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fc f8f8 	bl	8000bfc <__aeabi_i2f>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	493b      	ldr	r1, [pc, #236]	@ (8004afc <MPU6050_Read_Fifo+0x24c>)
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fc f9fb 	bl	8000e0c <__aeabi_fdiv>
 8004a16:	4603      	mov	r3, r0
 8004a18:	4939      	ldr	r1, [pc, #228]	@ (8004b00 <MPU6050_Read_Fifo+0x250>)
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fc f83a 	bl	8000a94 <__addsf3>
 8004a20:	4603      	mov	r3, r0
 8004a22:	461a      	mov	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	649a      	str	r2, [r3, #72]	@ 0x48

            mpu6050->gyroscope.Gx     = (((float)raw_data[4] / LSB_SENSITIVITY_GYRO) - mpu6050->gyroscope.offsetXYZ[0])/mpu6050->gyroscope.scaleXYZ[0];
 8004a28:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fc f8e5 	bl	8000bfc <__aeabi_i2f>
 8004a32:	4603      	mov	r3, r0
 8004a34:	4933      	ldr	r1, [pc, #204]	@ (8004b04 <MPU6050_Read_Fifo+0x254>)
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fc f9e8 	bl	8000e0c <__aeabi_fdiv>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	461a      	mov	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a44:	4619      	mov	r1, r3
 8004a46:	4610      	mov	r0, r2
 8004a48:	f7fc f822 	bl	8000a90 <__aeabi_fsub>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	461a      	mov	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a54:	4619      	mov	r1, r3
 8004a56:	4610      	mov	r0, r2
 8004a58:	f7fc f9d8 	bl	8000e0c <__aeabi_fdiv>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	461a      	mov	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	625a      	str	r2, [r3, #36]	@ 0x24
            mpu6050->gyroscope.Gy     = (((float)raw_data[5] / LSB_SENSITIVITY_GYRO) - mpu6050->gyroscope.offsetXYZ[1])/mpu6050->gyroscope.scaleXYZ[1];
 8004a64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fc f8c7 	bl	8000bfc <__aeabi_i2f>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	4924      	ldr	r1, [pc, #144]	@ (8004b04 <MPU6050_Read_Fifo+0x254>)
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fc f9ca 	bl	8000e0c <__aeabi_fdiv>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a80:	4619      	mov	r1, r3
 8004a82:	4610      	mov	r0, r2
 8004a84:	f7fc f804 	bl	8000a90 <__aeabi_fsub>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a90:	4619      	mov	r1, r3
 8004a92:	4610      	mov	r0, r2
 8004a94:	f7fc f9ba 	bl	8000e0c <__aeabi_fdiv>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	629a      	str	r2, [r3, #40]	@ 0x28
            mpu6050->gyroscope.Gz     = (((float)raw_data[6] / LSB_SENSITIVITY_GYRO) - mpu6050->gyroscope.offsetXYZ[2])/mpu6050->gyroscope.scaleXYZ[2];
 8004aa0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fc f8a9 	bl	8000bfc <__aeabi_i2f>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	4915      	ldr	r1, [pc, #84]	@ (8004b04 <MPU6050_Read_Fifo+0x254>)
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fc f9ac 	bl	8000e0c <__aeabi_fdiv>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004abc:	4619      	mov	r1, r3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	f7fb ffe6 	bl	8000a90 <__aeabi_fsub>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004acc:	4619      	mov	r1, r3
 8004ace:	4610      	mov	r0, r2
 8004ad0:	f7fc f99c 	bl	8000e0c <__aeabi_fdiv>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	62da      	str	r2, [r3, #44]	@ 0x2c

            // Check remaining FIFO count
            fifo_count = MPU6050_Get_FIFO_Count(mpu6050);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff feb6 	bl	800484e <MPU6050_Get_FIFO_Count>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        while (fifo_count >= FIFO_SAMPLE_SIZE && fifo_count < 1024) {
 8004ae6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004ae8:	2b0d      	cmp	r3, #13
 8004aea:	d904      	bls.n	8004af6 <MPU6050_Read_Fifo+0x246>
 8004aec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004aee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004af2:	f4ff aef9 	bcc.w	80048e8 <MPU6050_Read_Fifo+0x38>
        }
    }
}
 8004af6:	3738      	adds	r7, #56	@ 0x38
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	43aa0000 	.word	0x43aa0000
 8004b00:	42121eb8 	.word	0x42121eb8
 8004b04:	43030000 	.word	0x43030000

08004b08 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8004b0e:	f000 fa17 	bl	8004f40 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8004b12:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8004b16:	2201      	movs	r2, #1
 8004b18:	2178      	movs	r1, #120	@ 0x78
 8004b1a:	4858      	ldr	r0, [pc, #352]	@ (8004c7c <SSD1306_Init+0x174>)
 8004b1c:	f7fd fb8c 	bl	8002238 <HAL_I2C_IsDeviceReady>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8004b26:	2300      	movs	r3, #0
 8004b28:	e0a4      	b.n	8004c74 <SSD1306_Init+0x16c>
	}

	/* A little delay */
	uint32_t p = 2500;
 8004b2a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8004b2e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004b30:	e002      	b.n	8004b38 <SSD1306_Init+0x30>
		p--;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f9      	bne.n	8004b32 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8004b3e:	22ae      	movs	r2, #174	@ 0xae
 8004b40:	2100      	movs	r1, #0
 8004b42:	2078      	movs	r0, #120	@ 0x78
 8004b44:	f000 fa6c 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8004b48:	2220      	movs	r2, #32
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	2078      	movs	r0, #120	@ 0x78
 8004b4e:	f000 fa67 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8004b52:	2210      	movs	r2, #16
 8004b54:	2100      	movs	r1, #0
 8004b56:	2078      	movs	r0, #120	@ 0x78
 8004b58:	f000 fa62 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004b5c:	22b0      	movs	r2, #176	@ 0xb0
 8004b5e:	2100      	movs	r1, #0
 8004b60:	2078      	movs	r0, #120	@ 0x78
 8004b62:	f000 fa5d 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8004b66:	22c8      	movs	r2, #200	@ 0xc8
 8004b68:	2100      	movs	r1, #0
 8004b6a:	2078      	movs	r0, #120	@ 0x78
 8004b6c:	f000 fa58 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8004b70:	2200      	movs	r2, #0
 8004b72:	2100      	movs	r1, #0
 8004b74:	2078      	movs	r0, #120	@ 0x78
 8004b76:	f000 fa53 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8004b7a:	2210      	movs	r2, #16
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	2078      	movs	r0, #120	@ 0x78
 8004b80:	f000 fa4e 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8004b84:	2240      	movs	r2, #64	@ 0x40
 8004b86:	2100      	movs	r1, #0
 8004b88:	2078      	movs	r0, #120	@ 0x78
 8004b8a:	f000 fa49 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8004b8e:	2281      	movs	r2, #129	@ 0x81
 8004b90:	2100      	movs	r1, #0
 8004b92:	2078      	movs	r0, #120	@ 0x78
 8004b94:	f000 fa44 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8004b98:	22ff      	movs	r2, #255	@ 0xff
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	2078      	movs	r0, #120	@ 0x78
 8004b9e:	f000 fa3f 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8004ba2:	22a1      	movs	r2, #161	@ 0xa1
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	2078      	movs	r0, #120	@ 0x78
 8004ba8:	f000 fa3a 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8004bac:	22a6      	movs	r2, #166	@ 0xa6
 8004bae:	2100      	movs	r1, #0
 8004bb0:	2078      	movs	r0, #120	@ 0x78
 8004bb2:	f000 fa35 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8004bb6:	22a8      	movs	r2, #168	@ 0xa8
 8004bb8:	2100      	movs	r1, #0
 8004bba:	2078      	movs	r0, #120	@ 0x78
 8004bbc:	f000 fa30 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8004bc0:	223f      	movs	r2, #63	@ 0x3f
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	2078      	movs	r0, #120	@ 0x78
 8004bc6:	f000 fa2b 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004bca:	22a4      	movs	r2, #164	@ 0xa4
 8004bcc:	2100      	movs	r1, #0
 8004bce:	2078      	movs	r0, #120	@ 0x78
 8004bd0:	f000 fa26 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8004bd4:	22d3      	movs	r2, #211	@ 0xd3
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	2078      	movs	r0, #120	@ 0x78
 8004bda:	f000 fa21 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8004bde:	2200      	movs	r2, #0
 8004be0:	2100      	movs	r1, #0
 8004be2:	2078      	movs	r0, #120	@ 0x78
 8004be4:	f000 fa1c 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8004be8:	22d5      	movs	r2, #213	@ 0xd5
 8004bea:	2100      	movs	r1, #0
 8004bec:	2078      	movs	r0, #120	@ 0x78
 8004bee:	f000 fa17 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8004bf2:	22f0      	movs	r2, #240	@ 0xf0
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	2078      	movs	r0, #120	@ 0x78
 8004bf8:	f000 fa12 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8004bfc:	22d9      	movs	r2, #217	@ 0xd9
 8004bfe:	2100      	movs	r1, #0
 8004c00:	2078      	movs	r0, #120	@ 0x78
 8004c02:	f000 fa0d 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8004c06:	2222      	movs	r2, #34	@ 0x22
 8004c08:	2100      	movs	r1, #0
 8004c0a:	2078      	movs	r0, #120	@ 0x78
 8004c0c:	f000 fa08 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8004c10:	22da      	movs	r2, #218	@ 0xda
 8004c12:	2100      	movs	r1, #0
 8004c14:	2078      	movs	r0, #120	@ 0x78
 8004c16:	f000 fa03 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8004c1a:	2212      	movs	r2, #18
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	2078      	movs	r0, #120	@ 0x78
 8004c20:	f000 f9fe 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8004c24:	22db      	movs	r2, #219	@ 0xdb
 8004c26:	2100      	movs	r1, #0
 8004c28:	2078      	movs	r0, #120	@ 0x78
 8004c2a:	f000 f9f9 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8004c2e:	2220      	movs	r2, #32
 8004c30:	2100      	movs	r1, #0
 8004c32:	2078      	movs	r0, #120	@ 0x78
 8004c34:	f000 f9f4 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8004c38:	228d      	movs	r2, #141	@ 0x8d
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	2078      	movs	r0, #120	@ 0x78
 8004c3e:	f000 f9ef 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8004c42:	2214      	movs	r2, #20
 8004c44:	2100      	movs	r1, #0
 8004c46:	2078      	movs	r0, #120	@ 0x78
 8004c48:	f000 f9ea 	bl	8005020 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8004c4c:	22af      	movs	r2, #175	@ 0xaf
 8004c4e:	2100      	movs	r1, #0
 8004c50:	2078      	movs	r0, #120	@ 0x78
 8004c52:	f000 f9e5 	bl	8005020 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8004c56:	2000      	movs	r0, #0
 8004c58:	f000 f842 	bl	8004ce0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8004c5c:	f000 f812 	bl	8004c84 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8004c60:	4b07      	ldr	r3, [pc, #28]	@ (8004c80 <SSD1306_Init+0x178>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8004c66:	4b06      	ldr	r3, [pc, #24]	@ (8004c80 <SSD1306_Init+0x178>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8004c6c:	4b04      	ldr	r3, [pc, #16]	@ (8004c80 <SSD1306_Init+0x178>)
 8004c6e:	2201      	movs	r2, #1
 8004c70:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8004c72:	2301      	movs	r3, #1
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	200001fc 	.word	0x200001fc
 8004c80:	2000069c 	.word	0x2000069c

08004c84 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	71fb      	strb	r3, [r7, #7]
 8004c8e:	e01d      	b.n	8004ccc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8004c90:	79fb      	ldrb	r3, [r7, #7]
 8004c92:	3b50      	subs	r3, #80	@ 0x50
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	2100      	movs	r1, #0
 8004c9a:	2078      	movs	r0, #120	@ 0x78
 8004c9c:	f000 f9c0 	bl	8005020 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	2078      	movs	r0, #120	@ 0x78
 8004ca6:	f000 f9bb 	bl	8005020 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8004caa:	2210      	movs	r2, #16
 8004cac:	2100      	movs	r1, #0
 8004cae:	2078      	movs	r0, #120	@ 0x78
 8004cb0:	f000 f9b6 	bl	8005020 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	01db      	lsls	r3, r3, #7
 8004cb8:	4a08      	ldr	r2, [pc, #32]	@ (8004cdc <SSD1306_UpdateScreen+0x58>)
 8004cba:	441a      	add	r2, r3
 8004cbc:	2380      	movs	r3, #128	@ 0x80
 8004cbe:	2140      	movs	r1, #64	@ 0x40
 8004cc0:	2078      	movs	r0, #120	@ 0x78
 8004cc2:	f000 f951 	bl	8004f68 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	71fb      	strb	r3, [r7, #7]
 8004ccc:	79fb      	ldrb	r3, [r7, #7]
 8004cce:	2b07      	cmp	r3, #7
 8004cd0:	d9de      	bls.n	8004c90 <SSD1306_UpdateScreen+0xc>
	}
}
 8004cd2:	bf00      	nop
 8004cd4:	bf00      	nop
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	2000029c 	.word	0x2000029c

08004ce0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004cea:	79fb      	ldrb	r3, [r7, #7]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <SSD1306_Fill+0x14>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	e000      	b.n	8004cf6 <SSD1306_Fill+0x16>
 8004cf4:	23ff      	movs	r3, #255	@ 0xff
 8004cf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	4803      	ldr	r0, [pc, #12]	@ (8004d0c <SSD1306_Fill+0x2c>)
 8004cfe:	f001 f916 	bl	8005f2e <memset>
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	2000029c 	.word	0x2000029c

08004d10 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4603      	mov	r3, r0
 8004d18:	80fb      	strh	r3, [r7, #6]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	80bb      	strh	r3, [r7, #4]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	70fb      	strb	r3, [r7, #3]
	if (
 8004d22:	88fb      	ldrh	r3, [r7, #6]
 8004d24:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d26:	d848      	bhi.n	8004dba <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8004d28:	88bb      	ldrh	r3, [r7, #4]
 8004d2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8004d2c:	d845      	bhi.n	8004dba <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8004d2e:	4b25      	ldr	r3, [pc, #148]	@ (8004dc4 <SSD1306_DrawPixel+0xb4>)
 8004d30:	791b      	ldrb	r3, [r3, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d006      	beq.n	8004d44 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8004d36:	78fb      	ldrb	r3, [r7, #3]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	bf0c      	ite	eq
 8004d3c:	2301      	moveq	r3, #1
 8004d3e:	2300      	movne	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8004d44:	78fb      	ldrb	r3, [r7, #3]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d11a      	bne.n	8004d80 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004d4a:	88fa      	ldrh	r2, [r7, #6]
 8004d4c:	88bb      	ldrh	r3, [r7, #4]
 8004d4e:	08db      	lsrs	r3, r3, #3
 8004d50:	b298      	uxth	r0, r3
 8004d52:	4603      	mov	r3, r0
 8004d54:	01db      	lsls	r3, r3, #7
 8004d56:	4413      	add	r3, r2
 8004d58:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc8 <SSD1306_DrawPixel+0xb8>)
 8004d5a:	5cd3      	ldrb	r3, [r2, r3]
 8004d5c:	b25a      	sxtb	r2, r3
 8004d5e:	88bb      	ldrh	r3, [r7, #4]
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	2101      	movs	r1, #1
 8004d66:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6a:	b25b      	sxtb	r3, r3
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	b259      	sxtb	r1, r3
 8004d70:	88fa      	ldrh	r2, [r7, #6]
 8004d72:	4603      	mov	r3, r0
 8004d74:	01db      	lsls	r3, r3, #7
 8004d76:	4413      	add	r3, r2
 8004d78:	b2c9      	uxtb	r1, r1
 8004d7a:	4a13      	ldr	r2, [pc, #76]	@ (8004dc8 <SSD1306_DrawPixel+0xb8>)
 8004d7c:	54d1      	strb	r1, [r2, r3]
 8004d7e:	e01d      	b.n	8004dbc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004d80:	88fa      	ldrh	r2, [r7, #6]
 8004d82:	88bb      	ldrh	r3, [r7, #4]
 8004d84:	08db      	lsrs	r3, r3, #3
 8004d86:	b298      	uxth	r0, r3
 8004d88:	4603      	mov	r3, r0
 8004d8a:	01db      	lsls	r3, r3, #7
 8004d8c:	4413      	add	r3, r2
 8004d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8004dc8 <SSD1306_DrawPixel+0xb8>)
 8004d90:	5cd3      	ldrb	r3, [r2, r3]
 8004d92:	b25a      	sxtb	r2, r3
 8004d94:	88bb      	ldrh	r3, [r7, #4]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004da0:	b25b      	sxtb	r3, r3
 8004da2:	43db      	mvns	r3, r3
 8004da4:	b25b      	sxtb	r3, r3
 8004da6:	4013      	ands	r3, r2
 8004da8:	b259      	sxtb	r1, r3
 8004daa:	88fa      	ldrh	r2, [r7, #6]
 8004dac:	4603      	mov	r3, r0
 8004dae:	01db      	lsls	r3, r3, #7
 8004db0:	4413      	add	r3, r2
 8004db2:	b2c9      	uxtb	r1, r1
 8004db4:	4a04      	ldr	r2, [pc, #16]	@ (8004dc8 <SSD1306_DrawPixel+0xb8>)
 8004db6:	54d1      	strb	r1, [r2, r3]
 8004db8:	e000      	b.n	8004dbc <SSD1306_DrawPixel+0xac>
		return;
 8004dba:	bf00      	nop
	}
}
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr
 8004dc4:	2000069c 	.word	0x2000069c
 8004dc8:	2000029c 	.word	0x2000029c

08004dcc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	460a      	mov	r2, r1
 8004dd6:	80fb      	strh	r3, [r7, #6]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8004ddc:	4a05      	ldr	r2, [pc, #20]	@ (8004df4 <SSD1306_GotoXY+0x28>)
 8004dde:	88fb      	ldrh	r3, [r7, #6]
 8004de0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8004de2:	4a04      	ldr	r2, [pc, #16]	@ (8004df4 <SSD1306_GotoXY+0x28>)
 8004de4:	88bb      	ldrh	r3, [r7, #4]
 8004de6:	8053      	strh	r3, [r2, #2]
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bc80      	pop	{r7}
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	2000069c 	.word	0x2000069c

08004df8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	4603      	mov	r3, r0
 8004e00:	6039      	str	r1, [r7, #0]
 8004e02:	71fb      	strb	r3, [r7, #7]
 8004e04:	4613      	mov	r3, r2
 8004e06:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8004e08:	4b39      	ldr	r3, [pc, #228]	@ (8004ef0 <SSD1306_Putc+0xf8>)
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	4413      	add	r3, r2
	if (
 8004e14:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e16:	dc07      	bgt.n	8004e28 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8004e18:	4b35      	ldr	r3, [pc, #212]	@ (8004ef0 <SSD1306_Putc+0xf8>)
 8004e1a:	885b      	ldrh	r3, [r3, #2]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	785b      	ldrb	r3, [r3, #1]
 8004e22:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8004e24:	2b3f      	cmp	r3, #63	@ 0x3f
 8004e26:	dd01      	ble.n	8004e2c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	e05d      	b.n	8004ee8 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	e04b      	b.n	8004eca <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	3b20      	subs	r3, #32
 8004e3a:	6839      	ldr	r1, [r7, #0]
 8004e3c:	7849      	ldrb	r1, [r1, #1]
 8004e3e:	fb01 f303 	mul.w	r3, r1, r3
 8004e42:	4619      	mov	r1, r3
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	440b      	add	r3, r1
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	4413      	add	r3, r2
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8004e50:	2300      	movs	r3, #0
 8004e52:	613b      	str	r3, [r7, #16]
 8004e54:	e030      	b.n	8004eb8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d010      	beq.n	8004e88 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8004e66:	4b22      	ldr	r3, [pc, #136]	@ (8004ef0 <SSD1306_Putc+0xf8>)
 8004e68:	881a      	ldrh	r2, [r3, #0]
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	4413      	add	r3, r2
 8004e70:	b298      	uxth	r0, r3
 8004e72:	4b1f      	ldr	r3, [pc, #124]	@ (8004ef0 <SSD1306_Putc+0xf8>)
 8004e74:	885a      	ldrh	r2, [r3, #2]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	79ba      	ldrb	r2, [r7, #6]
 8004e80:	4619      	mov	r1, r3
 8004e82:	f7ff ff45 	bl	8004d10 <SSD1306_DrawPixel>
 8004e86:	e014      	b.n	8004eb2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8004e88:	4b19      	ldr	r3, [pc, #100]	@ (8004ef0 <SSD1306_Putc+0xf8>)
 8004e8a:	881a      	ldrh	r2, [r3, #0]
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	4413      	add	r3, r2
 8004e92:	b298      	uxth	r0, r3
 8004e94:	4b16      	ldr	r3, [pc, #88]	@ (8004ef0 <SSD1306_Putc+0xf8>)
 8004e96:	885a      	ldrh	r2, [r3, #2]
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	4413      	add	r3, r2
 8004e9e:	b299      	uxth	r1, r3
 8004ea0:	79bb      	ldrb	r3, [r7, #6]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	bf0c      	ite	eq
 8004ea6:	2301      	moveq	r3, #1
 8004ea8:	2300      	movne	r3, #0
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	461a      	mov	r2, r3
 8004eae:	f7ff ff2f 	bl	8004d10 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	613b      	str	r3, [r7, #16]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d3c8      	bcc.n	8004e56 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	785b      	ldrb	r3, [r3, #1]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d3ad      	bcc.n	8004e32 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8004ed6:	4b06      	ldr	r3, [pc, #24]	@ (8004ef0 <SSD1306_Putc+0xf8>)
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	7812      	ldrb	r2, [r2, #0]
 8004ede:	4413      	add	r3, r2
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	4b03      	ldr	r3, [pc, #12]	@ (8004ef0 <SSD1306_Putc+0xf8>)
 8004ee4:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8004ee6:	79fb      	ldrb	r3, [r7, #7]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	2000069c 	.word	0x2000069c

08004ef4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	4613      	mov	r3, r2
 8004f00:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8004f02:	e012      	b.n	8004f2a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	79fa      	ldrb	r2, [r7, #7]
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff ff73 	bl	8004df8 <SSD1306_Putc>
 8004f12:	4603      	mov	r3, r0
 8004f14:	461a      	mov	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d002      	beq.n	8004f24 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	e008      	b.n	8004f36 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	3301      	adds	r3, #1
 8004f28:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1e8      	bne.n	8004f04 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	781b      	ldrb	r3, [r3, #0]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8004f46:	4b07      	ldr	r3, [pc, #28]	@ (8004f64 <ssd1306_I2C_Init+0x24>)
 8004f48:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004f4a:	e002      	b.n	8004f52 <ssd1306_I2C_Init+0x12>
		p--;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f9      	bne.n	8004f4c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr
 8004f64:	0003d090 	.word	0x0003d090

08004f68 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8004f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f6c:	b089      	sub	sp, #36	@ 0x24
 8004f6e:	af02      	add	r7, sp, #8
 8004f70:	603a      	str	r2, [r7, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	4603      	mov	r3, r0
 8004f76:	71fb      	strb	r3, [r7, #7]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	71bb      	strb	r3, [r7, #6]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	80bb      	strh	r3, [r7, #4]
 8004f80:	466b      	mov	r3, sp
 8004f82:	461e      	mov	r6, r3
	uint8_t dt[count + 1];
 8004f84:	88bb      	ldrh	r3, [r7, #4]
 8004f86:	1c59      	adds	r1, r3, #1
 8004f88:	1e4b      	subs	r3, r1, #1
 8004f8a:	613b      	str	r3, [r7, #16]
 8004f8c:	460a      	mov	r2, r1
 8004f8e:	2300      	movs	r3, #0
 8004f90:	4690      	mov	r8, r2
 8004f92:	4699      	mov	r9, r3
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	f04f 0300 	mov.w	r3, #0
 8004f9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fa0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fa4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fa8:	460a      	mov	r2, r1
 8004faa:	2300      	movs	r3, #0
 8004fac:	4614      	mov	r4, r2
 8004fae:	461d      	mov	r5, r3
 8004fb0:	f04f 0200 	mov.w	r2, #0
 8004fb4:	f04f 0300 	mov.w	r3, #0
 8004fb8:	00eb      	lsls	r3, r5, #3
 8004fba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fbe:	00e2      	lsls	r2, r4, #3
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	3307      	adds	r3, #7
 8004fc4:	08db      	lsrs	r3, r3, #3
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	ebad 0d03 	sub.w	sp, sp, r3
 8004fcc:	ab02      	add	r3, sp, #8
 8004fce:	3300      	adds	r3, #0
 8004fd0:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	79ba      	ldrb	r2, [r7, #6]
 8004fd6:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 8004fd8:	2301      	movs	r3, #1
 8004fda:	75fb      	strb	r3, [r7, #23]
 8004fdc:	e00a      	b.n	8004ff4 <ssd1306_I2C_WriteMulti+0x8c>
		dt[i] = data[i-1];
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	441a      	add	r2, r3
 8004fe6:	7dfb      	ldrb	r3, [r7, #23]
 8004fe8:	7811      	ldrb	r1, [r2, #0]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8004fee:	7dfb      	ldrb	r3, [r7, #23]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	75fb      	strb	r3, [r7, #23]
 8004ff4:	7dfb      	ldrb	r3, [r7, #23]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	88ba      	ldrh	r2, [r7, #4]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d2ef      	bcs.n	8004fde <ssd1306_I2C_WriteMulti+0x76>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	b299      	uxth	r1, r3
 8005002:	88bb      	ldrh	r3, [r7, #4]
 8005004:	220a      	movs	r2, #10
 8005006:	9200      	str	r2, [sp, #0]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4804      	ldr	r0, [pc, #16]	@ (800501c <ssd1306_I2C_WriteMulti+0xb4>)
 800500c:	f7fc fca8 	bl	8001960 <HAL_I2C_Master_Transmit>
 8005010:	46b5      	mov	sp, r6
}
 8005012:	bf00      	nop
 8005014:	371c      	adds	r7, #28
 8005016:	46bd      	mov	sp, r7
 8005018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800501c:	200001fc 	.word	0x200001fc

08005020 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af02      	add	r7, sp, #8
 8005026:	4603      	mov	r3, r0
 8005028:	71fb      	strb	r3, [r7, #7]
 800502a:	460b      	mov	r3, r1
 800502c:	71bb      	strb	r3, [r7, #6]
 800502e:	4613      	mov	r3, r2
 8005030:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8005032:	79bb      	ldrb	r3, [r7, #6]
 8005034:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8005036:	797b      	ldrb	r3, [r7, #5]
 8005038:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	b299      	uxth	r1, r3
 800503e:	f107 020c 	add.w	r2, r7, #12
 8005042:	230a      	movs	r3, #10
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	2302      	movs	r3, #2
 8005048:	4803      	ldr	r0, [pc, #12]	@ (8005058 <ssd1306_I2C_Write+0x38>)
 800504a:	f7fc fc89 	bl	8001960 <HAL_I2C_Master_Transmit>
}
 800504e:	bf00      	nop
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	200001fc 	.word	0x200001fc

0800505c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005062:	4b15      	ldr	r3, [pc, #84]	@ (80050b8 <HAL_MspInit+0x5c>)
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	4a14      	ldr	r2, [pc, #80]	@ (80050b8 <HAL_MspInit+0x5c>)
 8005068:	f043 0301 	orr.w	r3, r3, #1
 800506c:	6193      	str	r3, [r2, #24]
 800506e:	4b12      	ldr	r3, [pc, #72]	@ (80050b8 <HAL_MspInit+0x5c>)
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	60bb      	str	r3, [r7, #8]
 8005078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800507a:	4b0f      	ldr	r3, [pc, #60]	@ (80050b8 <HAL_MspInit+0x5c>)
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	4a0e      	ldr	r2, [pc, #56]	@ (80050b8 <HAL_MspInit+0x5c>)
 8005080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005084:	61d3      	str	r3, [r2, #28]
 8005086:	4b0c      	ldr	r3, [pc, #48]	@ (80050b8 <HAL_MspInit+0x5c>)
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800508e:	607b      	str	r3, [r7, #4]
 8005090:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005092:	4b0a      	ldr	r3, [pc, #40]	@ (80050bc <HAL_MspInit+0x60>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	4a04      	ldr	r2, [pc, #16]	@ (80050bc <HAL_MspInit+0x60>)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050ae:	bf00      	nop
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc80      	pop	{r7}
 80050b6:	4770      	bx	lr
 80050b8:	40021000 	.word	0x40021000
 80050bc:	40010000 	.word	0x40010000

080050c0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050c8:	f107 0310 	add.w	r3, r7, #16
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	605a      	str	r2, [r3, #4]
 80050d2:	609a      	str	r2, [r3, #8]
 80050d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a15      	ldr	r2, [pc, #84]	@ (8005130 <HAL_I2C_MspInit+0x70>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d123      	bne.n	8005128 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050e0:	4b14      	ldr	r3, [pc, #80]	@ (8005134 <HAL_I2C_MspInit+0x74>)
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	4a13      	ldr	r2, [pc, #76]	@ (8005134 <HAL_I2C_MspInit+0x74>)
 80050e6:	f043 0308 	orr.w	r3, r3, #8
 80050ea:	6193      	str	r3, [r2, #24]
 80050ec:	4b11      	ldr	r3, [pc, #68]	@ (8005134 <HAL_I2C_MspInit+0x74>)
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80050f8:	23c0      	movs	r3, #192	@ 0xc0
 80050fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050fc:	2312      	movs	r3, #18
 80050fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005100:	2303      	movs	r3, #3
 8005102:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005104:	f107 0310 	add.w	r3, r7, #16
 8005108:	4619      	mov	r1, r3
 800510a:	480b      	ldr	r0, [pc, #44]	@ (8005138 <HAL_I2C_MspInit+0x78>)
 800510c:	f7fc f960 	bl	80013d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005110:	4b08      	ldr	r3, [pc, #32]	@ (8005134 <HAL_I2C_MspInit+0x74>)
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	4a07      	ldr	r2, [pc, #28]	@ (8005134 <HAL_I2C_MspInit+0x74>)
 8005116:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800511a:	61d3      	str	r3, [r2, #28]
 800511c:	4b05      	ldr	r3, [pc, #20]	@ (8005134 <HAL_I2C_MspInit+0x74>)
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005124:	60bb      	str	r3, [r7, #8]
 8005126:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005128:	bf00      	nop
 800512a:	3720      	adds	r7, #32
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40005400 	.word	0x40005400
 8005134:	40021000 	.word	0x40021000
 8005138:	40010c00 	.word	0x40010c00

0800513c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005144:	f107 0310 	add.w	r3, r7, #16
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	605a      	str	r2, [r3, #4]
 800514e:	609a      	str	r2, [r3, #8]
 8005150:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a20      	ldr	r2, [pc, #128]	@ (80051d8 <HAL_UART_MspInit+0x9c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d139      	bne.n	80051d0 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800515c:	4b1f      	ldr	r3, [pc, #124]	@ (80051dc <HAL_UART_MspInit+0xa0>)
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	4a1e      	ldr	r2, [pc, #120]	@ (80051dc <HAL_UART_MspInit+0xa0>)
 8005162:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005166:	61d3      	str	r3, [r2, #28]
 8005168:	4b1c      	ldr	r3, [pc, #112]	@ (80051dc <HAL_UART_MspInit+0xa0>)
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005174:	4b19      	ldr	r3, [pc, #100]	@ (80051dc <HAL_UART_MspInit+0xa0>)
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	4a18      	ldr	r2, [pc, #96]	@ (80051dc <HAL_UART_MspInit+0xa0>)
 800517a:	f043 0308 	orr.w	r3, r3, #8
 800517e:	6193      	str	r3, [r2, #24]
 8005180:	4b16      	ldr	r3, [pc, #88]	@ (80051dc <HAL_UART_MspInit+0xa0>)
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	f003 0308 	and.w	r3, r3, #8
 8005188:	60bb      	str	r3, [r7, #8]
 800518a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800518c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005190:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005192:	2302      	movs	r3, #2
 8005194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005196:	2303      	movs	r3, #3
 8005198:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800519a:	f107 0310 	add.w	r3, r7, #16
 800519e:	4619      	mov	r1, r3
 80051a0:	480f      	ldr	r0, [pc, #60]	@ (80051e0 <HAL_UART_MspInit+0xa4>)
 80051a2:	f7fc f915 	bl	80013d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80051a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80051aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051ac:	2300      	movs	r3, #0
 80051ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051b4:	f107 0310 	add.w	r3, r7, #16
 80051b8:	4619      	mov	r1, r3
 80051ba:	4809      	ldr	r0, [pc, #36]	@ (80051e0 <HAL_UART_MspInit+0xa4>)
 80051bc:	f7fc f908 	bl	80013d0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80051c0:	2200      	movs	r2, #0
 80051c2:	2100      	movs	r1, #0
 80051c4:	2027      	movs	r0, #39	@ 0x27
 80051c6:	f7fc f81a 	bl	80011fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80051ca:	2027      	movs	r0, #39	@ 0x27
 80051cc:	f7fc f833 	bl	8001236 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80051d0:	bf00      	nop
 80051d2:	3720      	adds	r7, #32
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	40004800 	.word	0x40004800
 80051dc:	40021000 	.word	0x40021000
 80051e0:	40010c00 	.word	0x40010c00

080051e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80051e8:	bf00      	nop
 80051ea:	e7fd      	b.n	80051e8 <NMI_Handler+0x4>

080051ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051f0:	bf00      	nop
 80051f2:	e7fd      	b.n	80051f0 <HardFault_Handler+0x4>

080051f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051f8:	bf00      	nop
 80051fa:	e7fd      	b.n	80051f8 <MemManage_Handler+0x4>

080051fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005200:	bf00      	nop
 8005202:	e7fd      	b.n	8005200 <BusFault_Handler+0x4>

08005204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005208:	bf00      	nop
 800520a:	e7fd      	b.n	8005208 <UsageFault_Handler+0x4>

0800520c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005210:	bf00      	nop
 8005212:	46bd      	mov	sp, r7
 8005214:	bc80      	pop	{r7}
 8005216:	4770      	bx	lr

08005218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800521c:	bf00      	nop
 800521e:	46bd      	mov	sp, r7
 8005220:	bc80      	pop	{r7}
 8005222:	4770      	bx	lr

08005224 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005228:	bf00      	nop
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr

08005230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005234:	f7fb fecc 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005238:	bf00      	nop
 800523a:	bd80      	pop	{r7, pc}

0800523c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005240:	4802      	ldr	r0, [pc, #8]	@ (800524c <USART3_IRQHandler+0x10>)
 8005242:	f7fe fa6d 	bl	8003720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005246:	bf00      	nop
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	20000250 	.word	0x20000250

08005250 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
  return 1;
 8005254:	2301      	movs	r3, #1
}
 8005256:	4618      	mov	r0, r3
 8005258:	46bd      	mov	sp, r7
 800525a:	bc80      	pop	{r7}
 800525c:	4770      	bx	lr

0800525e <_kill>:

int _kill(int pid, int sig)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b082      	sub	sp, #8
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
 8005266:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005268:	f000 feb4 	bl	8005fd4 <__errno>
 800526c:	4603      	mov	r3, r0
 800526e:	2216      	movs	r2, #22
 8005270:	601a      	str	r2, [r3, #0]
  return -1;
 8005272:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <_exit>:

void _exit (int status)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b082      	sub	sp, #8
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005286:	f04f 31ff 	mov.w	r1, #4294967295
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7ff ffe7 	bl	800525e <_kill>
  while (1) {}    /* Make sure we hang here */
 8005290:	bf00      	nop
 8005292:	e7fd      	b.n	8005290 <_exit+0x12>

08005294 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052a0:	2300      	movs	r3, #0
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	e00a      	b.n	80052bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80052a6:	f3af 8000 	nop.w
 80052aa:	4601      	mov	r1, r0
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	60ba      	str	r2, [r7, #8]
 80052b2:	b2ca      	uxtb	r2, r1
 80052b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	3301      	adds	r3, #1
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	dbf0      	blt.n	80052a6 <_read+0x12>
  }

  return len;
 80052c4:	687b      	ldr	r3, [r7, #4]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b086      	sub	sp, #24
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052da:	2300      	movs	r3, #0
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	e009      	b.n	80052f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	60ba      	str	r2, [r7, #8]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	3301      	adds	r3, #1
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	dbf1      	blt.n	80052e0 <_write+0x12>
  }
  return len;
 80052fc:	687b      	ldr	r3, [r7, #4]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <_close>:

int _close(int file)
{
 8005306:	b480      	push	{r7}
 8005308:	b083      	sub	sp, #12
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800530e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005312:	4618      	mov	r0, r3
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr

0800531c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800532c:	605a      	str	r2, [r3, #4]
  return 0;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	bc80      	pop	{r7}
 8005338:	4770      	bx	lr

0800533a <_isatty>:

int _isatty(int file)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005342:	2301      	movs	r3, #1
}
 8005344:	4618      	mov	r0, r3
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr

0800534e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800534e:	b480      	push	{r7}
 8005350:	b085      	sub	sp, #20
 8005352:	af00      	add	r7, sp, #0
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	60b9      	str	r1, [r7, #8]
 8005358:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	bc80      	pop	{r7}
 8005364:	4770      	bx	lr
	...

08005368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005370:	4a14      	ldr	r2, [pc, #80]	@ (80053c4 <_sbrk+0x5c>)
 8005372:	4b15      	ldr	r3, [pc, #84]	@ (80053c8 <_sbrk+0x60>)
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800537c:	4b13      	ldr	r3, [pc, #76]	@ (80053cc <_sbrk+0x64>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d102      	bne.n	800538a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005384:	4b11      	ldr	r3, [pc, #68]	@ (80053cc <_sbrk+0x64>)
 8005386:	4a12      	ldr	r2, [pc, #72]	@ (80053d0 <_sbrk+0x68>)
 8005388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800538a:	4b10      	ldr	r3, [pc, #64]	@ (80053cc <_sbrk+0x64>)
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4413      	add	r3, r2
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	429a      	cmp	r2, r3
 8005396:	d207      	bcs.n	80053a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005398:	f000 fe1c 	bl	8005fd4 <__errno>
 800539c:	4603      	mov	r3, r0
 800539e:	220c      	movs	r2, #12
 80053a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80053a2:	f04f 33ff 	mov.w	r3, #4294967295
 80053a6:	e009      	b.n	80053bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80053a8:	4b08      	ldr	r3, [pc, #32]	@ (80053cc <_sbrk+0x64>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80053ae:	4b07      	ldr	r3, [pc, #28]	@ (80053cc <_sbrk+0x64>)
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4413      	add	r3, r2
 80053b6:	4a05      	ldr	r2, [pc, #20]	@ (80053cc <_sbrk+0x64>)
 80053b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80053ba:	68fb      	ldr	r3, [r7, #12]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3718      	adds	r7, #24
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	20005000 	.word	0x20005000
 80053c8:	00000400 	.word	0x00000400
 80053cc:	200006a4 	.word	0x200006a4
 80053d0:	200007f8 	.word	0x200007f8

080053d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80053d8:	bf00      	nop
 80053da:	46bd      	mov	sp, r7
 80053dc:	bc80      	pop	{r7}
 80053de:	4770      	bx	lr

080053e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80053e0:	f7ff fff8 	bl	80053d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80053e4:	480b      	ldr	r0, [pc, #44]	@ (8005414 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80053e6:	490c      	ldr	r1, [pc, #48]	@ (8005418 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80053e8:	4a0c      	ldr	r2, [pc, #48]	@ (800541c <LoopFillZerobss+0x16>)
  movs r3, #0
 80053ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053ec:	e002      	b.n	80053f4 <LoopCopyDataInit>

080053ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053f2:	3304      	adds	r3, #4

080053f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053f8:	d3f9      	bcc.n	80053ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053fa:	4a09      	ldr	r2, [pc, #36]	@ (8005420 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80053fc:	4c09      	ldr	r4, [pc, #36]	@ (8005424 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80053fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005400:	e001      	b.n	8005406 <LoopFillZerobss>

08005402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005404:	3204      	adds	r2, #4

08005406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005408:	d3fb      	bcc.n	8005402 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800540a:	f000 fde9 	bl	8005fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800540e:	f7fe fef1 	bl	80041f4 <main>
  bx lr
 8005412:	4770      	bx	lr
  ldr r0, =_sdata
 8005414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005418:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800541c:	080097b4 	.word	0x080097b4
  ldr r2, =_sbss
 8005420:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8005424:	200007f4 	.word	0x200007f4

08005428 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005428:	e7fe      	b.n	8005428 <ADC1_2_IRQHandler>

0800542a <__cvt>:
 800542a:	2b00      	cmp	r3, #0
 800542c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005430:	461d      	mov	r5, r3
 8005432:	bfbb      	ittet	lt
 8005434:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005438:	461d      	movlt	r5, r3
 800543a:	2300      	movge	r3, #0
 800543c:	232d      	movlt	r3, #45	@ 0x2d
 800543e:	b088      	sub	sp, #32
 8005440:	4614      	mov	r4, r2
 8005442:	bfb8      	it	lt
 8005444:	4614      	movlt	r4, r2
 8005446:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005448:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800544a:	7013      	strb	r3, [r2, #0]
 800544c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800544e:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005452:	f023 0820 	bic.w	r8, r3, #32
 8005456:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800545a:	d005      	beq.n	8005468 <__cvt+0x3e>
 800545c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005460:	d100      	bne.n	8005464 <__cvt+0x3a>
 8005462:	3601      	adds	r6, #1
 8005464:	2302      	movs	r3, #2
 8005466:	e000      	b.n	800546a <__cvt+0x40>
 8005468:	2303      	movs	r3, #3
 800546a:	aa07      	add	r2, sp, #28
 800546c:	9204      	str	r2, [sp, #16]
 800546e:	aa06      	add	r2, sp, #24
 8005470:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005474:	e9cd 3600 	strd	r3, r6, [sp]
 8005478:	4622      	mov	r2, r4
 800547a:	462b      	mov	r3, r5
 800547c:	f000 fe7c 	bl	8006178 <_dtoa_r>
 8005480:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005484:	4607      	mov	r7, r0
 8005486:	d119      	bne.n	80054bc <__cvt+0x92>
 8005488:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800548a:	07db      	lsls	r3, r3, #31
 800548c:	d50e      	bpl.n	80054ac <__cvt+0x82>
 800548e:	eb00 0906 	add.w	r9, r0, r6
 8005492:	2200      	movs	r2, #0
 8005494:	2300      	movs	r3, #0
 8005496:	4620      	mov	r0, r4
 8005498:	4629      	mov	r1, r5
 800549a:	f7fb fa85 	bl	80009a8 <__aeabi_dcmpeq>
 800549e:	b108      	cbz	r0, 80054a4 <__cvt+0x7a>
 80054a0:	f8cd 901c 	str.w	r9, [sp, #28]
 80054a4:	2230      	movs	r2, #48	@ 0x30
 80054a6:	9b07      	ldr	r3, [sp, #28]
 80054a8:	454b      	cmp	r3, r9
 80054aa:	d31e      	bcc.n	80054ea <__cvt+0xc0>
 80054ac:	4638      	mov	r0, r7
 80054ae:	9b07      	ldr	r3, [sp, #28]
 80054b0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80054b2:	1bdb      	subs	r3, r3, r7
 80054b4:	6013      	str	r3, [r2, #0]
 80054b6:	b008      	add	sp, #32
 80054b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80054c0:	eb00 0906 	add.w	r9, r0, r6
 80054c4:	d1e5      	bne.n	8005492 <__cvt+0x68>
 80054c6:	7803      	ldrb	r3, [r0, #0]
 80054c8:	2b30      	cmp	r3, #48	@ 0x30
 80054ca:	d10a      	bne.n	80054e2 <__cvt+0xb8>
 80054cc:	2200      	movs	r2, #0
 80054ce:	2300      	movs	r3, #0
 80054d0:	4620      	mov	r0, r4
 80054d2:	4629      	mov	r1, r5
 80054d4:	f7fb fa68 	bl	80009a8 <__aeabi_dcmpeq>
 80054d8:	b918      	cbnz	r0, 80054e2 <__cvt+0xb8>
 80054da:	f1c6 0601 	rsb	r6, r6, #1
 80054de:	f8ca 6000 	str.w	r6, [sl]
 80054e2:	f8da 3000 	ldr.w	r3, [sl]
 80054e6:	4499      	add	r9, r3
 80054e8:	e7d3      	b.n	8005492 <__cvt+0x68>
 80054ea:	1c59      	adds	r1, r3, #1
 80054ec:	9107      	str	r1, [sp, #28]
 80054ee:	701a      	strb	r2, [r3, #0]
 80054f0:	e7d9      	b.n	80054a6 <__cvt+0x7c>

080054f2 <__exponent>:
 80054f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054f4:	2900      	cmp	r1, #0
 80054f6:	bfb6      	itet	lt
 80054f8:	232d      	movlt	r3, #45	@ 0x2d
 80054fa:	232b      	movge	r3, #43	@ 0x2b
 80054fc:	4249      	neglt	r1, r1
 80054fe:	2909      	cmp	r1, #9
 8005500:	7002      	strb	r2, [r0, #0]
 8005502:	7043      	strb	r3, [r0, #1]
 8005504:	dd29      	ble.n	800555a <__exponent+0x68>
 8005506:	f10d 0307 	add.w	r3, sp, #7
 800550a:	461d      	mov	r5, r3
 800550c:	270a      	movs	r7, #10
 800550e:	fbb1 f6f7 	udiv	r6, r1, r7
 8005512:	461a      	mov	r2, r3
 8005514:	fb07 1416 	mls	r4, r7, r6, r1
 8005518:	3430      	adds	r4, #48	@ 0x30
 800551a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800551e:	460c      	mov	r4, r1
 8005520:	2c63      	cmp	r4, #99	@ 0x63
 8005522:	4631      	mov	r1, r6
 8005524:	f103 33ff 	add.w	r3, r3, #4294967295
 8005528:	dcf1      	bgt.n	800550e <__exponent+0x1c>
 800552a:	3130      	adds	r1, #48	@ 0x30
 800552c:	1e94      	subs	r4, r2, #2
 800552e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005532:	4623      	mov	r3, r4
 8005534:	1c41      	adds	r1, r0, #1
 8005536:	42ab      	cmp	r3, r5
 8005538:	d30a      	bcc.n	8005550 <__exponent+0x5e>
 800553a:	f10d 0309 	add.w	r3, sp, #9
 800553e:	1a9b      	subs	r3, r3, r2
 8005540:	42ac      	cmp	r4, r5
 8005542:	bf88      	it	hi
 8005544:	2300      	movhi	r3, #0
 8005546:	3302      	adds	r3, #2
 8005548:	4403      	add	r3, r0
 800554a:	1a18      	subs	r0, r3, r0
 800554c:	b003      	add	sp, #12
 800554e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005550:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005554:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005558:	e7ed      	b.n	8005536 <__exponent+0x44>
 800555a:	2330      	movs	r3, #48	@ 0x30
 800555c:	3130      	adds	r1, #48	@ 0x30
 800555e:	7083      	strb	r3, [r0, #2]
 8005560:	70c1      	strb	r1, [r0, #3]
 8005562:	1d03      	adds	r3, r0, #4
 8005564:	e7f1      	b.n	800554a <__exponent+0x58>
	...

08005568 <_printf_float>:
 8005568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800556c:	b091      	sub	sp, #68	@ 0x44
 800556e:	460c      	mov	r4, r1
 8005570:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005574:	4616      	mov	r6, r2
 8005576:	461f      	mov	r7, r3
 8005578:	4605      	mov	r5, r0
 800557a:	f000 fce1 	bl	8005f40 <_localeconv_r>
 800557e:	6803      	ldr	r3, [r0, #0]
 8005580:	4618      	mov	r0, r3
 8005582:	9308      	str	r3, [sp, #32]
 8005584:	f7fa fde4 	bl	8000150 <strlen>
 8005588:	2300      	movs	r3, #0
 800558a:	930e      	str	r3, [sp, #56]	@ 0x38
 800558c:	f8d8 3000 	ldr.w	r3, [r8]
 8005590:	9009      	str	r0, [sp, #36]	@ 0x24
 8005592:	3307      	adds	r3, #7
 8005594:	f023 0307 	bic.w	r3, r3, #7
 8005598:	f103 0208 	add.w	r2, r3, #8
 800559c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80055a0:	f8d4 b000 	ldr.w	fp, [r4]
 80055a4:	f8c8 2000 	str.w	r2, [r8]
 80055a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80055b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055b2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80055b6:	f04f 32ff 	mov.w	r2, #4294967295
 80055ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80055be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80055c2:	4b9c      	ldr	r3, [pc, #624]	@ (8005834 <_printf_float+0x2cc>)
 80055c4:	f7fb fa22 	bl	8000a0c <__aeabi_dcmpun>
 80055c8:	bb70      	cbnz	r0, 8005628 <_printf_float+0xc0>
 80055ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80055ce:	f04f 32ff 	mov.w	r2, #4294967295
 80055d2:	4b98      	ldr	r3, [pc, #608]	@ (8005834 <_printf_float+0x2cc>)
 80055d4:	f7fb f9fc 	bl	80009d0 <__aeabi_dcmple>
 80055d8:	bb30      	cbnz	r0, 8005628 <_printf_float+0xc0>
 80055da:	2200      	movs	r2, #0
 80055dc:	2300      	movs	r3, #0
 80055de:	4640      	mov	r0, r8
 80055e0:	4649      	mov	r1, r9
 80055e2:	f7fb f9eb 	bl	80009bc <__aeabi_dcmplt>
 80055e6:	b110      	cbz	r0, 80055ee <_printf_float+0x86>
 80055e8:	232d      	movs	r3, #45	@ 0x2d
 80055ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055ee:	4a92      	ldr	r2, [pc, #584]	@ (8005838 <_printf_float+0x2d0>)
 80055f0:	4b92      	ldr	r3, [pc, #584]	@ (800583c <_printf_float+0x2d4>)
 80055f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80055f6:	bf8c      	ite	hi
 80055f8:	4690      	movhi	r8, r2
 80055fa:	4698      	movls	r8, r3
 80055fc:	2303      	movs	r3, #3
 80055fe:	f04f 0900 	mov.w	r9, #0
 8005602:	6123      	str	r3, [r4, #16]
 8005604:	f02b 0304 	bic.w	r3, fp, #4
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	4633      	mov	r3, r6
 800560c:	4621      	mov	r1, r4
 800560e:	4628      	mov	r0, r5
 8005610:	9700      	str	r7, [sp, #0]
 8005612:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005614:	f000 f9d4 	bl	80059c0 <_printf_common>
 8005618:	3001      	adds	r0, #1
 800561a:	f040 8090 	bne.w	800573e <_printf_float+0x1d6>
 800561e:	f04f 30ff 	mov.w	r0, #4294967295
 8005622:	b011      	add	sp, #68	@ 0x44
 8005624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005628:	4642      	mov	r2, r8
 800562a:	464b      	mov	r3, r9
 800562c:	4640      	mov	r0, r8
 800562e:	4649      	mov	r1, r9
 8005630:	f7fb f9ec 	bl	8000a0c <__aeabi_dcmpun>
 8005634:	b148      	cbz	r0, 800564a <_printf_float+0xe2>
 8005636:	464b      	mov	r3, r9
 8005638:	2b00      	cmp	r3, #0
 800563a:	bfb8      	it	lt
 800563c:	232d      	movlt	r3, #45	@ 0x2d
 800563e:	4a80      	ldr	r2, [pc, #512]	@ (8005840 <_printf_float+0x2d8>)
 8005640:	bfb8      	it	lt
 8005642:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005646:	4b7f      	ldr	r3, [pc, #508]	@ (8005844 <_printf_float+0x2dc>)
 8005648:	e7d3      	b.n	80055f2 <_printf_float+0x8a>
 800564a:	6863      	ldr	r3, [r4, #4]
 800564c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	d13f      	bne.n	80056d4 <_printf_float+0x16c>
 8005654:	2306      	movs	r3, #6
 8005656:	6063      	str	r3, [r4, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800565e:	6023      	str	r3, [r4, #0]
 8005660:	9206      	str	r2, [sp, #24]
 8005662:	aa0e      	add	r2, sp, #56	@ 0x38
 8005664:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005668:	aa0d      	add	r2, sp, #52	@ 0x34
 800566a:	9203      	str	r2, [sp, #12]
 800566c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005670:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005674:	6863      	ldr	r3, [r4, #4]
 8005676:	4642      	mov	r2, r8
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	4628      	mov	r0, r5
 800567c:	464b      	mov	r3, r9
 800567e:	910a      	str	r1, [sp, #40]	@ 0x28
 8005680:	f7ff fed3 	bl	800542a <__cvt>
 8005684:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005686:	4680      	mov	r8, r0
 8005688:	2947      	cmp	r1, #71	@ 0x47
 800568a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800568c:	d128      	bne.n	80056e0 <_printf_float+0x178>
 800568e:	1cc8      	adds	r0, r1, #3
 8005690:	db02      	blt.n	8005698 <_printf_float+0x130>
 8005692:	6863      	ldr	r3, [r4, #4]
 8005694:	4299      	cmp	r1, r3
 8005696:	dd40      	ble.n	800571a <_printf_float+0x1b2>
 8005698:	f1aa 0a02 	sub.w	sl, sl, #2
 800569c:	fa5f fa8a 	uxtb.w	sl, sl
 80056a0:	4652      	mov	r2, sl
 80056a2:	3901      	subs	r1, #1
 80056a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80056a8:	910d      	str	r1, [sp, #52]	@ 0x34
 80056aa:	f7ff ff22 	bl	80054f2 <__exponent>
 80056ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80056b0:	4681      	mov	r9, r0
 80056b2:	1813      	adds	r3, r2, r0
 80056b4:	2a01      	cmp	r2, #1
 80056b6:	6123      	str	r3, [r4, #16]
 80056b8:	dc02      	bgt.n	80056c0 <_printf_float+0x158>
 80056ba:	6822      	ldr	r2, [r4, #0]
 80056bc:	07d2      	lsls	r2, r2, #31
 80056be:	d501      	bpl.n	80056c4 <_printf_float+0x15c>
 80056c0:	3301      	adds	r3, #1
 80056c2:	6123      	str	r3, [r4, #16]
 80056c4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d09e      	beq.n	800560a <_printf_float+0xa2>
 80056cc:	232d      	movs	r3, #45	@ 0x2d
 80056ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056d2:	e79a      	b.n	800560a <_printf_float+0xa2>
 80056d4:	2947      	cmp	r1, #71	@ 0x47
 80056d6:	d1bf      	bne.n	8005658 <_printf_float+0xf0>
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1bd      	bne.n	8005658 <_printf_float+0xf0>
 80056dc:	2301      	movs	r3, #1
 80056de:	e7ba      	b.n	8005656 <_printf_float+0xee>
 80056e0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80056e4:	d9dc      	bls.n	80056a0 <_printf_float+0x138>
 80056e6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80056ea:	d118      	bne.n	800571e <_printf_float+0x1b6>
 80056ec:	2900      	cmp	r1, #0
 80056ee:	6863      	ldr	r3, [r4, #4]
 80056f0:	dd0b      	ble.n	800570a <_printf_float+0x1a2>
 80056f2:	6121      	str	r1, [r4, #16]
 80056f4:	b913      	cbnz	r3, 80056fc <_printf_float+0x194>
 80056f6:	6822      	ldr	r2, [r4, #0]
 80056f8:	07d0      	lsls	r0, r2, #31
 80056fa:	d502      	bpl.n	8005702 <_printf_float+0x19a>
 80056fc:	3301      	adds	r3, #1
 80056fe:	440b      	add	r3, r1
 8005700:	6123      	str	r3, [r4, #16]
 8005702:	f04f 0900 	mov.w	r9, #0
 8005706:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005708:	e7dc      	b.n	80056c4 <_printf_float+0x15c>
 800570a:	b913      	cbnz	r3, 8005712 <_printf_float+0x1aa>
 800570c:	6822      	ldr	r2, [r4, #0]
 800570e:	07d2      	lsls	r2, r2, #31
 8005710:	d501      	bpl.n	8005716 <_printf_float+0x1ae>
 8005712:	3302      	adds	r3, #2
 8005714:	e7f4      	b.n	8005700 <_printf_float+0x198>
 8005716:	2301      	movs	r3, #1
 8005718:	e7f2      	b.n	8005700 <_printf_float+0x198>
 800571a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800571e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005720:	4299      	cmp	r1, r3
 8005722:	db05      	blt.n	8005730 <_printf_float+0x1c8>
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	6121      	str	r1, [r4, #16]
 8005728:	07d8      	lsls	r0, r3, #31
 800572a:	d5ea      	bpl.n	8005702 <_printf_float+0x19a>
 800572c:	1c4b      	adds	r3, r1, #1
 800572e:	e7e7      	b.n	8005700 <_printf_float+0x198>
 8005730:	2900      	cmp	r1, #0
 8005732:	bfcc      	ite	gt
 8005734:	2201      	movgt	r2, #1
 8005736:	f1c1 0202 	rsble	r2, r1, #2
 800573a:	4413      	add	r3, r2
 800573c:	e7e0      	b.n	8005700 <_printf_float+0x198>
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	055a      	lsls	r2, r3, #21
 8005742:	d407      	bmi.n	8005754 <_printf_float+0x1ec>
 8005744:	6923      	ldr	r3, [r4, #16]
 8005746:	4642      	mov	r2, r8
 8005748:	4631      	mov	r1, r6
 800574a:	4628      	mov	r0, r5
 800574c:	47b8      	blx	r7
 800574e:	3001      	adds	r0, #1
 8005750:	d12b      	bne.n	80057aa <_printf_float+0x242>
 8005752:	e764      	b.n	800561e <_printf_float+0xb6>
 8005754:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005758:	f240 80dc 	bls.w	8005914 <_printf_float+0x3ac>
 800575c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005760:	2200      	movs	r2, #0
 8005762:	2300      	movs	r3, #0
 8005764:	f7fb f920 	bl	80009a8 <__aeabi_dcmpeq>
 8005768:	2800      	cmp	r0, #0
 800576a:	d033      	beq.n	80057d4 <_printf_float+0x26c>
 800576c:	2301      	movs	r3, #1
 800576e:	4631      	mov	r1, r6
 8005770:	4628      	mov	r0, r5
 8005772:	4a35      	ldr	r2, [pc, #212]	@ (8005848 <_printf_float+0x2e0>)
 8005774:	47b8      	blx	r7
 8005776:	3001      	adds	r0, #1
 8005778:	f43f af51 	beq.w	800561e <_printf_float+0xb6>
 800577c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005780:	4543      	cmp	r3, r8
 8005782:	db02      	blt.n	800578a <_printf_float+0x222>
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	07d8      	lsls	r0, r3, #31
 8005788:	d50f      	bpl.n	80057aa <_printf_float+0x242>
 800578a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800578e:	4631      	mov	r1, r6
 8005790:	4628      	mov	r0, r5
 8005792:	47b8      	blx	r7
 8005794:	3001      	adds	r0, #1
 8005796:	f43f af42 	beq.w	800561e <_printf_float+0xb6>
 800579a:	f04f 0900 	mov.w	r9, #0
 800579e:	f108 38ff 	add.w	r8, r8, #4294967295
 80057a2:	f104 0a1a 	add.w	sl, r4, #26
 80057a6:	45c8      	cmp	r8, r9
 80057a8:	dc09      	bgt.n	80057be <_printf_float+0x256>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	079b      	lsls	r3, r3, #30
 80057ae:	f100 8102 	bmi.w	80059b6 <_printf_float+0x44e>
 80057b2:	68e0      	ldr	r0, [r4, #12]
 80057b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057b6:	4298      	cmp	r0, r3
 80057b8:	bfb8      	it	lt
 80057ba:	4618      	movlt	r0, r3
 80057bc:	e731      	b.n	8005622 <_printf_float+0xba>
 80057be:	2301      	movs	r3, #1
 80057c0:	4652      	mov	r2, sl
 80057c2:	4631      	mov	r1, r6
 80057c4:	4628      	mov	r0, r5
 80057c6:	47b8      	blx	r7
 80057c8:	3001      	adds	r0, #1
 80057ca:	f43f af28 	beq.w	800561e <_printf_float+0xb6>
 80057ce:	f109 0901 	add.w	r9, r9, #1
 80057d2:	e7e8      	b.n	80057a6 <_printf_float+0x23e>
 80057d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	dc38      	bgt.n	800584c <_printf_float+0x2e4>
 80057da:	2301      	movs	r3, #1
 80057dc:	4631      	mov	r1, r6
 80057de:	4628      	mov	r0, r5
 80057e0:	4a19      	ldr	r2, [pc, #100]	@ (8005848 <_printf_float+0x2e0>)
 80057e2:	47b8      	blx	r7
 80057e4:	3001      	adds	r0, #1
 80057e6:	f43f af1a 	beq.w	800561e <_printf_float+0xb6>
 80057ea:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80057ee:	ea59 0303 	orrs.w	r3, r9, r3
 80057f2:	d102      	bne.n	80057fa <_printf_float+0x292>
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	07d9      	lsls	r1, r3, #31
 80057f8:	d5d7      	bpl.n	80057aa <_printf_float+0x242>
 80057fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80057fe:	4631      	mov	r1, r6
 8005800:	4628      	mov	r0, r5
 8005802:	47b8      	blx	r7
 8005804:	3001      	adds	r0, #1
 8005806:	f43f af0a 	beq.w	800561e <_printf_float+0xb6>
 800580a:	f04f 0a00 	mov.w	sl, #0
 800580e:	f104 0b1a 	add.w	fp, r4, #26
 8005812:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005814:	425b      	negs	r3, r3
 8005816:	4553      	cmp	r3, sl
 8005818:	dc01      	bgt.n	800581e <_printf_float+0x2b6>
 800581a:	464b      	mov	r3, r9
 800581c:	e793      	b.n	8005746 <_printf_float+0x1de>
 800581e:	2301      	movs	r3, #1
 8005820:	465a      	mov	r2, fp
 8005822:	4631      	mov	r1, r6
 8005824:	4628      	mov	r0, r5
 8005826:	47b8      	blx	r7
 8005828:	3001      	adds	r0, #1
 800582a:	f43f aef8 	beq.w	800561e <_printf_float+0xb6>
 800582e:	f10a 0a01 	add.w	sl, sl, #1
 8005832:	e7ee      	b.n	8005812 <_printf_float+0x2aa>
 8005834:	7fefffff 	.word	0x7fefffff
 8005838:	08009434 	.word	0x08009434
 800583c:	08009430 	.word	0x08009430
 8005840:	0800943c 	.word	0x0800943c
 8005844:	08009438 	.word	0x08009438
 8005848:	08009440 	.word	0x08009440
 800584c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800584e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005852:	4553      	cmp	r3, sl
 8005854:	bfa8      	it	ge
 8005856:	4653      	movge	r3, sl
 8005858:	2b00      	cmp	r3, #0
 800585a:	4699      	mov	r9, r3
 800585c:	dc36      	bgt.n	80058cc <_printf_float+0x364>
 800585e:	f04f 0b00 	mov.w	fp, #0
 8005862:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005866:	f104 021a 	add.w	r2, r4, #26
 800586a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800586c:	930a      	str	r3, [sp, #40]	@ 0x28
 800586e:	eba3 0309 	sub.w	r3, r3, r9
 8005872:	455b      	cmp	r3, fp
 8005874:	dc31      	bgt.n	80058da <_printf_float+0x372>
 8005876:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005878:	459a      	cmp	sl, r3
 800587a:	dc3a      	bgt.n	80058f2 <_printf_float+0x38a>
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	07da      	lsls	r2, r3, #31
 8005880:	d437      	bmi.n	80058f2 <_printf_float+0x38a>
 8005882:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005884:	ebaa 0903 	sub.w	r9, sl, r3
 8005888:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800588a:	ebaa 0303 	sub.w	r3, sl, r3
 800588e:	4599      	cmp	r9, r3
 8005890:	bfa8      	it	ge
 8005892:	4699      	movge	r9, r3
 8005894:	f1b9 0f00 	cmp.w	r9, #0
 8005898:	dc33      	bgt.n	8005902 <_printf_float+0x39a>
 800589a:	f04f 0800 	mov.w	r8, #0
 800589e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058a2:	f104 0b1a 	add.w	fp, r4, #26
 80058a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058a8:	ebaa 0303 	sub.w	r3, sl, r3
 80058ac:	eba3 0309 	sub.w	r3, r3, r9
 80058b0:	4543      	cmp	r3, r8
 80058b2:	f77f af7a 	ble.w	80057aa <_printf_float+0x242>
 80058b6:	2301      	movs	r3, #1
 80058b8:	465a      	mov	r2, fp
 80058ba:	4631      	mov	r1, r6
 80058bc:	4628      	mov	r0, r5
 80058be:	47b8      	blx	r7
 80058c0:	3001      	adds	r0, #1
 80058c2:	f43f aeac 	beq.w	800561e <_printf_float+0xb6>
 80058c6:	f108 0801 	add.w	r8, r8, #1
 80058ca:	e7ec      	b.n	80058a6 <_printf_float+0x33e>
 80058cc:	4642      	mov	r2, r8
 80058ce:	4631      	mov	r1, r6
 80058d0:	4628      	mov	r0, r5
 80058d2:	47b8      	blx	r7
 80058d4:	3001      	adds	r0, #1
 80058d6:	d1c2      	bne.n	800585e <_printf_float+0x2f6>
 80058d8:	e6a1      	b.n	800561e <_printf_float+0xb6>
 80058da:	2301      	movs	r3, #1
 80058dc:	4631      	mov	r1, r6
 80058de:	4628      	mov	r0, r5
 80058e0:	920a      	str	r2, [sp, #40]	@ 0x28
 80058e2:	47b8      	blx	r7
 80058e4:	3001      	adds	r0, #1
 80058e6:	f43f ae9a 	beq.w	800561e <_printf_float+0xb6>
 80058ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058ec:	f10b 0b01 	add.w	fp, fp, #1
 80058f0:	e7bb      	b.n	800586a <_printf_float+0x302>
 80058f2:	4631      	mov	r1, r6
 80058f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80058f8:	4628      	mov	r0, r5
 80058fa:	47b8      	blx	r7
 80058fc:	3001      	adds	r0, #1
 80058fe:	d1c0      	bne.n	8005882 <_printf_float+0x31a>
 8005900:	e68d      	b.n	800561e <_printf_float+0xb6>
 8005902:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005904:	464b      	mov	r3, r9
 8005906:	4631      	mov	r1, r6
 8005908:	4628      	mov	r0, r5
 800590a:	4442      	add	r2, r8
 800590c:	47b8      	blx	r7
 800590e:	3001      	adds	r0, #1
 8005910:	d1c3      	bne.n	800589a <_printf_float+0x332>
 8005912:	e684      	b.n	800561e <_printf_float+0xb6>
 8005914:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005918:	f1ba 0f01 	cmp.w	sl, #1
 800591c:	dc01      	bgt.n	8005922 <_printf_float+0x3ba>
 800591e:	07db      	lsls	r3, r3, #31
 8005920:	d536      	bpl.n	8005990 <_printf_float+0x428>
 8005922:	2301      	movs	r3, #1
 8005924:	4642      	mov	r2, r8
 8005926:	4631      	mov	r1, r6
 8005928:	4628      	mov	r0, r5
 800592a:	47b8      	blx	r7
 800592c:	3001      	adds	r0, #1
 800592e:	f43f ae76 	beq.w	800561e <_printf_float+0xb6>
 8005932:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005936:	4631      	mov	r1, r6
 8005938:	4628      	mov	r0, r5
 800593a:	47b8      	blx	r7
 800593c:	3001      	adds	r0, #1
 800593e:	f43f ae6e 	beq.w	800561e <_printf_float+0xb6>
 8005942:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005946:	2200      	movs	r2, #0
 8005948:	2300      	movs	r3, #0
 800594a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800594e:	f7fb f82b 	bl	80009a8 <__aeabi_dcmpeq>
 8005952:	b9c0      	cbnz	r0, 8005986 <_printf_float+0x41e>
 8005954:	4653      	mov	r3, sl
 8005956:	f108 0201 	add.w	r2, r8, #1
 800595a:	4631      	mov	r1, r6
 800595c:	4628      	mov	r0, r5
 800595e:	47b8      	blx	r7
 8005960:	3001      	adds	r0, #1
 8005962:	d10c      	bne.n	800597e <_printf_float+0x416>
 8005964:	e65b      	b.n	800561e <_printf_float+0xb6>
 8005966:	2301      	movs	r3, #1
 8005968:	465a      	mov	r2, fp
 800596a:	4631      	mov	r1, r6
 800596c:	4628      	mov	r0, r5
 800596e:	47b8      	blx	r7
 8005970:	3001      	adds	r0, #1
 8005972:	f43f ae54 	beq.w	800561e <_printf_float+0xb6>
 8005976:	f108 0801 	add.w	r8, r8, #1
 800597a:	45d0      	cmp	r8, sl
 800597c:	dbf3      	blt.n	8005966 <_printf_float+0x3fe>
 800597e:	464b      	mov	r3, r9
 8005980:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005984:	e6e0      	b.n	8005748 <_printf_float+0x1e0>
 8005986:	f04f 0800 	mov.w	r8, #0
 800598a:	f104 0b1a 	add.w	fp, r4, #26
 800598e:	e7f4      	b.n	800597a <_printf_float+0x412>
 8005990:	2301      	movs	r3, #1
 8005992:	4642      	mov	r2, r8
 8005994:	e7e1      	b.n	800595a <_printf_float+0x3f2>
 8005996:	2301      	movs	r3, #1
 8005998:	464a      	mov	r2, r9
 800599a:	4631      	mov	r1, r6
 800599c:	4628      	mov	r0, r5
 800599e:	47b8      	blx	r7
 80059a0:	3001      	adds	r0, #1
 80059a2:	f43f ae3c 	beq.w	800561e <_printf_float+0xb6>
 80059a6:	f108 0801 	add.w	r8, r8, #1
 80059aa:	68e3      	ldr	r3, [r4, #12]
 80059ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80059ae:	1a5b      	subs	r3, r3, r1
 80059b0:	4543      	cmp	r3, r8
 80059b2:	dcf0      	bgt.n	8005996 <_printf_float+0x42e>
 80059b4:	e6fd      	b.n	80057b2 <_printf_float+0x24a>
 80059b6:	f04f 0800 	mov.w	r8, #0
 80059ba:	f104 0919 	add.w	r9, r4, #25
 80059be:	e7f4      	b.n	80059aa <_printf_float+0x442>

080059c0 <_printf_common>:
 80059c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c4:	4616      	mov	r6, r2
 80059c6:	4698      	mov	r8, r3
 80059c8:	688a      	ldr	r2, [r1, #8]
 80059ca:	690b      	ldr	r3, [r1, #16]
 80059cc:	4607      	mov	r7, r0
 80059ce:	4293      	cmp	r3, r2
 80059d0:	bfb8      	it	lt
 80059d2:	4613      	movlt	r3, r2
 80059d4:	6033      	str	r3, [r6, #0]
 80059d6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80059da:	460c      	mov	r4, r1
 80059dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059e0:	b10a      	cbz	r2, 80059e6 <_printf_common+0x26>
 80059e2:	3301      	adds	r3, #1
 80059e4:	6033      	str	r3, [r6, #0]
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	0699      	lsls	r1, r3, #26
 80059ea:	bf42      	ittt	mi
 80059ec:	6833      	ldrmi	r3, [r6, #0]
 80059ee:	3302      	addmi	r3, #2
 80059f0:	6033      	strmi	r3, [r6, #0]
 80059f2:	6825      	ldr	r5, [r4, #0]
 80059f4:	f015 0506 	ands.w	r5, r5, #6
 80059f8:	d106      	bne.n	8005a08 <_printf_common+0x48>
 80059fa:	f104 0a19 	add.w	sl, r4, #25
 80059fe:	68e3      	ldr	r3, [r4, #12]
 8005a00:	6832      	ldr	r2, [r6, #0]
 8005a02:	1a9b      	subs	r3, r3, r2
 8005a04:	42ab      	cmp	r3, r5
 8005a06:	dc2b      	bgt.n	8005a60 <_printf_common+0xa0>
 8005a08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a0c:	6822      	ldr	r2, [r4, #0]
 8005a0e:	3b00      	subs	r3, #0
 8005a10:	bf18      	it	ne
 8005a12:	2301      	movne	r3, #1
 8005a14:	0692      	lsls	r2, r2, #26
 8005a16:	d430      	bmi.n	8005a7a <_printf_common+0xba>
 8005a18:	4641      	mov	r1, r8
 8005a1a:	4638      	mov	r0, r7
 8005a1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a20:	47c8      	blx	r9
 8005a22:	3001      	adds	r0, #1
 8005a24:	d023      	beq.n	8005a6e <_printf_common+0xae>
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	6922      	ldr	r2, [r4, #16]
 8005a2a:	f003 0306 	and.w	r3, r3, #6
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	bf14      	ite	ne
 8005a32:	2500      	movne	r5, #0
 8005a34:	6833      	ldreq	r3, [r6, #0]
 8005a36:	f04f 0600 	mov.w	r6, #0
 8005a3a:	bf08      	it	eq
 8005a3c:	68e5      	ldreq	r5, [r4, #12]
 8005a3e:	f104 041a 	add.w	r4, r4, #26
 8005a42:	bf08      	it	eq
 8005a44:	1aed      	subeq	r5, r5, r3
 8005a46:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005a4a:	bf08      	it	eq
 8005a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a50:	4293      	cmp	r3, r2
 8005a52:	bfc4      	itt	gt
 8005a54:	1a9b      	subgt	r3, r3, r2
 8005a56:	18ed      	addgt	r5, r5, r3
 8005a58:	42b5      	cmp	r5, r6
 8005a5a:	d11a      	bne.n	8005a92 <_printf_common+0xd2>
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	e008      	b.n	8005a72 <_printf_common+0xb2>
 8005a60:	2301      	movs	r3, #1
 8005a62:	4652      	mov	r2, sl
 8005a64:	4641      	mov	r1, r8
 8005a66:	4638      	mov	r0, r7
 8005a68:	47c8      	blx	r9
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	d103      	bne.n	8005a76 <_printf_common+0xb6>
 8005a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a76:	3501      	adds	r5, #1
 8005a78:	e7c1      	b.n	80059fe <_printf_common+0x3e>
 8005a7a:	2030      	movs	r0, #48	@ 0x30
 8005a7c:	18e1      	adds	r1, r4, r3
 8005a7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a88:	4422      	add	r2, r4
 8005a8a:	3302      	adds	r3, #2
 8005a8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a90:	e7c2      	b.n	8005a18 <_printf_common+0x58>
 8005a92:	2301      	movs	r3, #1
 8005a94:	4622      	mov	r2, r4
 8005a96:	4641      	mov	r1, r8
 8005a98:	4638      	mov	r0, r7
 8005a9a:	47c8      	blx	r9
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d0e6      	beq.n	8005a6e <_printf_common+0xae>
 8005aa0:	3601      	adds	r6, #1
 8005aa2:	e7d9      	b.n	8005a58 <_printf_common+0x98>

08005aa4 <_printf_i>:
 8005aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa8:	7e0f      	ldrb	r7, [r1, #24]
 8005aaa:	4691      	mov	r9, r2
 8005aac:	2f78      	cmp	r7, #120	@ 0x78
 8005aae:	4680      	mov	r8, r0
 8005ab0:	460c      	mov	r4, r1
 8005ab2:	469a      	mov	sl, r3
 8005ab4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ab6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005aba:	d807      	bhi.n	8005acc <_printf_i+0x28>
 8005abc:	2f62      	cmp	r7, #98	@ 0x62
 8005abe:	d80a      	bhi.n	8005ad6 <_printf_i+0x32>
 8005ac0:	2f00      	cmp	r7, #0
 8005ac2:	f000 80d1 	beq.w	8005c68 <_printf_i+0x1c4>
 8005ac6:	2f58      	cmp	r7, #88	@ 0x58
 8005ac8:	f000 80b8 	beq.w	8005c3c <_printf_i+0x198>
 8005acc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ad0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ad4:	e03a      	b.n	8005b4c <_printf_i+0xa8>
 8005ad6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ada:	2b15      	cmp	r3, #21
 8005adc:	d8f6      	bhi.n	8005acc <_printf_i+0x28>
 8005ade:	a101      	add	r1, pc, #4	@ (adr r1, 8005ae4 <_printf_i+0x40>)
 8005ae0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ae4:	08005b3d 	.word	0x08005b3d
 8005ae8:	08005b51 	.word	0x08005b51
 8005aec:	08005acd 	.word	0x08005acd
 8005af0:	08005acd 	.word	0x08005acd
 8005af4:	08005acd 	.word	0x08005acd
 8005af8:	08005acd 	.word	0x08005acd
 8005afc:	08005b51 	.word	0x08005b51
 8005b00:	08005acd 	.word	0x08005acd
 8005b04:	08005acd 	.word	0x08005acd
 8005b08:	08005acd 	.word	0x08005acd
 8005b0c:	08005acd 	.word	0x08005acd
 8005b10:	08005c4f 	.word	0x08005c4f
 8005b14:	08005b7b 	.word	0x08005b7b
 8005b18:	08005c09 	.word	0x08005c09
 8005b1c:	08005acd 	.word	0x08005acd
 8005b20:	08005acd 	.word	0x08005acd
 8005b24:	08005c71 	.word	0x08005c71
 8005b28:	08005acd 	.word	0x08005acd
 8005b2c:	08005b7b 	.word	0x08005b7b
 8005b30:	08005acd 	.word	0x08005acd
 8005b34:	08005acd 	.word	0x08005acd
 8005b38:	08005c11 	.word	0x08005c11
 8005b3c:	6833      	ldr	r3, [r6, #0]
 8005b3e:	1d1a      	adds	r2, r3, #4
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6032      	str	r2, [r6, #0]
 8005b44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e09c      	b.n	8005c8a <_printf_i+0x1e6>
 8005b50:	6833      	ldr	r3, [r6, #0]
 8005b52:	6820      	ldr	r0, [r4, #0]
 8005b54:	1d19      	adds	r1, r3, #4
 8005b56:	6031      	str	r1, [r6, #0]
 8005b58:	0606      	lsls	r6, r0, #24
 8005b5a:	d501      	bpl.n	8005b60 <_printf_i+0xbc>
 8005b5c:	681d      	ldr	r5, [r3, #0]
 8005b5e:	e003      	b.n	8005b68 <_printf_i+0xc4>
 8005b60:	0645      	lsls	r5, r0, #25
 8005b62:	d5fb      	bpl.n	8005b5c <_printf_i+0xb8>
 8005b64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b68:	2d00      	cmp	r5, #0
 8005b6a:	da03      	bge.n	8005b74 <_printf_i+0xd0>
 8005b6c:	232d      	movs	r3, #45	@ 0x2d
 8005b6e:	426d      	negs	r5, r5
 8005b70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b74:	230a      	movs	r3, #10
 8005b76:	4858      	ldr	r0, [pc, #352]	@ (8005cd8 <_printf_i+0x234>)
 8005b78:	e011      	b.n	8005b9e <_printf_i+0xfa>
 8005b7a:	6821      	ldr	r1, [r4, #0]
 8005b7c:	6833      	ldr	r3, [r6, #0]
 8005b7e:	0608      	lsls	r0, r1, #24
 8005b80:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b84:	d402      	bmi.n	8005b8c <_printf_i+0xe8>
 8005b86:	0649      	lsls	r1, r1, #25
 8005b88:	bf48      	it	mi
 8005b8a:	b2ad      	uxthmi	r5, r5
 8005b8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b8e:	6033      	str	r3, [r6, #0]
 8005b90:	bf14      	ite	ne
 8005b92:	230a      	movne	r3, #10
 8005b94:	2308      	moveq	r3, #8
 8005b96:	4850      	ldr	r0, [pc, #320]	@ (8005cd8 <_printf_i+0x234>)
 8005b98:	2100      	movs	r1, #0
 8005b9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b9e:	6866      	ldr	r6, [r4, #4]
 8005ba0:	2e00      	cmp	r6, #0
 8005ba2:	60a6      	str	r6, [r4, #8]
 8005ba4:	db05      	blt.n	8005bb2 <_printf_i+0x10e>
 8005ba6:	6821      	ldr	r1, [r4, #0]
 8005ba8:	432e      	orrs	r6, r5
 8005baa:	f021 0104 	bic.w	r1, r1, #4
 8005bae:	6021      	str	r1, [r4, #0]
 8005bb0:	d04b      	beq.n	8005c4a <_printf_i+0x1a6>
 8005bb2:	4616      	mov	r6, r2
 8005bb4:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bb8:	fb03 5711 	mls	r7, r3, r1, r5
 8005bbc:	5dc7      	ldrb	r7, [r0, r7]
 8005bbe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bc2:	462f      	mov	r7, r5
 8005bc4:	42bb      	cmp	r3, r7
 8005bc6:	460d      	mov	r5, r1
 8005bc8:	d9f4      	bls.n	8005bb4 <_printf_i+0x110>
 8005bca:	2b08      	cmp	r3, #8
 8005bcc:	d10b      	bne.n	8005be6 <_printf_i+0x142>
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	07df      	lsls	r7, r3, #31
 8005bd2:	d508      	bpl.n	8005be6 <_printf_i+0x142>
 8005bd4:	6923      	ldr	r3, [r4, #16]
 8005bd6:	6861      	ldr	r1, [r4, #4]
 8005bd8:	4299      	cmp	r1, r3
 8005bda:	bfde      	ittt	le
 8005bdc:	2330      	movle	r3, #48	@ 0x30
 8005bde:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005be2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005be6:	1b92      	subs	r2, r2, r6
 8005be8:	6122      	str	r2, [r4, #16]
 8005bea:	464b      	mov	r3, r9
 8005bec:	4621      	mov	r1, r4
 8005bee:	4640      	mov	r0, r8
 8005bf0:	f8cd a000 	str.w	sl, [sp]
 8005bf4:	aa03      	add	r2, sp, #12
 8005bf6:	f7ff fee3 	bl	80059c0 <_printf_common>
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	d14a      	bne.n	8005c94 <_printf_i+0x1f0>
 8005bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8005c02:	b004      	add	sp, #16
 8005c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	f043 0320 	orr.w	r3, r3, #32
 8005c0e:	6023      	str	r3, [r4, #0]
 8005c10:	2778      	movs	r7, #120	@ 0x78
 8005c12:	4832      	ldr	r0, [pc, #200]	@ (8005cdc <_printf_i+0x238>)
 8005c14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c18:	6823      	ldr	r3, [r4, #0]
 8005c1a:	6831      	ldr	r1, [r6, #0]
 8005c1c:	061f      	lsls	r7, r3, #24
 8005c1e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c22:	d402      	bmi.n	8005c2a <_printf_i+0x186>
 8005c24:	065f      	lsls	r7, r3, #25
 8005c26:	bf48      	it	mi
 8005c28:	b2ad      	uxthmi	r5, r5
 8005c2a:	6031      	str	r1, [r6, #0]
 8005c2c:	07d9      	lsls	r1, r3, #31
 8005c2e:	bf44      	itt	mi
 8005c30:	f043 0320 	orrmi.w	r3, r3, #32
 8005c34:	6023      	strmi	r3, [r4, #0]
 8005c36:	b11d      	cbz	r5, 8005c40 <_printf_i+0x19c>
 8005c38:	2310      	movs	r3, #16
 8005c3a:	e7ad      	b.n	8005b98 <_printf_i+0xf4>
 8005c3c:	4826      	ldr	r0, [pc, #152]	@ (8005cd8 <_printf_i+0x234>)
 8005c3e:	e7e9      	b.n	8005c14 <_printf_i+0x170>
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	f023 0320 	bic.w	r3, r3, #32
 8005c46:	6023      	str	r3, [r4, #0]
 8005c48:	e7f6      	b.n	8005c38 <_printf_i+0x194>
 8005c4a:	4616      	mov	r6, r2
 8005c4c:	e7bd      	b.n	8005bca <_printf_i+0x126>
 8005c4e:	6833      	ldr	r3, [r6, #0]
 8005c50:	6825      	ldr	r5, [r4, #0]
 8005c52:	1d18      	adds	r0, r3, #4
 8005c54:	6961      	ldr	r1, [r4, #20]
 8005c56:	6030      	str	r0, [r6, #0]
 8005c58:	062e      	lsls	r6, r5, #24
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	d501      	bpl.n	8005c62 <_printf_i+0x1be>
 8005c5e:	6019      	str	r1, [r3, #0]
 8005c60:	e002      	b.n	8005c68 <_printf_i+0x1c4>
 8005c62:	0668      	lsls	r0, r5, #25
 8005c64:	d5fb      	bpl.n	8005c5e <_printf_i+0x1ba>
 8005c66:	8019      	strh	r1, [r3, #0]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	4616      	mov	r6, r2
 8005c6c:	6123      	str	r3, [r4, #16]
 8005c6e:	e7bc      	b.n	8005bea <_printf_i+0x146>
 8005c70:	6833      	ldr	r3, [r6, #0]
 8005c72:	2100      	movs	r1, #0
 8005c74:	1d1a      	adds	r2, r3, #4
 8005c76:	6032      	str	r2, [r6, #0]
 8005c78:	681e      	ldr	r6, [r3, #0]
 8005c7a:	6862      	ldr	r2, [r4, #4]
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	f000 f9d6 	bl	800602e <memchr>
 8005c82:	b108      	cbz	r0, 8005c88 <_printf_i+0x1e4>
 8005c84:	1b80      	subs	r0, r0, r6
 8005c86:	6060      	str	r0, [r4, #4]
 8005c88:	6863      	ldr	r3, [r4, #4]
 8005c8a:	6123      	str	r3, [r4, #16]
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c92:	e7aa      	b.n	8005bea <_printf_i+0x146>
 8005c94:	4632      	mov	r2, r6
 8005c96:	4649      	mov	r1, r9
 8005c98:	4640      	mov	r0, r8
 8005c9a:	6923      	ldr	r3, [r4, #16]
 8005c9c:	47d0      	blx	sl
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	d0ad      	beq.n	8005bfe <_printf_i+0x15a>
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	079b      	lsls	r3, r3, #30
 8005ca6:	d413      	bmi.n	8005cd0 <_printf_i+0x22c>
 8005ca8:	68e0      	ldr	r0, [r4, #12]
 8005caa:	9b03      	ldr	r3, [sp, #12]
 8005cac:	4298      	cmp	r0, r3
 8005cae:	bfb8      	it	lt
 8005cb0:	4618      	movlt	r0, r3
 8005cb2:	e7a6      	b.n	8005c02 <_printf_i+0x15e>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	4632      	mov	r2, r6
 8005cb8:	4649      	mov	r1, r9
 8005cba:	4640      	mov	r0, r8
 8005cbc:	47d0      	blx	sl
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	d09d      	beq.n	8005bfe <_printf_i+0x15a>
 8005cc2:	3501      	adds	r5, #1
 8005cc4:	68e3      	ldr	r3, [r4, #12]
 8005cc6:	9903      	ldr	r1, [sp, #12]
 8005cc8:	1a5b      	subs	r3, r3, r1
 8005cca:	42ab      	cmp	r3, r5
 8005ccc:	dcf2      	bgt.n	8005cb4 <_printf_i+0x210>
 8005cce:	e7eb      	b.n	8005ca8 <_printf_i+0x204>
 8005cd0:	2500      	movs	r5, #0
 8005cd2:	f104 0619 	add.w	r6, r4, #25
 8005cd6:	e7f5      	b.n	8005cc4 <_printf_i+0x220>
 8005cd8:	08009442 	.word	0x08009442
 8005cdc:	08009453 	.word	0x08009453

08005ce0 <std>:
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	b510      	push	{r4, lr}
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	e9c0 3300 	strd	r3, r3, [r0]
 8005cea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cee:	6083      	str	r3, [r0, #8]
 8005cf0:	8181      	strh	r1, [r0, #12]
 8005cf2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005cf4:	81c2      	strh	r2, [r0, #14]
 8005cf6:	6183      	str	r3, [r0, #24]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	2208      	movs	r2, #8
 8005cfc:	305c      	adds	r0, #92	@ 0x5c
 8005cfe:	f000 f916 	bl	8005f2e <memset>
 8005d02:	4b0d      	ldr	r3, [pc, #52]	@ (8005d38 <std+0x58>)
 8005d04:	6224      	str	r4, [r4, #32]
 8005d06:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d08:	4b0c      	ldr	r3, [pc, #48]	@ (8005d3c <std+0x5c>)
 8005d0a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d40 <std+0x60>)
 8005d0e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d10:	4b0c      	ldr	r3, [pc, #48]	@ (8005d44 <std+0x64>)
 8005d12:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d14:	4b0c      	ldr	r3, [pc, #48]	@ (8005d48 <std+0x68>)
 8005d16:	429c      	cmp	r4, r3
 8005d18:	d006      	beq.n	8005d28 <std+0x48>
 8005d1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d1e:	4294      	cmp	r4, r2
 8005d20:	d002      	beq.n	8005d28 <std+0x48>
 8005d22:	33d0      	adds	r3, #208	@ 0xd0
 8005d24:	429c      	cmp	r4, r3
 8005d26:	d105      	bne.n	8005d34 <std+0x54>
 8005d28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d30:	f000 b97a 	b.w	8006028 <__retarget_lock_init_recursive>
 8005d34:	bd10      	pop	{r4, pc}
 8005d36:	bf00      	nop
 8005d38:	08005ea9 	.word	0x08005ea9
 8005d3c:	08005ecb 	.word	0x08005ecb
 8005d40:	08005f03 	.word	0x08005f03
 8005d44:	08005f27 	.word	0x08005f27
 8005d48:	200006a8 	.word	0x200006a8

08005d4c <stdio_exit_handler>:
 8005d4c:	4a02      	ldr	r2, [pc, #8]	@ (8005d58 <stdio_exit_handler+0xc>)
 8005d4e:	4903      	ldr	r1, [pc, #12]	@ (8005d5c <stdio_exit_handler+0x10>)
 8005d50:	4803      	ldr	r0, [pc, #12]	@ (8005d60 <stdio_exit_handler+0x14>)
 8005d52:	f000 b869 	b.w	8005e28 <_fwalk_sglue>
 8005d56:	bf00      	nop
 8005d58:	20000014 	.word	0x20000014
 8005d5c:	080079c1 	.word	0x080079c1
 8005d60:	20000024 	.word	0x20000024

08005d64 <cleanup_stdio>:
 8005d64:	6841      	ldr	r1, [r0, #4]
 8005d66:	4b0c      	ldr	r3, [pc, #48]	@ (8005d98 <cleanup_stdio+0x34>)
 8005d68:	b510      	push	{r4, lr}
 8005d6a:	4299      	cmp	r1, r3
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	d001      	beq.n	8005d74 <cleanup_stdio+0x10>
 8005d70:	f001 fe26 	bl	80079c0 <_fflush_r>
 8005d74:	68a1      	ldr	r1, [r4, #8]
 8005d76:	4b09      	ldr	r3, [pc, #36]	@ (8005d9c <cleanup_stdio+0x38>)
 8005d78:	4299      	cmp	r1, r3
 8005d7a:	d002      	beq.n	8005d82 <cleanup_stdio+0x1e>
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	f001 fe1f 	bl	80079c0 <_fflush_r>
 8005d82:	68e1      	ldr	r1, [r4, #12]
 8005d84:	4b06      	ldr	r3, [pc, #24]	@ (8005da0 <cleanup_stdio+0x3c>)
 8005d86:	4299      	cmp	r1, r3
 8005d88:	d004      	beq.n	8005d94 <cleanup_stdio+0x30>
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d90:	f001 be16 	b.w	80079c0 <_fflush_r>
 8005d94:	bd10      	pop	{r4, pc}
 8005d96:	bf00      	nop
 8005d98:	200006a8 	.word	0x200006a8
 8005d9c:	20000710 	.word	0x20000710
 8005da0:	20000778 	.word	0x20000778

08005da4 <global_stdio_init.part.0>:
 8005da4:	b510      	push	{r4, lr}
 8005da6:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd4 <global_stdio_init.part.0+0x30>)
 8005da8:	4c0b      	ldr	r4, [pc, #44]	@ (8005dd8 <global_stdio_init.part.0+0x34>)
 8005daa:	4a0c      	ldr	r2, [pc, #48]	@ (8005ddc <global_stdio_init.part.0+0x38>)
 8005dac:	4620      	mov	r0, r4
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	2104      	movs	r1, #4
 8005db2:	2200      	movs	r2, #0
 8005db4:	f7ff ff94 	bl	8005ce0 <std>
 8005db8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	2109      	movs	r1, #9
 8005dc0:	f7ff ff8e 	bl	8005ce0 <std>
 8005dc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005dc8:	2202      	movs	r2, #2
 8005dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dce:	2112      	movs	r1, #18
 8005dd0:	f7ff bf86 	b.w	8005ce0 <std>
 8005dd4:	200007e0 	.word	0x200007e0
 8005dd8:	200006a8 	.word	0x200006a8
 8005ddc:	08005d4d 	.word	0x08005d4d

08005de0 <__sfp_lock_acquire>:
 8005de0:	4801      	ldr	r0, [pc, #4]	@ (8005de8 <__sfp_lock_acquire+0x8>)
 8005de2:	f000 b922 	b.w	800602a <__retarget_lock_acquire_recursive>
 8005de6:	bf00      	nop
 8005de8:	200007e9 	.word	0x200007e9

08005dec <__sfp_lock_release>:
 8005dec:	4801      	ldr	r0, [pc, #4]	@ (8005df4 <__sfp_lock_release+0x8>)
 8005dee:	f000 b91d 	b.w	800602c <__retarget_lock_release_recursive>
 8005df2:	bf00      	nop
 8005df4:	200007e9 	.word	0x200007e9

08005df8 <__sinit>:
 8005df8:	b510      	push	{r4, lr}
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	f7ff fff0 	bl	8005de0 <__sfp_lock_acquire>
 8005e00:	6a23      	ldr	r3, [r4, #32]
 8005e02:	b11b      	cbz	r3, 8005e0c <__sinit+0x14>
 8005e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e08:	f7ff bff0 	b.w	8005dec <__sfp_lock_release>
 8005e0c:	4b04      	ldr	r3, [pc, #16]	@ (8005e20 <__sinit+0x28>)
 8005e0e:	6223      	str	r3, [r4, #32]
 8005e10:	4b04      	ldr	r3, [pc, #16]	@ (8005e24 <__sinit+0x2c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1f5      	bne.n	8005e04 <__sinit+0xc>
 8005e18:	f7ff ffc4 	bl	8005da4 <global_stdio_init.part.0>
 8005e1c:	e7f2      	b.n	8005e04 <__sinit+0xc>
 8005e1e:	bf00      	nop
 8005e20:	08005d65 	.word	0x08005d65
 8005e24:	200007e0 	.word	0x200007e0

08005e28 <_fwalk_sglue>:
 8005e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e2c:	4607      	mov	r7, r0
 8005e2e:	4688      	mov	r8, r1
 8005e30:	4614      	mov	r4, r2
 8005e32:	2600      	movs	r6, #0
 8005e34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e38:	f1b9 0901 	subs.w	r9, r9, #1
 8005e3c:	d505      	bpl.n	8005e4a <_fwalk_sglue+0x22>
 8005e3e:	6824      	ldr	r4, [r4, #0]
 8005e40:	2c00      	cmp	r4, #0
 8005e42:	d1f7      	bne.n	8005e34 <_fwalk_sglue+0xc>
 8005e44:	4630      	mov	r0, r6
 8005e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e4a:	89ab      	ldrh	r3, [r5, #12]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d907      	bls.n	8005e60 <_fwalk_sglue+0x38>
 8005e50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e54:	3301      	adds	r3, #1
 8005e56:	d003      	beq.n	8005e60 <_fwalk_sglue+0x38>
 8005e58:	4629      	mov	r1, r5
 8005e5a:	4638      	mov	r0, r7
 8005e5c:	47c0      	blx	r8
 8005e5e:	4306      	orrs	r6, r0
 8005e60:	3568      	adds	r5, #104	@ 0x68
 8005e62:	e7e9      	b.n	8005e38 <_fwalk_sglue+0x10>

08005e64 <siprintf>:
 8005e64:	b40e      	push	{r1, r2, r3}
 8005e66:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005e6a:	b510      	push	{r4, lr}
 8005e6c:	2400      	movs	r4, #0
 8005e6e:	b09d      	sub	sp, #116	@ 0x74
 8005e70:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005e72:	9002      	str	r0, [sp, #8]
 8005e74:	9006      	str	r0, [sp, #24]
 8005e76:	9107      	str	r1, [sp, #28]
 8005e78:	9104      	str	r1, [sp, #16]
 8005e7a:	4809      	ldr	r0, [pc, #36]	@ (8005ea0 <siprintf+0x3c>)
 8005e7c:	4909      	ldr	r1, [pc, #36]	@ (8005ea4 <siprintf+0x40>)
 8005e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e82:	9105      	str	r1, [sp, #20]
 8005e84:	6800      	ldr	r0, [r0, #0]
 8005e86:	a902      	add	r1, sp, #8
 8005e88:	9301      	str	r3, [sp, #4]
 8005e8a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005e8c:	f001 fc1c 	bl	80076c8 <_svfiprintf_r>
 8005e90:	9b02      	ldr	r3, [sp, #8]
 8005e92:	701c      	strb	r4, [r3, #0]
 8005e94:	b01d      	add	sp, #116	@ 0x74
 8005e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e9a:	b003      	add	sp, #12
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	20000020 	.word	0x20000020
 8005ea4:	ffff0208 	.word	0xffff0208

08005ea8 <__sread>:
 8005ea8:	b510      	push	{r4, lr}
 8005eaa:	460c      	mov	r4, r1
 8005eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eb0:	f000 f86c 	bl	8005f8c <_read_r>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	bfab      	itete	ge
 8005eb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005eba:	89a3      	ldrhlt	r3, [r4, #12]
 8005ebc:	181b      	addge	r3, r3, r0
 8005ebe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005ec2:	bfac      	ite	ge
 8005ec4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005ec6:	81a3      	strhlt	r3, [r4, #12]
 8005ec8:	bd10      	pop	{r4, pc}

08005eca <__swrite>:
 8005eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ece:	461f      	mov	r7, r3
 8005ed0:	898b      	ldrh	r3, [r1, #12]
 8005ed2:	4605      	mov	r5, r0
 8005ed4:	05db      	lsls	r3, r3, #23
 8005ed6:	460c      	mov	r4, r1
 8005ed8:	4616      	mov	r6, r2
 8005eda:	d505      	bpl.n	8005ee8 <__swrite+0x1e>
 8005edc:	2302      	movs	r3, #2
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee4:	f000 f840 	bl	8005f68 <_lseek_r>
 8005ee8:	89a3      	ldrh	r3, [r4, #12]
 8005eea:	4632      	mov	r2, r6
 8005eec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ef0:	81a3      	strh	r3, [r4, #12]
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	463b      	mov	r3, r7
 8005ef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005efe:	f000 b857 	b.w	8005fb0 <_write_r>

08005f02 <__sseek>:
 8005f02:	b510      	push	{r4, lr}
 8005f04:	460c      	mov	r4, r1
 8005f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f0a:	f000 f82d 	bl	8005f68 <_lseek_r>
 8005f0e:	1c43      	adds	r3, r0, #1
 8005f10:	89a3      	ldrh	r3, [r4, #12]
 8005f12:	bf15      	itete	ne
 8005f14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f1e:	81a3      	strheq	r3, [r4, #12]
 8005f20:	bf18      	it	ne
 8005f22:	81a3      	strhne	r3, [r4, #12]
 8005f24:	bd10      	pop	{r4, pc}

08005f26 <__sclose>:
 8005f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f2a:	f000 b80d 	b.w	8005f48 <_close_r>

08005f2e <memset>:
 8005f2e:	4603      	mov	r3, r0
 8005f30:	4402      	add	r2, r0
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d100      	bne.n	8005f38 <memset+0xa>
 8005f36:	4770      	bx	lr
 8005f38:	f803 1b01 	strb.w	r1, [r3], #1
 8005f3c:	e7f9      	b.n	8005f32 <memset+0x4>
	...

08005f40 <_localeconv_r>:
 8005f40:	4800      	ldr	r0, [pc, #0]	@ (8005f44 <_localeconv_r+0x4>)
 8005f42:	4770      	bx	lr
 8005f44:	20000160 	.word	0x20000160

08005f48 <_close_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	4d05      	ldr	r5, [pc, #20]	@ (8005f64 <_close_r+0x1c>)
 8005f4e:	4604      	mov	r4, r0
 8005f50:	4608      	mov	r0, r1
 8005f52:	602b      	str	r3, [r5, #0]
 8005f54:	f7ff f9d7 	bl	8005306 <_close>
 8005f58:	1c43      	adds	r3, r0, #1
 8005f5a:	d102      	bne.n	8005f62 <_close_r+0x1a>
 8005f5c:	682b      	ldr	r3, [r5, #0]
 8005f5e:	b103      	cbz	r3, 8005f62 <_close_r+0x1a>
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	bd38      	pop	{r3, r4, r5, pc}
 8005f64:	200007e4 	.word	0x200007e4

08005f68 <_lseek_r>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	4608      	mov	r0, r1
 8005f6e:	4611      	mov	r1, r2
 8005f70:	2200      	movs	r2, #0
 8005f72:	4d05      	ldr	r5, [pc, #20]	@ (8005f88 <_lseek_r+0x20>)
 8005f74:	602a      	str	r2, [r5, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	f7ff f9e9 	bl	800534e <_lseek>
 8005f7c:	1c43      	adds	r3, r0, #1
 8005f7e:	d102      	bne.n	8005f86 <_lseek_r+0x1e>
 8005f80:	682b      	ldr	r3, [r5, #0]
 8005f82:	b103      	cbz	r3, 8005f86 <_lseek_r+0x1e>
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	bd38      	pop	{r3, r4, r5, pc}
 8005f88:	200007e4 	.word	0x200007e4

08005f8c <_read_r>:
 8005f8c:	b538      	push	{r3, r4, r5, lr}
 8005f8e:	4604      	mov	r4, r0
 8005f90:	4608      	mov	r0, r1
 8005f92:	4611      	mov	r1, r2
 8005f94:	2200      	movs	r2, #0
 8005f96:	4d05      	ldr	r5, [pc, #20]	@ (8005fac <_read_r+0x20>)
 8005f98:	602a      	str	r2, [r5, #0]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	f7ff f97a 	bl	8005294 <_read>
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d102      	bne.n	8005faa <_read_r+0x1e>
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	b103      	cbz	r3, 8005faa <_read_r+0x1e>
 8005fa8:	6023      	str	r3, [r4, #0]
 8005faa:	bd38      	pop	{r3, r4, r5, pc}
 8005fac:	200007e4 	.word	0x200007e4

08005fb0 <_write_r>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	2200      	movs	r2, #0
 8005fba:	4d05      	ldr	r5, [pc, #20]	@ (8005fd0 <_write_r+0x20>)
 8005fbc:	602a      	str	r2, [r5, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f7ff f985 	bl	80052ce <_write>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d102      	bne.n	8005fce <_write_r+0x1e>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	b103      	cbz	r3, 8005fce <_write_r+0x1e>
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	200007e4 	.word	0x200007e4

08005fd4 <__errno>:
 8005fd4:	4b01      	ldr	r3, [pc, #4]	@ (8005fdc <__errno+0x8>)
 8005fd6:	6818      	ldr	r0, [r3, #0]
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	20000020 	.word	0x20000020

08005fe0 <__libc_init_array>:
 8005fe0:	b570      	push	{r4, r5, r6, lr}
 8005fe2:	2600      	movs	r6, #0
 8005fe4:	4d0c      	ldr	r5, [pc, #48]	@ (8006018 <__libc_init_array+0x38>)
 8005fe6:	4c0d      	ldr	r4, [pc, #52]	@ (800601c <__libc_init_array+0x3c>)
 8005fe8:	1b64      	subs	r4, r4, r5
 8005fea:	10a4      	asrs	r4, r4, #2
 8005fec:	42a6      	cmp	r6, r4
 8005fee:	d109      	bne.n	8006004 <__libc_init_array+0x24>
 8005ff0:	f002 f874 	bl	80080dc <_init>
 8005ff4:	2600      	movs	r6, #0
 8005ff6:	4d0a      	ldr	r5, [pc, #40]	@ (8006020 <__libc_init_array+0x40>)
 8005ff8:	4c0a      	ldr	r4, [pc, #40]	@ (8006024 <__libc_init_array+0x44>)
 8005ffa:	1b64      	subs	r4, r4, r5
 8005ffc:	10a4      	asrs	r4, r4, #2
 8005ffe:	42a6      	cmp	r6, r4
 8006000:	d105      	bne.n	800600e <__libc_init_array+0x2e>
 8006002:	bd70      	pop	{r4, r5, r6, pc}
 8006004:	f855 3b04 	ldr.w	r3, [r5], #4
 8006008:	4798      	blx	r3
 800600a:	3601      	adds	r6, #1
 800600c:	e7ee      	b.n	8005fec <__libc_init_array+0xc>
 800600e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006012:	4798      	blx	r3
 8006014:	3601      	adds	r6, #1
 8006016:	e7f2      	b.n	8005ffe <__libc_init_array+0x1e>
 8006018:	080097ac 	.word	0x080097ac
 800601c:	080097ac 	.word	0x080097ac
 8006020:	080097ac 	.word	0x080097ac
 8006024:	080097b0 	.word	0x080097b0

08006028 <__retarget_lock_init_recursive>:
 8006028:	4770      	bx	lr

0800602a <__retarget_lock_acquire_recursive>:
 800602a:	4770      	bx	lr

0800602c <__retarget_lock_release_recursive>:
 800602c:	4770      	bx	lr

0800602e <memchr>:
 800602e:	4603      	mov	r3, r0
 8006030:	b510      	push	{r4, lr}
 8006032:	b2c9      	uxtb	r1, r1
 8006034:	4402      	add	r2, r0
 8006036:	4293      	cmp	r3, r2
 8006038:	4618      	mov	r0, r3
 800603a:	d101      	bne.n	8006040 <memchr+0x12>
 800603c:	2000      	movs	r0, #0
 800603e:	e003      	b.n	8006048 <memchr+0x1a>
 8006040:	7804      	ldrb	r4, [r0, #0]
 8006042:	3301      	adds	r3, #1
 8006044:	428c      	cmp	r4, r1
 8006046:	d1f6      	bne.n	8006036 <memchr+0x8>
 8006048:	bd10      	pop	{r4, pc}

0800604a <memcpy>:
 800604a:	440a      	add	r2, r1
 800604c:	4291      	cmp	r1, r2
 800604e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006052:	d100      	bne.n	8006056 <memcpy+0xc>
 8006054:	4770      	bx	lr
 8006056:	b510      	push	{r4, lr}
 8006058:	f811 4b01 	ldrb.w	r4, [r1], #1
 800605c:	4291      	cmp	r1, r2
 800605e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006062:	d1f9      	bne.n	8006058 <memcpy+0xe>
 8006064:	bd10      	pop	{r4, pc}

08006066 <quorem>:
 8006066:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606a:	6903      	ldr	r3, [r0, #16]
 800606c:	690c      	ldr	r4, [r1, #16]
 800606e:	4607      	mov	r7, r0
 8006070:	42a3      	cmp	r3, r4
 8006072:	db7e      	blt.n	8006172 <quorem+0x10c>
 8006074:	3c01      	subs	r4, #1
 8006076:	00a3      	lsls	r3, r4, #2
 8006078:	f100 0514 	add.w	r5, r0, #20
 800607c:	f101 0814 	add.w	r8, r1, #20
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006086:	9301      	str	r3, [sp, #4]
 8006088:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800608c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006090:	3301      	adds	r3, #1
 8006092:	429a      	cmp	r2, r3
 8006094:	fbb2 f6f3 	udiv	r6, r2, r3
 8006098:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800609c:	d32e      	bcc.n	80060fc <quorem+0x96>
 800609e:	f04f 0a00 	mov.w	sl, #0
 80060a2:	46c4      	mov	ip, r8
 80060a4:	46ae      	mov	lr, r5
 80060a6:	46d3      	mov	fp, sl
 80060a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060ac:	b298      	uxth	r0, r3
 80060ae:	fb06 a000 	mla	r0, r6, r0, sl
 80060b2:	0c1b      	lsrs	r3, r3, #16
 80060b4:	0c02      	lsrs	r2, r0, #16
 80060b6:	fb06 2303 	mla	r3, r6, r3, r2
 80060ba:	f8de 2000 	ldr.w	r2, [lr]
 80060be:	b280      	uxth	r0, r0
 80060c0:	b292      	uxth	r2, r2
 80060c2:	1a12      	subs	r2, r2, r0
 80060c4:	445a      	add	r2, fp
 80060c6:	f8de 0000 	ldr.w	r0, [lr]
 80060ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80060d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80060d8:	b292      	uxth	r2, r2
 80060da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80060de:	45e1      	cmp	r9, ip
 80060e0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80060e4:	f84e 2b04 	str.w	r2, [lr], #4
 80060e8:	d2de      	bcs.n	80060a8 <quorem+0x42>
 80060ea:	9b00      	ldr	r3, [sp, #0]
 80060ec:	58eb      	ldr	r3, [r5, r3]
 80060ee:	b92b      	cbnz	r3, 80060fc <quorem+0x96>
 80060f0:	9b01      	ldr	r3, [sp, #4]
 80060f2:	3b04      	subs	r3, #4
 80060f4:	429d      	cmp	r5, r3
 80060f6:	461a      	mov	r2, r3
 80060f8:	d32f      	bcc.n	800615a <quorem+0xf4>
 80060fa:	613c      	str	r4, [r7, #16]
 80060fc:	4638      	mov	r0, r7
 80060fe:	f001 f97f 	bl	8007400 <__mcmp>
 8006102:	2800      	cmp	r0, #0
 8006104:	db25      	blt.n	8006152 <quorem+0xec>
 8006106:	4629      	mov	r1, r5
 8006108:	2000      	movs	r0, #0
 800610a:	f858 2b04 	ldr.w	r2, [r8], #4
 800610e:	f8d1 c000 	ldr.w	ip, [r1]
 8006112:	fa1f fe82 	uxth.w	lr, r2
 8006116:	fa1f f38c 	uxth.w	r3, ip
 800611a:	eba3 030e 	sub.w	r3, r3, lr
 800611e:	4403      	add	r3, r0
 8006120:	0c12      	lsrs	r2, r2, #16
 8006122:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006126:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800612a:	b29b      	uxth	r3, r3
 800612c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006130:	45c1      	cmp	r9, r8
 8006132:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006136:	f841 3b04 	str.w	r3, [r1], #4
 800613a:	d2e6      	bcs.n	800610a <quorem+0xa4>
 800613c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006140:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006144:	b922      	cbnz	r2, 8006150 <quorem+0xea>
 8006146:	3b04      	subs	r3, #4
 8006148:	429d      	cmp	r5, r3
 800614a:	461a      	mov	r2, r3
 800614c:	d30b      	bcc.n	8006166 <quorem+0x100>
 800614e:	613c      	str	r4, [r7, #16]
 8006150:	3601      	adds	r6, #1
 8006152:	4630      	mov	r0, r6
 8006154:	b003      	add	sp, #12
 8006156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800615a:	6812      	ldr	r2, [r2, #0]
 800615c:	3b04      	subs	r3, #4
 800615e:	2a00      	cmp	r2, #0
 8006160:	d1cb      	bne.n	80060fa <quorem+0x94>
 8006162:	3c01      	subs	r4, #1
 8006164:	e7c6      	b.n	80060f4 <quorem+0x8e>
 8006166:	6812      	ldr	r2, [r2, #0]
 8006168:	3b04      	subs	r3, #4
 800616a:	2a00      	cmp	r2, #0
 800616c:	d1ef      	bne.n	800614e <quorem+0xe8>
 800616e:	3c01      	subs	r4, #1
 8006170:	e7ea      	b.n	8006148 <quorem+0xe2>
 8006172:	2000      	movs	r0, #0
 8006174:	e7ee      	b.n	8006154 <quorem+0xee>
	...

08006178 <_dtoa_r>:
 8006178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617c:	4614      	mov	r4, r2
 800617e:	461d      	mov	r5, r3
 8006180:	69c7      	ldr	r7, [r0, #28]
 8006182:	b097      	sub	sp, #92	@ 0x5c
 8006184:	4681      	mov	r9, r0
 8006186:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800618a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800618c:	b97f      	cbnz	r7, 80061ae <_dtoa_r+0x36>
 800618e:	2010      	movs	r0, #16
 8006190:	f000 fe0e 	bl	8006db0 <malloc>
 8006194:	4602      	mov	r2, r0
 8006196:	f8c9 001c 	str.w	r0, [r9, #28]
 800619a:	b920      	cbnz	r0, 80061a6 <_dtoa_r+0x2e>
 800619c:	21ef      	movs	r1, #239	@ 0xef
 800619e:	4bac      	ldr	r3, [pc, #688]	@ (8006450 <_dtoa_r+0x2d8>)
 80061a0:	48ac      	ldr	r0, [pc, #688]	@ (8006454 <_dtoa_r+0x2dc>)
 80061a2:	f001 fc5f 	bl	8007a64 <__assert_func>
 80061a6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80061aa:	6007      	str	r7, [r0, #0]
 80061ac:	60c7      	str	r7, [r0, #12]
 80061ae:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80061b2:	6819      	ldr	r1, [r3, #0]
 80061b4:	b159      	cbz	r1, 80061ce <_dtoa_r+0x56>
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	2301      	movs	r3, #1
 80061ba:	4093      	lsls	r3, r2
 80061bc:	604a      	str	r2, [r1, #4]
 80061be:	608b      	str	r3, [r1, #8]
 80061c0:	4648      	mov	r0, r9
 80061c2:	f000 feeb 	bl	8006f9c <_Bfree>
 80061c6:	2200      	movs	r2, #0
 80061c8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	1e2b      	subs	r3, r5, #0
 80061d0:	bfaf      	iteee	ge
 80061d2:	2300      	movge	r3, #0
 80061d4:	2201      	movlt	r2, #1
 80061d6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80061da:	9307      	strlt	r3, [sp, #28]
 80061dc:	bfa8      	it	ge
 80061de:	6033      	strge	r3, [r6, #0]
 80061e0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80061e4:	4b9c      	ldr	r3, [pc, #624]	@ (8006458 <_dtoa_r+0x2e0>)
 80061e6:	bfb8      	it	lt
 80061e8:	6032      	strlt	r2, [r6, #0]
 80061ea:	ea33 0308 	bics.w	r3, r3, r8
 80061ee:	d112      	bne.n	8006216 <_dtoa_r+0x9e>
 80061f0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80061f4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80061f6:	6013      	str	r3, [r2, #0]
 80061f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80061fc:	4323      	orrs	r3, r4
 80061fe:	f000 855e 	beq.w	8006cbe <_dtoa_r+0xb46>
 8006202:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006204:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800645c <_dtoa_r+0x2e4>
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 8560 	beq.w	8006cce <_dtoa_r+0xb56>
 800620e:	f10a 0303 	add.w	r3, sl, #3
 8006212:	f000 bd5a 	b.w	8006cca <_dtoa_r+0xb52>
 8006216:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800621a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800621e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006222:	2200      	movs	r2, #0
 8006224:	2300      	movs	r3, #0
 8006226:	f7fa fbbf 	bl	80009a8 <__aeabi_dcmpeq>
 800622a:	4607      	mov	r7, r0
 800622c:	b158      	cbz	r0, 8006246 <_dtoa_r+0xce>
 800622e:	2301      	movs	r3, #1
 8006230:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006232:	6013      	str	r3, [r2, #0]
 8006234:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006236:	b113      	cbz	r3, 800623e <_dtoa_r+0xc6>
 8006238:	4b89      	ldr	r3, [pc, #548]	@ (8006460 <_dtoa_r+0x2e8>)
 800623a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006464 <_dtoa_r+0x2ec>
 8006242:	f000 bd44 	b.w	8006cce <_dtoa_r+0xb56>
 8006246:	ab14      	add	r3, sp, #80	@ 0x50
 8006248:	9301      	str	r3, [sp, #4]
 800624a:	ab15      	add	r3, sp, #84	@ 0x54
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	4648      	mov	r0, r9
 8006250:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006254:	f001 f984 	bl	8007560 <__d2b>
 8006258:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800625c:	9003      	str	r0, [sp, #12]
 800625e:	2e00      	cmp	r6, #0
 8006260:	d078      	beq.n	8006354 <_dtoa_r+0x1dc>
 8006262:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006266:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006268:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800626c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006270:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006274:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006278:	9712      	str	r7, [sp, #72]	@ 0x48
 800627a:	4619      	mov	r1, r3
 800627c:	2200      	movs	r2, #0
 800627e:	4b7a      	ldr	r3, [pc, #488]	@ (8006468 <_dtoa_r+0x2f0>)
 8006280:	f7f9 ff72 	bl	8000168 <__aeabi_dsub>
 8006284:	a36c      	add	r3, pc, #432	@ (adr r3, 8006438 <_dtoa_r+0x2c0>)
 8006286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628a:	f7fa f925 	bl	80004d8 <__aeabi_dmul>
 800628e:	a36c      	add	r3, pc, #432	@ (adr r3, 8006440 <_dtoa_r+0x2c8>)
 8006290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006294:	f7f9 ff6a 	bl	800016c <__adddf3>
 8006298:	4604      	mov	r4, r0
 800629a:	4630      	mov	r0, r6
 800629c:	460d      	mov	r5, r1
 800629e:	f7fa f8b1 	bl	8000404 <__aeabi_i2d>
 80062a2:	a369      	add	r3, pc, #420	@ (adr r3, 8006448 <_dtoa_r+0x2d0>)
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	f7fa f916 	bl	80004d8 <__aeabi_dmul>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4620      	mov	r0, r4
 80062b2:	4629      	mov	r1, r5
 80062b4:	f7f9 ff5a 	bl	800016c <__adddf3>
 80062b8:	4604      	mov	r4, r0
 80062ba:	460d      	mov	r5, r1
 80062bc:	f7fa fbbc 	bl	8000a38 <__aeabi_d2iz>
 80062c0:	2200      	movs	r2, #0
 80062c2:	4607      	mov	r7, r0
 80062c4:	2300      	movs	r3, #0
 80062c6:	4620      	mov	r0, r4
 80062c8:	4629      	mov	r1, r5
 80062ca:	f7fa fb77 	bl	80009bc <__aeabi_dcmplt>
 80062ce:	b140      	cbz	r0, 80062e2 <_dtoa_r+0x16a>
 80062d0:	4638      	mov	r0, r7
 80062d2:	f7fa f897 	bl	8000404 <__aeabi_i2d>
 80062d6:	4622      	mov	r2, r4
 80062d8:	462b      	mov	r3, r5
 80062da:	f7fa fb65 	bl	80009a8 <__aeabi_dcmpeq>
 80062de:	b900      	cbnz	r0, 80062e2 <_dtoa_r+0x16a>
 80062e0:	3f01      	subs	r7, #1
 80062e2:	2f16      	cmp	r7, #22
 80062e4:	d854      	bhi.n	8006390 <_dtoa_r+0x218>
 80062e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062ea:	4b60      	ldr	r3, [pc, #384]	@ (800646c <_dtoa_r+0x2f4>)
 80062ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f4:	f7fa fb62 	bl	80009bc <__aeabi_dcmplt>
 80062f8:	2800      	cmp	r0, #0
 80062fa:	d04b      	beq.n	8006394 <_dtoa_r+0x21c>
 80062fc:	2300      	movs	r3, #0
 80062fe:	3f01      	subs	r7, #1
 8006300:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006302:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006304:	1b9b      	subs	r3, r3, r6
 8006306:	1e5a      	subs	r2, r3, #1
 8006308:	bf49      	itett	mi
 800630a:	f1c3 0301 	rsbmi	r3, r3, #1
 800630e:	2300      	movpl	r3, #0
 8006310:	9304      	strmi	r3, [sp, #16]
 8006312:	2300      	movmi	r3, #0
 8006314:	9209      	str	r2, [sp, #36]	@ 0x24
 8006316:	bf54      	ite	pl
 8006318:	9304      	strpl	r3, [sp, #16]
 800631a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800631c:	2f00      	cmp	r7, #0
 800631e:	db3b      	blt.n	8006398 <_dtoa_r+0x220>
 8006320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006322:	970e      	str	r7, [sp, #56]	@ 0x38
 8006324:	443b      	add	r3, r7
 8006326:	9309      	str	r3, [sp, #36]	@ 0x24
 8006328:	2300      	movs	r3, #0
 800632a:	930a      	str	r3, [sp, #40]	@ 0x28
 800632c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800632e:	2b09      	cmp	r3, #9
 8006330:	d865      	bhi.n	80063fe <_dtoa_r+0x286>
 8006332:	2b05      	cmp	r3, #5
 8006334:	bfc4      	itt	gt
 8006336:	3b04      	subgt	r3, #4
 8006338:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800633a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800633c:	bfc8      	it	gt
 800633e:	2400      	movgt	r4, #0
 8006340:	f1a3 0302 	sub.w	r3, r3, #2
 8006344:	bfd8      	it	le
 8006346:	2401      	movle	r4, #1
 8006348:	2b03      	cmp	r3, #3
 800634a:	d864      	bhi.n	8006416 <_dtoa_r+0x29e>
 800634c:	e8df f003 	tbb	[pc, r3]
 8006350:	2c385553 	.word	0x2c385553
 8006354:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006358:	441e      	add	r6, r3
 800635a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800635e:	2b20      	cmp	r3, #32
 8006360:	bfc1      	itttt	gt
 8006362:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006366:	fa08 f803 	lslgt.w	r8, r8, r3
 800636a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800636e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006372:	bfd6      	itet	le
 8006374:	f1c3 0320 	rsble	r3, r3, #32
 8006378:	ea48 0003 	orrgt.w	r0, r8, r3
 800637c:	fa04 f003 	lslle.w	r0, r4, r3
 8006380:	f7fa f830 	bl	80003e4 <__aeabi_ui2d>
 8006384:	2201      	movs	r2, #1
 8006386:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800638a:	3e01      	subs	r6, #1
 800638c:	9212      	str	r2, [sp, #72]	@ 0x48
 800638e:	e774      	b.n	800627a <_dtoa_r+0x102>
 8006390:	2301      	movs	r3, #1
 8006392:	e7b5      	b.n	8006300 <_dtoa_r+0x188>
 8006394:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006396:	e7b4      	b.n	8006302 <_dtoa_r+0x18a>
 8006398:	9b04      	ldr	r3, [sp, #16]
 800639a:	1bdb      	subs	r3, r3, r7
 800639c:	9304      	str	r3, [sp, #16]
 800639e:	427b      	negs	r3, r7
 80063a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80063a2:	2300      	movs	r3, #0
 80063a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80063a6:	e7c1      	b.n	800632c <_dtoa_r+0x1b4>
 80063a8:	2301      	movs	r3, #1
 80063aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063ae:	eb07 0b03 	add.w	fp, r7, r3
 80063b2:	f10b 0301 	add.w	r3, fp, #1
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	9308      	str	r3, [sp, #32]
 80063ba:	bfb8      	it	lt
 80063bc:	2301      	movlt	r3, #1
 80063be:	e006      	b.n	80063ce <_dtoa_r+0x256>
 80063c0:	2301      	movs	r3, #1
 80063c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	dd28      	ble.n	800641c <_dtoa_r+0x2a4>
 80063ca:	469b      	mov	fp, r3
 80063cc:	9308      	str	r3, [sp, #32]
 80063ce:	2100      	movs	r1, #0
 80063d0:	2204      	movs	r2, #4
 80063d2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80063d6:	f102 0514 	add.w	r5, r2, #20
 80063da:	429d      	cmp	r5, r3
 80063dc:	d926      	bls.n	800642c <_dtoa_r+0x2b4>
 80063de:	6041      	str	r1, [r0, #4]
 80063e0:	4648      	mov	r0, r9
 80063e2:	f000 fd9b 	bl	8006f1c <_Balloc>
 80063e6:	4682      	mov	sl, r0
 80063e8:	2800      	cmp	r0, #0
 80063ea:	d143      	bne.n	8006474 <_dtoa_r+0x2fc>
 80063ec:	4602      	mov	r2, r0
 80063ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80063f2:	4b1f      	ldr	r3, [pc, #124]	@ (8006470 <_dtoa_r+0x2f8>)
 80063f4:	e6d4      	b.n	80061a0 <_dtoa_r+0x28>
 80063f6:	2300      	movs	r3, #0
 80063f8:	e7e3      	b.n	80063c2 <_dtoa_r+0x24a>
 80063fa:	2300      	movs	r3, #0
 80063fc:	e7d5      	b.n	80063aa <_dtoa_r+0x232>
 80063fe:	2401      	movs	r4, #1
 8006400:	2300      	movs	r3, #0
 8006402:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006404:	9320      	str	r3, [sp, #128]	@ 0x80
 8006406:	f04f 3bff 	mov.w	fp, #4294967295
 800640a:	2200      	movs	r2, #0
 800640c:	2312      	movs	r3, #18
 800640e:	f8cd b020 	str.w	fp, [sp, #32]
 8006412:	9221      	str	r2, [sp, #132]	@ 0x84
 8006414:	e7db      	b.n	80063ce <_dtoa_r+0x256>
 8006416:	2301      	movs	r3, #1
 8006418:	930b      	str	r3, [sp, #44]	@ 0x2c
 800641a:	e7f4      	b.n	8006406 <_dtoa_r+0x28e>
 800641c:	f04f 0b01 	mov.w	fp, #1
 8006420:	465b      	mov	r3, fp
 8006422:	f8cd b020 	str.w	fp, [sp, #32]
 8006426:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800642a:	e7d0      	b.n	80063ce <_dtoa_r+0x256>
 800642c:	3101      	adds	r1, #1
 800642e:	0052      	lsls	r2, r2, #1
 8006430:	e7d1      	b.n	80063d6 <_dtoa_r+0x25e>
 8006432:	bf00      	nop
 8006434:	f3af 8000 	nop.w
 8006438:	636f4361 	.word	0x636f4361
 800643c:	3fd287a7 	.word	0x3fd287a7
 8006440:	8b60c8b3 	.word	0x8b60c8b3
 8006444:	3fc68a28 	.word	0x3fc68a28
 8006448:	509f79fb 	.word	0x509f79fb
 800644c:	3fd34413 	.word	0x3fd34413
 8006450:	08009471 	.word	0x08009471
 8006454:	08009488 	.word	0x08009488
 8006458:	7ff00000 	.word	0x7ff00000
 800645c:	0800946d 	.word	0x0800946d
 8006460:	08009441 	.word	0x08009441
 8006464:	08009440 	.word	0x08009440
 8006468:	3ff80000 	.word	0x3ff80000
 800646c:	080095d8 	.word	0x080095d8
 8006470:	080094e0 	.word	0x080094e0
 8006474:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006478:	6018      	str	r0, [r3, #0]
 800647a:	9b08      	ldr	r3, [sp, #32]
 800647c:	2b0e      	cmp	r3, #14
 800647e:	f200 80a1 	bhi.w	80065c4 <_dtoa_r+0x44c>
 8006482:	2c00      	cmp	r4, #0
 8006484:	f000 809e 	beq.w	80065c4 <_dtoa_r+0x44c>
 8006488:	2f00      	cmp	r7, #0
 800648a:	dd33      	ble.n	80064f4 <_dtoa_r+0x37c>
 800648c:	4b9c      	ldr	r3, [pc, #624]	@ (8006700 <_dtoa_r+0x588>)
 800648e:	f007 020f 	and.w	r2, r7, #15
 8006492:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006496:	05f8      	lsls	r0, r7, #23
 8006498:	e9d3 3400 	ldrd	r3, r4, [r3]
 800649c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80064a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80064a4:	d516      	bpl.n	80064d4 <_dtoa_r+0x35c>
 80064a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064aa:	4b96      	ldr	r3, [pc, #600]	@ (8006704 <_dtoa_r+0x58c>)
 80064ac:	2603      	movs	r6, #3
 80064ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064b2:	f7fa f93b 	bl	800072c <__aeabi_ddiv>
 80064b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80064ba:	f004 040f 	and.w	r4, r4, #15
 80064be:	4d91      	ldr	r5, [pc, #580]	@ (8006704 <_dtoa_r+0x58c>)
 80064c0:	b954      	cbnz	r4, 80064d8 <_dtoa_r+0x360>
 80064c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80064c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064ca:	f7fa f92f 	bl	800072c <__aeabi_ddiv>
 80064ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80064d2:	e028      	b.n	8006526 <_dtoa_r+0x3ae>
 80064d4:	2602      	movs	r6, #2
 80064d6:	e7f2      	b.n	80064be <_dtoa_r+0x346>
 80064d8:	07e1      	lsls	r1, r4, #31
 80064da:	d508      	bpl.n	80064ee <_dtoa_r+0x376>
 80064dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80064e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80064e4:	f7f9 fff8 	bl	80004d8 <__aeabi_dmul>
 80064e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80064ec:	3601      	adds	r6, #1
 80064ee:	1064      	asrs	r4, r4, #1
 80064f0:	3508      	adds	r5, #8
 80064f2:	e7e5      	b.n	80064c0 <_dtoa_r+0x348>
 80064f4:	f000 80af 	beq.w	8006656 <_dtoa_r+0x4de>
 80064f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064fc:	427c      	negs	r4, r7
 80064fe:	4b80      	ldr	r3, [pc, #512]	@ (8006700 <_dtoa_r+0x588>)
 8006500:	f004 020f 	and.w	r2, r4, #15
 8006504:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	f7f9 ffe4 	bl	80004d8 <__aeabi_dmul>
 8006510:	2602      	movs	r6, #2
 8006512:	2300      	movs	r3, #0
 8006514:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006518:	4d7a      	ldr	r5, [pc, #488]	@ (8006704 <_dtoa_r+0x58c>)
 800651a:	1124      	asrs	r4, r4, #4
 800651c:	2c00      	cmp	r4, #0
 800651e:	f040 808f 	bne.w	8006640 <_dtoa_r+0x4c8>
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1d3      	bne.n	80064ce <_dtoa_r+0x356>
 8006526:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800652a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800652c:	2b00      	cmp	r3, #0
 800652e:	f000 8094 	beq.w	800665a <_dtoa_r+0x4e2>
 8006532:	2200      	movs	r2, #0
 8006534:	4620      	mov	r0, r4
 8006536:	4629      	mov	r1, r5
 8006538:	4b73      	ldr	r3, [pc, #460]	@ (8006708 <_dtoa_r+0x590>)
 800653a:	f7fa fa3f 	bl	80009bc <__aeabi_dcmplt>
 800653e:	2800      	cmp	r0, #0
 8006540:	f000 808b 	beq.w	800665a <_dtoa_r+0x4e2>
 8006544:	9b08      	ldr	r3, [sp, #32]
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 8087 	beq.w	800665a <_dtoa_r+0x4e2>
 800654c:	f1bb 0f00 	cmp.w	fp, #0
 8006550:	dd34      	ble.n	80065bc <_dtoa_r+0x444>
 8006552:	4620      	mov	r0, r4
 8006554:	2200      	movs	r2, #0
 8006556:	4629      	mov	r1, r5
 8006558:	4b6c      	ldr	r3, [pc, #432]	@ (800670c <_dtoa_r+0x594>)
 800655a:	f7f9 ffbd 	bl	80004d8 <__aeabi_dmul>
 800655e:	465c      	mov	r4, fp
 8006560:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006564:	f107 38ff 	add.w	r8, r7, #4294967295
 8006568:	3601      	adds	r6, #1
 800656a:	4630      	mov	r0, r6
 800656c:	f7f9 ff4a 	bl	8000404 <__aeabi_i2d>
 8006570:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006574:	f7f9 ffb0 	bl	80004d8 <__aeabi_dmul>
 8006578:	2200      	movs	r2, #0
 800657a:	4b65      	ldr	r3, [pc, #404]	@ (8006710 <_dtoa_r+0x598>)
 800657c:	f7f9 fdf6 	bl	800016c <__adddf3>
 8006580:	4605      	mov	r5, r0
 8006582:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006586:	2c00      	cmp	r4, #0
 8006588:	d16a      	bne.n	8006660 <_dtoa_r+0x4e8>
 800658a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800658e:	2200      	movs	r2, #0
 8006590:	4b60      	ldr	r3, [pc, #384]	@ (8006714 <_dtoa_r+0x59c>)
 8006592:	f7f9 fde9 	bl	8000168 <__aeabi_dsub>
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800659e:	462a      	mov	r2, r5
 80065a0:	4633      	mov	r3, r6
 80065a2:	f7fa fa29 	bl	80009f8 <__aeabi_dcmpgt>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	f040 8298 	bne.w	8006adc <_dtoa_r+0x964>
 80065ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065b0:	462a      	mov	r2, r5
 80065b2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80065b6:	f7fa fa01 	bl	80009bc <__aeabi_dcmplt>
 80065ba:	bb38      	cbnz	r0, 800660c <_dtoa_r+0x494>
 80065bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80065c0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80065c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f2c0 8157 	blt.w	800687a <_dtoa_r+0x702>
 80065cc:	2f0e      	cmp	r7, #14
 80065ce:	f300 8154 	bgt.w	800687a <_dtoa_r+0x702>
 80065d2:	4b4b      	ldr	r3, [pc, #300]	@ (8006700 <_dtoa_r+0x588>)
 80065d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80065dc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80065e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f280 80e5 	bge.w	80067b2 <_dtoa_r+0x63a>
 80065e8:	9b08      	ldr	r3, [sp, #32]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f300 80e1 	bgt.w	80067b2 <_dtoa_r+0x63a>
 80065f0:	d10c      	bne.n	800660c <_dtoa_r+0x494>
 80065f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065f6:	2200      	movs	r2, #0
 80065f8:	4b46      	ldr	r3, [pc, #280]	@ (8006714 <_dtoa_r+0x59c>)
 80065fa:	f7f9 ff6d 	bl	80004d8 <__aeabi_dmul>
 80065fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006602:	f7fa f9ef 	bl	80009e4 <__aeabi_dcmpge>
 8006606:	2800      	cmp	r0, #0
 8006608:	f000 8266 	beq.w	8006ad8 <_dtoa_r+0x960>
 800660c:	2400      	movs	r4, #0
 800660e:	4625      	mov	r5, r4
 8006610:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006612:	4656      	mov	r6, sl
 8006614:	ea6f 0803 	mvn.w	r8, r3
 8006618:	2700      	movs	r7, #0
 800661a:	4621      	mov	r1, r4
 800661c:	4648      	mov	r0, r9
 800661e:	f000 fcbd 	bl	8006f9c <_Bfree>
 8006622:	2d00      	cmp	r5, #0
 8006624:	f000 80bd 	beq.w	80067a2 <_dtoa_r+0x62a>
 8006628:	b12f      	cbz	r7, 8006636 <_dtoa_r+0x4be>
 800662a:	42af      	cmp	r7, r5
 800662c:	d003      	beq.n	8006636 <_dtoa_r+0x4be>
 800662e:	4639      	mov	r1, r7
 8006630:	4648      	mov	r0, r9
 8006632:	f000 fcb3 	bl	8006f9c <_Bfree>
 8006636:	4629      	mov	r1, r5
 8006638:	4648      	mov	r0, r9
 800663a:	f000 fcaf 	bl	8006f9c <_Bfree>
 800663e:	e0b0      	b.n	80067a2 <_dtoa_r+0x62a>
 8006640:	07e2      	lsls	r2, r4, #31
 8006642:	d505      	bpl.n	8006650 <_dtoa_r+0x4d8>
 8006644:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006648:	f7f9 ff46 	bl	80004d8 <__aeabi_dmul>
 800664c:	2301      	movs	r3, #1
 800664e:	3601      	adds	r6, #1
 8006650:	1064      	asrs	r4, r4, #1
 8006652:	3508      	adds	r5, #8
 8006654:	e762      	b.n	800651c <_dtoa_r+0x3a4>
 8006656:	2602      	movs	r6, #2
 8006658:	e765      	b.n	8006526 <_dtoa_r+0x3ae>
 800665a:	46b8      	mov	r8, r7
 800665c:	9c08      	ldr	r4, [sp, #32]
 800665e:	e784      	b.n	800656a <_dtoa_r+0x3f2>
 8006660:	4b27      	ldr	r3, [pc, #156]	@ (8006700 <_dtoa_r+0x588>)
 8006662:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006664:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006668:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800666c:	4454      	add	r4, sl
 800666e:	2900      	cmp	r1, #0
 8006670:	d054      	beq.n	800671c <_dtoa_r+0x5a4>
 8006672:	2000      	movs	r0, #0
 8006674:	4928      	ldr	r1, [pc, #160]	@ (8006718 <_dtoa_r+0x5a0>)
 8006676:	f7fa f859 	bl	800072c <__aeabi_ddiv>
 800667a:	4633      	mov	r3, r6
 800667c:	462a      	mov	r2, r5
 800667e:	f7f9 fd73 	bl	8000168 <__aeabi_dsub>
 8006682:	4656      	mov	r6, sl
 8006684:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006688:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800668c:	f7fa f9d4 	bl	8000a38 <__aeabi_d2iz>
 8006690:	4605      	mov	r5, r0
 8006692:	f7f9 feb7 	bl	8000404 <__aeabi_i2d>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800669e:	f7f9 fd63 	bl	8000168 <__aeabi_dsub>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	3530      	adds	r5, #48	@ 0x30
 80066a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80066ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066b0:	f806 5b01 	strb.w	r5, [r6], #1
 80066b4:	f7fa f982 	bl	80009bc <__aeabi_dcmplt>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d172      	bne.n	80067a2 <_dtoa_r+0x62a>
 80066bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066c0:	2000      	movs	r0, #0
 80066c2:	4911      	ldr	r1, [pc, #68]	@ (8006708 <_dtoa_r+0x590>)
 80066c4:	f7f9 fd50 	bl	8000168 <__aeabi_dsub>
 80066c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066cc:	f7fa f976 	bl	80009bc <__aeabi_dcmplt>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	f040 80b4 	bne.w	800683e <_dtoa_r+0x6c6>
 80066d6:	42a6      	cmp	r6, r4
 80066d8:	f43f af70 	beq.w	80065bc <_dtoa_r+0x444>
 80066dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80066e0:	2200      	movs	r2, #0
 80066e2:	4b0a      	ldr	r3, [pc, #40]	@ (800670c <_dtoa_r+0x594>)
 80066e4:	f7f9 fef8 	bl	80004d8 <__aeabi_dmul>
 80066e8:	2200      	movs	r2, #0
 80066ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066f2:	4b06      	ldr	r3, [pc, #24]	@ (800670c <_dtoa_r+0x594>)
 80066f4:	f7f9 fef0 	bl	80004d8 <__aeabi_dmul>
 80066f8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80066fc:	e7c4      	b.n	8006688 <_dtoa_r+0x510>
 80066fe:	bf00      	nop
 8006700:	080095d8 	.word	0x080095d8
 8006704:	080095b0 	.word	0x080095b0
 8006708:	3ff00000 	.word	0x3ff00000
 800670c:	40240000 	.word	0x40240000
 8006710:	401c0000 	.word	0x401c0000
 8006714:	40140000 	.word	0x40140000
 8006718:	3fe00000 	.word	0x3fe00000
 800671c:	4631      	mov	r1, r6
 800671e:	4628      	mov	r0, r5
 8006720:	f7f9 feda 	bl	80004d8 <__aeabi_dmul>
 8006724:	4656      	mov	r6, sl
 8006726:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800672a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800672c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006730:	f7fa f982 	bl	8000a38 <__aeabi_d2iz>
 8006734:	4605      	mov	r5, r0
 8006736:	f7f9 fe65 	bl	8000404 <__aeabi_i2d>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006742:	f7f9 fd11 	bl	8000168 <__aeabi_dsub>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	3530      	adds	r5, #48	@ 0x30
 800674c:	f806 5b01 	strb.w	r5, [r6], #1
 8006750:	42a6      	cmp	r6, r4
 8006752:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006756:	f04f 0200 	mov.w	r2, #0
 800675a:	d124      	bne.n	80067a6 <_dtoa_r+0x62e>
 800675c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006760:	4bae      	ldr	r3, [pc, #696]	@ (8006a1c <_dtoa_r+0x8a4>)
 8006762:	f7f9 fd03 	bl	800016c <__adddf3>
 8006766:	4602      	mov	r2, r0
 8006768:	460b      	mov	r3, r1
 800676a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800676e:	f7fa f943 	bl	80009f8 <__aeabi_dcmpgt>
 8006772:	2800      	cmp	r0, #0
 8006774:	d163      	bne.n	800683e <_dtoa_r+0x6c6>
 8006776:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800677a:	2000      	movs	r0, #0
 800677c:	49a7      	ldr	r1, [pc, #668]	@ (8006a1c <_dtoa_r+0x8a4>)
 800677e:	f7f9 fcf3 	bl	8000168 <__aeabi_dsub>
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800678a:	f7fa f917 	bl	80009bc <__aeabi_dcmplt>
 800678e:	2800      	cmp	r0, #0
 8006790:	f43f af14 	beq.w	80065bc <_dtoa_r+0x444>
 8006794:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006796:	1e73      	subs	r3, r6, #1
 8006798:	9313      	str	r3, [sp, #76]	@ 0x4c
 800679a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800679e:	2b30      	cmp	r3, #48	@ 0x30
 80067a0:	d0f8      	beq.n	8006794 <_dtoa_r+0x61c>
 80067a2:	4647      	mov	r7, r8
 80067a4:	e03b      	b.n	800681e <_dtoa_r+0x6a6>
 80067a6:	4b9e      	ldr	r3, [pc, #632]	@ (8006a20 <_dtoa_r+0x8a8>)
 80067a8:	f7f9 fe96 	bl	80004d8 <__aeabi_dmul>
 80067ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80067b0:	e7bc      	b.n	800672c <_dtoa_r+0x5b4>
 80067b2:	4656      	mov	r6, sl
 80067b4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80067b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067bc:	4620      	mov	r0, r4
 80067be:	4629      	mov	r1, r5
 80067c0:	f7f9 ffb4 	bl	800072c <__aeabi_ddiv>
 80067c4:	f7fa f938 	bl	8000a38 <__aeabi_d2iz>
 80067c8:	4680      	mov	r8, r0
 80067ca:	f7f9 fe1b 	bl	8000404 <__aeabi_i2d>
 80067ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067d2:	f7f9 fe81 	bl	80004d8 <__aeabi_dmul>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	4620      	mov	r0, r4
 80067dc:	4629      	mov	r1, r5
 80067de:	f7f9 fcc3 	bl	8000168 <__aeabi_dsub>
 80067e2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80067e6:	9d08      	ldr	r5, [sp, #32]
 80067e8:	f806 4b01 	strb.w	r4, [r6], #1
 80067ec:	eba6 040a 	sub.w	r4, r6, sl
 80067f0:	42a5      	cmp	r5, r4
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	d133      	bne.n	8006860 <_dtoa_r+0x6e8>
 80067f8:	f7f9 fcb8 	bl	800016c <__adddf3>
 80067fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006800:	4604      	mov	r4, r0
 8006802:	460d      	mov	r5, r1
 8006804:	f7fa f8f8 	bl	80009f8 <__aeabi_dcmpgt>
 8006808:	b9c0      	cbnz	r0, 800683c <_dtoa_r+0x6c4>
 800680a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800680e:	4620      	mov	r0, r4
 8006810:	4629      	mov	r1, r5
 8006812:	f7fa f8c9 	bl	80009a8 <__aeabi_dcmpeq>
 8006816:	b110      	cbz	r0, 800681e <_dtoa_r+0x6a6>
 8006818:	f018 0f01 	tst.w	r8, #1
 800681c:	d10e      	bne.n	800683c <_dtoa_r+0x6c4>
 800681e:	4648      	mov	r0, r9
 8006820:	9903      	ldr	r1, [sp, #12]
 8006822:	f000 fbbb 	bl	8006f9c <_Bfree>
 8006826:	2300      	movs	r3, #0
 8006828:	7033      	strb	r3, [r6, #0]
 800682a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800682c:	3701      	adds	r7, #1
 800682e:	601f      	str	r7, [r3, #0]
 8006830:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 824b 	beq.w	8006cce <_dtoa_r+0xb56>
 8006838:	601e      	str	r6, [r3, #0]
 800683a:	e248      	b.n	8006cce <_dtoa_r+0xb56>
 800683c:	46b8      	mov	r8, r7
 800683e:	4633      	mov	r3, r6
 8006840:	461e      	mov	r6, r3
 8006842:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006846:	2a39      	cmp	r2, #57	@ 0x39
 8006848:	d106      	bne.n	8006858 <_dtoa_r+0x6e0>
 800684a:	459a      	cmp	sl, r3
 800684c:	d1f8      	bne.n	8006840 <_dtoa_r+0x6c8>
 800684e:	2230      	movs	r2, #48	@ 0x30
 8006850:	f108 0801 	add.w	r8, r8, #1
 8006854:	f88a 2000 	strb.w	r2, [sl]
 8006858:	781a      	ldrb	r2, [r3, #0]
 800685a:	3201      	adds	r2, #1
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	e7a0      	b.n	80067a2 <_dtoa_r+0x62a>
 8006860:	2200      	movs	r2, #0
 8006862:	4b6f      	ldr	r3, [pc, #444]	@ (8006a20 <_dtoa_r+0x8a8>)
 8006864:	f7f9 fe38 	bl	80004d8 <__aeabi_dmul>
 8006868:	2200      	movs	r2, #0
 800686a:	2300      	movs	r3, #0
 800686c:	4604      	mov	r4, r0
 800686e:	460d      	mov	r5, r1
 8006870:	f7fa f89a 	bl	80009a8 <__aeabi_dcmpeq>
 8006874:	2800      	cmp	r0, #0
 8006876:	d09f      	beq.n	80067b8 <_dtoa_r+0x640>
 8006878:	e7d1      	b.n	800681e <_dtoa_r+0x6a6>
 800687a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800687c:	2a00      	cmp	r2, #0
 800687e:	f000 80ea 	beq.w	8006a56 <_dtoa_r+0x8de>
 8006882:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006884:	2a01      	cmp	r2, #1
 8006886:	f300 80cd 	bgt.w	8006a24 <_dtoa_r+0x8ac>
 800688a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800688c:	2a00      	cmp	r2, #0
 800688e:	f000 80c1 	beq.w	8006a14 <_dtoa_r+0x89c>
 8006892:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006896:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006898:	9e04      	ldr	r6, [sp, #16]
 800689a:	9a04      	ldr	r2, [sp, #16]
 800689c:	2101      	movs	r1, #1
 800689e:	441a      	add	r2, r3
 80068a0:	9204      	str	r2, [sp, #16]
 80068a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068a4:	4648      	mov	r0, r9
 80068a6:	441a      	add	r2, r3
 80068a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80068aa:	f000 fc2b 	bl	8007104 <__i2b>
 80068ae:	4605      	mov	r5, r0
 80068b0:	b166      	cbz	r6, 80068cc <_dtoa_r+0x754>
 80068b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	dd09      	ble.n	80068cc <_dtoa_r+0x754>
 80068b8:	42b3      	cmp	r3, r6
 80068ba:	bfa8      	it	ge
 80068bc:	4633      	movge	r3, r6
 80068be:	9a04      	ldr	r2, [sp, #16]
 80068c0:	1af6      	subs	r6, r6, r3
 80068c2:	1ad2      	subs	r2, r2, r3
 80068c4:	9204      	str	r2, [sp, #16]
 80068c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80068cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068ce:	b30b      	cbz	r3, 8006914 <_dtoa_r+0x79c>
 80068d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 80c6 	beq.w	8006a64 <_dtoa_r+0x8ec>
 80068d8:	2c00      	cmp	r4, #0
 80068da:	f000 80c0 	beq.w	8006a5e <_dtoa_r+0x8e6>
 80068de:	4629      	mov	r1, r5
 80068e0:	4622      	mov	r2, r4
 80068e2:	4648      	mov	r0, r9
 80068e4:	f000 fcc6 	bl	8007274 <__pow5mult>
 80068e8:	9a03      	ldr	r2, [sp, #12]
 80068ea:	4601      	mov	r1, r0
 80068ec:	4605      	mov	r5, r0
 80068ee:	4648      	mov	r0, r9
 80068f0:	f000 fc1e 	bl	8007130 <__multiply>
 80068f4:	9903      	ldr	r1, [sp, #12]
 80068f6:	4680      	mov	r8, r0
 80068f8:	4648      	mov	r0, r9
 80068fa:	f000 fb4f 	bl	8006f9c <_Bfree>
 80068fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006900:	1b1b      	subs	r3, r3, r4
 8006902:	930a      	str	r3, [sp, #40]	@ 0x28
 8006904:	f000 80b1 	beq.w	8006a6a <_dtoa_r+0x8f2>
 8006908:	4641      	mov	r1, r8
 800690a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800690c:	4648      	mov	r0, r9
 800690e:	f000 fcb1 	bl	8007274 <__pow5mult>
 8006912:	9003      	str	r0, [sp, #12]
 8006914:	2101      	movs	r1, #1
 8006916:	4648      	mov	r0, r9
 8006918:	f000 fbf4 	bl	8007104 <__i2b>
 800691c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800691e:	4604      	mov	r4, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 81d8 	beq.w	8006cd6 <_dtoa_r+0xb5e>
 8006926:	461a      	mov	r2, r3
 8006928:	4601      	mov	r1, r0
 800692a:	4648      	mov	r0, r9
 800692c:	f000 fca2 	bl	8007274 <__pow5mult>
 8006930:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006932:	4604      	mov	r4, r0
 8006934:	2b01      	cmp	r3, #1
 8006936:	f300 809f 	bgt.w	8006a78 <_dtoa_r+0x900>
 800693a:	9b06      	ldr	r3, [sp, #24]
 800693c:	2b00      	cmp	r3, #0
 800693e:	f040 8097 	bne.w	8006a70 <_dtoa_r+0x8f8>
 8006942:	9b07      	ldr	r3, [sp, #28]
 8006944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006948:	2b00      	cmp	r3, #0
 800694a:	f040 8093 	bne.w	8006a74 <_dtoa_r+0x8fc>
 800694e:	9b07      	ldr	r3, [sp, #28]
 8006950:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006954:	0d1b      	lsrs	r3, r3, #20
 8006956:	051b      	lsls	r3, r3, #20
 8006958:	b133      	cbz	r3, 8006968 <_dtoa_r+0x7f0>
 800695a:	9b04      	ldr	r3, [sp, #16]
 800695c:	3301      	adds	r3, #1
 800695e:	9304      	str	r3, [sp, #16]
 8006960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006962:	3301      	adds	r3, #1
 8006964:	9309      	str	r3, [sp, #36]	@ 0x24
 8006966:	2301      	movs	r3, #1
 8006968:	930a      	str	r3, [sp, #40]	@ 0x28
 800696a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 81b8 	beq.w	8006ce2 <_dtoa_r+0xb6a>
 8006972:	6923      	ldr	r3, [r4, #16]
 8006974:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006978:	6918      	ldr	r0, [r3, #16]
 800697a:	f000 fb77 	bl	800706c <__hi0bits>
 800697e:	f1c0 0020 	rsb	r0, r0, #32
 8006982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006984:	4418      	add	r0, r3
 8006986:	f010 001f 	ands.w	r0, r0, #31
 800698a:	f000 8082 	beq.w	8006a92 <_dtoa_r+0x91a>
 800698e:	f1c0 0320 	rsb	r3, r0, #32
 8006992:	2b04      	cmp	r3, #4
 8006994:	dd73      	ble.n	8006a7e <_dtoa_r+0x906>
 8006996:	9b04      	ldr	r3, [sp, #16]
 8006998:	f1c0 001c 	rsb	r0, r0, #28
 800699c:	4403      	add	r3, r0
 800699e:	9304      	str	r3, [sp, #16]
 80069a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069a2:	4406      	add	r6, r0
 80069a4:	4403      	add	r3, r0
 80069a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80069a8:	9b04      	ldr	r3, [sp, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	dd05      	ble.n	80069ba <_dtoa_r+0x842>
 80069ae:	461a      	mov	r2, r3
 80069b0:	4648      	mov	r0, r9
 80069b2:	9903      	ldr	r1, [sp, #12]
 80069b4:	f000 fcb8 	bl	8007328 <__lshift>
 80069b8:	9003      	str	r0, [sp, #12]
 80069ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069bc:	2b00      	cmp	r3, #0
 80069be:	dd05      	ble.n	80069cc <_dtoa_r+0x854>
 80069c0:	4621      	mov	r1, r4
 80069c2:	461a      	mov	r2, r3
 80069c4:	4648      	mov	r0, r9
 80069c6:	f000 fcaf 	bl	8007328 <__lshift>
 80069ca:	4604      	mov	r4, r0
 80069cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d061      	beq.n	8006a96 <_dtoa_r+0x91e>
 80069d2:	4621      	mov	r1, r4
 80069d4:	9803      	ldr	r0, [sp, #12]
 80069d6:	f000 fd13 	bl	8007400 <__mcmp>
 80069da:	2800      	cmp	r0, #0
 80069dc:	da5b      	bge.n	8006a96 <_dtoa_r+0x91e>
 80069de:	2300      	movs	r3, #0
 80069e0:	220a      	movs	r2, #10
 80069e2:	4648      	mov	r0, r9
 80069e4:	9903      	ldr	r1, [sp, #12]
 80069e6:	f000 fafb 	bl	8006fe0 <__multadd>
 80069ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069ec:	f107 38ff 	add.w	r8, r7, #4294967295
 80069f0:	9003      	str	r0, [sp, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f000 8177 	beq.w	8006ce6 <_dtoa_r+0xb6e>
 80069f8:	4629      	mov	r1, r5
 80069fa:	2300      	movs	r3, #0
 80069fc:	220a      	movs	r2, #10
 80069fe:	4648      	mov	r0, r9
 8006a00:	f000 faee 	bl	8006fe0 <__multadd>
 8006a04:	f1bb 0f00 	cmp.w	fp, #0
 8006a08:	4605      	mov	r5, r0
 8006a0a:	dc6f      	bgt.n	8006aec <_dtoa_r+0x974>
 8006a0c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	dc49      	bgt.n	8006aa6 <_dtoa_r+0x92e>
 8006a12:	e06b      	b.n	8006aec <_dtoa_r+0x974>
 8006a14:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a1a:	e73c      	b.n	8006896 <_dtoa_r+0x71e>
 8006a1c:	3fe00000 	.word	0x3fe00000
 8006a20:	40240000 	.word	0x40240000
 8006a24:	9b08      	ldr	r3, [sp, #32]
 8006a26:	1e5c      	subs	r4, r3, #1
 8006a28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a2a:	42a3      	cmp	r3, r4
 8006a2c:	db09      	blt.n	8006a42 <_dtoa_r+0x8ca>
 8006a2e:	1b1c      	subs	r4, r3, r4
 8006a30:	9b08      	ldr	r3, [sp, #32]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f6bf af30 	bge.w	8006898 <_dtoa_r+0x720>
 8006a38:	9b04      	ldr	r3, [sp, #16]
 8006a3a:	9a08      	ldr	r2, [sp, #32]
 8006a3c:	1a9e      	subs	r6, r3, r2
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e72b      	b.n	800689a <_dtoa_r+0x722>
 8006a42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a46:	1ae3      	subs	r3, r4, r3
 8006a48:	441a      	add	r2, r3
 8006a4a:	940a      	str	r4, [sp, #40]	@ 0x28
 8006a4c:	9e04      	ldr	r6, [sp, #16]
 8006a4e:	2400      	movs	r4, #0
 8006a50:	9b08      	ldr	r3, [sp, #32]
 8006a52:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a54:	e721      	b.n	800689a <_dtoa_r+0x722>
 8006a56:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006a58:	9e04      	ldr	r6, [sp, #16]
 8006a5a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006a5c:	e728      	b.n	80068b0 <_dtoa_r+0x738>
 8006a5e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006a62:	e751      	b.n	8006908 <_dtoa_r+0x790>
 8006a64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a66:	9903      	ldr	r1, [sp, #12]
 8006a68:	e750      	b.n	800690c <_dtoa_r+0x794>
 8006a6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a6e:	e751      	b.n	8006914 <_dtoa_r+0x79c>
 8006a70:	2300      	movs	r3, #0
 8006a72:	e779      	b.n	8006968 <_dtoa_r+0x7f0>
 8006a74:	9b06      	ldr	r3, [sp, #24]
 8006a76:	e777      	b.n	8006968 <_dtoa_r+0x7f0>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a7c:	e779      	b.n	8006972 <_dtoa_r+0x7fa>
 8006a7e:	d093      	beq.n	80069a8 <_dtoa_r+0x830>
 8006a80:	9a04      	ldr	r2, [sp, #16]
 8006a82:	331c      	adds	r3, #28
 8006a84:	441a      	add	r2, r3
 8006a86:	9204      	str	r2, [sp, #16]
 8006a88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a8a:	441e      	add	r6, r3
 8006a8c:	441a      	add	r2, r3
 8006a8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a90:	e78a      	b.n	80069a8 <_dtoa_r+0x830>
 8006a92:	4603      	mov	r3, r0
 8006a94:	e7f4      	b.n	8006a80 <_dtoa_r+0x908>
 8006a96:	9b08      	ldr	r3, [sp, #32]
 8006a98:	46b8      	mov	r8, r7
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	dc20      	bgt.n	8006ae0 <_dtoa_r+0x968>
 8006a9e:	469b      	mov	fp, r3
 8006aa0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	dd1e      	ble.n	8006ae4 <_dtoa_r+0x96c>
 8006aa6:	f1bb 0f00 	cmp.w	fp, #0
 8006aaa:	f47f adb1 	bne.w	8006610 <_dtoa_r+0x498>
 8006aae:	4621      	mov	r1, r4
 8006ab0:	465b      	mov	r3, fp
 8006ab2:	2205      	movs	r2, #5
 8006ab4:	4648      	mov	r0, r9
 8006ab6:	f000 fa93 	bl	8006fe0 <__multadd>
 8006aba:	4601      	mov	r1, r0
 8006abc:	4604      	mov	r4, r0
 8006abe:	9803      	ldr	r0, [sp, #12]
 8006ac0:	f000 fc9e 	bl	8007400 <__mcmp>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	f77f ada3 	ble.w	8006610 <_dtoa_r+0x498>
 8006aca:	4656      	mov	r6, sl
 8006acc:	2331      	movs	r3, #49	@ 0x31
 8006ace:	f108 0801 	add.w	r8, r8, #1
 8006ad2:	f806 3b01 	strb.w	r3, [r6], #1
 8006ad6:	e59f      	b.n	8006618 <_dtoa_r+0x4a0>
 8006ad8:	46b8      	mov	r8, r7
 8006ada:	9c08      	ldr	r4, [sp, #32]
 8006adc:	4625      	mov	r5, r4
 8006ade:	e7f4      	b.n	8006aca <_dtoa_r+0x952>
 8006ae0:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006ae4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 8101 	beq.w	8006cee <_dtoa_r+0xb76>
 8006aec:	2e00      	cmp	r6, #0
 8006aee:	dd05      	ble.n	8006afc <_dtoa_r+0x984>
 8006af0:	4629      	mov	r1, r5
 8006af2:	4632      	mov	r2, r6
 8006af4:	4648      	mov	r0, r9
 8006af6:	f000 fc17 	bl	8007328 <__lshift>
 8006afa:	4605      	mov	r5, r0
 8006afc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d05c      	beq.n	8006bbc <_dtoa_r+0xa44>
 8006b02:	4648      	mov	r0, r9
 8006b04:	6869      	ldr	r1, [r5, #4]
 8006b06:	f000 fa09 	bl	8006f1c <_Balloc>
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	b928      	cbnz	r0, 8006b1a <_dtoa_r+0x9a2>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b14:	4b80      	ldr	r3, [pc, #512]	@ (8006d18 <_dtoa_r+0xba0>)
 8006b16:	f7ff bb43 	b.w	80061a0 <_dtoa_r+0x28>
 8006b1a:	692a      	ldr	r2, [r5, #16]
 8006b1c:	f105 010c 	add.w	r1, r5, #12
 8006b20:	3202      	adds	r2, #2
 8006b22:	0092      	lsls	r2, r2, #2
 8006b24:	300c      	adds	r0, #12
 8006b26:	f7ff fa90 	bl	800604a <memcpy>
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	4648      	mov	r0, r9
 8006b30:	f000 fbfa 	bl	8007328 <__lshift>
 8006b34:	462f      	mov	r7, r5
 8006b36:	4605      	mov	r5, r0
 8006b38:	f10a 0301 	add.w	r3, sl, #1
 8006b3c:	9304      	str	r3, [sp, #16]
 8006b3e:	eb0a 030b 	add.w	r3, sl, fp
 8006b42:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b44:	9b06      	ldr	r3, [sp, #24]
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b4c:	9b04      	ldr	r3, [sp, #16]
 8006b4e:	4621      	mov	r1, r4
 8006b50:	9803      	ldr	r0, [sp, #12]
 8006b52:	f103 3bff 	add.w	fp, r3, #4294967295
 8006b56:	f7ff fa86 	bl	8006066 <quorem>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	4639      	mov	r1, r7
 8006b5e:	3330      	adds	r3, #48	@ 0x30
 8006b60:	9006      	str	r0, [sp, #24]
 8006b62:	9803      	ldr	r0, [sp, #12]
 8006b64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b66:	f000 fc4b 	bl	8007400 <__mcmp>
 8006b6a:	462a      	mov	r2, r5
 8006b6c:	9008      	str	r0, [sp, #32]
 8006b6e:	4621      	mov	r1, r4
 8006b70:	4648      	mov	r0, r9
 8006b72:	f000 fc61 	bl	8007438 <__mdiff>
 8006b76:	68c2      	ldr	r2, [r0, #12]
 8006b78:	4606      	mov	r6, r0
 8006b7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b7c:	bb02      	cbnz	r2, 8006bc0 <_dtoa_r+0xa48>
 8006b7e:	4601      	mov	r1, r0
 8006b80:	9803      	ldr	r0, [sp, #12]
 8006b82:	f000 fc3d 	bl	8007400 <__mcmp>
 8006b86:	4602      	mov	r2, r0
 8006b88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b8a:	4631      	mov	r1, r6
 8006b8c:	4648      	mov	r0, r9
 8006b8e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006b92:	f000 fa03 	bl	8006f9c <_Bfree>
 8006b96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006b98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006b9a:	9e04      	ldr	r6, [sp, #16]
 8006b9c:	ea42 0103 	orr.w	r1, r2, r3
 8006ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ba2:	4319      	orrs	r1, r3
 8006ba4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ba6:	d10d      	bne.n	8006bc4 <_dtoa_r+0xa4c>
 8006ba8:	2b39      	cmp	r3, #57	@ 0x39
 8006baa:	d027      	beq.n	8006bfc <_dtoa_r+0xa84>
 8006bac:	9a08      	ldr	r2, [sp, #32]
 8006bae:	2a00      	cmp	r2, #0
 8006bb0:	dd01      	ble.n	8006bb6 <_dtoa_r+0xa3e>
 8006bb2:	9b06      	ldr	r3, [sp, #24]
 8006bb4:	3331      	adds	r3, #49	@ 0x31
 8006bb6:	f88b 3000 	strb.w	r3, [fp]
 8006bba:	e52e      	b.n	800661a <_dtoa_r+0x4a2>
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	e7b9      	b.n	8006b34 <_dtoa_r+0x9bc>
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	e7e2      	b.n	8006b8a <_dtoa_r+0xa12>
 8006bc4:	9908      	ldr	r1, [sp, #32]
 8006bc6:	2900      	cmp	r1, #0
 8006bc8:	db04      	blt.n	8006bd4 <_dtoa_r+0xa5c>
 8006bca:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006bcc:	4301      	orrs	r1, r0
 8006bce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006bd0:	4301      	orrs	r1, r0
 8006bd2:	d120      	bne.n	8006c16 <_dtoa_r+0xa9e>
 8006bd4:	2a00      	cmp	r2, #0
 8006bd6:	ddee      	ble.n	8006bb6 <_dtoa_r+0xa3e>
 8006bd8:	2201      	movs	r2, #1
 8006bda:	9903      	ldr	r1, [sp, #12]
 8006bdc:	4648      	mov	r0, r9
 8006bde:	9304      	str	r3, [sp, #16]
 8006be0:	f000 fba2 	bl	8007328 <__lshift>
 8006be4:	4621      	mov	r1, r4
 8006be6:	9003      	str	r0, [sp, #12]
 8006be8:	f000 fc0a 	bl	8007400 <__mcmp>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	9b04      	ldr	r3, [sp, #16]
 8006bf0:	dc02      	bgt.n	8006bf8 <_dtoa_r+0xa80>
 8006bf2:	d1e0      	bne.n	8006bb6 <_dtoa_r+0xa3e>
 8006bf4:	07da      	lsls	r2, r3, #31
 8006bf6:	d5de      	bpl.n	8006bb6 <_dtoa_r+0xa3e>
 8006bf8:	2b39      	cmp	r3, #57	@ 0x39
 8006bfa:	d1da      	bne.n	8006bb2 <_dtoa_r+0xa3a>
 8006bfc:	2339      	movs	r3, #57	@ 0x39
 8006bfe:	f88b 3000 	strb.w	r3, [fp]
 8006c02:	4633      	mov	r3, r6
 8006c04:	461e      	mov	r6, r3
 8006c06:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	2a39      	cmp	r2, #57	@ 0x39
 8006c0e:	d04e      	beq.n	8006cae <_dtoa_r+0xb36>
 8006c10:	3201      	adds	r2, #1
 8006c12:	701a      	strb	r2, [r3, #0]
 8006c14:	e501      	b.n	800661a <_dtoa_r+0x4a2>
 8006c16:	2a00      	cmp	r2, #0
 8006c18:	dd03      	ble.n	8006c22 <_dtoa_r+0xaaa>
 8006c1a:	2b39      	cmp	r3, #57	@ 0x39
 8006c1c:	d0ee      	beq.n	8006bfc <_dtoa_r+0xa84>
 8006c1e:	3301      	adds	r3, #1
 8006c20:	e7c9      	b.n	8006bb6 <_dtoa_r+0xa3e>
 8006c22:	9a04      	ldr	r2, [sp, #16]
 8006c24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c26:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006c2a:	428a      	cmp	r2, r1
 8006c2c:	d028      	beq.n	8006c80 <_dtoa_r+0xb08>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	220a      	movs	r2, #10
 8006c32:	9903      	ldr	r1, [sp, #12]
 8006c34:	4648      	mov	r0, r9
 8006c36:	f000 f9d3 	bl	8006fe0 <__multadd>
 8006c3a:	42af      	cmp	r7, r5
 8006c3c:	9003      	str	r0, [sp, #12]
 8006c3e:	f04f 0300 	mov.w	r3, #0
 8006c42:	f04f 020a 	mov.w	r2, #10
 8006c46:	4639      	mov	r1, r7
 8006c48:	4648      	mov	r0, r9
 8006c4a:	d107      	bne.n	8006c5c <_dtoa_r+0xae4>
 8006c4c:	f000 f9c8 	bl	8006fe0 <__multadd>
 8006c50:	4607      	mov	r7, r0
 8006c52:	4605      	mov	r5, r0
 8006c54:	9b04      	ldr	r3, [sp, #16]
 8006c56:	3301      	adds	r3, #1
 8006c58:	9304      	str	r3, [sp, #16]
 8006c5a:	e777      	b.n	8006b4c <_dtoa_r+0x9d4>
 8006c5c:	f000 f9c0 	bl	8006fe0 <__multadd>
 8006c60:	4629      	mov	r1, r5
 8006c62:	4607      	mov	r7, r0
 8006c64:	2300      	movs	r3, #0
 8006c66:	220a      	movs	r2, #10
 8006c68:	4648      	mov	r0, r9
 8006c6a:	f000 f9b9 	bl	8006fe0 <__multadd>
 8006c6e:	4605      	mov	r5, r0
 8006c70:	e7f0      	b.n	8006c54 <_dtoa_r+0xadc>
 8006c72:	f1bb 0f00 	cmp.w	fp, #0
 8006c76:	bfcc      	ite	gt
 8006c78:	465e      	movgt	r6, fp
 8006c7a:	2601      	movle	r6, #1
 8006c7c:	2700      	movs	r7, #0
 8006c7e:	4456      	add	r6, sl
 8006c80:	2201      	movs	r2, #1
 8006c82:	9903      	ldr	r1, [sp, #12]
 8006c84:	4648      	mov	r0, r9
 8006c86:	9304      	str	r3, [sp, #16]
 8006c88:	f000 fb4e 	bl	8007328 <__lshift>
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	9003      	str	r0, [sp, #12]
 8006c90:	f000 fbb6 	bl	8007400 <__mcmp>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	dcb4      	bgt.n	8006c02 <_dtoa_r+0xa8a>
 8006c98:	d102      	bne.n	8006ca0 <_dtoa_r+0xb28>
 8006c9a:	9b04      	ldr	r3, [sp, #16]
 8006c9c:	07db      	lsls	r3, r3, #31
 8006c9e:	d4b0      	bmi.n	8006c02 <_dtoa_r+0xa8a>
 8006ca0:	4633      	mov	r3, r6
 8006ca2:	461e      	mov	r6, r3
 8006ca4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ca8:	2a30      	cmp	r2, #48	@ 0x30
 8006caa:	d0fa      	beq.n	8006ca2 <_dtoa_r+0xb2a>
 8006cac:	e4b5      	b.n	800661a <_dtoa_r+0x4a2>
 8006cae:	459a      	cmp	sl, r3
 8006cb0:	d1a8      	bne.n	8006c04 <_dtoa_r+0xa8c>
 8006cb2:	2331      	movs	r3, #49	@ 0x31
 8006cb4:	f108 0801 	add.w	r8, r8, #1
 8006cb8:	f88a 3000 	strb.w	r3, [sl]
 8006cbc:	e4ad      	b.n	800661a <_dtoa_r+0x4a2>
 8006cbe:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006cc0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006d1c <_dtoa_r+0xba4>
 8006cc4:	b11b      	cbz	r3, 8006cce <_dtoa_r+0xb56>
 8006cc6:	f10a 0308 	add.w	r3, sl, #8
 8006cca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	4650      	mov	r0, sl
 8006cd0:	b017      	add	sp, #92	@ 0x5c
 8006cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	f77f ae2e 	ble.w	800693a <_dtoa_r+0x7c2>
 8006cde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ce0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ce2:	2001      	movs	r0, #1
 8006ce4:	e64d      	b.n	8006982 <_dtoa_r+0x80a>
 8006ce6:	f1bb 0f00 	cmp.w	fp, #0
 8006cea:	f77f aed9 	ble.w	8006aa0 <_dtoa_r+0x928>
 8006cee:	4656      	mov	r6, sl
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	9803      	ldr	r0, [sp, #12]
 8006cf4:	f7ff f9b7 	bl	8006066 <quorem>
 8006cf8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006cfc:	f806 3b01 	strb.w	r3, [r6], #1
 8006d00:	eba6 020a 	sub.w	r2, r6, sl
 8006d04:	4593      	cmp	fp, r2
 8006d06:	ddb4      	ble.n	8006c72 <_dtoa_r+0xafa>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	220a      	movs	r2, #10
 8006d0c:	4648      	mov	r0, r9
 8006d0e:	9903      	ldr	r1, [sp, #12]
 8006d10:	f000 f966 	bl	8006fe0 <__multadd>
 8006d14:	9003      	str	r0, [sp, #12]
 8006d16:	e7eb      	b.n	8006cf0 <_dtoa_r+0xb78>
 8006d18:	080094e0 	.word	0x080094e0
 8006d1c:	08009464 	.word	0x08009464

08006d20 <_free_r>:
 8006d20:	b538      	push	{r3, r4, r5, lr}
 8006d22:	4605      	mov	r5, r0
 8006d24:	2900      	cmp	r1, #0
 8006d26:	d040      	beq.n	8006daa <_free_r+0x8a>
 8006d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d2c:	1f0c      	subs	r4, r1, #4
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	bfb8      	it	lt
 8006d32:	18e4      	addlt	r4, r4, r3
 8006d34:	f000 f8e6 	bl	8006f04 <__malloc_lock>
 8006d38:	4a1c      	ldr	r2, [pc, #112]	@ (8006dac <_free_r+0x8c>)
 8006d3a:	6813      	ldr	r3, [r2, #0]
 8006d3c:	b933      	cbnz	r3, 8006d4c <_free_r+0x2c>
 8006d3e:	6063      	str	r3, [r4, #4]
 8006d40:	6014      	str	r4, [r2, #0]
 8006d42:	4628      	mov	r0, r5
 8006d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d48:	f000 b8e2 	b.w	8006f10 <__malloc_unlock>
 8006d4c:	42a3      	cmp	r3, r4
 8006d4e:	d908      	bls.n	8006d62 <_free_r+0x42>
 8006d50:	6820      	ldr	r0, [r4, #0]
 8006d52:	1821      	adds	r1, r4, r0
 8006d54:	428b      	cmp	r3, r1
 8006d56:	bf01      	itttt	eq
 8006d58:	6819      	ldreq	r1, [r3, #0]
 8006d5a:	685b      	ldreq	r3, [r3, #4]
 8006d5c:	1809      	addeq	r1, r1, r0
 8006d5e:	6021      	streq	r1, [r4, #0]
 8006d60:	e7ed      	b.n	8006d3e <_free_r+0x1e>
 8006d62:	461a      	mov	r2, r3
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	b10b      	cbz	r3, 8006d6c <_free_r+0x4c>
 8006d68:	42a3      	cmp	r3, r4
 8006d6a:	d9fa      	bls.n	8006d62 <_free_r+0x42>
 8006d6c:	6811      	ldr	r1, [r2, #0]
 8006d6e:	1850      	adds	r0, r2, r1
 8006d70:	42a0      	cmp	r0, r4
 8006d72:	d10b      	bne.n	8006d8c <_free_r+0x6c>
 8006d74:	6820      	ldr	r0, [r4, #0]
 8006d76:	4401      	add	r1, r0
 8006d78:	1850      	adds	r0, r2, r1
 8006d7a:	4283      	cmp	r3, r0
 8006d7c:	6011      	str	r1, [r2, #0]
 8006d7e:	d1e0      	bne.n	8006d42 <_free_r+0x22>
 8006d80:	6818      	ldr	r0, [r3, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	4408      	add	r0, r1
 8006d86:	6010      	str	r0, [r2, #0]
 8006d88:	6053      	str	r3, [r2, #4]
 8006d8a:	e7da      	b.n	8006d42 <_free_r+0x22>
 8006d8c:	d902      	bls.n	8006d94 <_free_r+0x74>
 8006d8e:	230c      	movs	r3, #12
 8006d90:	602b      	str	r3, [r5, #0]
 8006d92:	e7d6      	b.n	8006d42 <_free_r+0x22>
 8006d94:	6820      	ldr	r0, [r4, #0]
 8006d96:	1821      	adds	r1, r4, r0
 8006d98:	428b      	cmp	r3, r1
 8006d9a:	bf01      	itttt	eq
 8006d9c:	6819      	ldreq	r1, [r3, #0]
 8006d9e:	685b      	ldreq	r3, [r3, #4]
 8006da0:	1809      	addeq	r1, r1, r0
 8006da2:	6021      	streq	r1, [r4, #0]
 8006da4:	6063      	str	r3, [r4, #4]
 8006da6:	6054      	str	r4, [r2, #4]
 8006da8:	e7cb      	b.n	8006d42 <_free_r+0x22>
 8006daa:	bd38      	pop	{r3, r4, r5, pc}
 8006dac:	200007f0 	.word	0x200007f0

08006db0 <malloc>:
 8006db0:	4b02      	ldr	r3, [pc, #8]	@ (8006dbc <malloc+0xc>)
 8006db2:	4601      	mov	r1, r0
 8006db4:	6818      	ldr	r0, [r3, #0]
 8006db6:	f000 b825 	b.w	8006e04 <_malloc_r>
 8006dba:	bf00      	nop
 8006dbc:	20000020 	.word	0x20000020

08006dc0 <sbrk_aligned>:
 8006dc0:	b570      	push	{r4, r5, r6, lr}
 8006dc2:	4e0f      	ldr	r6, [pc, #60]	@ (8006e00 <sbrk_aligned+0x40>)
 8006dc4:	460c      	mov	r4, r1
 8006dc6:	6831      	ldr	r1, [r6, #0]
 8006dc8:	4605      	mov	r5, r0
 8006dca:	b911      	cbnz	r1, 8006dd2 <sbrk_aligned+0x12>
 8006dcc:	f000 fe3a 	bl	8007a44 <_sbrk_r>
 8006dd0:	6030      	str	r0, [r6, #0]
 8006dd2:	4621      	mov	r1, r4
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	f000 fe35 	bl	8007a44 <_sbrk_r>
 8006dda:	1c43      	adds	r3, r0, #1
 8006ddc:	d103      	bne.n	8006de6 <sbrk_aligned+0x26>
 8006dde:	f04f 34ff 	mov.w	r4, #4294967295
 8006de2:	4620      	mov	r0, r4
 8006de4:	bd70      	pop	{r4, r5, r6, pc}
 8006de6:	1cc4      	adds	r4, r0, #3
 8006de8:	f024 0403 	bic.w	r4, r4, #3
 8006dec:	42a0      	cmp	r0, r4
 8006dee:	d0f8      	beq.n	8006de2 <sbrk_aligned+0x22>
 8006df0:	1a21      	subs	r1, r4, r0
 8006df2:	4628      	mov	r0, r5
 8006df4:	f000 fe26 	bl	8007a44 <_sbrk_r>
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d1f2      	bne.n	8006de2 <sbrk_aligned+0x22>
 8006dfc:	e7ef      	b.n	8006dde <sbrk_aligned+0x1e>
 8006dfe:	bf00      	nop
 8006e00:	200007ec 	.word	0x200007ec

08006e04 <_malloc_r>:
 8006e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e08:	1ccd      	adds	r5, r1, #3
 8006e0a:	f025 0503 	bic.w	r5, r5, #3
 8006e0e:	3508      	adds	r5, #8
 8006e10:	2d0c      	cmp	r5, #12
 8006e12:	bf38      	it	cc
 8006e14:	250c      	movcc	r5, #12
 8006e16:	2d00      	cmp	r5, #0
 8006e18:	4606      	mov	r6, r0
 8006e1a:	db01      	blt.n	8006e20 <_malloc_r+0x1c>
 8006e1c:	42a9      	cmp	r1, r5
 8006e1e:	d904      	bls.n	8006e2a <_malloc_r+0x26>
 8006e20:	230c      	movs	r3, #12
 8006e22:	6033      	str	r3, [r6, #0]
 8006e24:	2000      	movs	r0, #0
 8006e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f00 <_malloc_r+0xfc>
 8006e2e:	f000 f869 	bl	8006f04 <__malloc_lock>
 8006e32:	f8d8 3000 	ldr.w	r3, [r8]
 8006e36:	461c      	mov	r4, r3
 8006e38:	bb44      	cbnz	r4, 8006e8c <_malloc_r+0x88>
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	f7ff ffbf 	bl	8006dc0 <sbrk_aligned>
 8006e42:	1c43      	adds	r3, r0, #1
 8006e44:	4604      	mov	r4, r0
 8006e46:	d158      	bne.n	8006efa <_malloc_r+0xf6>
 8006e48:	f8d8 4000 	ldr.w	r4, [r8]
 8006e4c:	4627      	mov	r7, r4
 8006e4e:	2f00      	cmp	r7, #0
 8006e50:	d143      	bne.n	8006eda <_malloc_r+0xd6>
 8006e52:	2c00      	cmp	r4, #0
 8006e54:	d04b      	beq.n	8006eee <_malloc_r+0xea>
 8006e56:	6823      	ldr	r3, [r4, #0]
 8006e58:	4639      	mov	r1, r7
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	eb04 0903 	add.w	r9, r4, r3
 8006e60:	f000 fdf0 	bl	8007a44 <_sbrk_r>
 8006e64:	4581      	cmp	r9, r0
 8006e66:	d142      	bne.n	8006eee <_malloc_r+0xea>
 8006e68:	6821      	ldr	r1, [r4, #0]
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	1a6d      	subs	r5, r5, r1
 8006e6e:	4629      	mov	r1, r5
 8006e70:	f7ff ffa6 	bl	8006dc0 <sbrk_aligned>
 8006e74:	3001      	adds	r0, #1
 8006e76:	d03a      	beq.n	8006eee <_malloc_r+0xea>
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	442b      	add	r3, r5
 8006e7c:	6023      	str	r3, [r4, #0]
 8006e7e:	f8d8 3000 	ldr.w	r3, [r8]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	bb62      	cbnz	r2, 8006ee0 <_malloc_r+0xdc>
 8006e86:	f8c8 7000 	str.w	r7, [r8]
 8006e8a:	e00f      	b.n	8006eac <_malloc_r+0xa8>
 8006e8c:	6822      	ldr	r2, [r4, #0]
 8006e8e:	1b52      	subs	r2, r2, r5
 8006e90:	d420      	bmi.n	8006ed4 <_malloc_r+0xd0>
 8006e92:	2a0b      	cmp	r2, #11
 8006e94:	d917      	bls.n	8006ec6 <_malloc_r+0xc2>
 8006e96:	1961      	adds	r1, r4, r5
 8006e98:	42a3      	cmp	r3, r4
 8006e9a:	6025      	str	r5, [r4, #0]
 8006e9c:	bf18      	it	ne
 8006e9e:	6059      	strne	r1, [r3, #4]
 8006ea0:	6863      	ldr	r3, [r4, #4]
 8006ea2:	bf08      	it	eq
 8006ea4:	f8c8 1000 	streq.w	r1, [r8]
 8006ea8:	5162      	str	r2, [r4, r5]
 8006eaa:	604b      	str	r3, [r1, #4]
 8006eac:	4630      	mov	r0, r6
 8006eae:	f000 f82f 	bl	8006f10 <__malloc_unlock>
 8006eb2:	f104 000b 	add.w	r0, r4, #11
 8006eb6:	1d23      	adds	r3, r4, #4
 8006eb8:	f020 0007 	bic.w	r0, r0, #7
 8006ebc:	1ac2      	subs	r2, r0, r3
 8006ebe:	bf1c      	itt	ne
 8006ec0:	1a1b      	subne	r3, r3, r0
 8006ec2:	50a3      	strne	r3, [r4, r2]
 8006ec4:	e7af      	b.n	8006e26 <_malloc_r+0x22>
 8006ec6:	6862      	ldr	r2, [r4, #4]
 8006ec8:	42a3      	cmp	r3, r4
 8006eca:	bf0c      	ite	eq
 8006ecc:	f8c8 2000 	streq.w	r2, [r8]
 8006ed0:	605a      	strne	r2, [r3, #4]
 8006ed2:	e7eb      	b.n	8006eac <_malloc_r+0xa8>
 8006ed4:	4623      	mov	r3, r4
 8006ed6:	6864      	ldr	r4, [r4, #4]
 8006ed8:	e7ae      	b.n	8006e38 <_malloc_r+0x34>
 8006eda:	463c      	mov	r4, r7
 8006edc:	687f      	ldr	r7, [r7, #4]
 8006ede:	e7b6      	b.n	8006e4e <_malloc_r+0x4a>
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	42a3      	cmp	r3, r4
 8006ee6:	d1fb      	bne.n	8006ee0 <_malloc_r+0xdc>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	6053      	str	r3, [r2, #4]
 8006eec:	e7de      	b.n	8006eac <_malloc_r+0xa8>
 8006eee:	230c      	movs	r3, #12
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	6033      	str	r3, [r6, #0]
 8006ef4:	f000 f80c 	bl	8006f10 <__malloc_unlock>
 8006ef8:	e794      	b.n	8006e24 <_malloc_r+0x20>
 8006efa:	6005      	str	r5, [r0, #0]
 8006efc:	e7d6      	b.n	8006eac <_malloc_r+0xa8>
 8006efe:	bf00      	nop
 8006f00:	200007f0 	.word	0x200007f0

08006f04 <__malloc_lock>:
 8006f04:	4801      	ldr	r0, [pc, #4]	@ (8006f0c <__malloc_lock+0x8>)
 8006f06:	f7ff b890 	b.w	800602a <__retarget_lock_acquire_recursive>
 8006f0a:	bf00      	nop
 8006f0c:	200007e8 	.word	0x200007e8

08006f10 <__malloc_unlock>:
 8006f10:	4801      	ldr	r0, [pc, #4]	@ (8006f18 <__malloc_unlock+0x8>)
 8006f12:	f7ff b88b 	b.w	800602c <__retarget_lock_release_recursive>
 8006f16:	bf00      	nop
 8006f18:	200007e8 	.word	0x200007e8

08006f1c <_Balloc>:
 8006f1c:	b570      	push	{r4, r5, r6, lr}
 8006f1e:	69c6      	ldr	r6, [r0, #28]
 8006f20:	4604      	mov	r4, r0
 8006f22:	460d      	mov	r5, r1
 8006f24:	b976      	cbnz	r6, 8006f44 <_Balloc+0x28>
 8006f26:	2010      	movs	r0, #16
 8006f28:	f7ff ff42 	bl	8006db0 <malloc>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	61e0      	str	r0, [r4, #28]
 8006f30:	b920      	cbnz	r0, 8006f3c <_Balloc+0x20>
 8006f32:	216b      	movs	r1, #107	@ 0x6b
 8006f34:	4b17      	ldr	r3, [pc, #92]	@ (8006f94 <_Balloc+0x78>)
 8006f36:	4818      	ldr	r0, [pc, #96]	@ (8006f98 <_Balloc+0x7c>)
 8006f38:	f000 fd94 	bl	8007a64 <__assert_func>
 8006f3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f40:	6006      	str	r6, [r0, #0]
 8006f42:	60c6      	str	r6, [r0, #12]
 8006f44:	69e6      	ldr	r6, [r4, #28]
 8006f46:	68f3      	ldr	r3, [r6, #12]
 8006f48:	b183      	cbz	r3, 8006f6c <_Balloc+0x50>
 8006f4a:	69e3      	ldr	r3, [r4, #28]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f52:	b9b8      	cbnz	r0, 8006f84 <_Balloc+0x68>
 8006f54:	2101      	movs	r1, #1
 8006f56:	fa01 f605 	lsl.w	r6, r1, r5
 8006f5a:	1d72      	adds	r2, r6, #5
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	0092      	lsls	r2, r2, #2
 8006f60:	f000 fd9e 	bl	8007aa0 <_calloc_r>
 8006f64:	b160      	cbz	r0, 8006f80 <_Balloc+0x64>
 8006f66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f6a:	e00e      	b.n	8006f8a <_Balloc+0x6e>
 8006f6c:	2221      	movs	r2, #33	@ 0x21
 8006f6e:	2104      	movs	r1, #4
 8006f70:	4620      	mov	r0, r4
 8006f72:	f000 fd95 	bl	8007aa0 <_calloc_r>
 8006f76:	69e3      	ldr	r3, [r4, #28]
 8006f78:	60f0      	str	r0, [r6, #12]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1e4      	bne.n	8006f4a <_Balloc+0x2e>
 8006f80:	2000      	movs	r0, #0
 8006f82:	bd70      	pop	{r4, r5, r6, pc}
 8006f84:	6802      	ldr	r2, [r0, #0]
 8006f86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f90:	e7f7      	b.n	8006f82 <_Balloc+0x66>
 8006f92:	bf00      	nop
 8006f94:	08009471 	.word	0x08009471
 8006f98:	080094f1 	.word	0x080094f1

08006f9c <_Bfree>:
 8006f9c:	b570      	push	{r4, r5, r6, lr}
 8006f9e:	69c6      	ldr	r6, [r0, #28]
 8006fa0:	4605      	mov	r5, r0
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	b976      	cbnz	r6, 8006fc4 <_Bfree+0x28>
 8006fa6:	2010      	movs	r0, #16
 8006fa8:	f7ff ff02 	bl	8006db0 <malloc>
 8006fac:	4602      	mov	r2, r0
 8006fae:	61e8      	str	r0, [r5, #28]
 8006fb0:	b920      	cbnz	r0, 8006fbc <_Bfree+0x20>
 8006fb2:	218f      	movs	r1, #143	@ 0x8f
 8006fb4:	4b08      	ldr	r3, [pc, #32]	@ (8006fd8 <_Bfree+0x3c>)
 8006fb6:	4809      	ldr	r0, [pc, #36]	@ (8006fdc <_Bfree+0x40>)
 8006fb8:	f000 fd54 	bl	8007a64 <__assert_func>
 8006fbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fc0:	6006      	str	r6, [r0, #0]
 8006fc2:	60c6      	str	r6, [r0, #12]
 8006fc4:	b13c      	cbz	r4, 8006fd6 <_Bfree+0x3a>
 8006fc6:	69eb      	ldr	r3, [r5, #28]
 8006fc8:	6862      	ldr	r2, [r4, #4]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fd0:	6021      	str	r1, [r4, #0]
 8006fd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006fd6:	bd70      	pop	{r4, r5, r6, pc}
 8006fd8:	08009471 	.word	0x08009471
 8006fdc:	080094f1 	.word	0x080094f1

08006fe0 <__multadd>:
 8006fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe4:	4607      	mov	r7, r0
 8006fe6:	460c      	mov	r4, r1
 8006fe8:	461e      	mov	r6, r3
 8006fea:	2000      	movs	r0, #0
 8006fec:	690d      	ldr	r5, [r1, #16]
 8006fee:	f101 0c14 	add.w	ip, r1, #20
 8006ff2:	f8dc 3000 	ldr.w	r3, [ip]
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	b299      	uxth	r1, r3
 8006ffa:	fb02 6101 	mla	r1, r2, r1, r6
 8006ffe:	0c1e      	lsrs	r6, r3, #16
 8007000:	0c0b      	lsrs	r3, r1, #16
 8007002:	fb02 3306 	mla	r3, r2, r6, r3
 8007006:	b289      	uxth	r1, r1
 8007008:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800700c:	4285      	cmp	r5, r0
 800700e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007012:	f84c 1b04 	str.w	r1, [ip], #4
 8007016:	dcec      	bgt.n	8006ff2 <__multadd+0x12>
 8007018:	b30e      	cbz	r6, 800705e <__multadd+0x7e>
 800701a:	68a3      	ldr	r3, [r4, #8]
 800701c:	42ab      	cmp	r3, r5
 800701e:	dc19      	bgt.n	8007054 <__multadd+0x74>
 8007020:	6861      	ldr	r1, [r4, #4]
 8007022:	4638      	mov	r0, r7
 8007024:	3101      	adds	r1, #1
 8007026:	f7ff ff79 	bl	8006f1c <_Balloc>
 800702a:	4680      	mov	r8, r0
 800702c:	b928      	cbnz	r0, 800703a <__multadd+0x5a>
 800702e:	4602      	mov	r2, r0
 8007030:	21ba      	movs	r1, #186	@ 0xba
 8007032:	4b0c      	ldr	r3, [pc, #48]	@ (8007064 <__multadd+0x84>)
 8007034:	480c      	ldr	r0, [pc, #48]	@ (8007068 <__multadd+0x88>)
 8007036:	f000 fd15 	bl	8007a64 <__assert_func>
 800703a:	6922      	ldr	r2, [r4, #16]
 800703c:	f104 010c 	add.w	r1, r4, #12
 8007040:	3202      	adds	r2, #2
 8007042:	0092      	lsls	r2, r2, #2
 8007044:	300c      	adds	r0, #12
 8007046:	f7ff f800 	bl	800604a <memcpy>
 800704a:	4621      	mov	r1, r4
 800704c:	4638      	mov	r0, r7
 800704e:	f7ff ffa5 	bl	8006f9c <_Bfree>
 8007052:	4644      	mov	r4, r8
 8007054:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007058:	3501      	adds	r5, #1
 800705a:	615e      	str	r6, [r3, #20]
 800705c:	6125      	str	r5, [r4, #16]
 800705e:	4620      	mov	r0, r4
 8007060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007064:	080094e0 	.word	0x080094e0
 8007068:	080094f1 	.word	0x080094f1

0800706c <__hi0bits>:
 800706c:	4603      	mov	r3, r0
 800706e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007072:	bf3a      	itte	cc
 8007074:	0403      	lslcc	r3, r0, #16
 8007076:	2010      	movcc	r0, #16
 8007078:	2000      	movcs	r0, #0
 800707a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800707e:	bf3c      	itt	cc
 8007080:	021b      	lslcc	r3, r3, #8
 8007082:	3008      	addcc	r0, #8
 8007084:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007088:	bf3c      	itt	cc
 800708a:	011b      	lslcc	r3, r3, #4
 800708c:	3004      	addcc	r0, #4
 800708e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007092:	bf3c      	itt	cc
 8007094:	009b      	lslcc	r3, r3, #2
 8007096:	3002      	addcc	r0, #2
 8007098:	2b00      	cmp	r3, #0
 800709a:	db05      	blt.n	80070a8 <__hi0bits+0x3c>
 800709c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80070a0:	f100 0001 	add.w	r0, r0, #1
 80070a4:	bf08      	it	eq
 80070a6:	2020      	moveq	r0, #32
 80070a8:	4770      	bx	lr

080070aa <__lo0bits>:
 80070aa:	6803      	ldr	r3, [r0, #0]
 80070ac:	4602      	mov	r2, r0
 80070ae:	f013 0007 	ands.w	r0, r3, #7
 80070b2:	d00b      	beq.n	80070cc <__lo0bits+0x22>
 80070b4:	07d9      	lsls	r1, r3, #31
 80070b6:	d421      	bmi.n	80070fc <__lo0bits+0x52>
 80070b8:	0798      	lsls	r0, r3, #30
 80070ba:	bf49      	itett	mi
 80070bc:	085b      	lsrmi	r3, r3, #1
 80070be:	089b      	lsrpl	r3, r3, #2
 80070c0:	2001      	movmi	r0, #1
 80070c2:	6013      	strmi	r3, [r2, #0]
 80070c4:	bf5c      	itt	pl
 80070c6:	2002      	movpl	r0, #2
 80070c8:	6013      	strpl	r3, [r2, #0]
 80070ca:	4770      	bx	lr
 80070cc:	b299      	uxth	r1, r3
 80070ce:	b909      	cbnz	r1, 80070d4 <__lo0bits+0x2a>
 80070d0:	2010      	movs	r0, #16
 80070d2:	0c1b      	lsrs	r3, r3, #16
 80070d4:	b2d9      	uxtb	r1, r3
 80070d6:	b909      	cbnz	r1, 80070dc <__lo0bits+0x32>
 80070d8:	3008      	adds	r0, #8
 80070da:	0a1b      	lsrs	r3, r3, #8
 80070dc:	0719      	lsls	r1, r3, #28
 80070de:	bf04      	itt	eq
 80070e0:	091b      	lsreq	r3, r3, #4
 80070e2:	3004      	addeq	r0, #4
 80070e4:	0799      	lsls	r1, r3, #30
 80070e6:	bf04      	itt	eq
 80070e8:	089b      	lsreq	r3, r3, #2
 80070ea:	3002      	addeq	r0, #2
 80070ec:	07d9      	lsls	r1, r3, #31
 80070ee:	d403      	bmi.n	80070f8 <__lo0bits+0x4e>
 80070f0:	085b      	lsrs	r3, r3, #1
 80070f2:	f100 0001 	add.w	r0, r0, #1
 80070f6:	d003      	beq.n	8007100 <__lo0bits+0x56>
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	4770      	bx	lr
 80070fc:	2000      	movs	r0, #0
 80070fe:	4770      	bx	lr
 8007100:	2020      	movs	r0, #32
 8007102:	4770      	bx	lr

08007104 <__i2b>:
 8007104:	b510      	push	{r4, lr}
 8007106:	460c      	mov	r4, r1
 8007108:	2101      	movs	r1, #1
 800710a:	f7ff ff07 	bl	8006f1c <_Balloc>
 800710e:	4602      	mov	r2, r0
 8007110:	b928      	cbnz	r0, 800711e <__i2b+0x1a>
 8007112:	f240 1145 	movw	r1, #325	@ 0x145
 8007116:	4b04      	ldr	r3, [pc, #16]	@ (8007128 <__i2b+0x24>)
 8007118:	4804      	ldr	r0, [pc, #16]	@ (800712c <__i2b+0x28>)
 800711a:	f000 fca3 	bl	8007a64 <__assert_func>
 800711e:	2301      	movs	r3, #1
 8007120:	6144      	str	r4, [r0, #20]
 8007122:	6103      	str	r3, [r0, #16]
 8007124:	bd10      	pop	{r4, pc}
 8007126:	bf00      	nop
 8007128:	080094e0 	.word	0x080094e0
 800712c:	080094f1 	.word	0x080094f1

08007130 <__multiply>:
 8007130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007134:	4617      	mov	r7, r2
 8007136:	690a      	ldr	r2, [r1, #16]
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	4689      	mov	r9, r1
 800713c:	429a      	cmp	r2, r3
 800713e:	bfa2      	ittt	ge
 8007140:	463b      	movge	r3, r7
 8007142:	460f      	movge	r7, r1
 8007144:	4699      	movge	r9, r3
 8007146:	693d      	ldr	r5, [r7, #16]
 8007148:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	6879      	ldr	r1, [r7, #4]
 8007150:	eb05 060a 	add.w	r6, r5, sl
 8007154:	42b3      	cmp	r3, r6
 8007156:	b085      	sub	sp, #20
 8007158:	bfb8      	it	lt
 800715a:	3101      	addlt	r1, #1
 800715c:	f7ff fede 	bl	8006f1c <_Balloc>
 8007160:	b930      	cbnz	r0, 8007170 <__multiply+0x40>
 8007162:	4602      	mov	r2, r0
 8007164:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007168:	4b40      	ldr	r3, [pc, #256]	@ (800726c <__multiply+0x13c>)
 800716a:	4841      	ldr	r0, [pc, #260]	@ (8007270 <__multiply+0x140>)
 800716c:	f000 fc7a 	bl	8007a64 <__assert_func>
 8007170:	f100 0414 	add.w	r4, r0, #20
 8007174:	4623      	mov	r3, r4
 8007176:	2200      	movs	r2, #0
 8007178:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800717c:	4573      	cmp	r3, lr
 800717e:	d320      	bcc.n	80071c2 <__multiply+0x92>
 8007180:	f107 0814 	add.w	r8, r7, #20
 8007184:	f109 0114 	add.w	r1, r9, #20
 8007188:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800718c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007190:	9302      	str	r3, [sp, #8]
 8007192:	1beb      	subs	r3, r5, r7
 8007194:	3b15      	subs	r3, #21
 8007196:	f023 0303 	bic.w	r3, r3, #3
 800719a:	3304      	adds	r3, #4
 800719c:	3715      	adds	r7, #21
 800719e:	42bd      	cmp	r5, r7
 80071a0:	bf38      	it	cc
 80071a2:	2304      	movcc	r3, #4
 80071a4:	9301      	str	r3, [sp, #4]
 80071a6:	9b02      	ldr	r3, [sp, #8]
 80071a8:	9103      	str	r1, [sp, #12]
 80071aa:	428b      	cmp	r3, r1
 80071ac:	d80c      	bhi.n	80071c8 <__multiply+0x98>
 80071ae:	2e00      	cmp	r6, #0
 80071b0:	dd03      	ble.n	80071ba <__multiply+0x8a>
 80071b2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d055      	beq.n	8007266 <__multiply+0x136>
 80071ba:	6106      	str	r6, [r0, #16]
 80071bc:	b005      	add	sp, #20
 80071be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c2:	f843 2b04 	str.w	r2, [r3], #4
 80071c6:	e7d9      	b.n	800717c <__multiply+0x4c>
 80071c8:	f8b1 a000 	ldrh.w	sl, [r1]
 80071cc:	f1ba 0f00 	cmp.w	sl, #0
 80071d0:	d01f      	beq.n	8007212 <__multiply+0xe2>
 80071d2:	46c4      	mov	ip, r8
 80071d4:	46a1      	mov	r9, r4
 80071d6:	2700      	movs	r7, #0
 80071d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80071dc:	f8d9 3000 	ldr.w	r3, [r9]
 80071e0:	fa1f fb82 	uxth.w	fp, r2
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	fb0a 330b 	mla	r3, sl, fp, r3
 80071ea:	443b      	add	r3, r7
 80071ec:	f8d9 7000 	ldr.w	r7, [r9]
 80071f0:	0c12      	lsrs	r2, r2, #16
 80071f2:	0c3f      	lsrs	r7, r7, #16
 80071f4:	fb0a 7202 	mla	r2, sl, r2, r7
 80071f8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007202:	4565      	cmp	r5, ip
 8007204:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007208:	f849 3b04 	str.w	r3, [r9], #4
 800720c:	d8e4      	bhi.n	80071d8 <__multiply+0xa8>
 800720e:	9b01      	ldr	r3, [sp, #4]
 8007210:	50e7      	str	r7, [r4, r3]
 8007212:	9b03      	ldr	r3, [sp, #12]
 8007214:	3104      	adds	r1, #4
 8007216:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800721a:	f1b9 0f00 	cmp.w	r9, #0
 800721e:	d020      	beq.n	8007262 <__multiply+0x132>
 8007220:	4647      	mov	r7, r8
 8007222:	46a4      	mov	ip, r4
 8007224:	f04f 0a00 	mov.w	sl, #0
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	f8b7 b000 	ldrh.w	fp, [r7]
 800722e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007232:	b29b      	uxth	r3, r3
 8007234:	fb09 220b 	mla	r2, r9, fp, r2
 8007238:	4452      	add	r2, sl
 800723a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800723e:	f84c 3b04 	str.w	r3, [ip], #4
 8007242:	f857 3b04 	ldr.w	r3, [r7], #4
 8007246:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800724a:	f8bc 3000 	ldrh.w	r3, [ip]
 800724e:	42bd      	cmp	r5, r7
 8007250:	fb09 330a 	mla	r3, r9, sl, r3
 8007254:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007258:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800725c:	d8e5      	bhi.n	800722a <__multiply+0xfa>
 800725e:	9a01      	ldr	r2, [sp, #4]
 8007260:	50a3      	str	r3, [r4, r2]
 8007262:	3404      	adds	r4, #4
 8007264:	e79f      	b.n	80071a6 <__multiply+0x76>
 8007266:	3e01      	subs	r6, #1
 8007268:	e7a1      	b.n	80071ae <__multiply+0x7e>
 800726a:	bf00      	nop
 800726c:	080094e0 	.word	0x080094e0
 8007270:	080094f1 	.word	0x080094f1

08007274 <__pow5mult>:
 8007274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007278:	4615      	mov	r5, r2
 800727a:	f012 0203 	ands.w	r2, r2, #3
 800727e:	4607      	mov	r7, r0
 8007280:	460e      	mov	r6, r1
 8007282:	d007      	beq.n	8007294 <__pow5mult+0x20>
 8007284:	4c25      	ldr	r4, [pc, #148]	@ (800731c <__pow5mult+0xa8>)
 8007286:	3a01      	subs	r2, #1
 8007288:	2300      	movs	r3, #0
 800728a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800728e:	f7ff fea7 	bl	8006fe0 <__multadd>
 8007292:	4606      	mov	r6, r0
 8007294:	10ad      	asrs	r5, r5, #2
 8007296:	d03d      	beq.n	8007314 <__pow5mult+0xa0>
 8007298:	69fc      	ldr	r4, [r7, #28]
 800729a:	b97c      	cbnz	r4, 80072bc <__pow5mult+0x48>
 800729c:	2010      	movs	r0, #16
 800729e:	f7ff fd87 	bl	8006db0 <malloc>
 80072a2:	4602      	mov	r2, r0
 80072a4:	61f8      	str	r0, [r7, #28]
 80072a6:	b928      	cbnz	r0, 80072b4 <__pow5mult+0x40>
 80072a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80072ac:	4b1c      	ldr	r3, [pc, #112]	@ (8007320 <__pow5mult+0xac>)
 80072ae:	481d      	ldr	r0, [pc, #116]	@ (8007324 <__pow5mult+0xb0>)
 80072b0:	f000 fbd8 	bl	8007a64 <__assert_func>
 80072b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072b8:	6004      	str	r4, [r0, #0]
 80072ba:	60c4      	str	r4, [r0, #12]
 80072bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80072c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072c4:	b94c      	cbnz	r4, 80072da <__pow5mult+0x66>
 80072c6:	f240 2171 	movw	r1, #625	@ 0x271
 80072ca:	4638      	mov	r0, r7
 80072cc:	f7ff ff1a 	bl	8007104 <__i2b>
 80072d0:	2300      	movs	r3, #0
 80072d2:	4604      	mov	r4, r0
 80072d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80072d8:	6003      	str	r3, [r0, #0]
 80072da:	f04f 0900 	mov.w	r9, #0
 80072de:	07eb      	lsls	r3, r5, #31
 80072e0:	d50a      	bpl.n	80072f8 <__pow5mult+0x84>
 80072e2:	4631      	mov	r1, r6
 80072e4:	4622      	mov	r2, r4
 80072e6:	4638      	mov	r0, r7
 80072e8:	f7ff ff22 	bl	8007130 <__multiply>
 80072ec:	4680      	mov	r8, r0
 80072ee:	4631      	mov	r1, r6
 80072f0:	4638      	mov	r0, r7
 80072f2:	f7ff fe53 	bl	8006f9c <_Bfree>
 80072f6:	4646      	mov	r6, r8
 80072f8:	106d      	asrs	r5, r5, #1
 80072fa:	d00b      	beq.n	8007314 <__pow5mult+0xa0>
 80072fc:	6820      	ldr	r0, [r4, #0]
 80072fe:	b938      	cbnz	r0, 8007310 <__pow5mult+0x9c>
 8007300:	4622      	mov	r2, r4
 8007302:	4621      	mov	r1, r4
 8007304:	4638      	mov	r0, r7
 8007306:	f7ff ff13 	bl	8007130 <__multiply>
 800730a:	6020      	str	r0, [r4, #0]
 800730c:	f8c0 9000 	str.w	r9, [r0]
 8007310:	4604      	mov	r4, r0
 8007312:	e7e4      	b.n	80072de <__pow5mult+0x6a>
 8007314:	4630      	mov	r0, r6
 8007316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800731a:	bf00      	nop
 800731c:	080095a4 	.word	0x080095a4
 8007320:	08009471 	.word	0x08009471
 8007324:	080094f1 	.word	0x080094f1

08007328 <__lshift>:
 8007328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800732c:	460c      	mov	r4, r1
 800732e:	4607      	mov	r7, r0
 8007330:	4691      	mov	r9, r2
 8007332:	6923      	ldr	r3, [r4, #16]
 8007334:	6849      	ldr	r1, [r1, #4]
 8007336:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800733a:	68a3      	ldr	r3, [r4, #8]
 800733c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007340:	f108 0601 	add.w	r6, r8, #1
 8007344:	42b3      	cmp	r3, r6
 8007346:	db0b      	blt.n	8007360 <__lshift+0x38>
 8007348:	4638      	mov	r0, r7
 800734a:	f7ff fde7 	bl	8006f1c <_Balloc>
 800734e:	4605      	mov	r5, r0
 8007350:	b948      	cbnz	r0, 8007366 <__lshift+0x3e>
 8007352:	4602      	mov	r2, r0
 8007354:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007358:	4b27      	ldr	r3, [pc, #156]	@ (80073f8 <__lshift+0xd0>)
 800735a:	4828      	ldr	r0, [pc, #160]	@ (80073fc <__lshift+0xd4>)
 800735c:	f000 fb82 	bl	8007a64 <__assert_func>
 8007360:	3101      	adds	r1, #1
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	e7ee      	b.n	8007344 <__lshift+0x1c>
 8007366:	2300      	movs	r3, #0
 8007368:	f100 0114 	add.w	r1, r0, #20
 800736c:	f100 0210 	add.w	r2, r0, #16
 8007370:	4618      	mov	r0, r3
 8007372:	4553      	cmp	r3, sl
 8007374:	db33      	blt.n	80073de <__lshift+0xb6>
 8007376:	6920      	ldr	r0, [r4, #16]
 8007378:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800737c:	f104 0314 	add.w	r3, r4, #20
 8007380:	f019 091f 	ands.w	r9, r9, #31
 8007384:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007388:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800738c:	d02b      	beq.n	80073e6 <__lshift+0xbe>
 800738e:	468a      	mov	sl, r1
 8007390:	2200      	movs	r2, #0
 8007392:	f1c9 0e20 	rsb	lr, r9, #32
 8007396:	6818      	ldr	r0, [r3, #0]
 8007398:	fa00 f009 	lsl.w	r0, r0, r9
 800739c:	4310      	orrs	r0, r2
 800739e:	f84a 0b04 	str.w	r0, [sl], #4
 80073a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80073a6:	459c      	cmp	ip, r3
 80073a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80073ac:	d8f3      	bhi.n	8007396 <__lshift+0x6e>
 80073ae:	ebac 0304 	sub.w	r3, ip, r4
 80073b2:	3b15      	subs	r3, #21
 80073b4:	f023 0303 	bic.w	r3, r3, #3
 80073b8:	3304      	adds	r3, #4
 80073ba:	f104 0015 	add.w	r0, r4, #21
 80073be:	4560      	cmp	r0, ip
 80073c0:	bf88      	it	hi
 80073c2:	2304      	movhi	r3, #4
 80073c4:	50ca      	str	r2, [r1, r3]
 80073c6:	b10a      	cbz	r2, 80073cc <__lshift+0xa4>
 80073c8:	f108 0602 	add.w	r6, r8, #2
 80073cc:	3e01      	subs	r6, #1
 80073ce:	4638      	mov	r0, r7
 80073d0:	4621      	mov	r1, r4
 80073d2:	612e      	str	r6, [r5, #16]
 80073d4:	f7ff fde2 	bl	8006f9c <_Bfree>
 80073d8:	4628      	mov	r0, r5
 80073da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073de:	f842 0f04 	str.w	r0, [r2, #4]!
 80073e2:	3301      	adds	r3, #1
 80073e4:	e7c5      	b.n	8007372 <__lshift+0x4a>
 80073e6:	3904      	subs	r1, #4
 80073e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80073ec:	459c      	cmp	ip, r3
 80073ee:	f841 2f04 	str.w	r2, [r1, #4]!
 80073f2:	d8f9      	bhi.n	80073e8 <__lshift+0xc0>
 80073f4:	e7ea      	b.n	80073cc <__lshift+0xa4>
 80073f6:	bf00      	nop
 80073f8:	080094e0 	.word	0x080094e0
 80073fc:	080094f1 	.word	0x080094f1

08007400 <__mcmp>:
 8007400:	4603      	mov	r3, r0
 8007402:	690a      	ldr	r2, [r1, #16]
 8007404:	6900      	ldr	r0, [r0, #16]
 8007406:	b530      	push	{r4, r5, lr}
 8007408:	1a80      	subs	r0, r0, r2
 800740a:	d10e      	bne.n	800742a <__mcmp+0x2a>
 800740c:	3314      	adds	r3, #20
 800740e:	3114      	adds	r1, #20
 8007410:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007414:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007418:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800741c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007420:	4295      	cmp	r5, r2
 8007422:	d003      	beq.n	800742c <__mcmp+0x2c>
 8007424:	d205      	bcs.n	8007432 <__mcmp+0x32>
 8007426:	f04f 30ff 	mov.w	r0, #4294967295
 800742a:	bd30      	pop	{r4, r5, pc}
 800742c:	42a3      	cmp	r3, r4
 800742e:	d3f3      	bcc.n	8007418 <__mcmp+0x18>
 8007430:	e7fb      	b.n	800742a <__mcmp+0x2a>
 8007432:	2001      	movs	r0, #1
 8007434:	e7f9      	b.n	800742a <__mcmp+0x2a>
	...

08007438 <__mdiff>:
 8007438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800743c:	4689      	mov	r9, r1
 800743e:	4606      	mov	r6, r0
 8007440:	4611      	mov	r1, r2
 8007442:	4648      	mov	r0, r9
 8007444:	4614      	mov	r4, r2
 8007446:	f7ff ffdb 	bl	8007400 <__mcmp>
 800744a:	1e05      	subs	r5, r0, #0
 800744c:	d112      	bne.n	8007474 <__mdiff+0x3c>
 800744e:	4629      	mov	r1, r5
 8007450:	4630      	mov	r0, r6
 8007452:	f7ff fd63 	bl	8006f1c <_Balloc>
 8007456:	4602      	mov	r2, r0
 8007458:	b928      	cbnz	r0, 8007466 <__mdiff+0x2e>
 800745a:	f240 2137 	movw	r1, #567	@ 0x237
 800745e:	4b3e      	ldr	r3, [pc, #248]	@ (8007558 <__mdiff+0x120>)
 8007460:	483e      	ldr	r0, [pc, #248]	@ (800755c <__mdiff+0x124>)
 8007462:	f000 faff 	bl	8007a64 <__assert_func>
 8007466:	2301      	movs	r3, #1
 8007468:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800746c:	4610      	mov	r0, r2
 800746e:	b003      	add	sp, #12
 8007470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007474:	bfbc      	itt	lt
 8007476:	464b      	movlt	r3, r9
 8007478:	46a1      	movlt	r9, r4
 800747a:	4630      	mov	r0, r6
 800747c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007480:	bfba      	itte	lt
 8007482:	461c      	movlt	r4, r3
 8007484:	2501      	movlt	r5, #1
 8007486:	2500      	movge	r5, #0
 8007488:	f7ff fd48 	bl	8006f1c <_Balloc>
 800748c:	4602      	mov	r2, r0
 800748e:	b918      	cbnz	r0, 8007498 <__mdiff+0x60>
 8007490:	f240 2145 	movw	r1, #581	@ 0x245
 8007494:	4b30      	ldr	r3, [pc, #192]	@ (8007558 <__mdiff+0x120>)
 8007496:	e7e3      	b.n	8007460 <__mdiff+0x28>
 8007498:	f100 0b14 	add.w	fp, r0, #20
 800749c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80074a0:	f109 0310 	add.w	r3, r9, #16
 80074a4:	60c5      	str	r5, [r0, #12]
 80074a6:	f04f 0c00 	mov.w	ip, #0
 80074aa:	f109 0514 	add.w	r5, r9, #20
 80074ae:	46d9      	mov	r9, fp
 80074b0:	6926      	ldr	r6, [r4, #16]
 80074b2:	f104 0e14 	add.w	lr, r4, #20
 80074b6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80074ba:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80074be:	9301      	str	r3, [sp, #4]
 80074c0:	9b01      	ldr	r3, [sp, #4]
 80074c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80074c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80074ca:	b281      	uxth	r1, r0
 80074cc:	9301      	str	r3, [sp, #4]
 80074ce:	fa1f f38a 	uxth.w	r3, sl
 80074d2:	1a5b      	subs	r3, r3, r1
 80074d4:	0c00      	lsrs	r0, r0, #16
 80074d6:	4463      	add	r3, ip
 80074d8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80074dc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80074e6:	4576      	cmp	r6, lr
 80074e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80074ec:	f849 3b04 	str.w	r3, [r9], #4
 80074f0:	d8e6      	bhi.n	80074c0 <__mdiff+0x88>
 80074f2:	1b33      	subs	r3, r6, r4
 80074f4:	3b15      	subs	r3, #21
 80074f6:	f023 0303 	bic.w	r3, r3, #3
 80074fa:	3415      	adds	r4, #21
 80074fc:	3304      	adds	r3, #4
 80074fe:	42a6      	cmp	r6, r4
 8007500:	bf38      	it	cc
 8007502:	2304      	movcc	r3, #4
 8007504:	441d      	add	r5, r3
 8007506:	445b      	add	r3, fp
 8007508:	461e      	mov	r6, r3
 800750a:	462c      	mov	r4, r5
 800750c:	4544      	cmp	r4, r8
 800750e:	d30e      	bcc.n	800752e <__mdiff+0xf6>
 8007510:	f108 0103 	add.w	r1, r8, #3
 8007514:	1b49      	subs	r1, r1, r5
 8007516:	f021 0103 	bic.w	r1, r1, #3
 800751a:	3d03      	subs	r5, #3
 800751c:	45a8      	cmp	r8, r5
 800751e:	bf38      	it	cc
 8007520:	2100      	movcc	r1, #0
 8007522:	440b      	add	r3, r1
 8007524:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007528:	b199      	cbz	r1, 8007552 <__mdiff+0x11a>
 800752a:	6117      	str	r7, [r2, #16]
 800752c:	e79e      	b.n	800746c <__mdiff+0x34>
 800752e:	46e6      	mov	lr, ip
 8007530:	f854 1b04 	ldr.w	r1, [r4], #4
 8007534:	fa1f fc81 	uxth.w	ip, r1
 8007538:	44f4      	add	ip, lr
 800753a:	0c08      	lsrs	r0, r1, #16
 800753c:	4471      	add	r1, lr
 800753e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007542:	b289      	uxth	r1, r1
 8007544:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007548:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800754c:	f846 1b04 	str.w	r1, [r6], #4
 8007550:	e7dc      	b.n	800750c <__mdiff+0xd4>
 8007552:	3f01      	subs	r7, #1
 8007554:	e7e6      	b.n	8007524 <__mdiff+0xec>
 8007556:	bf00      	nop
 8007558:	080094e0 	.word	0x080094e0
 800755c:	080094f1 	.word	0x080094f1

08007560 <__d2b>:
 8007560:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007564:	2101      	movs	r1, #1
 8007566:	4690      	mov	r8, r2
 8007568:	4699      	mov	r9, r3
 800756a:	9e08      	ldr	r6, [sp, #32]
 800756c:	f7ff fcd6 	bl	8006f1c <_Balloc>
 8007570:	4604      	mov	r4, r0
 8007572:	b930      	cbnz	r0, 8007582 <__d2b+0x22>
 8007574:	4602      	mov	r2, r0
 8007576:	f240 310f 	movw	r1, #783	@ 0x30f
 800757a:	4b23      	ldr	r3, [pc, #140]	@ (8007608 <__d2b+0xa8>)
 800757c:	4823      	ldr	r0, [pc, #140]	@ (800760c <__d2b+0xac>)
 800757e:	f000 fa71 	bl	8007a64 <__assert_func>
 8007582:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007586:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800758a:	b10d      	cbz	r5, 8007590 <__d2b+0x30>
 800758c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007590:	9301      	str	r3, [sp, #4]
 8007592:	f1b8 0300 	subs.w	r3, r8, #0
 8007596:	d024      	beq.n	80075e2 <__d2b+0x82>
 8007598:	4668      	mov	r0, sp
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	f7ff fd85 	bl	80070aa <__lo0bits>
 80075a0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80075a4:	b1d8      	cbz	r0, 80075de <__d2b+0x7e>
 80075a6:	f1c0 0320 	rsb	r3, r0, #32
 80075aa:	fa02 f303 	lsl.w	r3, r2, r3
 80075ae:	430b      	orrs	r3, r1
 80075b0:	40c2      	lsrs	r2, r0
 80075b2:	6163      	str	r3, [r4, #20]
 80075b4:	9201      	str	r2, [sp, #4]
 80075b6:	9b01      	ldr	r3, [sp, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	bf0c      	ite	eq
 80075bc:	2201      	moveq	r2, #1
 80075be:	2202      	movne	r2, #2
 80075c0:	61a3      	str	r3, [r4, #24]
 80075c2:	6122      	str	r2, [r4, #16]
 80075c4:	b1ad      	cbz	r5, 80075f2 <__d2b+0x92>
 80075c6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80075ca:	4405      	add	r5, r0
 80075cc:	6035      	str	r5, [r6, #0]
 80075ce:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80075d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075d4:	6018      	str	r0, [r3, #0]
 80075d6:	4620      	mov	r0, r4
 80075d8:	b002      	add	sp, #8
 80075da:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80075de:	6161      	str	r1, [r4, #20]
 80075e0:	e7e9      	b.n	80075b6 <__d2b+0x56>
 80075e2:	a801      	add	r0, sp, #4
 80075e4:	f7ff fd61 	bl	80070aa <__lo0bits>
 80075e8:	9b01      	ldr	r3, [sp, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	6163      	str	r3, [r4, #20]
 80075ee:	3020      	adds	r0, #32
 80075f0:	e7e7      	b.n	80075c2 <__d2b+0x62>
 80075f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80075f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075fa:	6030      	str	r0, [r6, #0]
 80075fc:	6918      	ldr	r0, [r3, #16]
 80075fe:	f7ff fd35 	bl	800706c <__hi0bits>
 8007602:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007606:	e7e4      	b.n	80075d2 <__d2b+0x72>
 8007608:	080094e0 	.word	0x080094e0
 800760c:	080094f1 	.word	0x080094f1

08007610 <__ssputs_r>:
 8007610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007614:	461f      	mov	r7, r3
 8007616:	688e      	ldr	r6, [r1, #8]
 8007618:	4682      	mov	sl, r0
 800761a:	42be      	cmp	r6, r7
 800761c:	460c      	mov	r4, r1
 800761e:	4690      	mov	r8, r2
 8007620:	680b      	ldr	r3, [r1, #0]
 8007622:	d82d      	bhi.n	8007680 <__ssputs_r+0x70>
 8007624:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007628:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800762c:	d026      	beq.n	800767c <__ssputs_r+0x6c>
 800762e:	6965      	ldr	r5, [r4, #20]
 8007630:	6909      	ldr	r1, [r1, #16]
 8007632:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007636:	eba3 0901 	sub.w	r9, r3, r1
 800763a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800763e:	1c7b      	adds	r3, r7, #1
 8007640:	444b      	add	r3, r9
 8007642:	106d      	asrs	r5, r5, #1
 8007644:	429d      	cmp	r5, r3
 8007646:	bf38      	it	cc
 8007648:	461d      	movcc	r5, r3
 800764a:	0553      	lsls	r3, r2, #21
 800764c:	d527      	bpl.n	800769e <__ssputs_r+0x8e>
 800764e:	4629      	mov	r1, r5
 8007650:	f7ff fbd8 	bl	8006e04 <_malloc_r>
 8007654:	4606      	mov	r6, r0
 8007656:	b360      	cbz	r0, 80076b2 <__ssputs_r+0xa2>
 8007658:	464a      	mov	r2, r9
 800765a:	6921      	ldr	r1, [r4, #16]
 800765c:	f7fe fcf5 	bl	800604a <memcpy>
 8007660:	89a3      	ldrh	r3, [r4, #12]
 8007662:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800766a:	81a3      	strh	r3, [r4, #12]
 800766c:	6126      	str	r6, [r4, #16]
 800766e:	444e      	add	r6, r9
 8007670:	6026      	str	r6, [r4, #0]
 8007672:	463e      	mov	r6, r7
 8007674:	6165      	str	r5, [r4, #20]
 8007676:	eba5 0509 	sub.w	r5, r5, r9
 800767a:	60a5      	str	r5, [r4, #8]
 800767c:	42be      	cmp	r6, r7
 800767e:	d900      	bls.n	8007682 <__ssputs_r+0x72>
 8007680:	463e      	mov	r6, r7
 8007682:	4632      	mov	r2, r6
 8007684:	4641      	mov	r1, r8
 8007686:	6820      	ldr	r0, [r4, #0]
 8007688:	f000 f9c2 	bl	8007a10 <memmove>
 800768c:	2000      	movs	r0, #0
 800768e:	68a3      	ldr	r3, [r4, #8]
 8007690:	1b9b      	subs	r3, r3, r6
 8007692:	60a3      	str	r3, [r4, #8]
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	4433      	add	r3, r6
 8007698:	6023      	str	r3, [r4, #0]
 800769a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800769e:	462a      	mov	r2, r5
 80076a0:	f000 fa24 	bl	8007aec <_realloc_r>
 80076a4:	4606      	mov	r6, r0
 80076a6:	2800      	cmp	r0, #0
 80076a8:	d1e0      	bne.n	800766c <__ssputs_r+0x5c>
 80076aa:	4650      	mov	r0, sl
 80076ac:	6921      	ldr	r1, [r4, #16]
 80076ae:	f7ff fb37 	bl	8006d20 <_free_r>
 80076b2:	230c      	movs	r3, #12
 80076b4:	f8ca 3000 	str.w	r3, [sl]
 80076b8:	89a3      	ldrh	r3, [r4, #12]
 80076ba:	f04f 30ff 	mov.w	r0, #4294967295
 80076be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076c2:	81a3      	strh	r3, [r4, #12]
 80076c4:	e7e9      	b.n	800769a <__ssputs_r+0x8a>
	...

080076c8 <_svfiprintf_r>:
 80076c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076cc:	4698      	mov	r8, r3
 80076ce:	898b      	ldrh	r3, [r1, #12]
 80076d0:	4607      	mov	r7, r0
 80076d2:	061b      	lsls	r3, r3, #24
 80076d4:	460d      	mov	r5, r1
 80076d6:	4614      	mov	r4, r2
 80076d8:	b09d      	sub	sp, #116	@ 0x74
 80076da:	d510      	bpl.n	80076fe <_svfiprintf_r+0x36>
 80076dc:	690b      	ldr	r3, [r1, #16]
 80076de:	b973      	cbnz	r3, 80076fe <_svfiprintf_r+0x36>
 80076e0:	2140      	movs	r1, #64	@ 0x40
 80076e2:	f7ff fb8f 	bl	8006e04 <_malloc_r>
 80076e6:	6028      	str	r0, [r5, #0]
 80076e8:	6128      	str	r0, [r5, #16]
 80076ea:	b930      	cbnz	r0, 80076fa <_svfiprintf_r+0x32>
 80076ec:	230c      	movs	r3, #12
 80076ee:	603b      	str	r3, [r7, #0]
 80076f0:	f04f 30ff 	mov.w	r0, #4294967295
 80076f4:	b01d      	add	sp, #116	@ 0x74
 80076f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fa:	2340      	movs	r3, #64	@ 0x40
 80076fc:	616b      	str	r3, [r5, #20]
 80076fe:	2300      	movs	r3, #0
 8007700:	9309      	str	r3, [sp, #36]	@ 0x24
 8007702:	2320      	movs	r3, #32
 8007704:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007708:	2330      	movs	r3, #48	@ 0x30
 800770a:	f04f 0901 	mov.w	r9, #1
 800770e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007712:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80078ac <_svfiprintf_r+0x1e4>
 8007716:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800771a:	4623      	mov	r3, r4
 800771c:	469a      	mov	sl, r3
 800771e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007722:	b10a      	cbz	r2, 8007728 <_svfiprintf_r+0x60>
 8007724:	2a25      	cmp	r2, #37	@ 0x25
 8007726:	d1f9      	bne.n	800771c <_svfiprintf_r+0x54>
 8007728:	ebba 0b04 	subs.w	fp, sl, r4
 800772c:	d00b      	beq.n	8007746 <_svfiprintf_r+0x7e>
 800772e:	465b      	mov	r3, fp
 8007730:	4622      	mov	r2, r4
 8007732:	4629      	mov	r1, r5
 8007734:	4638      	mov	r0, r7
 8007736:	f7ff ff6b 	bl	8007610 <__ssputs_r>
 800773a:	3001      	adds	r0, #1
 800773c:	f000 80a7 	beq.w	800788e <_svfiprintf_r+0x1c6>
 8007740:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007742:	445a      	add	r2, fp
 8007744:	9209      	str	r2, [sp, #36]	@ 0x24
 8007746:	f89a 3000 	ldrb.w	r3, [sl]
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 809f 	beq.w	800788e <_svfiprintf_r+0x1c6>
 8007750:	2300      	movs	r3, #0
 8007752:	f04f 32ff 	mov.w	r2, #4294967295
 8007756:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800775a:	f10a 0a01 	add.w	sl, sl, #1
 800775e:	9304      	str	r3, [sp, #16]
 8007760:	9307      	str	r3, [sp, #28]
 8007762:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007766:	931a      	str	r3, [sp, #104]	@ 0x68
 8007768:	4654      	mov	r4, sl
 800776a:	2205      	movs	r2, #5
 800776c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007770:	484e      	ldr	r0, [pc, #312]	@ (80078ac <_svfiprintf_r+0x1e4>)
 8007772:	f7fe fc5c 	bl	800602e <memchr>
 8007776:	9a04      	ldr	r2, [sp, #16]
 8007778:	b9d8      	cbnz	r0, 80077b2 <_svfiprintf_r+0xea>
 800777a:	06d0      	lsls	r0, r2, #27
 800777c:	bf44      	itt	mi
 800777e:	2320      	movmi	r3, #32
 8007780:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007784:	0711      	lsls	r1, r2, #28
 8007786:	bf44      	itt	mi
 8007788:	232b      	movmi	r3, #43	@ 0x2b
 800778a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800778e:	f89a 3000 	ldrb.w	r3, [sl]
 8007792:	2b2a      	cmp	r3, #42	@ 0x2a
 8007794:	d015      	beq.n	80077c2 <_svfiprintf_r+0xfa>
 8007796:	4654      	mov	r4, sl
 8007798:	2000      	movs	r0, #0
 800779a:	f04f 0c0a 	mov.w	ip, #10
 800779e:	9a07      	ldr	r2, [sp, #28]
 80077a0:	4621      	mov	r1, r4
 80077a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077a6:	3b30      	subs	r3, #48	@ 0x30
 80077a8:	2b09      	cmp	r3, #9
 80077aa:	d94b      	bls.n	8007844 <_svfiprintf_r+0x17c>
 80077ac:	b1b0      	cbz	r0, 80077dc <_svfiprintf_r+0x114>
 80077ae:	9207      	str	r2, [sp, #28]
 80077b0:	e014      	b.n	80077dc <_svfiprintf_r+0x114>
 80077b2:	eba0 0308 	sub.w	r3, r0, r8
 80077b6:	fa09 f303 	lsl.w	r3, r9, r3
 80077ba:	4313      	orrs	r3, r2
 80077bc:	46a2      	mov	sl, r4
 80077be:	9304      	str	r3, [sp, #16]
 80077c0:	e7d2      	b.n	8007768 <_svfiprintf_r+0xa0>
 80077c2:	9b03      	ldr	r3, [sp, #12]
 80077c4:	1d19      	adds	r1, r3, #4
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	9103      	str	r1, [sp, #12]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	bfbb      	ittet	lt
 80077ce:	425b      	neglt	r3, r3
 80077d0:	f042 0202 	orrlt.w	r2, r2, #2
 80077d4:	9307      	strge	r3, [sp, #28]
 80077d6:	9307      	strlt	r3, [sp, #28]
 80077d8:	bfb8      	it	lt
 80077da:	9204      	strlt	r2, [sp, #16]
 80077dc:	7823      	ldrb	r3, [r4, #0]
 80077de:	2b2e      	cmp	r3, #46	@ 0x2e
 80077e0:	d10a      	bne.n	80077f8 <_svfiprintf_r+0x130>
 80077e2:	7863      	ldrb	r3, [r4, #1]
 80077e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80077e6:	d132      	bne.n	800784e <_svfiprintf_r+0x186>
 80077e8:	9b03      	ldr	r3, [sp, #12]
 80077ea:	3402      	adds	r4, #2
 80077ec:	1d1a      	adds	r2, r3, #4
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	9203      	str	r2, [sp, #12]
 80077f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077f6:	9305      	str	r3, [sp, #20]
 80077f8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80078b0 <_svfiprintf_r+0x1e8>
 80077fc:	2203      	movs	r2, #3
 80077fe:	4650      	mov	r0, sl
 8007800:	7821      	ldrb	r1, [r4, #0]
 8007802:	f7fe fc14 	bl	800602e <memchr>
 8007806:	b138      	cbz	r0, 8007818 <_svfiprintf_r+0x150>
 8007808:	2240      	movs	r2, #64	@ 0x40
 800780a:	9b04      	ldr	r3, [sp, #16]
 800780c:	eba0 000a 	sub.w	r0, r0, sl
 8007810:	4082      	lsls	r2, r0
 8007812:	4313      	orrs	r3, r2
 8007814:	3401      	adds	r4, #1
 8007816:	9304      	str	r3, [sp, #16]
 8007818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800781c:	2206      	movs	r2, #6
 800781e:	4825      	ldr	r0, [pc, #148]	@ (80078b4 <_svfiprintf_r+0x1ec>)
 8007820:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007824:	f7fe fc03 	bl	800602e <memchr>
 8007828:	2800      	cmp	r0, #0
 800782a:	d036      	beq.n	800789a <_svfiprintf_r+0x1d2>
 800782c:	4b22      	ldr	r3, [pc, #136]	@ (80078b8 <_svfiprintf_r+0x1f0>)
 800782e:	bb1b      	cbnz	r3, 8007878 <_svfiprintf_r+0x1b0>
 8007830:	9b03      	ldr	r3, [sp, #12]
 8007832:	3307      	adds	r3, #7
 8007834:	f023 0307 	bic.w	r3, r3, #7
 8007838:	3308      	adds	r3, #8
 800783a:	9303      	str	r3, [sp, #12]
 800783c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800783e:	4433      	add	r3, r6
 8007840:	9309      	str	r3, [sp, #36]	@ 0x24
 8007842:	e76a      	b.n	800771a <_svfiprintf_r+0x52>
 8007844:	460c      	mov	r4, r1
 8007846:	2001      	movs	r0, #1
 8007848:	fb0c 3202 	mla	r2, ip, r2, r3
 800784c:	e7a8      	b.n	80077a0 <_svfiprintf_r+0xd8>
 800784e:	2300      	movs	r3, #0
 8007850:	f04f 0c0a 	mov.w	ip, #10
 8007854:	4619      	mov	r1, r3
 8007856:	3401      	adds	r4, #1
 8007858:	9305      	str	r3, [sp, #20]
 800785a:	4620      	mov	r0, r4
 800785c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007860:	3a30      	subs	r2, #48	@ 0x30
 8007862:	2a09      	cmp	r2, #9
 8007864:	d903      	bls.n	800786e <_svfiprintf_r+0x1a6>
 8007866:	2b00      	cmp	r3, #0
 8007868:	d0c6      	beq.n	80077f8 <_svfiprintf_r+0x130>
 800786a:	9105      	str	r1, [sp, #20]
 800786c:	e7c4      	b.n	80077f8 <_svfiprintf_r+0x130>
 800786e:	4604      	mov	r4, r0
 8007870:	2301      	movs	r3, #1
 8007872:	fb0c 2101 	mla	r1, ip, r1, r2
 8007876:	e7f0      	b.n	800785a <_svfiprintf_r+0x192>
 8007878:	ab03      	add	r3, sp, #12
 800787a:	9300      	str	r3, [sp, #0]
 800787c:	462a      	mov	r2, r5
 800787e:	4638      	mov	r0, r7
 8007880:	4b0e      	ldr	r3, [pc, #56]	@ (80078bc <_svfiprintf_r+0x1f4>)
 8007882:	a904      	add	r1, sp, #16
 8007884:	f7fd fe70 	bl	8005568 <_printf_float>
 8007888:	1c42      	adds	r2, r0, #1
 800788a:	4606      	mov	r6, r0
 800788c:	d1d6      	bne.n	800783c <_svfiprintf_r+0x174>
 800788e:	89ab      	ldrh	r3, [r5, #12]
 8007890:	065b      	lsls	r3, r3, #25
 8007892:	f53f af2d 	bmi.w	80076f0 <_svfiprintf_r+0x28>
 8007896:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007898:	e72c      	b.n	80076f4 <_svfiprintf_r+0x2c>
 800789a:	ab03      	add	r3, sp, #12
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	462a      	mov	r2, r5
 80078a0:	4638      	mov	r0, r7
 80078a2:	4b06      	ldr	r3, [pc, #24]	@ (80078bc <_svfiprintf_r+0x1f4>)
 80078a4:	a904      	add	r1, sp, #16
 80078a6:	f7fe f8fd 	bl	8005aa4 <_printf_i>
 80078aa:	e7ed      	b.n	8007888 <_svfiprintf_r+0x1c0>
 80078ac:	0800954a 	.word	0x0800954a
 80078b0:	08009550 	.word	0x08009550
 80078b4:	08009554 	.word	0x08009554
 80078b8:	08005569 	.word	0x08005569
 80078bc:	08007611 	.word	0x08007611

080078c0 <__sflush_r>:
 80078c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c6:	0716      	lsls	r6, r2, #28
 80078c8:	4605      	mov	r5, r0
 80078ca:	460c      	mov	r4, r1
 80078cc:	d454      	bmi.n	8007978 <__sflush_r+0xb8>
 80078ce:	684b      	ldr	r3, [r1, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	dc02      	bgt.n	80078da <__sflush_r+0x1a>
 80078d4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	dd48      	ble.n	800796c <__sflush_r+0xac>
 80078da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078dc:	2e00      	cmp	r6, #0
 80078de:	d045      	beq.n	800796c <__sflush_r+0xac>
 80078e0:	2300      	movs	r3, #0
 80078e2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80078e6:	682f      	ldr	r7, [r5, #0]
 80078e8:	6a21      	ldr	r1, [r4, #32]
 80078ea:	602b      	str	r3, [r5, #0]
 80078ec:	d030      	beq.n	8007950 <__sflush_r+0x90>
 80078ee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80078f0:	89a3      	ldrh	r3, [r4, #12]
 80078f2:	0759      	lsls	r1, r3, #29
 80078f4:	d505      	bpl.n	8007902 <__sflush_r+0x42>
 80078f6:	6863      	ldr	r3, [r4, #4]
 80078f8:	1ad2      	subs	r2, r2, r3
 80078fa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80078fc:	b10b      	cbz	r3, 8007902 <__sflush_r+0x42>
 80078fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007900:	1ad2      	subs	r2, r2, r3
 8007902:	2300      	movs	r3, #0
 8007904:	4628      	mov	r0, r5
 8007906:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007908:	6a21      	ldr	r1, [r4, #32]
 800790a:	47b0      	blx	r6
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	89a3      	ldrh	r3, [r4, #12]
 8007910:	d106      	bne.n	8007920 <__sflush_r+0x60>
 8007912:	6829      	ldr	r1, [r5, #0]
 8007914:	291d      	cmp	r1, #29
 8007916:	d82b      	bhi.n	8007970 <__sflush_r+0xb0>
 8007918:	4a28      	ldr	r2, [pc, #160]	@ (80079bc <__sflush_r+0xfc>)
 800791a:	40ca      	lsrs	r2, r1
 800791c:	07d6      	lsls	r6, r2, #31
 800791e:	d527      	bpl.n	8007970 <__sflush_r+0xb0>
 8007920:	2200      	movs	r2, #0
 8007922:	6062      	str	r2, [r4, #4]
 8007924:	6922      	ldr	r2, [r4, #16]
 8007926:	04d9      	lsls	r1, r3, #19
 8007928:	6022      	str	r2, [r4, #0]
 800792a:	d504      	bpl.n	8007936 <__sflush_r+0x76>
 800792c:	1c42      	adds	r2, r0, #1
 800792e:	d101      	bne.n	8007934 <__sflush_r+0x74>
 8007930:	682b      	ldr	r3, [r5, #0]
 8007932:	b903      	cbnz	r3, 8007936 <__sflush_r+0x76>
 8007934:	6560      	str	r0, [r4, #84]	@ 0x54
 8007936:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007938:	602f      	str	r7, [r5, #0]
 800793a:	b1b9      	cbz	r1, 800796c <__sflush_r+0xac>
 800793c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007940:	4299      	cmp	r1, r3
 8007942:	d002      	beq.n	800794a <__sflush_r+0x8a>
 8007944:	4628      	mov	r0, r5
 8007946:	f7ff f9eb 	bl	8006d20 <_free_r>
 800794a:	2300      	movs	r3, #0
 800794c:	6363      	str	r3, [r4, #52]	@ 0x34
 800794e:	e00d      	b.n	800796c <__sflush_r+0xac>
 8007950:	2301      	movs	r3, #1
 8007952:	4628      	mov	r0, r5
 8007954:	47b0      	blx	r6
 8007956:	4602      	mov	r2, r0
 8007958:	1c50      	adds	r0, r2, #1
 800795a:	d1c9      	bne.n	80078f0 <__sflush_r+0x30>
 800795c:	682b      	ldr	r3, [r5, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d0c6      	beq.n	80078f0 <__sflush_r+0x30>
 8007962:	2b1d      	cmp	r3, #29
 8007964:	d001      	beq.n	800796a <__sflush_r+0xaa>
 8007966:	2b16      	cmp	r3, #22
 8007968:	d11d      	bne.n	80079a6 <__sflush_r+0xe6>
 800796a:	602f      	str	r7, [r5, #0]
 800796c:	2000      	movs	r0, #0
 800796e:	e021      	b.n	80079b4 <__sflush_r+0xf4>
 8007970:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007974:	b21b      	sxth	r3, r3
 8007976:	e01a      	b.n	80079ae <__sflush_r+0xee>
 8007978:	690f      	ldr	r7, [r1, #16]
 800797a:	2f00      	cmp	r7, #0
 800797c:	d0f6      	beq.n	800796c <__sflush_r+0xac>
 800797e:	0793      	lsls	r3, r2, #30
 8007980:	bf18      	it	ne
 8007982:	2300      	movne	r3, #0
 8007984:	680e      	ldr	r6, [r1, #0]
 8007986:	bf08      	it	eq
 8007988:	694b      	ldreq	r3, [r1, #20]
 800798a:	1bf6      	subs	r6, r6, r7
 800798c:	600f      	str	r7, [r1, #0]
 800798e:	608b      	str	r3, [r1, #8]
 8007990:	2e00      	cmp	r6, #0
 8007992:	ddeb      	ble.n	800796c <__sflush_r+0xac>
 8007994:	4633      	mov	r3, r6
 8007996:	463a      	mov	r2, r7
 8007998:	4628      	mov	r0, r5
 800799a:	6a21      	ldr	r1, [r4, #32]
 800799c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80079a0:	47e0      	blx	ip
 80079a2:	2800      	cmp	r0, #0
 80079a4:	dc07      	bgt.n	80079b6 <__sflush_r+0xf6>
 80079a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079ae:	f04f 30ff 	mov.w	r0, #4294967295
 80079b2:	81a3      	strh	r3, [r4, #12]
 80079b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b6:	4407      	add	r7, r0
 80079b8:	1a36      	subs	r6, r6, r0
 80079ba:	e7e9      	b.n	8007990 <__sflush_r+0xd0>
 80079bc:	20400001 	.word	0x20400001

080079c0 <_fflush_r>:
 80079c0:	b538      	push	{r3, r4, r5, lr}
 80079c2:	690b      	ldr	r3, [r1, #16]
 80079c4:	4605      	mov	r5, r0
 80079c6:	460c      	mov	r4, r1
 80079c8:	b913      	cbnz	r3, 80079d0 <_fflush_r+0x10>
 80079ca:	2500      	movs	r5, #0
 80079cc:	4628      	mov	r0, r5
 80079ce:	bd38      	pop	{r3, r4, r5, pc}
 80079d0:	b118      	cbz	r0, 80079da <_fflush_r+0x1a>
 80079d2:	6a03      	ldr	r3, [r0, #32]
 80079d4:	b90b      	cbnz	r3, 80079da <_fflush_r+0x1a>
 80079d6:	f7fe fa0f 	bl	8005df8 <__sinit>
 80079da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d0f3      	beq.n	80079ca <_fflush_r+0xa>
 80079e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80079e4:	07d0      	lsls	r0, r2, #31
 80079e6:	d404      	bmi.n	80079f2 <_fflush_r+0x32>
 80079e8:	0599      	lsls	r1, r3, #22
 80079ea:	d402      	bmi.n	80079f2 <_fflush_r+0x32>
 80079ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079ee:	f7fe fb1c 	bl	800602a <__retarget_lock_acquire_recursive>
 80079f2:	4628      	mov	r0, r5
 80079f4:	4621      	mov	r1, r4
 80079f6:	f7ff ff63 	bl	80078c0 <__sflush_r>
 80079fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079fc:	4605      	mov	r5, r0
 80079fe:	07da      	lsls	r2, r3, #31
 8007a00:	d4e4      	bmi.n	80079cc <_fflush_r+0xc>
 8007a02:	89a3      	ldrh	r3, [r4, #12]
 8007a04:	059b      	lsls	r3, r3, #22
 8007a06:	d4e1      	bmi.n	80079cc <_fflush_r+0xc>
 8007a08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a0a:	f7fe fb0f 	bl	800602c <__retarget_lock_release_recursive>
 8007a0e:	e7dd      	b.n	80079cc <_fflush_r+0xc>

08007a10 <memmove>:
 8007a10:	4288      	cmp	r0, r1
 8007a12:	b510      	push	{r4, lr}
 8007a14:	eb01 0402 	add.w	r4, r1, r2
 8007a18:	d902      	bls.n	8007a20 <memmove+0x10>
 8007a1a:	4284      	cmp	r4, r0
 8007a1c:	4623      	mov	r3, r4
 8007a1e:	d807      	bhi.n	8007a30 <memmove+0x20>
 8007a20:	1e43      	subs	r3, r0, #1
 8007a22:	42a1      	cmp	r1, r4
 8007a24:	d008      	beq.n	8007a38 <memmove+0x28>
 8007a26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a2e:	e7f8      	b.n	8007a22 <memmove+0x12>
 8007a30:	4601      	mov	r1, r0
 8007a32:	4402      	add	r2, r0
 8007a34:	428a      	cmp	r2, r1
 8007a36:	d100      	bne.n	8007a3a <memmove+0x2a>
 8007a38:	bd10      	pop	{r4, pc}
 8007a3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a42:	e7f7      	b.n	8007a34 <memmove+0x24>

08007a44 <_sbrk_r>:
 8007a44:	b538      	push	{r3, r4, r5, lr}
 8007a46:	2300      	movs	r3, #0
 8007a48:	4d05      	ldr	r5, [pc, #20]	@ (8007a60 <_sbrk_r+0x1c>)
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	4608      	mov	r0, r1
 8007a4e:	602b      	str	r3, [r5, #0]
 8007a50:	f7fd fc8a 	bl	8005368 <_sbrk>
 8007a54:	1c43      	adds	r3, r0, #1
 8007a56:	d102      	bne.n	8007a5e <_sbrk_r+0x1a>
 8007a58:	682b      	ldr	r3, [r5, #0]
 8007a5a:	b103      	cbz	r3, 8007a5e <_sbrk_r+0x1a>
 8007a5c:	6023      	str	r3, [r4, #0]
 8007a5e:	bd38      	pop	{r3, r4, r5, pc}
 8007a60:	200007e4 	.word	0x200007e4

08007a64 <__assert_func>:
 8007a64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a66:	4614      	mov	r4, r2
 8007a68:	461a      	mov	r2, r3
 8007a6a:	4b09      	ldr	r3, [pc, #36]	@ (8007a90 <__assert_func+0x2c>)
 8007a6c:	4605      	mov	r5, r0
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68d8      	ldr	r0, [r3, #12]
 8007a72:	b14c      	cbz	r4, 8007a88 <__assert_func+0x24>
 8007a74:	4b07      	ldr	r3, [pc, #28]	@ (8007a94 <__assert_func+0x30>)
 8007a76:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a7a:	9100      	str	r1, [sp, #0]
 8007a7c:	462b      	mov	r3, r5
 8007a7e:	4906      	ldr	r1, [pc, #24]	@ (8007a98 <__assert_func+0x34>)
 8007a80:	f000 f870 	bl	8007b64 <fiprintf>
 8007a84:	f000 f880 	bl	8007b88 <abort>
 8007a88:	4b04      	ldr	r3, [pc, #16]	@ (8007a9c <__assert_func+0x38>)
 8007a8a:	461c      	mov	r4, r3
 8007a8c:	e7f3      	b.n	8007a76 <__assert_func+0x12>
 8007a8e:	bf00      	nop
 8007a90:	20000020 	.word	0x20000020
 8007a94:	08009565 	.word	0x08009565
 8007a98:	08009572 	.word	0x08009572
 8007a9c:	080095a0 	.word	0x080095a0

08007aa0 <_calloc_r>:
 8007aa0:	b570      	push	{r4, r5, r6, lr}
 8007aa2:	fba1 5402 	umull	r5, r4, r1, r2
 8007aa6:	b934      	cbnz	r4, 8007ab6 <_calloc_r+0x16>
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	f7ff f9ab 	bl	8006e04 <_malloc_r>
 8007aae:	4606      	mov	r6, r0
 8007ab0:	b928      	cbnz	r0, 8007abe <_calloc_r+0x1e>
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	bd70      	pop	{r4, r5, r6, pc}
 8007ab6:	220c      	movs	r2, #12
 8007ab8:	2600      	movs	r6, #0
 8007aba:	6002      	str	r2, [r0, #0]
 8007abc:	e7f9      	b.n	8007ab2 <_calloc_r+0x12>
 8007abe:	462a      	mov	r2, r5
 8007ac0:	4621      	mov	r1, r4
 8007ac2:	f7fe fa34 	bl	8005f2e <memset>
 8007ac6:	e7f4      	b.n	8007ab2 <_calloc_r+0x12>

08007ac8 <__ascii_mbtowc>:
 8007ac8:	b082      	sub	sp, #8
 8007aca:	b901      	cbnz	r1, 8007ace <__ascii_mbtowc+0x6>
 8007acc:	a901      	add	r1, sp, #4
 8007ace:	b142      	cbz	r2, 8007ae2 <__ascii_mbtowc+0x1a>
 8007ad0:	b14b      	cbz	r3, 8007ae6 <__ascii_mbtowc+0x1e>
 8007ad2:	7813      	ldrb	r3, [r2, #0]
 8007ad4:	600b      	str	r3, [r1, #0]
 8007ad6:	7812      	ldrb	r2, [r2, #0]
 8007ad8:	1e10      	subs	r0, r2, #0
 8007ada:	bf18      	it	ne
 8007adc:	2001      	movne	r0, #1
 8007ade:	b002      	add	sp, #8
 8007ae0:	4770      	bx	lr
 8007ae2:	4610      	mov	r0, r2
 8007ae4:	e7fb      	b.n	8007ade <__ascii_mbtowc+0x16>
 8007ae6:	f06f 0001 	mvn.w	r0, #1
 8007aea:	e7f8      	b.n	8007ade <__ascii_mbtowc+0x16>

08007aec <_realloc_r>:
 8007aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af0:	4607      	mov	r7, r0
 8007af2:	4614      	mov	r4, r2
 8007af4:	460d      	mov	r5, r1
 8007af6:	b921      	cbnz	r1, 8007b02 <_realloc_r+0x16>
 8007af8:	4611      	mov	r1, r2
 8007afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007afe:	f7ff b981 	b.w	8006e04 <_malloc_r>
 8007b02:	b92a      	cbnz	r2, 8007b10 <_realloc_r+0x24>
 8007b04:	f7ff f90c 	bl	8006d20 <_free_r>
 8007b08:	4625      	mov	r5, r4
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b10:	f000 f841 	bl	8007b96 <_malloc_usable_size_r>
 8007b14:	4284      	cmp	r4, r0
 8007b16:	4606      	mov	r6, r0
 8007b18:	d802      	bhi.n	8007b20 <_realloc_r+0x34>
 8007b1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b1e:	d8f4      	bhi.n	8007b0a <_realloc_r+0x1e>
 8007b20:	4621      	mov	r1, r4
 8007b22:	4638      	mov	r0, r7
 8007b24:	f7ff f96e 	bl	8006e04 <_malloc_r>
 8007b28:	4680      	mov	r8, r0
 8007b2a:	b908      	cbnz	r0, 8007b30 <_realloc_r+0x44>
 8007b2c:	4645      	mov	r5, r8
 8007b2e:	e7ec      	b.n	8007b0a <_realloc_r+0x1e>
 8007b30:	42b4      	cmp	r4, r6
 8007b32:	4622      	mov	r2, r4
 8007b34:	4629      	mov	r1, r5
 8007b36:	bf28      	it	cs
 8007b38:	4632      	movcs	r2, r6
 8007b3a:	f7fe fa86 	bl	800604a <memcpy>
 8007b3e:	4629      	mov	r1, r5
 8007b40:	4638      	mov	r0, r7
 8007b42:	f7ff f8ed 	bl	8006d20 <_free_r>
 8007b46:	e7f1      	b.n	8007b2c <_realloc_r+0x40>

08007b48 <__ascii_wctomb>:
 8007b48:	4603      	mov	r3, r0
 8007b4a:	4608      	mov	r0, r1
 8007b4c:	b141      	cbz	r1, 8007b60 <__ascii_wctomb+0x18>
 8007b4e:	2aff      	cmp	r2, #255	@ 0xff
 8007b50:	d904      	bls.n	8007b5c <__ascii_wctomb+0x14>
 8007b52:	228a      	movs	r2, #138	@ 0x8a
 8007b54:	f04f 30ff 	mov.w	r0, #4294967295
 8007b58:	601a      	str	r2, [r3, #0]
 8007b5a:	4770      	bx	lr
 8007b5c:	2001      	movs	r0, #1
 8007b5e:	700a      	strb	r2, [r1, #0]
 8007b60:	4770      	bx	lr
	...

08007b64 <fiprintf>:
 8007b64:	b40e      	push	{r1, r2, r3}
 8007b66:	b503      	push	{r0, r1, lr}
 8007b68:	4601      	mov	r1, r0
 8007b6a:	ab03      	add	r3, sp, #12
 8007b6c:	4805      	ldr	r0, [pc, #20]	@ (8007b84 <fiprintf+0x20>)
 8007b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b72:	6800      	ldr	r0, [r0, #0]
 8007b74:	9301      	str	r3, [sp, #4]
 8007b76:	f000 f83d 	bl	8007bf4 <_vfiprintf_r>
 8007b7a:	b002      	add	sp, #8
 8007b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b80:	b003      	add	sp, #12
 8007b82:	4770      	bx	lr
 8007b84:	20000020 	.word	0x20000020

08007b88 <abort>:
 8007b88:	2006      	movs	r0, #6
 8007b8a:	b508      	push	{r3, lr}
 8007b8c:	f000 fa06 	bl	8007f9c <raise>
 8007b90:	2001      	movs	r0, #1
 8007b92:	f7fd fb74 	bl	800527e <_exit>

08007b96 <_malloc_usable_size_r>:
 8007b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b9a:	1f18      	subs	r0, r3, #4
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	bfbc      	itt	lt
 8007ba0:	580b      	ldrlt	r3, [r1, r0]
 8007ba2:	18c0      	addlt	r0, r0, r3
 8007ba4:	4770      	bx	lr

08007ba6 <__sfputc_r>:
 8007ba6:	6893      	ldr	r3, [r2, #8]
 8007ba8:	b410      	push	{r4}
 8007baa:	3b01      	subs	r3, #1
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	6093      	str	r3, [r2, #8]
 8007bb0:	da07      	bge.n	8007bc2 <__sfputc_r+0x1c>
 8007bb2:	6994      	ldr	r4, [r2, #24]
 8007bb4:	42a3      	cmp	r3, r4
 8007bb6:	db01      	blt.n	8007bbc <__sfputc_r+0x16>
 8007bb8:	290a      	cmp	r1, #10
 8007bba:	d102      	bne.n	8007bc2 <__sfputc_r+0x1c>
 8007bbc:	bc10      	pop	{r4}
 8007bbe:	f000 b931 	b.w	8007e24 <__swbuf_r>
 8007bc2:	6813      	ldr	r3, [r2, #0]
 8007bc4:	1c58      	adds	r0, r3, #1
 8007bc6:	6010      	str	r0, [r2, #0]
 8007bc8:	7019      	strb	r1, [r3, #0]
 8007bca:	4608      	mov	r0, r1
 8007bcc:	bc10      	pop	{r4}
 8007bce:	4770      	bx	lr

08007bd0 <__sfputs_r>:
 8007bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd2:	4606      	mov	r6, r0
 8007bd4:	460f      	mov	r7, r1
 8007bd6:	4614      	mov	r4, r2
 8007bd8:	18d5      	adds	r5, r2, r3
 8007bda:	42ac      	cmp	r4, r5
 8007bdc:	d101      	bne.n	8007be2 <__sfputs_r+0x12>
 8007bde:	2000      	movs	r0, #0
 8007be0:	e007      	b.n	8007bf2 <__sfputs_r+0x22>
 8007be2:	463a      	mov	r2, r7
 8007be4:	4630      	mov	r0, r6
 8007be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bea:	f7ff ffdc 	bl	8007ba6 <__sfputc_r>
 8007bee:	1c43      	adds	r3, r0, #1
 8007bf0:	d1f3      	bne.n	8007bda <__sfputs_r+0xa>
 8007bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007bf4 <_vfiprintf_r>:
 8007bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf8:	460d      	mov	r5, r1
 8007bfa:	4614      	mov	r4, r2
 8007bfc:	4698      	mov	r8, r3
 8007bfe:	4606      	mov	r6, r0
 8007c00:	b09d      	sub	sp, #116	@ 0x74
 8007c02:	b118      	cbz	r0, 8007c0c <_vfiprintf_r+0x18>
 8007c04:	6a03      	ldr	r3, [r0, #32]
 8007c06:	b90b      	cbnz	r3, 8007c0c <_vfiprintf_r+0x18>
 8007c08:	f7fe f8f6 	bl	8005df8 <__sinit>
 8007c0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c0e:	07d9      	lsls	r1, r3, #31
 8007c10:	d405      	bmi.n	8007c1e <_vfiprintf_r+0x2a>
 8007c12:	89ab      	ldrh	r3, [r5, #12]
 8007c14:	059a      	lsls	r2, r3, #22
 8007c16:	d402      	bmi.n	8007c1e <_vfiprintf_r+0x2a>
 8007c18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c1a:	f7fe fa06 	bl	800602a <__retarget_lock_acquire_recursive>
 8007c1e:	89ab      	ldrh	r3, [r5, #12]
 8007c20:	071b      	lsls	r3, r3, #28
 8007c22:	d501      	bpl.n	8007c28 <_vfiprintf_r+0x34>
 8007c24:	692b      	ldr	r3, [r5, #16]
 8007c26:	b99b      	cbnz	r3, 8007c50 <_vfiprintf_r+0x5c>
 8007c28:	4629      	mov	r1, r5
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	f000 f938 	bl	8007ea0 <__swsetup_r>
 8007c30:	b170      	cbz	r0, 8007c50 <_vfiprintf_r+0x5c>
 8007c32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c34:	07dc      	lsls	r4, r3, #31
 8007c36:	d504      	bpl.n	8007c42 <_vfiprintf_r+0x4e>
 8007c38:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3c:	b01d      	add	sp, #116	@ 0x74
 8007c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c42:	89ab      	ldrh	r3, [r5, #12]
 8007c44:	0598      	lsls	r0, r3, #22
 8007c46:	d4f7      	bmi.n	8007c38 <_vfiprintf_r+0x44>
 8007c48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c4a:	f7fe f9ef 	bl	800602c <__retarget_lock_release_recursive>
 8007c4e:	e7f3      	b.n	8007c38 <_vfiprintf_r+0x44>
 8007c50:	2300      	movs	r3, #0
 8007c52:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c54:	2320      	movs	r3, #32
 8007c56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c5a:	2330      	movs	r3, #48	@ 0x30
 8007c5c:	f04f 0901 	mov.w	r9, #1
 8007c60:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c64:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007e10 <_vfiprintf_r+0x21c>
 8007c68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c6c:	4623      	mov	r3, r4
 8007c6e:	469a      	mov	sl, r3
 8007c70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c74:	b10a      	cbz	r2, 8007c7a <_vfiprintf_r+0x86>
 8007c76:	2a25      	cmp	r2, #37	@ 0x25
 8007c78:	d1f9      	bne.n	8007c6e <_vfiprintf_r+0x7a>
 8007c7a:	ebba 0b04 	subs.w	fp, sl, r4
 8007c7e:	d00b      	beq.n	8007c98 <_vfiprintf_r+0xa4>
 8007c80:	465b      	mov	r3, fp
 8007c82:	4622      	mov	r2, r4
 8007c84:	4629      	mov	r1, r5
 8007c86:	4630      	mov	r0, r6
 8007c88:	f7ff ffa2 	bl	8007bd0 <__sfputs_r>
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	f000 80a7 	beq.w	8007de0 <_vfiprintf_r+0x1ec>
 8007c92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c94:	445a      	add	r2, fp
 8007c96:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c98:	f89a 3000 	ldrb.w	r3, [sl]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 809f 	beq.w	8007de0 <_vfiprintf_r+0x1ec>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cac:	f10a 0a01 	add.w	sl, sl, #1
 8007cb0:	9304      	str	r3, [sp, #16]
 8007cb2:	9307      	str	r3, [sp, #28]
 8007cb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007cb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cba:	4654      	mov	r4, sl
 8007cbc:	2205      	movs	r2, #5
 8007cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cc2:	4853      	ldr	r0, [pc, #332]	@ (8007e10 <_vfiprintf_r+0x21c>)
 8007cc4:	f7fe f9b3 	bl	800602e <memchr>
 8007cc8:	9a04      	ldr	r2, [sp, #16]
 8007cca:	b9d8      	cbnz	r0, 8007d04 <_vfiprintf_r+0x110>
 8007ccc:	06d1      	lsls	r1, r2, #27
 8007cce:	bf44      	itt	mi
 8007cd0:	2320      	movmi	r3, #32
 8007cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cd6:	0713      	lsls	r3, r2, #28
 8007cd8:	bf44      	itt	mi
 8007cda:	232b      	movmi	r3, #43	@ 0x2b
 8007cdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ce0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ce4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ce6:	d015      	beq.n	8007d14 <_vfiprintf_r+0x120>
 8007ce8:	4654      	mov	r4, sl
 8007cea:	2000      	movs	r0, #0
 8007cec:	f04f 0c0a 	mov.w	ip, #10
 8007cf0:	9a07      	ldr	r2, [sp, #28]
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cf8:	3b30      	subs	r3, #48	@ 0x30
 8007cfa:	2b09      	cmp	r3, #9
 8007cfc:	d94b      	bls.n	8007d96 <_vfiprintf_r+0x1a2>
 8007cfe:	b1b0      	cbz	r0, 8007d2e <_vfiprintf_r+0x13a>
 8007d00:	9207      	str	r2, [sp, #28]
 8007d02:	e014      	b.n	8007d2e <_vfiprintf_r+0x13a>
 8007d04:	eba0 0308 	sub.w	r3, r0, r8
 8007d08:	fa09 f303 	lsl.w	r3, r9, r3
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	46a2      	mov	sl, r4
 8007d10:	9304      	str	r3, [sp, #16]
 8007d12:	e7d2      	b.n	8007cba <_vfiprintf_r+0xc6>
 8007d14:	9b03      	ldr	r3, [sp, #12]
 8007d16:	1d19      	adds	r1, r3, #4
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	9103      	str	r1, [sp, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	bfbb      	ittet	lt
 8007d20:	425b      	neglt	r3, r3
 8007d22:	f042 0202 	orrlt.w	r2, r2, #2
 8007d26:	9307      	strge	r3, [sp, #28]
 8007d28:	9307      	strlt	r3, [sp, #28]
 8007d2a:	bfb8      	it	lt
 8007d2c:	9204      	strlt	r2, [sp, #16]
 8007d2e:	7823      	ldrb	r3, [r4, #0]
 8007d30:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d32:	d10a      	bne.n	8007d4a <_vfiprintf_r+0x156>
 8007d34:	7863      	ldrb	r3, [r4, #1]
 8007d36:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d38:	d132      	bne.n	8007da0 <_vfiprintf_r+0x1ac>
 8007d3a:	9b03      	ldr	r3, [sp, #12]
 8007d3c:	3402      	adds	r4, #2
 8007d3e:	1d1a      	adds	r2, r3, #4
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	9203      	str	r2, [sp, #12]
 8007d44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d48:	9305      	str	r3, [sp, #20]
 8007d4a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007e14 <_vfiprintf_r+0x220>
 8007d4e:	2203      	movs	r2, #3
 8007d50:	4650      	mov	r0, sl
 8007d52:	7821      	ldrb	r1, [r4, #0]
 8007d54:	f7fe f96b 	bl	800602e <memchr>
 8007d58:	b138      	cbz	r0, 8007d6a <_vfiprintf_r+0x176>
 8007d5a:	2240      	movs	r2, #64	@ 0x40
 8007d5c:	9b04      	ldr	r3, [sp, #16]
 8007d5e:	eba0 000a 	sub.w	r0, r0, sl
 8007d62:	4082      	lsls	r2, r0
 8007d64:	4313      	orrs	r3, r2
 8007d66:	3401      	adds	r4, #1
 8007d68:	9304      	str	r3, [sp, #16]
 8007d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d6e:	2206      	movs	r2, #6
 8007d70:	4829      	ldr	r0, [pc, #164]	@ (8007e18 <_vfiprintf_r+0x224>)
 8007d72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d76:	f7fe f95a 	bl	800602e <memchr>
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	d03f      	beq.n	8007dfe <_vfiprintf_r+0x20a>
 8007d7e:	4b27      	ldr	r3, [pc, #156]	@ (8007e1c <_vfiprintf_r+0x228>)
 8007d80:	bb1b      	cbnz	r3, 8007dca <_vfiprintf_r+0x1d6>
 8007d82:	9b03      	ldr	r3, [sp, #12]
 8007d84:	3307      	adds	r3, #7
 8007d86:	f023 0307 	bic.w	r3, r3, #7
 8007d8a:	3308      	adds	r3, #8
 8007d8c:	9303      	str	r3, [sp, #12]
 8007d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d90:	443b      	add	r3, r7
 8007d92:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d94:	e76a      	b.n	8007c6c <_vfiprintf_r+0x78>
 8007d96:	460c      	mov	r4, r1
 8007d98:	2001      	movs	r0, #1
 8007d9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d9e:	e7a8      	b.n	8007cf2 <_vfiprintf_r+0xfe>
 8007da0:	2300      	movs	r3, #0
 8007da2:	f04f 0c0a 	mov.w	ip, #10
 8007da6:	4619      	mov	r1, r3
 8007da8:	3401      	adds	r4, #1
 8007daa:	9305      	str	r3, [sp, #20]
 8007dac:	4620      	mov	r0, r4
 8007dae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007db2:	3a30      	subs	r2, #48	@ 0x30
 8007db4:	2a09      	cmp	r2, #9
 8007db6:	d903      	bls.n	8007dc0 <_vfiprintf_r+0x1cc>
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d0c6      	beq.n	8007d4a <_vfiprintf_r+0x156>
 8007dbc:	9105      	str	r1, [sp, #20]
 8007dbe:	e7c4      	b.n	8007d4a <_vfiprintf_r+0x156>
 8007dc0:	4604      	mov	r4, r0
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dc8:	e7f0      	b.n	8007dac <_vfiprintf_r+0x1b8>
 8007dca:	ab03      	add	r3, sp, #12
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	462a      	mov	r2, r5
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	4b13      	ldr	r3, [pc, #76]	@ (8007e20 <_vfiprintf_r+0x22c>)
 8007dd4:	a904      	add	r1, sp, #16
 8007dd6:	f7fd fbc7 	bl	8005568 <_printf_float>
 8007dda:	4607      	mov	r7, r0
 8007ddc:	1c78      	adds	r0, r7, #1
 8007dde:	d1d6      	bne.n	8007d8e <_vfiprintf_r+0x19a>
 8007de0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007de2:	07d9      	lsls	r1, r3, #31
 8007de4:	d405      	bmi.n	8007df2 <_vfiprintf_r+0x1fe>
 8007de6:	89ab      	ldrh	r3, [r5, #12]
 8007de8:	059a      	lsls	r2, r3, #22
 8007dea:	d402      	bmi.n	8007df2 <_vfiprintf_r+0x1fe>
 8007dec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dee:	f7fe f91d 	bl	800602c <__retarget_lock_release_recursive>
 8007df2:	89ab      	ldrh	r3, [r5, #12]
 8007df4:	065b      	lsls	r3, r3, #25
 8007df6:	f53f af1f 	bmi.w	8007c38 <_vfiprintf_r+0x44>
 8007dfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007dfc:	e71e      	b.n	8007c3c <_vfiprintf_r+0x48>
 8007dfe:	ab03      	add	r3, sp, #12
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	462a      	mov	r2, r5
 8007e04:	4630      	mov	r0, r6
 8007e06:	4b06      	ldr	r3, [pc, #24]	@ (8007e20 <_vfiprintf_r+0x22c>)
 8007e08:	a904      	add	r1, sp, #16
 8007e0a:	f7fd fe4b 	bl	8005aa4 <_printf_i>
 8007e0e:	e7e4      	b.n	8007dda <_vfiprintf_r+0x1e6>
 8007e10:	0800954a 	.word	0x0800954a
 8007e14:	08009550 	.word	0x08009550
 8007e18:	08009554 	.word	0x08009554
 8007e1c:	08005569 	.word	0x08005569
 8007e20:	08007bd1 	.word	0x08007bd1

08007e24 <__swbuf_r>:
 8007e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e26:	460e      	mov	r6, r1
 8007e28:	4614      	mov	r4, r2
 8007e2a:	4605      	mov	r5, r0
 8007e2c:	b118      	cbz	r0, 8007e36 <__swbuf_r+0x12>
 8007e2e:	6a03      	ldr	r3, [r0, #32]
 8007e30:	b90b      	cbnz	r3, 8007e36 <__swbuf_r+0x12>
 8007e32:	f7fd ffe1 	bl	8005df8 <__sinit>
 8007e36:	69a3      	ldr	r3, [r4, #24]
 8007e38:	60a3      	str	r3, [r4, #8]
 8007e3a:	89a3      	ldrh	r3, [r4, #12]
 8007e3c:	071a      	lsls	r2, r3, #28
 8007e3e:	d501      	bpl.n	8007e44 <__swbuf_r+0x20>
 8007e40:	6923      	ldr	r3, [r4, #16]
 8007e42:	b943      	cbnz	r3, 8007e56 <__swbuf_r+0x32>
 8007e44:	4621      	mov	r1, r4
 8007e46:	4628      	mov	r0, r5
 8007e48:	f000 f82a 	bl	8007ea0 <__swsetup_r>
 8007e4c:	b118      	cbz	r0, 8007e56 <__swbuf_r+0x32>
 8007e4e:	f04f 37ff 	mov.w	r7, #4294967295
 8007e52:	4638      	mov	r0, r7
 8007e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	6922      	ldr	r2, [r4, #16]
 8007e5a:	b2f6      	uxtb	r6, r6
 8007e5c:	1a98      	subs	r0, r3, r2
 8007e5e:	6963      	ldr	r3, [r4, #20]
 8007e60:	4637      	mov	r7, r6
 8007e62:	4283      	cmp	r3, r0
 8007e64:	dc05      	bgt.n	8007e72 <__swbuf_r+0x4e>
 8007e66:	4621      	mov	r1, r4
 8007e68:	4628      	mov	r0, r5
 8007e6a:	f7ff fda9 	bl	80079c0 <_fflush_r>
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d1ed      	bne.n	8007e4e <__swbuf_r+0x2a>
 8007e72:	68a3      	ldr	r3, [r4, #8]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	60a3      	str	r3, [r4, #8]
 8007e78:	6823      	ldr	r3, [r4, #0]
 8007e7a:	1c5a      	adds	r2, r3, #1
 8007e7c:	6022      	str	r2, [r4, #0]
 8007e7e:	701e      	strb	r6, [r3, #0]
 8007e80:	6962      	ldr	r2, [r4, #20]
 8007e82:	1c43      	adds	r3, r0, #1
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d004      	beq.n	8007e92 <__swbuf_r+0x6e>
 8007e88:	89a3      	ldrh	r3, [r4, #12]
 8007e8a:	07db      	lsls	r3, r3, #31
 8007e8c:	d5e1      	bpl.n	8007e52 <__swbuf_r+0x2e>
 8007e8e:	2e0a      	cmp	r6, #10
 8007e90:	d1df      	bne.n	8007e52 <__swbuf_r+0x2e>
 8007e92:	4621      	mov	r1, r4
 8007e94:	4628      	mov	r0, r5
 8007e96:	f7ff fd93 	bl	80079c0 <_fflush_r>
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	d0d9      	beq.n	8007e52 <__swbuf_r+0x2e>
 8007e9e:	e7d6      	b.n	8007e4e <__swbuf_r+0x2a>

08007ea0 <__swsetup_r>:
 8007ea0:	b538      	push	{r3, r4, r5, lr}
 8007ea2:	4b29      	ldr	r3, [pc, #164]	@ (8007f48 <__swsetup_r+0xa8>)
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	6818      	ldr	r0, [r3, #0]
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	b118      	cbz	r0, 8007eb4 <__swsetup_r+0x14>
 8007eac:	6a03      	ldr	r3, [r0, #32]
 8007eae:	b90b      	cbnz	r3, 8007eb4 <__swsetup_r+0x14>
 8007eb0:	f7fd ffa2 	bl	8005df8 <__sinit>
 8007eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eb8:	0719      	lsls	r1, r3, #28
 8007eba:	d422      	bmi.n	8007f02 <__swsetup_r+0x62>
 8007ebc:	06da      	lsls	r2, r3, #27
 8007ebe:	d407      	bmi.n	8007ed0 <__swsetup_r+0x30>
 8007ec0:	2209      	movs	r2, #9
 8007ec2:	602a      	str	r2, [r5, #0]
 8007ec4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ecc:	81a3      	strh	r3, [r4, #12]
 8007ece:	e033      	b.n	8007f38 <__swsetup_r+0x98>
 8007ed0:	0758      	lsls	r0, r3, #29
 8007ed2:	d512      	bpl.n	8007efa <__swsetup_r+0x5a>
 8007ed4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ed6:	b141      	cbz	r1, 8007eea <__swsetup_r+0x4a>
 8007ed8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007edc:	4299      	cmp	r1, r3
 8007ede:	d002      	beq.n	8007ee6 <__swsetup_r+0x46>
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	f7fe ff1d 	bl	8006d20 <_free_r>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007eea:	89a3      	ldrh	r3, [r4, #12]
 8007eec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ef0:	81a3      	strh	r3, [r4, #12]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	6063      	str	r3, [r4, #4]
 8007ef6:	6923      	ldr	r3, [r4, #16]
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	89a3      	ldrh	r3, [r4, #12]
 8007efc:	f043 0308 	orr.w	r3, r3, #8
 8007f00:	81a3      	strh	r3, [r4, #12]
 8007f02:	6923      	ldr	r3, [r4, #16]
 8007f04:	b94b      	cbnz	r3, 8007f1a <__swsetup_r+0x7a>
 8007f06:	89a3      	ldrh	r3, [r4, #12]
 8007f08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f10:	d003      	beq.n	8007f1a <__swsetup_r+0x7a>
 8007f12:	4621      	mov	r1, r4
 8007f14:	4628      	mov	r0, r5
 8007f16:	f000 f882 	bl	800801e <__smakebuf_r>
 8007f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f1e:	f013 0201 	ands.w	r2, r3, #1
 8007f22:	d00a      	beq.n	8007f3a <__swsetup_r+0x9a>
 8007f24:	2200      	movs	r2, #0
 8007f26:	60a2      	str	r2, [r4, #8]
 8007f28:	6962      	ldr	r2, [r4, #20]
 8007f2a:	4252      	negs	r2, r2
 8007f2c:	61a2      	str	r2, [r4, #24]
 8007f2e:	6922      	ldr	r2, [r4, #16]
 8007f30:	b942      	cbnz	r2, 8007f44 <__swsetup_r+0xa4>
 8007f32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f36:	d1c5      	bne.n	8007ec4 <__swsetup_r+0x24>
 8007f38:	bd38      	pop	{r3, r4, r5, pc}
 8007f3a:	0799      	lsls	r1, r3, #30
 8007f3c:	bf58      	it	pl
 8007f3e:	6962      	ldrpl	r2, [r4, #20]
 8007f40:	60a2      	str	r2, [r4, #8]
 8007f42:	e7f4      	b.n	8007f2e <__swsetup_r+0x8e>
 8007f44:	2000      	movs	r0, #0
 8007f46:	e7f7      	b.n	8007f38 <__swsetup_r+0x98>
 8007f48:	20000020 	.word	0x20000020

08007f4c <_raise_r>:
 8007f4c:	291f      	cmp	r1, #31
 8007f4e:	b538      	push	{r3, r4, r5, lr}
 8007f50:	4605      	mov	r5, r0
 8007f52:	460c      	mov	r4, r1
 8007f54:	d904      	bls.n	8007f60 <_raise_r+0x14>
 8007f56:	2316      	movs	r3, #22
 8007f58:	6003      	str	r3, [r0, #0]
 8007f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5e:	bd38      	pop	{r3, r4, r5, pc}
 8007f60:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007f62:	b112      	cbz	r2, 8007f6a <_raise_r+0x1e>
 8007f64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f68:	b94b      	cbnz	r3, 8007f7e <_raise_r+0x32>
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	f000 f830 	bl	8007fd0 <_getpid_r>
 8007f70:	4622      	mov	r2, r4
 8007f72:	4601      	mov	r1, r0
 8007f74:	4628      	mov	r0, r5
 8007f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f7a:	f000 b817 	b.w	8007fac <_kill_r>
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d00a      	beq.n	8007f98 <_raise_r+0x4c>
 8007f82:	1c59      	adds	r1, r3, #1
 8007f84:	d103      	bne.n	8007f8e <_raise_r+0x42>
 8007f86:	2316      	movs	r3, #22
 8007f88:	6003      	str	r3, [r0, #0]
 8007f8a:	2001      	movs	r0, #1
 8007f8c:	e7e7      	b.n	8007f5e <_raise_r+0x12>
 8007f8e:	2100      	movs	r1, #0
 8007f90:	4620      	mov	r0, r4
 8007f92:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007f96:	4798      	blx	r3
 8007f98:	2000      	movs	r0, #0
 8007f9a:	e7e0      	b.n	8007f5e <_raise_r+0x12>

08007f9c <raise>:
 8007f9c:	4b02      	ldr	r3, [pc, #8]	@ (8007fa8 <raise+0xc>)
 8007f9e:	4601      	mov	r1, r0
 8007fa0:	6818      	ldr	r0, [r3, #0]
 8007fa2:	f7ff bfd3 	b.w	8007f4c <_raise_r>
 8007fa6:	bf00      	nop
 8007fa8:	20000020 	.word	0x20000020

08007fac <_kill_r>:
 8007fac:	b538      	push	{r3, r4, r5, lr}
 8007fae:	2300      	movs	r3, #0
 8007fb0:	4d06      	ldr	r5, [pc, #24]	@ (8007fcc <_kill_r+0x20>)
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	4608      	mov	r0, r1
 8007fb6:	4611      	mov	r1, r2
 8007fb8:	602b      	str	r3, [r5, #0]
 8007fba:	f7fd f950 	bl	800525e <_kill>
 8007fbe:	1c43      	adds	r3, r0, #1
 8007fc0:	d102      	bne.n	8007fc8 <_kill_r+0x1c>
 8007fc2:	682b      	ldr	r3, [r5, #0]
 8007fc4:	b103      	cbz	r3, 8007fc8 <_kill_r+0x1c>
 8007fc6:	6023      	str	r3, [r4, #0]
 8007fc8:	bd38      	pop	{r3, r4, r5, pc}
 8007fca:	bf00      	nop
 8007fcc:	200007e4 	.word	0x200007e4

08007fd0 <_getpid_r>:
 8007fd0:	f7fd b93e 	b.w	8005250 <_getpid>

08007fd4 <__swhatbuf_r>:
 8007fd4:	b570      	push	{r4, r5, r6, lr}
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fdc:	4615      	mov	r5, r2
 8007fde:	2900      	cmp	r1, #0
 8007fe0:	461e      	mov	r6, r3
 8007fe2:	b096      	sub	sp, #88	@ 0x58
 8007fe4:	da0c      	bge.n	8008000 <__swhatbuf_r+0x2c>
 8007fe6:	89a3      	ldrh	r3, [r4, #12]
 8007fe8:	2100      	movs	r1, #0
 8007fea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007fee:	bf14      	ite	ne
 8007ff0:	2340      	movne	r3, #64	@ 0x40
 8007ff2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ff6:	2000      	movs	r0, #0
 8007ff8:	6031      	str	r1, [r6, #0]
 8007ffa:	602b      	str	r3, [r5, #0]
 8007ffc:	b016      	add	sp, #88	@ 0x58
 8007ffe:	bd70      	pop	{r4, r5, r6, pc}
 8008000:	466a      	mov	r2, sp
 8008002:	f000 f849 	bl	8008098 <_fstat_r>
 8008006:	2800      	cmp	r0, #0
 8008008:	dbed      	blt.n	8007fe6 <__swhatbuf_r+0x12>
 800800a:	9901      	ldr	r1, [sp, #4]
 800800c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008010:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008014:	4259      	negs	r1, r3
 8008016:	4159      	adcs	r1, r3
 8008018:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800801c:	e7eb      	b.n	8007ff6 <__swhatbuf_r+0x22>

0800801e <__smakebuf_r>:
 800801e:	898b      	ldrh	r3, [r1, #12]
 8008020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008022:	079d      	lsls	r5, r3, #30
 8008024:	4606      	mov	r6, r0
 8008026:	460c      	mov	r4, r1
 8008028:	d507      	bpl.n	800803a <__smakebuf_r+0x1c>
 800802a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800802e:	6023      	str	r3, [r4, #0]
 8008030:	6123      	str	r3, [r4, #16]
 8008032:	2301      	movs	r3, #1
 8008034:	6163      	str	r3, [r4, #20]
 8008036:	b003      	add	sp, #12
 8008038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800803a:	466a      	mov	r2, sp
 800803c:	ab01      	add	r3, sp, #4
 800803e:	f7ff ffc9 	bl	8007fd4 <__swhatbuf_r>
 8008042:	9f00      	ldr	r7, [sp, #0]
 8008044:	4605      	mov	r5, r0
 8008046:	4639      	mov	r1, r7
 8008048:	4630      	mov	r0, r6
 800804a:	f7fe fedb 	bl	8006e04 <_malloc_r>
 800804e:	b948      	cbnz	r0, 8008064 <__smakebuf_r+0x46>
 8008050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008054:	059a      	lsls	r2, r3, #22
 8008056:	d4ee      	bmi.n	8008036 <__smakebuf_r+0x18>
 8008058:	f023 0303 	bic.w	r3, r3, #3
 800805c:	f043 0302 	orr.w	r3, r3, #2
 8008060:	81a3      	strh	r3, [r4, #12]
 8008062:	e7e2      	b.n	800802a <__smakebuf_r+0xc>
 8008064:	89a3      	ldrh	r3, [r4, #12]
 8008066:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800806a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800806e:	81a3      	strh	r3, [r4, #12]
 8008070:	9b01      	ldr	r3, [sp, #4]
 8008072:	6020      	str	r0, [r4, #0]
 8008074:	b15b      	cbz	r3, 800808e <__smakebuf_r+0x70>
 8008076:	4630      	mov	r0, r6
 8008078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800807c:	f000 f81e 	bl	80080bc <_isatty_r>
 8008080:	b128      	cbz	r0, 800808e <__smakebuf_r+0x70>
 8008082:	89a3      	ldrh	r3, [r4, #12]
 8008084:	f023 0303 	bic.w	r3, r3, #3
 8008088:	f043 0301 	orr.w	r3, r3, #1
 800808c:	81a3      	strh	r3, [r4, #12]
 800808e:	89a3      	ldrh	r3, [r4, #12]
 8008090:	431d      	orrs	r5, r3
 8008092:	81a5      	strh	r5, [r4, #12]
 8008094:	e7cf      	b.n	8008036 <__smakebuf_r+0x18>
	...

08008098 <_fstat_r>:
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	2300      	movs	r3, #0
 800809c:	4d06      	ldr	r5, [pc, #24]	@ (80080b8 <_fstat_r+0x20>)
 800809e:	4604      	mov	r4, r0
 80080a0:	4608      	mov	r0, r1
 80080a2:	4611      	mov	r1, r2
 80080a4:	602b      	str	r3, [r5, #0]
 80080a6:	f7fd f939 	bl	800531c <_fstat>
 80080aa:	1c43      	adds	r3, r0, #1
 80080ac:	d102      	bne.n	80080b4 <_fstat_r+0x1c>
 80080ae:	682b      	ldr	r3, [r5, #0]
 80080b0:	b103      	cbz	r3, 80080b4 <_fstat_r+0x1c>
 80080b2:	6023      	str	r3, [r4, #0]
 80080b4:	bd38      	pop	{r3, r4, r5, pc}
 80080b6:	bf00      	nop
 80080b8:	200007e4 	.word	0x200007e4

080080bc <_isatty_r>:
 80080bc:	b538      	push	{r3, r4, r5, lr}
 80080be:	2300      	movs	r3, #0
 80080c0:	4d05      	ldr	r5, [pc, #20]	@ (80080d8 <_isatty_r+0x1c>)
 80080c2:	4604      	mov	r4, r0
 80080c4:	4608      	mov	r0, r1
 80080c6:	602b      	str	r3, [r5, #0]
 80080c8:	f7fd f937 	bl	800533a <_isatty>
 80080cc:	1c43      	adds	r3, r0, #1
 80080ce:	d102      	bne.n	80080d6 <_isatty_r+0x1a>
 80080d0:	682b      	ldr	r3, [r5, #0]
 80080d2:	b103      	cbz	r3, 80080d6 <_isatty_r+0x1a>
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	bd38      	pop	{r3, r4, r5, pc}
 80080d8:	200007e4 	.word	0x200007e4

080080dc <_init>:
 80080dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080de:	bf00      	nop
 80080e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e2:	bc08      	pop	{r3}
 80080e4:	469e      	mov	lr, r3
 80080e6:	4770      	bx	lr

080080e8 <_fini>:
 80080e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ea:	bf00      	nop
 80080ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ee:	bc08      	pop	{r3}
 80080f0:	469e      	mov	lr, r3
 80080f2:	4770      	bx	lr
