
accDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b08  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001684  08006c18  08006c18  00007c18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800829c  0800829c  0000a1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800829c  0800829c  0000929c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082a4  080082a4  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082a4  080082a4  000092a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080082a8  080082a8  000092a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  080082ac  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  200001dc  08008488  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  08008488  0000a7a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000742d  00000000  00000000  0000a205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018c7  00000000  00000000  00011632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  00012f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000064d  00000000  00000000  00013750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e43  00000000  00000000  00013d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac1d  00000000  00000000  0002bbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084357  00000000  00000000  000367fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bab54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032e0  00000000  00000000  000bab98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000bde78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c00 	.word	0x08006c00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08006c00 	.word	0x08006c00

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <HAL_Init+0x28>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	@ (8000f6c <HAL_Init+0x28>)
 8000f4e:	f043 0310 	orr.w	r3, r3, #16
 8000f52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 f92b 	bl	80011b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	200f      	movs	r0, #15
 8000f5c:	f000 f808 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f002 fe6c 	bl	8003c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40022000 	.word	0x40022000

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <HAL_InitTick+0x54>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <HAL_InitTick+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f935 	bl	80011fe <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 f90b 	bl	80011c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	@ (8000fcc <HAL_InitTick+0x5c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000010 	.word	0x20000010
 8000fc8:	20000004 	.word	0x20000004
 8000fcc:	20000000 	.word	0x20000000

08000fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <HAL_IncTick+0x1c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <HAL_IncTick+0x20>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a03      	ldr	r2, [pc, #12]	@ (8000ff0 <HAL_IncTick+0x20>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	20000004 	.word	0x20000004
 8000ff0:	200001f8 	.word	0x200001f8

08000ff4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b02      	ldr	r3, [pc, #8]	@ (8001004 <HAL_GetTick+0x10>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	200001f8 	.word	0x200001f8

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff fff0 	bl	8000ff4 <HAL_GetTick>
 8001014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001020:	d005      	beq.n	800102e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001022:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <HAL_Delay+0x44>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102e:	bf00      	nop
 8001030:	f7ff ffe0 	bl	8000ff4 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f7      	bhi.n	8001030 <HAL_Delay+0x28>
  {
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000004 	.word	0x20000004

08001050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	@ (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	db0a      	blt.n	80010de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	490c      	ldr	r1, [pc, #48]	@ (8001100 <__NVIC_SetPriority+0x4c>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	440b      	add	r3, r1
 80010d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010dc:	e00a      	b.n	80010f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4908      	ldr	r1, [pc, #32]	@ (8001104 <__NVIC_SetPriority+0x50>)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	3b04      	subs	r3, #4
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	761a      	strb	r2, [r3, #24]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000e100 	.word	0xe000e100
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	@ 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f1c3 0307 	rsb	r3, r3, #7
 8001122:	2b04      	cmp	r3, #4
 8001124:	bf28      	it	cs
 8001126:	2304      	movcs	r3, #4
 8001128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3304      	adds	r3, #4
 800112e:	2b06      	cmp	r3, #6
 8001130:	d902      	bls.n	8001138 <NVIC_EncodePriority+0x30>
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3b03      	subs	r3, #3
 8001136:	e000      	b.n	800113a <NVIC_EncodePriority+0x32>
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	f04f 32ff 	mov.w	r2, #4294967295
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43da      	mvns	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	401a      	ands	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001150:	f04f 31ff 	mov.w	r1, #4294967295
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	43d9      	mvns	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	4313      	orrs	r3, r2
         );
}
 8001162:	4618      	mov	r0, r3
 8001164:	3724      	adds	r7, #36	@ 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800117c:	d301      	bcc.n	8001182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117e:	2301      	movs	r3, #1
 8001180:	e00f      	b.n	80011a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001182:	4a0a      	ldr	r2, [pc, #40]	@ (80011ac <SysTick_Config+0x40>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118a:	210f      	movs	r1, #15
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f7ff ff90 	bl	80010b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001194:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <SysTick_Config+0x40>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119a:	4b04      	ldr	r3, [pc, #16]	@ (80011ac <SysTick_Config+0x40>)
 800119c:	2207      	movs	r2, #7
 800119e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	e000e010 	.word	0xe000e010

080011b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff49 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d8:	f7ff ff5e 	bl	8001098 <__NVIC_GetPriorityGrouping>
 80011dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f7ff ff90 	bl	8001108 <NVIC_EncodePriority>
 80011e8:	4602      	mov	r2, r0
 80011ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff5f 	bl	80010b4 <__NVIC_SetPriority>
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ffb0 	bl	800116c <SysTick_Config>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b08b      	sub	sp, #44	@ 0x2c
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122a:	e169      	b.n	8001500 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800122c:	2201      	movs	r2, #1
 800122e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	69fa      	ldr	r2, [r7, #28]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	429a      	cmp	r2, r3
 8001246:	f040 8158 	bne.w	80014fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4a9a      	ldr	r2, [pc, #616]	@ (80014b8 <HAL_GPIO_Init+0x2a0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d05e      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001254:	4a98      	ldr	r2, [pc, #608]	@ (80014b8 <HAL_GPIO_Init+0x2a0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d875      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800125a:	4a98      	ldr	r2, [pc, #608]	@ (80014bc <HAL_GPIO_Init+0x2a4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d058      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001260:	4a96      	ldr	r2, [pc, #600]	@ (80014bc <HAL_GPIO_Init+0x2a4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d86f      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001266:	4a96      	ldr	r2, [pc, #600]	@ (80014c0 <HAL_GPIO_Init+0x2a8>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d052      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 800126c:	4a94      	ldr	r2, [pc, #592]	@ (80014c0 <HAL_GPIO_Init+0x2a8>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d869      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001272:	4a94      	ldr	r2, [pc, #592]	@ (80014c4 <HAL_GPIO_Init+0x2ac>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d04c      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001278:	4a92      	ldr	r2, [pc, #584]	@ (80014c4 <HAL_GPIO_Init+0x2ac>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d863      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800127e:	4a92      	ldr	r2, [pc, #584]	@ (80014c8 <HAL_GPIO_Init+0x2b0>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d046      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001284:	4a90      	ldr	r2, [pc, #576]	@ (80014c8 <HAL_GPIO_Init+0x2b0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d85d      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800128a:	2b12      	cmp	r3, #18
 800128c:	d82a      	bhi.n	80012e4 <HAL_GPIO_Init+0xcc>
 800128e:	2b12      	cmp	r3, #18
 8001290:	d859      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001292:	a201      	add	r2, pc, #4	@ (adr r2, 8001298 <HAL_GPIO_Init+0x80>)
 8001294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001298:	08001313 	.word	0x08001313
 800129c:	080012ed 	.word	0x080012ed
 80012a0:	080012ff 	.word	0x080012ff
 80012a4:	08001341 	.word	0x08001341
 80012a8:	08001347 	.word	0x08001347
 80012ac:	08001347 	.word	0x08001347
 80012b0:	08001347 	.word	0x08001347
 80012b4:	08001347 	.word	0x08001347
 80012b8:	08001347 	.word	0x08001347
 80012bc:	08001347 	.word	0x08001347
 80012c0:	08001347 	.word	0x08001347
 80012c4:	08001347 	.word	0x08001347
 80012c8:	08001347 	.word	0x08001347
 80012cc:	08001347 	.word	0x08001347
 80012d0:	08001347 	.word	0x08001347
 80012d4:	08001347 	.word	0x08001347
 80012d8:	08001347 	.word	0x08001347
 80012dc:	080012f5 	.word	0x080012f5
 80012e0:	08001309 	.word	0x08001309
 80012e4:	4a79      	ldr	r2, [pc, #484]	@ (80014cc <HAL_GPIO_Init+0x2b4>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d013      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ea:	e02c      	b.n	8001346 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	623b      	str	r3, [r7, #32]
          break;
 80012f2:	e029      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	3304      	adds	r3, #4
 80012fa:	623b      	str	r3, [r7, #32]
          break;
 80012fc:	e024      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	3308      	adds	r3, #8
 8001304:	623b      	str	r3, [r7, #32]
          break;
 8001306:	e01f      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	330c      	adds	r3, #12
 800130e:	623b      	str	r3, [r7, #32]
          break;
 8001310:	e01a      	b.n	8001348 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d102      	bne.n	8001320 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800131a:	2304      	movs	r3, #4
 800131c:	623b      	str	r3, [r7, #32]
          break;
 800131e:	e013      	b.n	8001348 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d105      	bne.n	8001334 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001328:	2308      	movs	r3, #8
 800132a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	611a      	str	r2, [r3, #16]
          break;
 8001332:	e009      	b.n	8001348 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001334:	2308      	movs	r3, #8
 8001336:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	615a      	str	r2, [r3, #20]
          break;
 800133e:	e003      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
          break;
 8001344:	e000      	b.n	8001348 <HAL_GPIO_Init+0x130>
          break;
 8001346:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	2bff      	cmp	r3, #255	@ 0xff
 800134c:	d801      	bhi.n	8001352 <HAL_GPIO_Init+0x13a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	e001      	b.n	8001356 <HAL_GPIO_Init+0x13e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3304      	adds	r3, #4
 8001356:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	2bff      	cmp	r3, #255	@ 0xff
 800135c:	d802      	bhi.n	8001364 <HAL_GPIO_Init+0x14c>
 800135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	e002      	b.n	800136a <HAL_GPIO_Init+0x152>
 8001364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001366:	3b08      	subs	r3, #8
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	210f      	movs	r1, #15
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	401a      	ands	r2, r3
 800137c:	6a39      	ldr	r1, [r7, #32]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	431a      	orrs	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 80b1 	beq.w	80014fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001398:	4b4d      	ldr	r3, [pc, #308]	@ (80014d0 <HAL_GPIO_Init+0x2b8>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a4c      	ldr	r2, [pc, #304]	@ (80014d0 <HAL_GPIO_Init+0x2b8>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b4a      	ldr	r3, [pc, #296]	@ (80014d0 <HAL_GPIO_Init+0x2b8>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013b0:	4a48      	ldr	r2, [pc, #288]	@ (80014d4 <HAL_GPIO_Init+0x2bc>)
 80013b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3302      	adds	r3, #2
 80013b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	220f      	movs	r2, #15
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a40      	ldr	r2, [pc, #256]	@ (80014d8 <HAL_GPIO_Init+0x2c0>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d013      	beq.n	8001404 <HAL_GPIO_Init+0x1ec>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a3f      	ldr	r2, [pc, #252]	@ (80014dc <HAL_GPIO_Init+0x2c4>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d00d      	beq.n	8001400 <HAL_GPIO_Init+0x1e8>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a3e      	ldr	r2, [pc, #248]	@ (80014e0 <HAL_GPIO_Init+0x2c8>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d007      	beq.n	80013fc <HAL_GPIO_Init+0x1e4>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a3d      	ldr	r2, [pc, #244]	@ (80014e4 <HAL_GPIO_Init+0x2cc>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d101      	bne.n	80013f8 <HAL_GPIO_Init+0x1e0>
 80013f4:	2303      	movs	r3, #3
 80013f6:	e006      	b.n	8001406 <HAL_GPIO_Init+0x1ee>
 80013f8:	2304      	movs	r3, #4
 80013fa:	e004      	b.n	8001406 <HAL_GPIO_Init+0x1ee>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e002      	b.n	8001406 <HAL_GPIO_Init+0x1ee>
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <HAL_GPIO_Init+0x1ee>
 8001404:	2300      	movs	r3, #0
 8001406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001408:	f002 0203 	and.w	r2, r2, #3
 800140c:	0092      	lsls	r2, r2, #2
 800140e:	4093      	lsls	r3, r2
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	4313      	orrs	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001416:	492f      	ldr	r1, [pc, #188]	@ (80014d4 <HAL_GPIO_Init+0x2bc>)
 8001418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	3302      	adds	r3, #2
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d006      	beq.n	800143e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001430:	4b2d      	ldr	r3, [pc, #180]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	492c      	ldr	r1, [pc, #176]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	608b      	str	r3, [r1, #8]
 800143c:	e006      	b.n	800144c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800143e:	4b2a      	ldr	r3, [pc, #168]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	43db      	mvns	r3, r3
 8001446:	4928      	ldr	r1, [pc, #160]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001448:	4013      	ands	r3, r2
 800144a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d006      	beq.n	8001466 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001458:	4b23      	ldr	r3, [pc, #140]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	4922      	ldr	r1, [pc, #136]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	60cb      	str	r3, [r1, #12]
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001466:	4b20      	ldr	r3, [pc, #128]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001468:	68da      	ldr	r2, [r3, #12]
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	43db      	mvns	r3, r3
 800146e:	491e      	ldr	r1, [pc, #120]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001470:	4013      	ands	r3, r2
 8001472:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d006      	beq.n	800148e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001480:	4b19      	ldr	r3, [pc, #100]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	4918      	ldr	r1, [pc, #96]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	604b      	str	r3, [r1, #4]
 800148c:	e006      	b.n	800149c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800148e:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	43db      	mvns	r3, r3
 8001496:	4914      	ldr	r1, [pc, #80]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001498:	4013      	ands	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d021      	beq.n	80014ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014a8:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	490e      	ldr	r1, [pc, #56]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	600b      	str	r3, [r1, #0]
 80014b4:	e021      	b.n	80014fa <HAL_GPIO_Init+0x2e2>
 80014b6:	bf00      	nop
 80014b8:	10320000 	.word	0x10320000
 80014bc:	10310000 	.word	0x10310000
 80014c0:	10220000 	.word	0x10220000
 80014c4:	10210000 	.word	0x10210000
 80014c8:	10120000 	.word	0x10120000
 80014cc:	10110000 	.word	0x10110000
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010000 	.word	0x40010000
 80014d8:	40010800 	.word	0x40010800
 80014dc:	40010c00 	.word	0x40010c00
 80014e0:	40011000 	.word	0x40011000
 80014e4:	40011400 	.word	0x40011400
 80014e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014ec:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <HAL_GPIO_Init+0x304>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	4909      	ldr	r1, [pc, #36]	@ (800151c <HAL_GPIO_Init+0x304>)
 80014f6:	4013      	ands	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fc:	3301      	adds	r3, #1
 80014fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001506:	fa22 f303 	lsr.w	r3, r2, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	f47f ae8e 	bne.w	800122c <HAL_GPIO_Init+0x14>
  }
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	372c      	adds	r7, #44	@ 0x2c
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	40010400 	.word	0x40010400

08001520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e12b      	b.n	800178a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d106      	bne.n	800154c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f002 fbaa 	bl	8003ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2224      	movs	r2, #36	@ 0x24
 8001550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0201 	bic.w	r2, r2, #1
 8001562:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001572:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001582:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001584:	f001 feaa 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 8001588:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	4a81      	ldr	r2, [pc, #516]	@ (8001794 <HAL_I2C_Init+0x274>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d807      	bhi.n	80015a4 <HAL_I2C_Init+0x84>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4a80      	ldr	r2, [pc, #512]	@ (8001798 <HAL_I2C_Init+0x278>)
 8001598:	4293      	cmp	r3, r2
 800159a:	bf94      	ite	ls
 800159c:	2301      	movls	r3, #1
 800159e:	2300      	movhi	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	e006      	b.n	80015b2 <HAL_I2C_Init+0x92>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4a7d      	ldr	r2, [pc, #500]	@ (800179c <HAL_I2C_Init+0x27c>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	bf94      	ite	ls
 80015ac:	2301      	movls	r3, #1
 80015ae:	2300      	movhi	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e0e7      	b.n	800178a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4a78      	ldr	r2, [pc, #480]	@ (80017a0 <HAL_I2C_Init+0x280>)
 80015be:	fba2 2303 	umull	r2, r3, r2, r3
 80015c2:	0c9b      	lsrs	r3, r3, #18
 80015c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68ba      	ldr	r2, [r7, #8]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	4a6a      	ldr	r2, [pc, #424]	@ (8001794 <HAL_I2C_Init+0x274>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d802      	bhi.n	80015f4 <HAL_I2C_Init+0xd4>
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	3301      	adds	r3, #1
 80015f2:	e009      	b.n	8001608 <HAL_I2C_Init+0xe8>
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015fa:	fb02 f303 	mul.w	r3, r2, r3
 80015fe:	4a69      	ldr	r2, [pc, #420]	@ (80017a4 <HAL_I2C_Init+0x284>)
 8001600:	fba2 2303 	umull	r2, r3, r2, r3
 8001604:	099b      	lsrs	r3, r3, #6
 8001606:	3301      	adds	r3, #1
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	430b      	orrs	r3, r1
 800160e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800161a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	495c      	ldr	r1, [pc, #368]	@ (8001794 <HAL_I2C_Init+0x274>)
 8001624:	428b      	cmp	r3, r1
 8001626:	d819      	bhi.n	800165c <HAL_I2C_Init+0x13c>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1e59      	subs	r1, r3, #1
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	fbb1 f3f3 	udiv	r3, r1, r3
 8001636:	1c59      	adds	r1, r3, #1
 8001638:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800163c:	400b      	ands	r3, r1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00a      	beq.n	8001658 <HAL_I2C_Init+0x138>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1e59      	subs	r1, r3, #1
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001650:	3301      	adds	r3, #1
 8001652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001656:	e051      	b.n	80016fc <HAL_I2C_Init+0x1dc>
 8001658:	2304      	movs	r3, #4
 800165a:	e04f      	b.n	80016fc <HAL_I2C_Init+0x1dc>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d111      	bne.n	8001688 <HAL_I2C_Init+0x168>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1e58      	subs	r0, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6859      	ldr	r1, [r3, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	440b      	add	r3, r1
 8001672:	fbb0 f3f3 	udiv	r3, r0, r3
 8001676:	3301      	adds	r3, #1
 8001678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800167c:	2b00      	cmp	r3, #0
 800167e:	bf0c      	ite	eq
 8001680:	2301      	moveq	r3, #1
 8001682:	2300      	movne	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	e012      	b.n	80016ae <HAL_I2C_Init+0x18e>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	1e58      	subs	r0, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6859      	ldr	r1, [r3, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	0099      	lsls	r1, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	fbb0 f3f3 	udiv	r3, r0, r3
 800169e:	3301      	adds	r3, #1
 80016a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	bf0c      	ite	eq
 80016a8:	2301      	moveq	r3, #1
 80016aa:	2300      	movne	r3, #0
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_I2C_Init+0x196>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e022      	b.n	80016fc <HAL_I2C_Init+0x1dc>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10e      	bne.n	80016dc <HAL_I2C_Init+0x1bc>
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	1e58      	subs	r0, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6859      	ldr	r1, [r3, #4]
 80016c6:	460b      	mov	r3, r1
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	440b      	add	r3, r1
 80016cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80016d0:	3301      	adds	r3, #1
 80016d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016da:	e00f      	b.n	80016fc <HAL_I2C_Init+0x1dc>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	1e58      	subs	r0, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6859      	ldr	r1, [r3, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	0099      	lsls	r1, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f2:	3301      	adds	r3, #1
 80016f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	6809      	ldr	r1, [r1, #0]
 8001700:	4313      	orrs	r3, r2
 8001702:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69da      	ldr	r2, [r3, #28]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800172a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6911      	ldr	r1, [r2, #16]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	68d2      	ldr	r2, [r2, #12]
 8001736:	4311      	orrs	r1, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	430b      	orrs	r3, r1
 800173e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	695a      	ldr	r2, [r3, #20]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2220      	movs	r2, #32
 8001776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	000186a0 	.word	0x000186a0
 8001798:	001e847f 	.word	0x001e847f
 800179c:	003d08ff 	.word	0x003d08ff
 80017a0:	431bde83 	.word	0x431bde83
 80017a4:	10624dd3 	.word	0x10624dd3

080017a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	461a      	mov	r2, r3
 80017b4:	460b      	mov	r3, r1
 80017b6:	817b      	strh	r3, [r7, #10]
 80017b8:	4613      	mov	r3, r2
 80017ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff fc1a 	bl	8000ff4 <HAL_GetTick>
 80017c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b20      	cmp	r3, #32
 80017cc:	f040 80e0 	bne.w	8001990 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2319      	movs	r3, #25
 80017d6:	2201      	movs	r2, #1
 80017d8:	4970      	ldr	r1, [pc, #448]	@ (800199c <HAL_I2C_Master_Transmit+0x1f4>)
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 ff7e 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80017e6:	2302      	movs	r3, #2
 80017e8:	e0d3      	b.n	8001992 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <HAL_I2C_Master_Transmit+0x50>
 80017f4:	2302      	movs	r3, #2
 80017f6:	e0cc      	b.n	8001992 <HAL_I2C_Master_Transmit+0x1ea>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b01      	cmp	r3, #1
 800180c:	d007      	beq.n	800181e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 0201 	orr.w	r2, r2, #1
 800181c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800182c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2221      	movs	r2, #33	@ 0x21
 8001832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2210      	movs	r2, #16
 800183a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	893a      	ldrh	r2, [r7, #8]
 800184e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001854:	b29a      	uxth	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4a50      	ldr	r2, [pc, #320]	@ (80019a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800185e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001860:	8979      	ldrh	r1, [r7, #10]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	6a3a      	ldr	r2, [r7, #32]
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 fd38 	bl	80022dc <I2C_MasterRequestWrite>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e08d      	b.n	8001992 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800188c:	e066      	b.n	800195c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	6a39      	ldr	r1, [r7, #32]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f001 f83c 	bl	8002910 <I2C_WaitOnTXEFlagUntilTimeout>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00d      	beq.n	80018ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d107      	bne.n	80018b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e06b      	b.n	8001992 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018be:	781a      	ldrb	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	3b01      	subs	r3, #1
 80018d8:	b29a      	uxth	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e2:	3b01      	subs	r3, #1
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d11b      	bne.n	8001930 <HAL_I2C_Master_Transmit+0x188>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d017      	beq.n	8001930 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001904:	781a      	ldrb	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001910:	1c5a      	adds	r2, r3, #1
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800191a:	b29b      	uxth	r3, r3
 800191c:	3b01      	subs	r3, #1
 800191e:	b29a      	uxth	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001928:	3b01      	subs	r3, #1
 800192a:	b29a      	uxth	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	6a39      	ldr	r1, [r7, #32]
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f001 f833 	bl	80029a0 <I2C_WaitOnBTFFlagUntilTimeout>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00d      	beq.n	800195c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	2b04      	cmp	r3, #4
 8001946:	d107      	bne.n	8001958 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001956:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e01a      	b.n	8001992 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001960:	2b00      	cmp	r3, #0
 8001962:	d194      	bne.n	800188e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2220      	movs	r2, #32
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	e000      	b.n	8001992 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001990:	2302      	movs	r3, #2
  }
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	00100002 	.word	0x00100002
 80019a0:	ffff0000 	.word	0xffff0000

080019a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	4608      	mov	r0, r1
 80019ae:	4611      	mov	r1, r2
 80019b0:	461a      	mov	r2, r3
 80019b2:	4603      	mov	r3, r0
 80019b4:	817b      	strh	r3, [r7, #10]
 80019b6:	460b      	mov	r3, r1
 80019b8:	813b      	strh	r3, [r7, #8]
 80019ba:	4613      	mov	r3, r2
 80019bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019be:	f7ff fb19 	bl	8000ff4 <HAL_GetTick>
 80019c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b20      	cmp	r3, #32
 80019ce:	f040 80d9 	bne.w	8001b84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	2319      	movs	r3, #25
 80019d8:	2201      	movs	r2, #1
 80019da:	496d      	ldr	r1, [pc, #436]	@ (8001b90 <HAL_I2C_Mem_Write+0x1ec>)
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f000 fe7d 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80019e8:	2302      	movs	r3, #2
 80019ea:	e0cc      	b.n	8001b86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d101      	bne.n	80019fa <HAL_I2C_Mem_Write+0x56>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e0c5      	b.n	8001b86 <HAL_I2C_Mem_Write+0x1e2>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d007      	beq.n	8001a20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2221      	movs	r2, #33	@ 0x21
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2240      	movs	r2, #64	@ 0x40
 8001a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6a3a      	ldr	r2, [r7, #32]
 8001a4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4a4d      	ldr	r2, [pc, #308]	@ (8001b94 <HAL_I2C_Mem_Write+0x1f0>)
 8001a60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a62:	88f8      	ldrh	r0, [r7, #6]
 8001a64:	893a      	ldrh	r2, [r7, #8]
 8001a66:	8979      	ldrh	r1, [r7, #10]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	4603      	mov	r3, r0
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 fcb4 	bl	80023e0 <I2C_RequestMemoryWrite>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d052      	beq.n	8001b24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e081      	b.n	8001b86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 ff42 	bl	8002910 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00d      	beq.n	8001aae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d107      	bne.n	8001aaa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001aa8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e06b      	b.n	8001b86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab2:	781a      	ldrb	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d11b      	bne.n	8001b24 <HAL_I2C_Mem_Write+0x180>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d017      	beq.n	8001b24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af8:	781a      	ldrb	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1aa      	bne.n	8001a82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f000 ff35 	bl	80029a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00d      	beq.n	8001b58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d107      	bne.n	8001b54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e016      	b.n	8001b86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	e000      	b.n	8001b86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001b84:	2302      	movs	r3, #2
  }
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	00100002 	.word	0x00100002
 8001b94:	ffff0000 	.word	0xffff0000

08001b98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08c      	sub	sp, #48	@ 0x30
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	4608      	mov	r0, r1
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	817b      	strh	r3, [r7, #10]
 8001baa:	460b      	mov	r3, r1
 8001bac:	813b      	strh	r3, [r7, #8]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bb6:	f7ff fa1d 	bl	8000ff4 <HAL_GetTick>
 8001bba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b20      	cmp	r3, #32
 8001bc6:	f040 8250 	bne.w	800206a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	2319      	movs	r3, #25
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	4982      	ldr	r1, [pc, #520]	@ (8001ddc <HAL_I2C_Mem_Read+0x244>)
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 fd81 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001be0:	2302      	movs	r3, #2
 8001be2:	e243      	b.n	800206c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_I2C_Mem_Read+0x5a>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e23c      	b.n	800206c <HAL_I2C_Mem_Read+0x4d4>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d007      	beq.n	8001c18 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2222      	movs	r2, #34	@ 0x22
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2240      	movs	r2, #64	@ 0x40
 8001c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001c48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4a62      	ldr	r2, [pc, #392]	@ (8001de0 <HAL_I2C_Mem_Read+0x248>)
 8001c58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c5a:	88f8      	ldrh	r0, [r7, #6]
 8001c5c:	893a      	ldrh	r2, [r7, #8]
 8001c5e:	8979      	ldrh	r1, [r7, #10]
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	4603      	mov	r3, r0
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 fc4e 	bl	800250c <I2C_RequestMemoryRead>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e1f8      	b.n	800206c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d113      	bne.n	8001caa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	e1cc      	b.n	8002044 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d11e      	bne.n	8001cf0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cc0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc2:	b672      	cpsid	i
}
 8001cc4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	61bb      	str	r3, [r7, #24]
 8001cda:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001cec:	b662      	cpsie	i
}
 8001cee:	e035      	b.n	8001d5c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d11e      	bne.n	8001d36 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d08:	b672      	cpsid	i
}
 8001d0a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d32:	b662      	cpsie	i
}
 8001d34:	e012      	b.n	8001d5c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001d44:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001d5c:	e172      	b.n	8002044 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	f200 811f 	bhi.w	8001fa6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d123      	bne.n	8001db8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 fe5b 	bl	8002a30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e173      	b.n	800206c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691a      	ldr	r2, [r3, #16]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da0:	3b01      	subs	r3, #1
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001db6:	e145      	b.n	8002044 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d152      	bne.n	8001e66 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	4906      	ldr	r1, [pc, #24]	@ (8001de4 <HAL_I2C_Mem_Read+0x24c>)
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 fc86 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d008      	beq.n	8001de8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e148      	b.n	800206c <HAL_I2C_Mem_Read+0x4d4>
 8001dda:	bf00      	nop
 8001ddc:	00100002 	.word	0x00100002
 8001de0:	ffff0000 	.word	0xffff0000
 8001de4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001de8:	b672      	cpsid	i
}
 8001dea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691a      	ldr	r2, [r3, #16]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001e2e:	b662      	cpsie	i
}
 8001e30:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	691a      	ldr	r2, [r3, #16]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e64:	e0ee      	b.n	8002044 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	4981      	ldr	r1, [pc, #516]	@ (8002074 <HAL_I2C_Mem_Read+0x4dc>)
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 fc33 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0f5      	b.n	800206c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e90:	b672      	cpsid	i
}
 8001e92:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001ec6:	4b6c      	ldr	r3, [pc, #432]	@ (8002078 <HAL_I2C_Mem_Read+0x4e0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	08db      	lsrs	r3, r3, #3
 8001ecc:	4a6b      	ldr	r2, [pc, #428]	@ (800207c <HAL_I2C_Mem_Read+0x4e4>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	0a1a      	lsrs	r2, r3, #8
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	00da      	lsls	r2, r3, #3
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d118      	bne.n	8001f1e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	f043 0220 	orr.w	r2, r3, #32
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001f0e:	b662      	cpsie	i
}
 8001f10:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e0a6      	b.n	800206c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d1d9      	bne.n	8001ee0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691a      	ldr	r2, [r3, #16]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f6e:	b662      	cpsie	i
}
 8001f70:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f84:	1c5a      	adds	r2, r3, #1
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001fa4:	e04e      	b.n	8002044 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 fd40 	bl	8002a30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e058      	b.n	800206c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d124      	bne.n	8002044 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d107      	bne.n	8002012 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002010:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002048:	2b00      	cmp	r3, #0
 800204a:	f47f ae88 	bne.w	8001d5e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2220      	movs	r2, #32
 8002052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	e000      	b.n	800206c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800206a:	2302      	movs	r3, #2
  }
}
 800206c:	4618      	mov	r0, r3
 800206e:	3728      	adds	r7, #40	@ 0x28
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	00010004 	.word	0x00010004
 8002078:	20000010 	.word	0x20000010
 800207c:	14f8b589 	.word	0x14f8b589

08002080 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08a      	sub	sp, #40	@ 0x28
 8002084:	af02      	add	r7, sp, #8
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	460b      	mov	r3, r1
 800208e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002090:	f7fe ffb0 	bl	8000ff4 <HAL_GetTick>
 8002094:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	f040 8111 	bne.w	80022ca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	2319      	movs	r3, #25
 80020ae:	2201      	movs	r2, #1
 80020b0:	4988      	ldr	r1, [pc, #544]	@ (80022d4 <HAL_I2C_IsDeviceReady+0x254>)
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 fb12 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80020be:	2302      	movs	r3, #2
 80020c0:	e104      	b.n	80022cc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_I2C_IsDeviceReady+0x50>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e0fd      	b.n	80022cc <HAL_I2C_IsDeviceReady+0x24c>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d007      	beq.n	80020f6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0201 	orr.w	r2, r2, #1
 80020f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002104:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2224      	movs	r2, #36	@ 0x24
 800210a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4a70      	ldr	r2, [pc, #448]	@ (80022d8 <HAL_I2C_IsDeviceReady+0x258>)
 8002118:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002128:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2200      	movs	r2, #0
 8002132:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 fad0 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00d      	beq.n	800215e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800214c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002150:	d103      	bne.n	800215a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002158:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e0b6      	b.n	80022cc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800215e:	897b      	ldrh	r3, [r7, #10]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	461a      	mov	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800216c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800216e:	f7fe ff41 	bl	8000ff4 <HAL_GetTick>
 8002172:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b02      	cmp	r3, #2
 8002180:	bf0c      	ite	eq
 8002182:	2301      	moveq	r3, #1
 8002184:	2300      	movne	r3, #0
 8002186:	b2db      	uxtb	r3, r3
 8002188:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002198:	bf0c      	ite	eq
 800219a:	2301      	moveq	r3, #1
 800219c:	2300      	movne	r3, #0
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80021a2:	e025      	b.n	80021f0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021a4:	f7fe ff26 	bl	8000ff4 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d302      	bcc.n	80021ba <HAL_I2C_IsDeviceReady+0x13a>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d103      	bne.n	80021c2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	22a0      	movs	r2, #160	@ 0xa0
 80021be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	bf0c      	ite	eq
 80021d0:	2301      	moveq	r3, #1
 80021d2:	2300      	movne	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021e6:	bf0c      	ite	eq
 80021e8:	2301      	moveq	r3, #1
 80021ea:	2300      	movne	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2ba0      	cmp	r3, #160	@ 0xa0
 80021fa:	d005      	beq.n	8002208 <HAL_I2C_IsDeviceReady+0x188>
 80021fc:	7dfb      	ldrb	r3, [r7, #23]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d102      	bne.n	8002208 <HAL_I2C_IsDeviceReady+0x188>
 8002202:	7dbb      	ldrb	r3, [r7, #22]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0cd      	beq.n	80021a4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b02      	cmp	r3, #2
 800221c:	d129      	bne.n	8002272 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800222c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	2319      	movs	r3, #25
 800224a:	2201      	movs	r2, #1
 800224c:	4921      	ldr	r1, [pc, #132]	@ (80022d4 <HAL_I2C_IsDeviceReady+0x254>)
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 fa44 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e036      	b.n	80022cc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2220      	movs	r2, #32
 8002262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	e02c      	b.n	80022cc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002280:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800228a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	2319      	movs	r3, #25
 8002292:	2201      	movs	r2, #1
 8002294:	490f      	ldr	r1, [pc, #60]	@ (80022d4 <HAL_I2C_IsDeviceReady+0x254>)
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 fa20 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e012      	b.n	80022cc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	3301      	adds	r3, #1
 80022aa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	f4ff af32 	bcc.w	800211a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2220      	movs	r2, #32
 80022ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80022ca:	2302      	movs	r3, #2
  }
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3720      	adds	r7, #32
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	00100002 	.word	0x00100002
 80022d8:	ffff0000 	.word	0xffff0000

080022dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af02      	add	r7, sp, #8
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	603b      	str	r3, [r7, #0]
 80022e8:	460b      	mov	r3, r1
 80022ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d006      	beq.n	8002306 <I2C_MasterRequestWrite+0x2a>
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d003      	beq.n	8002306 <I2C_MasterRequestWrite+0x2a>
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002304:	d108      	bne.n	8002318 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	e00b      	b.n	8002330 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231c:	2b12      	cmp	r3, #18
 800231e:	d107      	bne.n	8002330 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800232e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 f9cd 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00d      	beq.n	8002364 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002352:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002356:	d103      	bne.n	8002360 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800235e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e035      	b.n	80023d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800236c:	d108      	bne.n	8002380 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800236e:	897b      	ldrh	r3, [r7, #10]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	461a      	mov	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800237c:	611a      	str	r2, [r3, #16]
 800237e:	e01b      	b.n	80023b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002380:	897b      	ldrh	r3, [r7, #10]
 8002382:	11db      	asrs	r3, r3, #7
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f003 0306 	and.w	r3, r3, #6
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f063 030f 	orn	r3, r3, #15
 8002390:	b2da      	uxtb	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	490e      	ldr	r1, [pc, #56]	@ (80023d8 <I2C_MasterRequestWrite+0xfc>)
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 fa16 	bl	80027d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e010      	b.n	80023d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023ae:	897b      	ldrh	r3, [r7, #10]
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	4907      	ldr	r1, [pc, #28]	@ (80023dc <I2C_MasterRequestWrite+0x100>)
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 fa06 	bl	80027d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	00010008 	.word	0x00010008
 80023dc:	00010002 	.word	0x00010002

080023e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	4608      	mov	r0, r1
 80023ea:	4611      	mov	r1, r2
 80023ec:	461a      	mov	r2, r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	817b      	strh	r3, [r7, #10]
 80023f2:	460b      	mov	r3, r1
 80023f4:	813b      	strh	r3, [r7, #8]
 80023f6:	4613      	mov	r3, r2
 80023f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002408:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	2200      	movs	r2, #0
 8002412:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f960 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00d      	beq.n	800243e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002430:	d103      	bne.n	800243a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002438:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e05f      	b.n	80024fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800243e:	897b      	ldrh	r3, [r7, #10]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800244c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	6a3a      	ldr	r2, [r7, #32]
 8002452:	492d      	ldr	r1, [pc, #180]	@ (8002508 <I2C_RequestMemoryWrite+0x128>)
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 f9bb 	bl	80027d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e04c      	b.n	80024fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800247a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800247c:	6a39      	ldr	r1, [r7, #32]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 fa46 	bl	8002910 <I2C_WaitOnTXEFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00d      	beq.n	80024a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	2b04      	cmp	r3, #4
 8002490:	d107      	bne.n	80024a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e02b      	b.n	80024fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024a6:	88fb      	ldrh	r3, [r7, #6]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d105      	bne.n	80024b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024ac:	893b      	ldrh	r3, [r7, #8]
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	611a      	str	r2, [r3, #16]
 80024b6:	e021      	b.n	80024fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80024b8:	893b      	ldrh	r3, [r7, #8]
 80024ba:	0a1b      	lsrs	r3, r3, #8
 80024bc:	b29b      	uxth	r3, r3
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c8:	6a39      	ldr	r1, [r7, #32]
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 fa20 	bl	8002910 <I2C_WaitOnTXEFlagUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00d      	beq.n	80024f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d107      	bne.n	80024ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e005      	b.n	80024fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024f2:	893b      	ldrh	r3, [r7, #8]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	00010002 	.word	0x00010002

0800250c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af02      	add	r7, sp, #8
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	4608      	mov	r0, r1
 8002516:	4611      	mov	r1, r2
 8002518:	461a      	mov	r2, r3
 800251a:	4603      	mov	r3, r0
 800251c:	817b      	strh	r3, [r7, #10]
 800251e:	460b      	mov	r3, r1
 8002520:	813b      	strh	r3, [r7, #8]
 8002522:	4613      	mov	r3, r2
 8002524:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002534:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002544:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	2200      	movs	r2, #0
 800254e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f8c2 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00d      	beq.n	800257a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002568:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800256c:	d103      	bne.n	8002576 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002574:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e0aa      	b.n	80026d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800257a:	897b      	ldrh	r3, [r7, #10]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002588:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258c:	6a3a      	ldr	r2, [r7, #32]
 800258e:	4952      	ldr	r1, [pc, #328]	@ (80026d8 <I2C_RequestMemoryRead+0x1cc>)
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f91d 	bl	80027d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e097      	b.n	80026d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025b8:	6a39      	ldr	r1, [r7, #32]
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 f9a8 	bl	8002910 <I2C_WaitOnTXEFlagUntilTimeout>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00d      	beq.n	80025e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d107      	bne.n	80025de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e076      	b.n	80026d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d105      	bne.n	80025f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025e8:	893b      	ldrh	r3, [r7, #8]
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	611a      	str	r2, [r3, #16]
 80025f2:	e021      	b.n	8002638 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025f4:	893b      	ldrh	r3, [r7, #8]
 80025f6:	0a1b      	lsrs	r3, r3, #8
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002604:	6a39      	ldr	r1, [r7, #32]
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 f982 	bl	8002910 <I2C_WaitOnTXEFlagUntilTimeout>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00d      	beq.n	800262e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	2b04      	cmp	r3, #4
 8002618:	d107      	bne.n	800262a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002628:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e050      	b.n	80026d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800262e:	893b      	ldrh	r3, [r7, #8]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800263a:	6a39      	ldr	r1, [r7, #32]
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 f967 	bl	8002910 <I2C_WaitOnTXEFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00d      	beq.n	8002664 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	2b04      	cmp	r3, #4
 800264e:	d107      	bne.n	8002660 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800265e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e035      	b.n	80026d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002672:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	2200      	movs	r2, #0
 800267c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 f82b 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00d      	beq.n	80026a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800269a:	d103      	bne.n	80026a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e013      	b.n	80026d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80026a8:	897b      	ldrh	r3, [r7, #10]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ba:	6a3a      	ldr	r2, [r7, #32]
 80026bc:	4906      	ldr	r1, [pc, #24]	@ (80026d8 <I2C_RequestMemoryRead+0x1cc>)
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f886 	bl	80027d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	00010002 	.word	0x00010002

080026dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ec:	e048      	b.n	8002780 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d044      	beq.n	8002780 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f6:	f7fe fc7d 	bl	8000ff4 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d302      	bcc.n	800270c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d139      	bne.n	8002780 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	0c1b      	lsrs	r3, r3, #16
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b01      	cmp	r3, #1
 8002714:	d10d      	bne.n	8002732 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	43da      	mvns	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	4013      	ands	r3, r2
 8002722:	b29b      	uxth	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	bf0c      	ite	eq
 8002728:	2301      	moveq	r3, #1
 800272a:	2300      	movne	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	e00c      	b.n	800274c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	43da      	mvns	r2, r3
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	4013      	ands	r3, r2
 800273e:	b29b      	uxth	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	bf0c      	ite	eq
 8002744:	2301      	moveq	r3, #1
 8002746:	2300      	movne	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	429a      	cmp	r2, r3
 8002750:	d116      	bne.n	8002780 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	f043 0220 	orr.w	r2, r3, #32
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e023      	b.n	80027c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	0c1b      	lsrs	r3, r3, #16
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d10d      	bne.n	80027a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	43da      	mvns	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	4013      	ands	r3, r2
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf0c      	ite	eq
 800279c:	2301      	moveq	r3, #1
 800279e:	2300      	movne	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	e00c      	b.n	80027c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	43da      	mvns	r2, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	4013      	ands	r3, r2
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	bf0c      	ite	eq
 80027b8:	2301      	moveq	r3, #1
 80027ba:	2300      	movne	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d093      	beq.n	80026ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027de:	e071      	b.n	80028c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ee:	d123      	bne.n	8002838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002808:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	f043 0204 	orr.w	r2, r3, #4
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e067      	b.n	8002908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283e:	d041      	beq.n	80028c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002840:	f7fe fbd8 	bl	8000ff4 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	429a      	cmp	r2, r3
 800284e:	d302      	bcc.n	8002856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d136      	bne.n	80028c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	0c1b      	lsrs	r3, r3, #16
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b01      	cmp	r3, #1
 800285e:	d10c      	bne.n	800287a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	43da      	mvns	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	4013      	ands	r3, r2
 800286c:	b29b      	uxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	bf14      	ite	ne
 8002872:	2301      	movne	r3, #1
 8002874:	2300      	moveq	r3, #0
 8002876:	b2db      	uxtb	r3, r3
 8002878:	e00b      	b.n	8002892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	43da      	mvns	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	4013      	ands	r3, r2
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	bf14      	ite	ne
 800288c:	2301      	movne	r3, #1
 800288e:	2300      	moveq	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d016      	beq.n	80028c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e021      	b.n	8002908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	0c1b      	lsrs	r3, r3, #16
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d10c      	bne.n	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	43da      	mvns	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	4013      	ands	r3, r2
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bf14      	ite	ne
 80028e0:	2301      	movne	r3, #1
 80028e2:	2300      	moveq	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	e00b      	b.n	8002900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	43da      	mvns	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4013      	ands	r3, r2
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	bf14      	ite	ne
 80028fa:	2301      	movne	r3, #1
 80028fc:	2300      	moveq	r3, #0
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	f47f af6d 	bne.w	80027e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800291c:	e034      	b.n	8002988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f8e3 	bl	8002aea <I2C_IsAcknowledgeFailed>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e034      	b.n	8002998 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002934:	d028      	beq.n	8002988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002936:	f7fe fb5d 	bl	8000ff4 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	429a      	cmp	r2, r3
 8002944:	d302      	bcc.n	800294c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d11d      	bne.n	8002988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002956:	2b80      	cmp	r3, #128	@ 0x80
 8002958:	d016      	beq.n	8002988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	f043 0220 	orr.w	r2, r3, #32
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e007      	b.n	8002998 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002992:	2b80      	cmp	r3, #128	@ 0x80
 8002994:	d1c3      	bne.n	800291e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029ac:	e034      	b.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f89b 	bl	8002aea <I2C_IsAcknowledgeFailed>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e034      	b.n	8002a28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c4:	d028      	beq.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c6:	f7fe fb15 	bl	8000ff4 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d302      	bcc.n	80029dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d11d      	bne.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d016      	beq.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e007      	b.n	8002a28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d1c3      	bne.n	80029ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a3c:	e049      	b.n	8002ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	f003 0310 	and.w	r3, r3, #16
 8002a48:	2b10      	cmp	r3, #16
 8002a4a:	d119      	bne.n	8002a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f06f 0210 	mvn.w	r2, #16
 8002a54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e030      	b.n	8002ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a80:	f7fe fab8 	bl	8000ff4 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d302      	bcc.n	8002a96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d11d      	bne.n	8002ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa0:	2b40      	cmp	r3, #64	@ 0x40
 8002aa2:	d016      	beq.n	8002ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	f043 0220 	orr.w	r2, r3, #32
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e007      	b.n	8002ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002adc:	2b40      	cmp	r3, #64	@ 0x40
 8002ade:	d1ae      	bne.n	8002a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002afc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b00:	d11b      	bne.n	8002b3a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b0a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	f043 0204 	orr.w	r2, r3, #4
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr
	...

08002b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e272      	b.n	8003040 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 8087 	beq.w	8002c76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b68:	4b92      	ldr	r3, [pc, #584]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 030c 	and.w	r3, r3, #12
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d00c      	beq.n	8002b8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b74:	4b8f      	ldr	r3, [pc, #572]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 030c 	and.w	r3, r3, #12
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d112      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x5e>
 8002b80:	4b8c      	ldr	r3, [pc, #560]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b8c:	d10b      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b8e:	4b89      	ldr	r3, [pc, #548]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d06c      	beq.n	8002c74 <HAL_RCC_OscConfig+0x12c>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d168      	bne.n	8002c74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e24c      	b.n	8003040 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bae:	d106      	bne.n	8002bbe <HAL_RCC_OscConfig+0x76>
 8002bb0:	4b80      	ldr	r3, [pc, #512]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a7f      	ldr	r2, [pc, #508]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002bb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bba:	6013      	str	r3, [r2, #0]
 8002bbc:	e02e      	b.n	8002c1c <HAL_RCC_OscConfig+0xd4>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCC_OscConfig+0x98>
 8002bc6:	4b7b      	ldr	r3, [pc, #492]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a7a      	ldr	r2, [pc, #488]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	4b78      	ldr	r3, [pc, #480]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a77      	ldr	r2, [pc, #476]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	e01d      	b.n	8002c1c <HAL_RCC_OscConfig+0xd4>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002be8:	d10c      	bne.n	8002c04 <HAL_RCC_OscConfig+0xbc>
 8002bea:	4b72      	ldr	r3, [pc, #456]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a71      	ldr	r2, [pc, #452]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	4b6f      	ldr	r3, [pc, #444]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a6e      	ldr	r2, [pc, #440]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	e00b      	b.n	8002c1c <HAL_RCC_OscConfig+0xd4>
 8002c04:	4b6b      	ldr	r3, [pc, #428]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a6a      	ldr	r2, [pc, #424]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	4b68      	ldr	r3, [pc, #416]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a67      	ldr	r2, [pc, #412]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002c16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d013      	beq.n	8002c4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c24:	f7fe f9e6 	bl	8000ff4 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c2c:	f7fe f9e2 	bl	8000ff4 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	@ 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e200      	b.n	8003040 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3e:	4b5d      	ldr	r3, [pc, #372]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0xe4>
 8002c4a:	e014      	b.n	8002c76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7fe f9d2 	bl	8000ff4 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c54:	f7fe f9ce 	bl	8000ff4 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	@ 0x64
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e1ec      	b.n	8003040 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c66:	4b53      	ldr	r3, [pc, #332]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x10c>
 8002c72:	e000      	b.n	8002c76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d063      	beq.n	8002d4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c82:	4b4c      	ldr	r3, [pc, #304]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 030c 	and.w	r3, r3, #12
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c8e:	4b49      	ldr	r3, [pc, #292]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 030c 	and.w	r3, r3, #12
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d11c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x18c>
 8002c9a:	4b46      	ldr	r3, [pc, #280]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d116      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca6:	4b43      	ldr	r3, [pc, #268]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <HAL_RCC_OscConfig+0x176>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d001      	beq.n	8002cbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e1c0      	b.n	8003040 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4939      	ldr	r1, [pc, #228]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd2:	e03a      	b.n	8002d4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d020      	beq.n	8002d1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cdc:	4b36      	ldr	r3, [pc, #216]	@ (8002db8 <HAL_RCC_OscConfig+0x270>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce2:	f7fe f987 	bl	8000ff4 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cea:	f7fe f983 	bl	8000ff4 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e1a1      	b.n	8003040 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d08:	4b2a      	ldr	r3, [pc, #168]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4927      	ldr	r1, [pc, #156]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	600b      	str	r3, [r1, #0]
 8002d1c:	e015      	b.n	8002d4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1e:	4b26      	ldr	r3, [pc, #152]	@ (8002db8 <HAL_RCC_OscConfig+0x270>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fe f966 	bl	8000ff4 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2c:	f7fe f962 	bl	8000ff4 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e180      	b.n	8003040 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d03a      	beq.n	8002dcc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d019      	beq.n	8002d92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d5e:	4b17      	ldr	r3, [pc, #92]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d64:	f7fe f946 	bl	8000ff4 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d6c:	f7fe f942 	bl	8000ff4 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e160      	b.n	8003040 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002db4 <HAL_RCC_OscConfig+0x26c>)
 8002d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	f000 faba 	bl	8003304 <RCC_Delay>
 8002d90:	e01c      	b.n	8002dcc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d92:	4b0a      	ldr	r3, [pc, #40]	@ (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d98:	f7fe f92c 	bl	8000ff4 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d9e:	e00f      	b.n	8002dc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da0:	f7fe f928 	bl	8000ff4 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d908      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e146      	b.n	8003040 <HAL_RCC_OscConfig+0x4f8>
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000
 8002db8:	42420000 	.word	0x42420000
 8002dbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc0:	4b92      	ldr	r3, [pc, #584]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1e9      	bne.n	8002da0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80a6 	beq.w	8002f26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dde:	4b8b      	ldr	r3, [pc, #556]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10d      	bne.n	8002e06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dea:	4b88      	ldr	r3, [pc, #544]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	4a87      	ldr	r2, [pc, #540]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002df4:	61d3      	str	r3, [r2, #28]
 8002df6:	4b85      	ldr	r3, [pc, #532]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e02:	2301      	movs	r3, #1
 8002e04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e06:	4b82      	ldr	r3, [pc, #520]	@ (8003010 <HAL_RCC_OscConfig+0x4c8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d118      	bne.n	8002e44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e12:	4b7f      	ldr	r3, [pc, #508]	@ (8003010 <HAL_RCC_OscConfig+0x4c8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a7e      	ldr	r2, [pc, #504]	@ (8003010 <HAL_RCC_OscConfig+0x4c8>)
 8002e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e1e:	f7fe f8e9 	bl	8000ff4 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e26:	f7fe f8e5 	bl	8000ff4 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b64      	cmp	r3, #100	@ 0x64
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e103      	b.n	8003040 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e38:	4b75      	ldr	r3, [pc, #468]	@ (8003010 <HAL_RCC_OscConfig+0x4c8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d106      	bne.n	8002e5a <HAL_RCC_OscConfig+0x312>
 8002e4c:	4b6f      	ldr	r3, [pc, #444]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	4a6e      	ldr	r2, [pc, #440]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	6213      	str	r3, [r2, #32]
 8002e58:	e02d      	b.n	8002eb6 <HAL_RCC_OscConfig+0x36e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10c      	bne.n	8002e7c <HAL_RCC_OscConfig+0x334>
 8002e62:	4b6a      	ldr	r3, [pc, #424]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	4a69      	ldr	r2, [pc, #420]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	6213      	str	r3, [r2, #32]
 8002e6e:	4b67      	ldr	r3, [pc, #412]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	4a66      	ldr	r2, [pc, #408]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002e74:	f023 0304 	bic.w	r3, r3, #4
 8002e78:	6213      	str	r3, [r2, #32]
 8002e7a:	e01c      	b.n	8002eb6 <HAL_RCC_OscConfig+0x36e>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	2b05      	cmp	r3, #5
 8002e82:	d10c      	bne.n	8002e9e <HAL_RCC_OscConfig+0x356>
 8002e84:	4b61      	ldr	r3, [pc, #388]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	4a60      	ldr	r2, [pc, #384]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002e8a:	f043 0304 	orr.w	r3, r3, #4
 8002e8e:	6213      	str	r3, [r2, #32]
 8002e90:	4b5e      	ldr	r3, [pc, #376]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	4a5d      	ldr	r2, [pc, #372]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	6213      	str	r3, [r2, #32]
 8002e9c:	e00b      	b.n	8002eb6 <HAL_RCC_OscConfig+0x36e>
 8002e9e:	4b5b      	ldr	r3, [pc, #364]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	4a5a      	ldr	r2, [pc, #360]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	6213      	str	r3, [r2, #32]
 8002eaa:	4b58      	ldr	r3, [pc, #352]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	4a57      	ldr	r2, [pc, #348]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	f023 0304 	bic.w	r3, r3, #4
 8002eb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d015      	beq.n	8002eea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebe:	f7fe f899 	bl	8000ff4 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec4:	e00a      	b.n	8002edc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec6:	f7fe f895 	bl	8000ff4 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e0b1      	b.n	8003040 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002edc:	4b4b      	ldr	r3, [pc, #300]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0ee      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x37e>
 8002ee8:	e014      	b.n	8002f14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eea:	f7fe f883 	bl	8000ff4 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef0:	e00a      	b.n	8002f08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef2:	f7fe f87f 	bl	8000ff4 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e09b      	b.n	8003040 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f08:	4b40      	ldr	r3, [pc, #256]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1ee      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f14:	7dfb      	ldrb	r3, [r7, #23]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d105      	bne.n	8002f26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f1a:	4b3c      	ldr	r3, [pc, #240]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	4a3b      	ldr	r2, [pc, #236]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 8087 	beq.w	800303e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f30:	4b36      	ldr	r3, [pc, #216]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 030c 	and.w	r3, r3, #12
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d061      	beq.n	8003000 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d146      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f44:	4b33      	ldr	r3, [pc, #204]	@ (8003014 <HAL_RCC_OscConfig+0x4cc>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4a:	f7fe f853 	bl	8000ff4 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f52:	f7fe f84f 	bl	8000ff4 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e06d      	b.n	8003040 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f64:	4b29      	ldr	r3, [pc, #164]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f0      	bne.n	8002f52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f78:	d108      	bne.n	8002f8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f7a:	4b24      	ldr	r3, [pc, #144]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	4921      	ldr	r1, [pc, #132]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a19      	ldr	r1, [r3, #32]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	491b      	ldr	r1, [pc, #108]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8003014 <HAL_RCC_OscConfig+0x4cc>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002faa:	f7fe f823 	bl	8000ff4 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb2:	f7fe f81f 	bl	8000ff4 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e03d      	b.n	8003040 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fc4:	4b11      	ldr	r3, [pc, #68]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x46a>
 8002fd0:	e035      	b.n	800303e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd2:	4b10      	ldr	r3, [pc, #64]	@ (8003014 <HAL_RCC_OscConfig+0x4cc>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd8:	f7fe f80c 	bl	8000ff4 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7fe f808 	bl	8000ff4 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e026      	b.n	8003040 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff2:	4b06      	ldr	r3, [pc, #24]	@ (800300c <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x498>
 8002ffe:	e01e      	b.n	800303e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d107      	bne.n	8003018 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e019      	b.n	8003040 <HAL_RCC_OscConfig+0x4f8>
 800300c:	40021000 	.word	0x40021000
 8003010:	40007000 	.word	0x40007000
 8003014:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003018:	4b0b      	ldr	r3, [pc, #44]	@ (8003048 <HAL_RCC_OscConfig+0x500>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	429a      	cmp	r2, r3
 800302a:	d106      	bne.n	800303a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	429a      	cmp	r2, r3
 8003038:	d001      	beq.n	800303e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40021000 	.word	0x40021000

0800304c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0d0      	b.n	8003202 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003060:	4b6a      	ldr	r3, [pc, #424]	@ (800320c <HAL_RCC_ClockConfig+0x1c0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d910      	bls.n	8003090 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b67      	ldr	r3, [pc, #412]	@ (800320c <HAL_RCC_ClockConfig+0x1c0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 0207 	bic.w	r2, r3, #7
 8003076:	4965      	ldr	r1, [pc, #404]	@ (800320c <HAL_RCC_ClockConfig+0x1c0>)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	4313      	orrs	r3, r2
 800307c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800307e:	4b63      	ldr	r3, [pc, #396]	@ (800320c <HAL_RCC_ClockConfig+0x1c0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0b8      	b.n	8003202 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d020      	beq.n	80030de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030a8:	4b59      	ldr	r3, [pc, #356]	@ (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4a58      	ldr	r2, [pc, #352]	@ (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80030b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c0:	4b53      	ldr	r3, [pc, #332]	@ (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a52      	ldr	r2, [pc, #328]	@ (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80030ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030cc:	4b50      	ldr	r3, [pc, #320]	@ (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	494d      	ldr	r1, [pc, #308]	@ (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d040      	beq.n	800316c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f2:	4b47      	ldr	r3, [pc, #284]	@ (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d115      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e07f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d107      	bne.n	800311a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800310a:	4b41      	ldr	r3, [pc, #260]	@ (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e073      	b.n	8003202 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311a:	4b3d      	ldr	r3, [pc, #244]	@ (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e06b      	b.n	8003202 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800312a:	4b39      	ldr	r3, [pc, #228]	@ (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f023 0203 	bic.w	r2, r3, #3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4936      	ldr	r1, [pc, #216]	@ (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 8003138:	4313      	orrs	r3, r2
 800313a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800313c:	f7fd ff5a 	bl	8000ff4 <HAL_GetTick>
 8003140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003142:	e00a      	b.n	800315a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003144:	f7fd ff56 	bl	8000ff4 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003152:	4293      	cmp	r3, r2
 8003154:	d901      	bls.n	800315a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e053      	b.n	8003202 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800315a:	4b2d      	ldr	r3, [pc, #180]	@ (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 020c 	and.w	r2, r3, #12
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	429a      	cmp	r2, r3
 800316a:	d1eb      	bne.n	8003144 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800316c:	4b27      	ldr	r3, [pc, #156]	@ (800320c <HAL_RCC_ClockConfig+0x1c0>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d210      	bcs.n	800319c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b24      	ldr	r3, [pc, #144]	@ (800320c <HAL_RCC_ClockConfig+0x1c0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 0207 	bic.w	r2, r3, #7
 8003182:	4922      	ldr	r1, [pc, #136]	@ (800320c <HAL_RCC_ClockConfig+0x1c0>)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b20      	ldr	r3, [pc, #128]	@ (800320c <HAL_RCC_ClockConfig+0x1c0>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e032      	b.n	8003202 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a8:	4b19      	ldr	r3, [pc, #100]	@ (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	4916      	ldr	r1, [pc, #88]	@ (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d009      	beq.n	80031da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031c6:	4b12      	ldr	r3, [pc, #72]	@ (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	490e      	ldr	r1, [pc, #56]	@ (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031da:	f000 f821 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 80031de:	4602      	mov	r2, r0
 80031e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	490a      	ldr	r1, [pc, #40]	@ (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 80031ec:	5ccb      	ldrb	r3, [r1, r3]
 80031ee:	fa22 f303 	lsr.w	r3, r2, r3
 80031f2:	4a09      	ldr	r2, [pc, #36]	@ (8003218 <HAL_RCC_ClockConfig+0x1cc>)
 80031f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031f6:	4b09      	ldr	r3, [pc, #36]	@ (800321c <HAL_RCC_ClockConfig+0x1d0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd feb8 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40022000 	.word	0x40022000
 8003210:	40021000 	.word	0x40021000
 8003214:	08007f10 	.word	0x08007f10
 8003218:	20000010 	.word	0x20000010
 800321c:	20000000 	.word	0x20000000

08003220 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	2300      	movs	r3, #0
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	2300      	movs	r3, #0
 8003234:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800323a:	4b1e      	ldr	r3, [pc, #120]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	2b04      	cmp	r3, #4
 8003248:	d002      	beq.n	8003250 <HAL_RCC_GetSysClockFreq+0x30>
 800324a:	2b08      	cmp	r3, #8
 800324c:	d003      	beq.n	8003256 <HAL_RCC_GetSysClockFreq+0x36>
 800324e:	e027      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003250:	4b19      	ldr	r3, [pc, #100]	@ (80032b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003252:	613b      	str	r3, [r7, #16]
      break;
 8003254:	e027      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	0c9b      	lsrs	r3, r3, #18
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	4a17      	ldr	r2, [pc, #92]	@ (80032bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003260:	5cd3      	ldrb	r3, [r2, r3]
 8003262:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d010      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800326e:	4b11      	ldr	r3, [pc, #68]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	0c5b      	lsrs	r3, r3, #17
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	4a11      	ldr	r2, [pc, #68]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800327a:	5cd3      	ldrb	r3, [r2, r3]
 800327c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a0d      	ldr	r2, [pc, #52]	@ (80032b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003282:	fb03 f202 	mul.w	r2, r3, r2
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	fbb2 f3f3 	udiv	r3, r2, r3
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	e004      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a0c      	ldr	r2, [pc, #48]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003294:	fb02 f303 	mul.w	r3, r2, r3
 8003298:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	613b      	str	r3, [r7, #16]
      break;
 800329e:	e002      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032a0:	4b05      	ldr	r3, [pc, #20]	@ (80032b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80032a2:	613b      	str	r3, [r7, #16]
      break;
 80032a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032a6:	693b      	ldr	r3, [r7, #16]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	371c      	adds	r7, #28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40021000 	.word	0x40021000
 80032b8:	007a1200 	.word	0x007a1200
 80032bc:	08006c3c 	.word	0x08006c3c
 80032c0:	08006c4c 	.word	0x08006c4c
 80032c4:	003d0900 	.word	0x003d0900

080032c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032cc:	4b02      	ldr	r3, [pc, #8]	@ (80032d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80032ce:	681b      	ldr	r3, [r3, #0]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr
 80032d8:	20000010 	.word	0x20000010

080032dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032e0:	f7ff fff2 	bl	80032c8 <HAL_RCC_GetHCLKFreq>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b05      	ldr	r3, [pc, #20]	@ (80032fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	0a1b      	lsrs	r3, r3, #8
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	4903      	ldr	r1, [pc, #12]	@ (8003300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032f2:	5ccb      	ldrb	r3, [r1, r3]
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40021000 	.word	0x40021000
 8003300:	08007f20 	.word	0x08007f20

08003304 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800330c:	4b0a      	ldr	r3, [pc, #40]	@ (8003338 <RCC_Delay+0x34>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a0a      	ldr	r2, [pc, #40]	@ (800333c <RCC_Delay+0x38>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	0a5b      	lsrs	r3, r3, #9
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	fb02 f303 	mul.w	r3, r2, r3
 800331e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003320:	bf00      	nop
  }
  while (Delay --);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1e5a      	subs	r2, r3, #1
 8003326:	60fa      	str	r2, [r7, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1f9      	bne.n	8003320 <RCC_Delay+0x1c>
}
 800332c:	bf00      	nop
 800332e:	bf00      	nop
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr
 8003338:	20000010 	.word	0x20000010
 800333c:	10624dd3 	.word	0x10624dd3

08003340 <MPU6050_Init>:
/* USER CODE BEGIN 0 */
#define MPU6050_ADDR 0x68 << 1 // 0xD0
#define GYRO_CONFIG_REG 0x1B
#define ACCEL_CONFIG_REG 0x1C
void MPU6050_Init (void) // WHO AM I is to verify the identity of device
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af04      	add	r7, sp, #16
  uint8_t check;
  uint8_t Data;

  HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x75, 1, &check, 1, 1000);  // read WHO_AM_I
 8003346:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800334a:	9302      	str	r3, [sp, #8]
 800334c:	2301      	movs	r3, #1
 800334e:	9301      	str	r3, [sp, #4]
 8003350:	1dfb      	adds	r3, r7, #7
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	2301      	movs	r3, #1
 8003356:	2275      	movs	r2, #117	@ 0x75
 8003358:	21d0      	movs	r1, #208	@ 0xd0
 800335a:	4823      	ldr	r0, [pc, #140]	@ (80033e8 <MPU6050_Init+0xa8>)
 800335c:	f7fe fc1c 	bl	8001b98 <HAL_I2C_Mem_Read>
  if (check == 0x68)  // 0x68 will be returned by the sensor if everything goes well
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	2b68      	cmp	r3, #104	@ 0x68
 8003364:	d13b      	bne.n	80033de <MPU6050_Init+0x9e>
  {
	  // power management register 0X6B we should write all 0's to wake the sensor up
	  Data = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	71bb      	strb	r3, [r7, #6]
       * The CYCLE between sleep mode and wakeup will be enabled.
       * The SLEEP mode will be disabled.
       * Also we are not performing the RESET.
       * CONFIG 0x1A is to configure DLPF is by default 0
      */
	  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6B, 1, &Data, 1, 1000);
 800336a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800336e:	9302      	str	r3, [sp, #8]
 8003370:	2301      	movs	r3, #1
 8003372:	9301      	str	r3, [sp, #4]
 8003374:	1dbb      	adds	r3, r7, #6
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	2301      	movs	r3, #1
 800337a:	226b      	movs	r2, #107	@ 0x6b
 800337c:	21d0      	movs	r1, #208	@ 0xd0
 800337e:	481a      	ldr	r0, [pc, #104]	@ (80033e8 <MPU6050_Init+0xa8>)
 8003380:	f7fe fb10 	bl	80019a4 <HAL_I2C_Mem_Write>

	  // Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)
	  // output rate = 8000 Hz when ?DLPF? is disabled
	  Data = 0x07; // it's divisor (SMPLR_DIV)
 8003384:	2307      	movs	r3, #7
 8003386:	71bb      	strb	r3, [r7, #6]
	  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x19, 1, &Data, 1, 1000);
 8003388:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800338c:	9302      	str	r3, [sp, #8]
 800338e:	2301      	movs	r3, #1
 8003390:	9301      	str	r3, [sp, #4]
 8003392:	1dbb      	adds	r3, r7, #6
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	2301      	movs	r3, #1
 8003398:	2219      	movs	r2, #25
 800339a:	21d0      	movs	r1, #208	@ 0xd0
 800339c:	4812      	ldr	r0, [pc, #72]	@ (80033e8 <MPU6050_Init+0xa8>)
 800339e:	f7fe fb01 	bl	80019a4 <HAL_I2C_Mem_Write>

	  // Set accelerometer configuration in ACCEL_CONFIG Register
	  Data = 0x00;  // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> <strong>±</strong> 2g
 80033a2:	2300      	movs	r3, #0
 80033a4:	71bb      	strb	r3, [r7, #6]
	  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80033a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033aa:	9302      	str	r3, [sp, #8]
 80033ac:	2301      	movs	r3, #1
 80033ae:	9301      	str	r3, [sp, #4]
 80033b0:	1dbb      	adds	r3, r7, #6
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	2301      	movs	r3, #1
 80033b6:	221c      	movs	r2, #28
 80033b8:	21d0      	movs	r1, #208	@ 0xd0
 80033ba:	480b      	ldr	r0, [pc, #44]	@ (80033e8 <MPU6050_Init+0xa8>)
 80033bc:	f7fe faf2 	bl	80019a4 <HAL_I2C_Mem_Write>

	  // Set Gyroscopic configuration in GYRO_CONFIG Register
	  Data = 0x00;  // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> <strong>±</strong> 250 ̐/s
 80033c0:	2300      	movs	r3, #0
 80033c2:	71bb      	strb	r3, [r7, #6]
	  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80033c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033c8:	9302      	str	r3, [sp, #8]
 80033ca:	2301      	movs	r3, #1
 80033cc:	9301      	str	r3, [sp, #4]
 80033ce:	1dbb      	adds	r3, r7, #6
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	2301      	movs	r3, #1
 80033d4:	221b      	movs	r2, #27
 80033d6:	21d0      	movs	r1, #208	@ 0xd0
 80033d8:	4803      	ldr	r0, [pc, #12]	@ (80033e8 <MPU6050_Init+0xa8>)
 80033da:	f7fe fae3 	bl	80019a4 <HAL_I2C_Mem_Write>
  }
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	200001fc 	.word	0x200001fc

080033ec <MPU6050_Read_Accel_X>:

// But we also can read one by one bytes of data
float MPU6050_Read_Accel_X (void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 80033f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033f6:	9302      	str	r3, [sp, #8]
 80033f8:	2306      	movs	r3, #6
 80033fa:	9301      	str	r3, [sp, #4]
 80033fc:	463b      	mov	r3, r7
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	2301      	movs	r3, #1
 8003402:	223b      	movs	r2, #59	@ 0x3b
 8003404:	21d0      	movs	r1, #208	@ 0xd0
 8003406:	480e      	ldr	r0, [pc, #56]	@ (8003440 <MPU6050_Read_Accel_X+0x54>)
 8003408:	f7fe fbc6 	bl	8001b98 <HAL_I2C_Mem_Read>
	// How? We will shift higher byte to the left on 8 bits so there is place for lower byte
	// Example: 0001 0010 (is 0x12) - higher byte
	// Then shift to 8
	// 0001 0010 0000 0000 and then logical OR with data in lower register (0011 0100)
	// At the end we got all value
	int16_t Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800340c:	783b      	ldrb	r3, [r7, #0]
 800340e:	b21b      	sxth	r3, r3
 8003410:	021b      	lsls	r3, r3, #8
 8003412:	b21a      	sxth	r2, r3
 8003414:	787b      	ldrb	r3, [r7, #1]
 8003416:	b21b      	sxth	r3, r3
 8003418:	4313      	orrs	r3, r2
 800341a:	81fb      	strh	r3, [r7, #14]
	// The same goes for Y and Z
	// logically as array addressing is organised in C: 0x3B is XOUT_H, 0x3B+"1" is XOUT_L
	// Then 0x3B+"2" is YOUT_H, 0x3B+"3" is YOUT_L
	//int16_t Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
	//int16_t Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
	float Ax = (float)Accel_X_RAW/16384.0; //16384 is g between +-2g, for example 2048 is +-16g
 800341c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003420:	4618      	mov	r0, r3
 8003422:	f7fd fbeb 	bl	8000bfc <__aeabi_i2f>
 8003426:	4603      	mov	r3, r0
 8003428:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 800342c:	4618      	mov	r0, r3
 800342e:	f7fd fced 	bl	8000e0c <__aeabi_fdiv>
 8003432:	4603      	mov	r3, r0
 8003434:	60bb      	str	r3, [r7, #8]
	//float Ay = (float)Accel_Y_RAW/16384.0;
	//float Az = (float)Accel_Z_RAW/16384.0;
	return Ax;
 8003436:	68bb      	ldr	r3, [r7, #8]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	200001fc 	.word	0x200001fc

08003444 <MPU6050_Read_Accel_Y>:


float MPU6050_Read_Accel_Y (void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 800344a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800344e:	9302      	str	r3, [sp, #8]
 8003450:	2306      	movs	r3, #6
 8003452:	9301      	str	r3, [sp, #4]
 8003454:	463b      	mov	r3, r7
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	2301      	movs	r3, #1
 800345a:	223b      	movs	r2, #59	@ 0x3b
 800345c:	21d0      	movs	r1, #208	@ 0xd0
 800345e:	480e      	ldr	r0, [pc, #56]	@ (8003498 <MPU6050_Read_Accel_Y+0x54>)
 8003460:	f7fe fb9a 	bl	8001b98 <HAL_I2C_Mem_Read>
	int16_t Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8003464:	78bb      	ldrb	r3, [r7, #2]
 8003466:	b21b      	sxth	r3, r3
 8003468:	021b      	lsls	r3, r3, #8
 800346a:	b21a      	sxth	r2, r3
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	b21b      	sxth	r3, r3
 8003470:	4313      	orrs	r3, r2
 8003472:	81fb      	strh	r3, [r7, #14]
	float Ay = (float)Accel_Y_RAW/16384.0;
 8003474:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003478:	4618      	mov	r0, r3
 800347a:	f7fd fbbf 	bl	8000bfc <__aeabi_i2f>
 800347e:	4603      	mov	r3, r0
 8003480:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8003484:	4618      	mov	r0, r3
 8003486:	f7fd fcc1 	bl	8000e0c <__aeabi_fdiv>
 800348a:	4603      	mov	r3, r0
 800348c:	60bb      	str	r3, [r7, #8]

	return Ay;
 800348e:	68bb      	ldr	r3, [r7, #8]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	200001fc 	.word	0x200001fc

0800349c <MPU6050_Read_Accel_Z>:



float MPU6050_Read_Accel_Z (void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 80034a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034a6:	9302      	str	r3, [sp, #8]
 80034a8:	2306      	movs	r3, #6
 80034aa:	9301      	str	r3, [sp, #4]
 80034ac:	463b      	mov	r3, r7
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	2301      	movs	r3, #1
 80034b2:	223b      	movs	r2, #59	@ 0x3b
 80034b4:	21d0      	movs	r1, #208	@ 0xd0
 80034b6:	480e      	ldr	r0, [pc, #56]	@ (80034f0 <MPU6050_Read_Accel_Z+0x54>)
 80034b8:	f7fe fb6e 	bl	8001b98 <HAL_I2C_Mem_Read>
	int16_t Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80034bc:	793b      	ldrb	r3, [r7, #4]
 80034be:	b21b      	sxth	r3, r3
 80034c0:	021b      	lsls	r3, r3, #8
 80034c2:	b21a      	sxth	r2, r3
 80034c4:	797b      	ldrb	r3, [r7, #5]
 80034c6:	b21b      	sxth	r3, r3
 80034c8:	4313      	orrs	r3, r2
 80034ca:	81fb      	strh	r3, [r7, #14]
	float Az = (float)Accel_Z_RAW/16384.0;
 80034cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fd fb93 	bl	8000bfc <__aeabi_i2f>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd fc95 	bl	8000e0c <__aeabi_fdiv>
 80034e2:	4603      	mov	r3, r0
 80034e4:	60bb      	str	r3, [r7, #8]
	return Az;
 80034e6:	68bb      	ldr	r3, [r7, #8]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	200001fc 	.word	0x200001fc

080034f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b09a      	sub	sp, #104	@ 0x68
 80034f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034fa:	f7fd fd23 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034fe:	f000 f861 	bl	80035c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003502:	f000 f8c9 	bl	8003698 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003506:	f000 f899 	bl	800363c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 800350a:	f7ff ff19 	bl	8003340 <MPU6050_Init>
  SSD1306_Init();
 800350e:	f000 f8eb 	bl	80036e8 <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SSD1306_Fill(0);
 8003512:	2000      	movs	r0, #0
 8003514:	f000 f9d4 	bl	80038c0 <SSD1306_Fill>
	  char buf[100];


	  SSD1306_GotoXY (0,0);
 8003518:	2100      	movs	r1, #0
 800351a:	2000      	movs	r0, #0
 800351c:	f000 fa46 	bl	80039ac <SSD1306_GotoXY>
	  sprintf (buf, "Ax=%.2f ", MPU6050_Read_Accel_X());
 8003520:	f7ff ff64 	bl	80033ec <MPU6050_Read_Accel_X>
 8003524:	4603      	mov	r3, r0
 8003526:	4618      	mov	r0, r3
 8003528:	f7fc ff7e 	bl	8000428 <__aeabi_f2d>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	1d38      	adds	r0, r7, #4
 8003532:	4920      	ldr	r1, [pc, #128]	@ (80035b4 <main+0xc0>)
 8003534:	f001 fa28 	bl	8004988 <siprintf>
	  SSD1306_Puts (buf, &Font_14x15, 1);
 8003538:	1d3b      	adds	r3, r7, #4
 800353a:	2201      	movs	r2, #1
 800353c:	491e      	ldr	r1, [pc, #120]	@ (80035b8 <main+0xc4>)
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fac8 	bl	8003ad4 <SSD1306_Puts>

	  SSD1306_GotoXY (0,20);
 8003544:	2114      	movs	r1, #20
 8003546:	2000      	movs	r0, #0
 8003548:	f000 fa30 	bl	80039ac <SSD1306_GotoXY>
	  strcpy(buf, "");
 800354c:	2300      	movs	r3, #0
 800354e:	713b      	strb	r3, [r7, #4]
	  sprintf (buf, "Ay=%.2f ", MPU6050_Read_Accel_Y());
 8003550:	f7ff ff78 	bl	8003444 <MPU6050_Read_Accel_Y>
 8003554:	4603      	mov	r3, r0
 8003556:	4618      	mov	r0, r3
 8003558:	f7fc ff66 	bl	8000428 <__aeabi_f2d>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	1d38      	adds	r0, r7, #4
 8003562:	4916      	ldr	r1, [pc, #88]	@ (80035bc <main+0xc8>)
 8003564:	f001 fa10 	bl	8004988 <siprintf>
	  SSD1306_Puts (buf, &Font_14x15, 1);
 8003568:	1d3b      	adds	r3, r7, #4
 800356a:	2201      	movs	r2, #1
 800356c:	4912      	ldr	r1, [pc, #72]	@ (80035b8 <main+0xc4>)
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fab0 	bl	8003ad4 <SSD1306_Puts>

	  SSD1306_GotoXY (0,40);
 8003574:	2128      	movs	r1, #40	@ 0x28
 8003576:	2000      	movs	r0, #0
 8003578:	f000 fa18 	bl	80039ac <SSD1306_GotoXY>
	  strcpy(buf, "");
 800357c:	2300      	movs	r3, #0
 800357e:	713b      	strb	r3, [r7, #4]
	  sprintf (buf, "Az=%.2f ", MPU6050_Read_Accel_Z());
 8003580:	f7ff ff8c 	bl	800349c <MPU6050_Read_Accel_Z>
 8003584:	4603      	mov	r3, r0
 8003586:	4618      	mov	r0, r3
 8003588:	f7fc ff4e 	bl	8000428 <__aeabi_f2d>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	1d38      	adds	r0, r7, #4
 8003592:	490b      	ldr	r1, [pc, #44]	@ (80035c0 <main+0xcc>)
 8003594:	f001 f9f8 	bl	8004988 <siprintf>
	  SSD1306_Puts (buf, &Font_14x15, 1);
 8003598:	1d3b      	adds	r3, r7, #4
 800359a:	2201      	movs	r2, #1
 800359c:	4906      	ldr	r1, [pc, #24]	@ (80035b8 <main+0xc4>)
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fa98 	bl	8003ad4 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80035a4:	f000 f95e 	bl	8003864 <SSD1306_UpdateScreen>
	  HAL_Delay(10);
 80035a8:	200a      	movs	r0, #10
 80035aa:	f7fd fd2d 	bl	8001008 <HAL_Delay>
  {
 80035ae:	bf00      	nop
 80035b0:	e7af      	b.n	8003512 <main+0x1e>
 80035b2:	bf00      	nop
 80035b4:	08006c18 	.word	0x08006c18
 80035b8:	20000008 	.word	0x20000008
 80035bc:	08006c24 	.word	0x08006c24
 80035c0:	08006c30 	.word	0x08006c30

080035c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b090      	sub	sp, #64	@ 0x40
 80035c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035ca:	f107 0318 	add.w	r3, r7, #24
 80035ce:	2228      	movs	r2, #40	@ 0x28
 80035d0:	2100      	movs	r1, #0
 80035d2:	4618      	mov	r0, r3
 80035d4:	f001 fa3d 	bl	8004a52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035d8:	1d3b      	adds	r3, r7, #4
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	605a      	str	r2, [r3, #4]
 80035e0:	609a      	str	r2, [r3, #8]
 80035e2:	60da      	str	r2, [r3, #12]
 80035e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80035e6:	2302      	movs	r3, #2
 80035e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035ea:	2301      	movs	r3, #1
 80035ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035ee:	2310      	movs	r3, #16
 80035f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035f6:	f107 0318 	add.w	r3, r7, #24
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff faa4 	bl	8002b48 <HAL_RCC_OscConfig>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8003606:	f000 f869 	bl	80036dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800360a:	230f      	movs	r3, #15
 800360c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800360e:	2300      	movs	r3, #0
 8003610:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003616:	2300      	movs	r3, #0
 8003618:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800361e:	1d3b      	adds	r3, r7, #4
 8003620:	2100      	movs	r1, #0
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff fd12 	bl	800304c <HAL_RCC_ClockConfig>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800362e:	f000 f855 	bl	80036dc <Error_Handler>
  }
}
 8003632:	bf00      	nop
 8003634:	3740      	adds	r7, #64	@ 0x40
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003640:	4b12      	ldr	r3, [pc, #72]	@ (800368c <MX_I2C1_Init+0x50>)
 8003642:	4a13      	ldr	r2, [pc, #76]	@ (8003690 <MX_I2C1_Init+0x54>)
 8003644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003646:	4b11      	ldr	r3, [pc, #68]	@ (800368c <MX_I2C1_Init+0x50>)
 8003648:	4a12      	ldr	r2, [pc, #72]	@ (8003694 <MX_I2C1_Init+0x58>)
 800364a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800364c:	4b0f      	ldr	r3, [pc, #60]	@ (800368c <MX_I2C1_Init+0x50>)
 800364e:	2200      	movs	r2, #0
 8003650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003652:	4b0e      	ldr	r3, [pc, #56]	@ (800368c <MX_I2C1_Init+0x50>)
 8003654:	2200      	movs	r2, #0
 8003656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003658:	4b0c      	ldr	r3, [pc, #48]	@ (800368c <MX_I2C1_Init+0x50>)
 800365a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800365e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003660:	4b0a      	ldr	r3, [pc, #40]	@ (800368c <MX_I2C1_Init+0x50>)
 8003662:	2200      	movs	r2, #0
 8003664:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003666:	4b09      	ldr	r3, [pc, #36]	@ (800368c <MX_I2C1_Init+0x50>)
 8003668:	2200      	movs	r2, #0
 800366a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800366c:	4b07      	ldr	r3, [pc, #28]	@ (800368c <MX_I2C1_Init+0x50>)
 800366e:	2200      	movs	r2, #0
 8003670:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003672:	4b06      	ldr	r3, [pc, #24]	@ (800368c <MX_I2C1_Init+0x50>)
 8003674:	2200      	movs	r2, #0
 8003676:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003678:	4804      	ldr	r0, [pc, #16]	@ (800368c <MX_I2C1_Init+0x50>)
 800367a:	f7fd ff51 	bl	8001520 <HAL_I2C_Init>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003684:	f000 f82a 	bl	80036dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003688:	bf00      	nop
 800368a:	bd80      	pop	{r7, pc}
 800368c:	200001fc 	.word	0x200001fc
 8003690:	40005400 	.word	0x40005400
 8003694:	00061a80 	.word	0x00061a80

08003698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800369e:	4b0e      	ldr	r3, [pc, #56]	@ (80036d8 <MX_GPIO_Init+0x40>)
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	4a0d      	ldr	r2, [pc, #52]	@ (80036d8 <MX_GPIO_Init+0x40>)
 80036a4:	f043 0304 	orr.w	r3, r3, #4
 80036a8:	6193      	str	r3, [r2, #24]
 80036aa:	4b0b      	ldr	r3, [pc, #44]	@ (80036d8 <MX_GPIO_Init+0x40>)
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	607b      	str	r3, [r7, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036b6:	4b08      	ldr	r3, [pc, #32]	@ (80036d8 <MX_GPIO_Init+0x40>)
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	4a07      	ldr	r2, [pc, #28]	@ (80036d8 <MX_GPIO_Init+0x40>)
 80036bc:	f043 0308 	orr.w	r3, r3, #8
 80036c0:	6193      	str	r3, [r2, #24]
 80036c2:	4b05      	ldr	r3, [pc, #20]	@ (80036d8 <MX_GPIO_Init+0x40>)
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr
 80036d8:	40021000 	.word	0x40021000

080036dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80036e0:	b672      	cpsid	i
}
 80036e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036e4:	bf00      	nop
 80036e6:	e7fd      	b.n	80036e4 <Error_Handler+0x8>

080036e8 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80036ee:	f000 fa17 	bl	8003b20 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80036f2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80036f6:	2201      	movs	r2, #1
 80036f8:	2178      	movs	r1, #120	@ 0x78
 80036fa:	4858      	ldr	r0, [pc, #352]	@ (800385c <SSD1306_Init+0x174>)
 80036fc:	f7fe fcc0 	bl	8002080 <HAL_I2C_IsDeviceReady>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8003706:	2300      	movs	r3, #0
 8003708:	e0a4      	b.n	8003854 <SSD1306_Init+0x16c>
	}

	/* A little delay */
	uint32_t p = 2500;
 800370a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800370e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003710:	e002      	b.n	8003718 <SSD1306_Init+0x30>
		p--;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3b01      	subs	r3, #1
 8003716:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f9      	bne.n	8003712 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800371e:	22ae      	movs	r2, #174	@ 0xae
 8003720:	2100      	movs	r1, #0
 8003722:	2078      	movs	r0, #120	@ 0x78
 8003724:	f000 fa6c 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8003728:	2220      	movs	r2, #32
 800372a:	2100      	movs	r1, #0
 800372c:	2078      	movs	r0, #120	@ 0x78
 800372e:	f000 fa67 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003732:	2210      	movs	r2, #16
 8003734:	2100      	movs	r1, #0
 8003736:	2078      	movs	r0, #120	@ 0x78
 8003738:	f000 fa62 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800373c:	22b0      	movs	r2, #176	@ 0xb0
 800373e:	2100      	movs	r1, #0
 8003740:	2078      	movs	r0, #120	@ 0x78
 8003742:	f000 fa5d 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8003746:	22c8      	movs	r2, #200	@ 0xc8
 8003748:	2100      	movs	r1, #0
 800374a:	2078      	movs	r0, #120	@ 0x78
 800374c:	f000 fa58 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003750:	2200      	movs	r2, #0
 8003752:	2100      	movs	r1, #0
 8003754:	2078      	movs	r0, #120	@ 0x78
 8003756:	f000 fa53 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800375a:	2210      	movs	r2, #16
 800375c:	2100      	movs	r1, #0
 800375e:	2078      	movs	r0, #120	@ 0x78
 8003760:	f000 fa4e 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003764:	2240      	movs	r2, #64	@ 0x40
 8003766:	2100      	movs	r1, #0
 8003768:	2078      	movs	r0, #120	@ 0x78
 800376a:	f000 fa49 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800376e:	2281      	movs	r2, #129	@ 0x81
 8003770:	2100      	movs	r1, #0
 8003772:	2078      	movs	r0, #120	@ 0x78
 8003774:	f000 fa44 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003778:	22ff      	movs	r2, #255	@ 0xff
 800377a:	2100      	movs	r1, #0
 800377c:	2078      	movs	r0, #120	@ 0x78
 800377e:	f000 fa3f 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8003782:	22a1      	movs	r2, #161	@ 0xa1
 8003784:	2100      	movs	r1, #0
 8003786:	2078      	movs	r0, #120	@ 0x78
 8003788:	f000 fa3a 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800378c:	22a6      	movs	r2, #166	@ 0xa6
 800378e:	2100      	movs	r1, #0
 8003790:	2078      	movs	r0, #120	@ 0x78
 8003792:	f000 fa35 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8003796:	22a8      	movs	r2, #168	@ 0xa8
 8003798:	2100      	movs	r1, #0
 800379a:	2078      	movs	r0, #120	@ 0x78
 800379c:	f000 fa30 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80037a0:	223f      	movs	r2, #63	@ 0x3f
 80037a2:	2100      	movs	r1, #0
 80037a4:	2078      	movs	r0, #120	@ 0x78
 80037a6:	f000 fa2b 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80037aa:	22a4      	movs	r2, #164	@ 0xa4
 80037ac:	2100      	movs	r1, #0
 80037ae:	2078      	movs	r0, #120	@ 0x78
 80037b0:	f000 fa26 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80037b4:	22d3      	movs	r2, #211	@ 0xd3
 80037b6:	2100      	movs	r1, #0
 80037b8:	2078      	movs	r0, #120	@ 0x78
 80037ba:	f000 fa21 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80037be:	2200      	movs	r2, #0
 80037c0:	2100      	movs	r1, #0
 80037c2:	2078      	movs	r0, #120	@ 0x78
 80037c4:	f000 fa1c 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80037c8:	22d5      	movs	r2, #213	@ 0xd5
 80037ca:	2100      	movs	r1, #0
 80037cc:	2078      	movs	r0, #120	@ 0x78
 80037ce:	f000 fa17 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80037d2:	22f0      	movs	r2, #240	@ 0xf0
 80037d4:	2100      	movs	r1, #0
 80037d6:	2078      	movs	r0, #120	@ 0x78
 80037d8:	f000 fa12 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80037dc:	22d9      	movs	r2, #217	@ 0xd9
 80037de:	2100      	movs	r1, #0
 80037e0:	2078      	movs	r0, #120	@ 0x78
 80037e2:	f000 fa0d 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80037e6:	2222      	movs	r2, #34	@ 0x22
 80037e8:	2100      	movs	r1, #0
 80037ea:	2078      	movs	r0, #120	@ 0x78
 80037ec:	f000 fa08 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80037f0:	22da      	movs	r2, #218	@ 0xda
 80037f2:	2100      	movs	r1, #0
 80037f4:	2078      	movs	r0, #120	@ 0x78
 80037f6:	f000 fa03 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80037fa:	2212      	movs	r2, #18
 80037fc:	2100      	movs	r1, #0
 80037fe:	2078      	movs	r0, #120	@ 0x78
 8003800:	f000 f9fe 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003804:	22db      	movs	r2, #219	@ 0xdb
 8003806:	2100      	movs	r1, #0
 8003808:	2078      	movs	r0, #120	@ 0x78
 800380a:	f000 f9f9 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800380e:	2220      	movs	r2, #32
 8003810:	2100      	movs	r1, #0
 8003812:	2078      	movs	r0, #120	@ 0x78
 8003814:	f000 f9f4 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003818:	228d      	movs	r2, #141	@ 0x8d
 800381a:	2100      	movs	r1, #0
 800381c:	2078      	movs	r0, #120	@ 0x78
 800381e:	f000 f9ef 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003822:	2214      	movs	r2, #20
 8003824:	2100      	movs	r1, #0
 8003826:	2078      	movs	r0, #120	@ 0x78
 8003828:	f000 f9ea 	bl	8003c00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800382c:	22af      	movs	r2, #175	@ 0xaf
 800382e:	2100      	movs	r1, #0
 8003830:	2078      	movs	r0, #120	@ 0x78
 8003832:	f000 f9e5 	bl	8003c00 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003836:	2000      	movs	r0, #0
 8003838:	f000 f842 	bl	80038c0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800383c:	f000 f812 	bl	8003864 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8003840:	4b07      	ldr	r3, [pc, #28]	@ (8003860 <SSD1306_Init+0x178>)
 8003842:	2200      	movs	r2, #0
 8003844:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003846:	4b06      	ldr	r3, [pc, #24]	@ (8003860 <SSD1306_Init+0x178>)
 8003848:	2200      	movs	r2, #0
 800384a:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800384c:	4b04      	ldr	r3, [pc, #16]	@ (8003860 <SSD1306_Init+0x178>)
 800384e:	2201      	movs	r2, #1
 8003850:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8003852:	2301      	movs	r3, #1
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	200001fc 	.word	0x200001fc
 8003860:	20000650 	.word	0x20000650

08003864 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800386a:	2300      	movs	r3, #0
 800386c:	71fb      	strb	r3, [r7, #7]
 800386e:	e01d      	b.n	80038ac <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003870:	79fb      	ldrb	r3, [r7, #7]
 8003872:	3b50      	subs	r3, #80	@ 0x50
 8003874:	b2db      	uxtb	r3, r3
 8003876:	461a      	mov	r2, r3
 8003878:	2100      	movs	r1, #0
 800387a:	2078      	movs	r0, #120	@ 0x78
 800387c:	f000 f9c0 	bl	8003c00 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003880:	2200      	movs	r2, #0
 8003882:	2100      	movs	r1, #0
 8003884:	2078      	movs	r0, #120	@ 0x78
 8003886:	f000 f9bb 	bl	8003c00 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800388a:	2210      	movs	r2, #16
 800388c:	2100      	movs	r1, #0
 800388e:	2078      	movs	r0, #120	@ 0x78
 8003890:	f000 f9b6 	bl	8003c00 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	01db      	lsls	r3, r3, #7
 8003898:	4a08      	ldr	r2, [pc, #32]	@ (80038bc <SSD1306_UpdateScreen+0x58>)
 800389a:	441a      	add	r2, r3
 800389c:	2380      	movs	r3, #128	@ 0x80
 800389e:	2140      	movs	r1, #64	@ 0x40
 80038a0:	2078      	movs	r0, #120	@ 0x78
 80038a2:	f000 f951 	bl	8003b48 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	3301      	adds	r3, #1
 80038aa:	71fb      	strb	r3, [r7, #7]
 80038ac:	79fb      	ldrb	r3, [r7, #7]
 80038ae:	2b07      	cmp	r3, #7
 80038b0:	d9de      	bls.n	8003870 <SSD1306_UpdateScreen+0xc>
	}
}
 80038b2:	bf00      	nop
 80038b4:	bf00      	nop
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20000250 	.word	0x20000250

080038c0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <SSD1306_Fill+0x14>
 80038d0:	2300      	movs	r3, #0
 80038d2:	e000      	b.n	80038d6 <SSD1306_Fill+0x16>
 80038d4:	23ff      	movs	r3, #255	@ 0xff
 80038d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038da:	4619      	mov	r1, r3
 80038dc:	4803      	ldr	r0, [pc, #12]	@ (80038ec <SSD1306_Fill+0x2c>)
 80038de:	f001 f8b8 	bl	8004a52 <memset>
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000250 	.word	0x20000250

080038f0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	80fb      	strh	r3, [r7, #6]
 80038fa:	460b      	mov	r3, r1
 80038fc:	80bb      	strh	r3, [r7, #4]
 80038fe:	4613      	mov	r3, r2
 8003900:	70fb      	strb	r3, [r7, #3]
	if (
 8003902:	88fb      	ldrh	r3, [r7, #6]
 8003904:	2b7f      	cmp	r3, #127	@ 0x7f
 8003906:	d848      	bhi.n	800399a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8003908:	88bb      	ldrh	r3, [r7, #4]
 800390a:	2b3f      	cmp	r3, #63	@ 0x3f
 800390c:	d845      	bhi.n	800399a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800390e:	4b25      	ldr	r3, [pc, #148]	@ (80039a4 <SSD1306_DrawPixel+0xb4>)
 8003910:	791b      	ldrb	r3, [r3, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d006      	beq.n	8003924 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8003916:	78fb      	ldrb	r3, [r7, #3]
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf0c      	ite	eq
 800391c:	2301      	moveq	r3, #1
 800391e:	2300      	movne	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d11a      	bne.n	8003960 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800392a:	88fa      	ldrh	r2, [r7, #6]
 800392c:	88bb      	ldrh	r3, [r7, #4]
 800392e:	08db      	lsrs	r3, r3, #3
 8003930:	b298      	uxth	r0, r3
 8003932:	4603      	mov	r3, r0
 8003934:	01db      	lsls	r3, r3, #7
 8003936:	4413      	add	r3, r2
 8003938:	4a1b      	ldr	r2, [pc, #108]	@ (80039a8 <SSD1306_DrawPixel+0xb8>)
 800393a:	5cd3      	ldrb	r3, [r2, r3]
 800393c:	b25a      	sxtb	r2, r3
 800393e:	88bb      	ldrh	r3, [r7, #4]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	2101      	movs	r1, #1
 8003946:	fa01 f303 	lsl.w	r3, r1, r3
 800394a:	b25b      	sxtb	r3, r3
 800394c:	4313      	orrs	r3, r2
 800394e:	b259      	sxtb	r1, r3
 8003950:	88fa      	ldrh	r2, [r7, #6]
 8003952:	4603      	mov	r3, r0
 8003954:	01db      	lsls	r3, r3, #7
 8003956:	4413      	add	r3, r2
 8003958:	b2c9      	uxtb	r1, r1
 800395a:	4a13      	ldr	r2, [pc, #76]	@ (80039a8 <SSD1306_DrawPixel+0xb8>)
 800395c:	54d1      	strb	r1, [r2, r3]
 800395e:	e01d      	b.n	800399c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003960:	88fa      	ldrh	r2, [r7, #6]
 8003962:	88bb      	ldrh	r3, [r7, #4]
 8003964:	08db      	lsrs	r3, r3, #3
 8003966:	b298      	uxth	r0, r3
 8003968:	4603      	mov	r3, r0
 800396a:	01db      	lsls	r3, r3, #7
 800396c:	4413      	add	r3, r2
 800396e:	4a0e      	ldr	r2, [pc, #56]	@ (80039a8 <SSD1306_DrawPixel+0xb8>)
 8003970:	5cd3      	ldrb	r3, [r2, r3]
 8003972:	b25a      	sxtb	r2, r3
 8003974:	88bb      	ldrh	r3, [r7, #4]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	2101      	movs	r1, #1
 800397c:	fa01 f303 	lsl.w	r3, r1, r3
 8003980:	b25b      	sxtb	r3, r3
 8003982:	43db      	mvns	r3, r3
 8003984:	b25b      	sxtb	r3, r3
 8003986:	4013      	ands	r3, r2
 8003988:	b259      	sxtb	r1, r3
 800398a:	88fa      	ldrh	r2, [r7, #6]
 800398c:	4603      	mov	r3, r0
 800398e:	01db      	lsls	r3, r3, #7
 8003990:	4413      	add	r3, r2
 8003992:	b2c9      	uxtb	r1, r1
 8003994:	4a04      	ldr	r2, [pc, #16]	@ (80039a8 <SSD1306_DrawPixel+0xb8>)
 8003996:	54d1      	strb	r1, [r2, r3]
 8003998:	e000      	b.n	800399c <SSD1306_DrawPixel+0xac>
		return;
 800399a:	bf00      	nop
	}
}
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr
 80039a4:	20000650 	.word	0x20000650
 80039a8:	20000250 	.word	0x20000250

080039ac <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	460a      	mov	r2, r1
 80039b6:	80fb      	strh	r3, [r7, #6]
 80039b8:	4613      	mov	r3, r2
 80039ba:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80039bc:	4a05      	ldr	r2, [pc, #20]	@ (80039d4 <SSD1306_GotoXY+0x28>)
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80039c2:	4a04      	ldr	r2, [pc, #16]	@ (80039d4 <SSD1306_GotoXY+0x28>)
 80039c4:	88bb      	ldrh	r3, [r7, #4]
 80039c6:	8053      	strh	r3, [r2, #2]
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	20000650 	.word	0x20000650

080039d8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	6039      	str	r1, [r7, #0]
 80039e2:	71fb      	strb	r3, [r7, #7]
 80039e4:	4613      	mov	r3, r2
 80039e6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80039e8:	4b39      	ldr	r3, [pc, #228]	@ (8003ad0 <SSD1306_Putc+0xf8>)
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	4413      	add	r3, r2
	if (
 80039f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80039f6:	dc07      	bgt.n	8003a08 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80039f8:	4b35      	ldr	r3, [pc, #212]	@ (8003ad0 <SSD1306_Putc+0xf8>)
 80039fa:	885b      	ldrh	r3, [r3, #2]
 80039fc:	461a      	mov	r2, r3
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	785b      	ldrb	r3, [r3, #1]
 8003a02:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003a04:	2b3f      	cmp	r3, #63	@ 0x3f
 8003a06:	dd01      	ble.n	8003a0c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e05d      	b.n	8003ac8 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	e04b      	b.n	8003aaa <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	3b20      	subs	r3, #32
 8003a1a:	6839      	ldr	r1, [r7, #0]
 8003a1c:	7849      	ldrb	r1, [r1, #1]
 8003a1e:	fb01 f303 	mul.w	r3, r1, r3
 8003a22:	4619      	mov	r1, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	440b      	add	r3, r1
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	4413      	add	r3, r2
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003a30:	2300      	movs	r3, #0
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	e030      	b.n	8003a98 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d010      	beq.n	8003a68 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003a46:	4b22      	ldr	r3, [pc, #136]	@ (8003ad0 <SSD1306_Putc+0xf8>)
 8003a48:	881a      	ldrh	r2, [r3, #0]
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	4413      	add	r3, r2
 8003a50:	b298      	uxth	r0, r3
 8003a52:	4b1f      	ldr	r3, [pc, #124]	@ (8003ad0 <SSD1306_Putc+0xf8>)
 8003a54:	885a      	ldrh	r2, [r3, #2]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	79ba      	ldrb	r2, [r7, #6]
 8003a60:	4619      	mov	r1, r3
 8003a62:	f7ff ff45 	bl	80038f0 <SSD1306_DrawPixel>
 8003a66:	e014      	b.n	8003a92 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003a68:	4b19      	ldr	r3, [pc, #100]	@ (8003ad0 <SSD1306_Putc+0xf8>)
 8003a6a:	881a      	ldrh	r2, [r3, #0]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	4413      	add	r3, r2
 8003a72:	b298      	uxth	r0, r3
 8003a74:	4b16      	ldr	r3, [pc, #88]	@ (8003ad0 <SSD1306_Putc+0xf8>)
 8003a76:	885a      	ldrh	r2, [r3, #2]
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	b299      	uxth	r1, r3
 8003a80:	79bb      	ldrb	r3, [r7, #6]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	bf0c      	ite	eq
 8003a86:	2301      	moveq	r3, #1
 8003a88:	2300      	movne	r3, #0
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	f7ff ff2f 	bl	80038f0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	3301      	adds	r3, #1
 8003a96:	613b      	str	r3, [r7, #16]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d3c8      	bcc.n	8003a36 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	785b      	ldrb	r3, [r3, #1]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d3ad      	bcc.n	8003a12 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003ab6:	4b06      	ldr	r3, [pc, #24]	@ (8003ad0 <SSD1306_Putc+0xf8>)
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	7812      	ldrb	r2, [r2, #0]
 8003abe:	4413      	add	r3, r2
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	4b03      	ldr	r3, [pc, #12]	@ (8003ad0 <SSD1306_Putc+0xf8>)
 8003ac4:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20000650 	.word	0x20000650

08003ad4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8003ae2:	e012      	b.n	8003b0a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	79fa      	ldrb	r2, [r7, #7]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff ff73 	bl	80039d8 <SSD1306_Putc>
 8003af2:	4603      	mov	r3, r0
 8003af4:	461a      	mov	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d002      	beq.n	8003b04 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	e008      	b.n	8003b16 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	3301      	adds	r3, #1
 8003b08:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1e8      	bne.n	8003ae4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	781b      	ldrb	r3, [r3, #0]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8003b26:	4b07      	ldr	r3, [pc, #28]	@ (8003b44 <ssd1306_I2C_Init+0x24>)
 8003b28:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003b2a:	e002      	b.n	8003b32 <ssd1306_I2C_Init+0x12>
		p--;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1f9      	bne.n	8003b2c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003b38:	bf00      	nop
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr
 8003b44:	0003d090 	.word	0x0003d090

08003b48 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b4c:	b089      	sub	sp, #36	@ 0x24
 8003b4e:	af02      	add	r7, sp, #8
 8003b50:	603a      	str	r2, [r7, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	4603      	mov	r3, r0
 8003b56:	71fb      	strb	r3, [r7, #7]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	71bb      	strb	r3, [r7, #6]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	80bb      	strh	r3, [r7, #4]
 8003b60:	466b      	mov	r3, sp
 8003b62:	461e      	mov	r6, r3
	uint8_t dt[count + 1];
 8003b64:	88bb      	ldrh	r3, [r7, #4]
 8003b66:	1c59      	adds	r1, r3, #1
 8003b68:	1e4b      	subs	r3, r1, #1
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	460a      	mov	r2, r1
 8003b6e:	2300      	movs	r3, #0
 8003b70:	4690      	mov	r8, r2
 8003b72:	4699      	mov	r9, r3
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b88:	460a      	mov	r2, r1
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	4614      	mov	r4, r2
 8003b8e:	461d      	mov	r5, r3
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	00eb      	lsls	r3, r5, #3
 8003b9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b9e:	00e2      	lsls	r2, r4, #3
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	3307      	adds	r3, #7
 8003ba4:	08db      	lsrs	r3, r3, #3
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	ebad 0d03 	sub.w	sp, sp, r3
 8003bac:	ab02      	add	r3, sp, #8
 8003bae:	3300      	adds	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	79ba      	ldrb	r2, [r7, #6]
 8003bb6:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 8003bb8:	2301      	movs	r3, #1
 8003bba:	75fb      	strb	r3, [r7, #23]
 8003bbc:	e00a      	b.n	8003bd4 <ssd1306_I2C_WriteMulti+0x8c>
		dt[i] = data[i-1];
 8003bbe:	7dfb      	ldrb	r3, [r7, #23]
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	441a      	add	r2, r3
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
 8003bc8:	7811      	ldrb	r1, [r2, #0]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8003bce:	7dfb      	ldrb	r3, [r7, #23]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	75fb      	strb	r3, [r7, #23]
 8003bd4:	7dfb      	ldrb	r3, [r7, #23]
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	88ba      	ldrh	r2, [r7, #4]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d2ef      	bcs.n	8003bbe <ssd1306_I2C_WriteMulti+0x76>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	b299      	uxth	r1, r3
 8003be2:	88bb      	ldrh	r3, [r7, #4]
 8003be4:	220a      	movs	r2, #10
 8003be6:	9200      	str	r2, [sp, #0]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4804      	ldr	r0, [pc, #16]	@ (8003bfc <ssd1306_I2C_WriteMulti+0xb4>)
 8003bec:	f7fd fddc 	bl	80017a8 <HAL_I2C_Master_Transmit>
 8003bf0:	46b5      	mov	sp, r6
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003bfc:	200001fc 	.word	0x200001fc

08003c00 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af02      	add	r7, sp, #8
 8003c06:	4603      	mov	r3, r0
 8003c08:	71fb      	strb	r3, [r7, #7]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	71bb      	strb	r3, [r7, #6]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8003c12:	79bb      	ldrb	r3, [r7, #6]
 8003c14:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8003c16:	797b      	ldrb	r3, [r7, #5]
 8003c18:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	b299      	uxth	r1, r3
 8003c1e:	f107 020c 	add.w	r2, r7, #12
 8003c22:	230a      	movs	r3, #10
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	2302      	movs	r3, #2
 8003c28:	4803      	ldr	r0, [pc, #12]	@ (8003c38 <ssd1306_I2C_Write+0x38>)
 8003c2a:	f7fd fdbd 	bl	80017a8 <HAL_I2C_Master_Transmit>
}
 8003c2e:	bf00      	nop
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	200001fc 	.word	0x200001fc

08003c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003c42:	4b15      	ldr	r3, [pc, #84]	@ (8003c98 <HAL_MspInit+0x5c>)
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	4a14      	ldr	r2, [pc, #80]	@ (8003c98 <HAL_MspInit+0x5c>)
 8003c48:	f043 0301 	orr.w	r3, r3, #1
 8003c4c:	6193      	str	r3, [r2, #24]
 8003c4e:	4b12      	ldr	r3, [pc, #72]	@ (8003c98 <HAL_MspInit+0x5c>)
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	60bb      	str	r3, [r7, #8]
 8003c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003c98 <HAL_MspInit+0x5c>)
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	4a0e      	ldr	r2, [pc, #56]	@ (8003c98 <HAL_MspInit+0x5c>)
 8003c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c64:	61d3      	str	r3, [r2, #28]
 8003c66:	4b0c      	ldr	r3, [pc, #48]	@ (8003c98 <HAL_MspInit+0x5c>)
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c6e:	607b      	str	r3, [r7, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003c72:	4b0a      	ldr	r3, [pc, #40]	@ (8003c9c <HAL_MspInit+0x60>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	4a04      	ldr	r2, [pc, #16]	@ (8003c9c <HAL_MspInit+0x60>)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	40010000 	.word	0x40010000

08003ca0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca8:	f107 0310 	add.w	r3, r7, #16
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	605a      	str	r2, [r3, #4]
 8003cb2:	609a      	str	r2, [r3, #8]
 8003cb4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a15      	ldr	r2, [pc, #84]	@ (8003d10 <HAL_I2C_MspInit+0x70>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d123      	bne.n	8003d08 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cc0:	4b14      	ldr	r3, [pc, #80]	@ (8003d14 <HAL_I2C_MspInit+0x74>)
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	4a13      	ldr	r2, [pc, #76]	@ (8003d14 <HAL_I2C_MspInit+0x74>)
 8003cc6:	f043 0308 	orr.w	r3, r3, #8
 8003cca:	6193      	str	r3, [r2, #24]
 8003ccc:	4b11      	ldr	r3, [pc, #68]	@ (8003d14 <HAL_I2C_MspInit+0x74>)
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cd8:	23c0      	movs	r3, #192	@ 0xc0
 8003cda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cdc:	2312      	movs	r3, #18
 8003cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ce4:	f107 0310 	add.w	r3, r7, #16
 8003ce8:	4619      	mov	r1, r3
 8003cea:	480b      	ldr	r0, [pc, #44]	@ (8003d18 <HAL_I2C_MspInit+0x78>)
 8003cec:	f7fd fa94 	bl	8001218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cf0:	4b08      	ldr	r3, [pc, #32]	@ (8003d14 <HAL_I2C_MspInit+0x74>)
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	4a07      	ldr	r2, [pc, #28]	@ (8003d14 <HAL_I2C_MspInit+0x74>)
 8003cf6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003cfa:	61d3      	str	r3, [r2, #28]
 8003cfc:	4b05      	ldr	r3, [pc, #20]	@ (8003d14 <HAL_I2C_MspInit+0x74>)
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003d08:	bf00      	nop
 8003d0a:	3720      	adds	r7, #32
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40005400 	.word	0x40005400
 8003d14:	40021000 	.word	0x40021000
 8003d18:	40010c00 	.word	0x40010c00

08003d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d20:	bf00      	nop
 8003d22:	e7fd      	b.n	8003d20 <NMI_Handler+0x4>

08003d24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d28:	bf00      	nop
 8003d2a:	e7fd      	b.n	8003d28 <HardFault_Handler+0x4>

08003d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d30:	bf00      	nop
 8003d32:	e7fd      	b.n	8003d30 <MemManage_Handler+0x4>

08003d34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d38:	bf00      	nop
 8003d3a:	e7fd      	b.n	8003d38 <BusFault_Handler+0x4>

08003d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d40:	bf00      	nop
 8003d42:	e7fd      	b.n	8003d40 <UsageFault_Handler+0x4>

08003d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d48:	bf00      	nop
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr

08003d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr

08003d5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr

08003d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d6c:	f7fd f930 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d70:	bf00      	nop
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  return 1;
 8003d78:	2301      	movs	r3, #1
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr

08003d82 <_kill>:

int _kill(int pid, int sig)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b082      	sub	sp, #8
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d8c:	f000 feb4 	bl	8004af8 <__errno>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2216      	movs	r2, #22
 8003d94:	601a      	str	r2, [r3, #0]
  return -1;
 8003d96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <_exit>:

void _exit (int status)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b082      	sub	sp, #8
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003daa:	f04f 31ff 	mov.w	r1, #4294967295
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff ffe7 	bl	8003d82 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003db4:	bf00      	nop
 8003db6:	e7fd      	b.n	8003db4 <_exit+0x12>

08003db8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	e00a      	b.n	8003de0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003dca:	f3af 8000 	nop.w
 8003dce:	4601      	mov	r1, r0
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	60ba      	str	r2, [r7, #8]
 8003dd6:	b2ca      	uxtb	r2, r1
 8003dd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	dbf0      	blt.n	8003dca <_read+0x12>
  }

  return len;
 8003de8:	687b      	ldr	r3, [r7, #4]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b086      	sub	sp, #24
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	e009      	b.n	8003e18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	60ba      	str	r2, [r7, #8]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	3301      	adds	r3, #1
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	dbf1      	blt.n	8003e04 <_write+0x12>
  }
  return len;
 8003e20:	687b      	ldr	r3, [r7, #4]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <_close>:

int _close(int file)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr

08003e40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e50:	605a      	str	r2, [r3, #4]
  return 0;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr

08003e5e <_isatty>:

int _isatty(int file)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e66:	2301      	movs	r3, #1
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr

08003e72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b085      	sub	sp, #20
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bc80      	pop	{r7}
 8003e88:	4770      	bx	lr
	...

08003e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e94:	4a14      	ldr	r2, [pc, #80]	@ (8003ee8 <_sbrk+0x5c>)
 8003e96:	4b15      	ldr	r3, [pc, #84]	@ (8003eec <_sbrk+0x60>)
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ea0:	4b13      	ldr	r3, [pc, #76]	@ (8003ef0 <_sbrk+0x64>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ea8:	4b11      	ldr	r3, [pc, #68]	@ (8003ef0 <_sbrk+0x64>)
 8003eaa:	4a12      	ldr	r2, [pc, #72]	@ (8003ef4 <_sbrk+0x68>)
 8003eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003eae:	4b10      	ldr	r3, [pc, #64]	@ (8003ef0 <_sbrk+0x64>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d207      	bcs.n	8003ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ebc:	f000 fe1c 	bl	8004af8 <__errno>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	220c      	movs	r2, #12
 8003ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eca:	e009      	b.n	8003ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ecc:	4b08      	ldr	r3, [pc, #32]	@ (8003ef0 <_sbrk+0x64>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ed2:	4b07      	ldr	r3, [pc, #28]	@ (8003ef0 <_sbrk+0x64>)
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4413      	add	r3, r2
 8003eda:	4a05      	ldr	r2, [pc, #20]	@ (8003ef0 <_sbrk+0x64>)
 8003edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ede:	68fb      	ldr	r3, [r7, #12]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20005000 	.word	0x20005000
 8003eec:	00000400 	.word	0x00000400
 8003ef0:	20000658 	.word	0x20000658
 8003ef4:	200007a8 	.word	0x200007a8

08003ef8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003efc:	bf00      	nop
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr

08003f04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f04:	f7ff fff8 	bl	8003ef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f08:	480b      	ldr	r0, [pc, #44]	@ (8003f38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003f0a:	490c      	ldr	r1, [pc, #48]	@ (8003f3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003f0c:	4a0c      	ldr	r2, [pc, #48]	@ (8003f40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f10:	e002      	b.n	8003f18 <LoopCopyDataInit>

08003f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f16:	3304      	adds	r3, #4

08003f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f1c:	d3f9      	bcc.n	8003f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f1e:	4a09      	ldr	r2, [pc, #36]	@ (8003f44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003f20:	4c09      	ldr	r4, [pc, #36]	@ (8003f48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f24:	e001      	b.n	8003f2a <LoopFillZerobss>

08003f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f28:	3204      	adds	r2, #4

08003f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f2c:	d3fb      	bcc.n	8003f26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f2e:	f000 fde9 	bl	8004b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f32:	f7ff fadf 	bl	80034f4 <main>
  bx lr
 8003f36:	4770      	bx	lr
  ldr r0, =_sdata
 8003f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f3c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003f40:	080082ac 	.word	0x080082ac
  ldr r2, =_sbss
 8003f44:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003f48:	200007a8 	.word	0x200007a8

08003f4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f4c:	e7fe      	b.n	8003f4c <ADC1_2_IRQHandler>

08003f4e <__cvt>:
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f54:	461d      	mov	r5, r3
 8003f56:	bfbb      	ittet	lt
 8003f58:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003f5c:	461d      	movlt	r5, r3
 8003f5e:	2300      	movge	r3, #0
 8003f60:	232d      	movlt	r3, #45	@ 0x2d
 8003f62:	b088      	sub	sp, #32
 8003f64:	4614      	mov	r4, r2
 8003f66:	bfb8      	it	lt
 8003f68:	4614      	movlt	r4, r2
 8003f6a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003f6c:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003f6e:	7013      	strb	r3, [r2, #0]
 8003f70:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003f72:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003f76:	f023 0820 	bic.w	r8, r3, #32
 8003f7a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003f7e:	d005      	beq.n	8003f8c <__cvt+0x3e>
 8003f80:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003f84:	d100      	bne.n	8003f88 <__cvt+0x3a>
 8003f86:	3601      	adds	r6, #1
 8003f88:	2302      	movs	r3, #2
 8003f8a:	e000      	b.n	8003f8e <__cvt+0x40>
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	aa07      	add	r2, sp, #28
 8003f90:	9204      	str	r2, [sp, #16]
 8003f92:	aa06      	add	r2, sp, #24
 8003f94:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003f98:	e9cd 3600 	strd	r3, r6, [sp]
 8003f9c:	4622      	mov	r2, r4
 8003f9e:	462b      	mov	r3, r5
 8003fa0:	f000 fe6e 	bl	8004c80 <_dtoa_r>
 8003fa4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003fa8:	4607      	mov	r7, r0
 8003faa:	d119      	bne.n	8003fe0 <__cvt+0x92>
 8003fac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003fae:	07db      	lsls	r3, r3, #31
 8003fb0:	d50e      	bpl.n	8003fd0 <__cvt+0x82>
 8003fb2:	eb00 0906 	add.w	r9, r0, r6
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	2300      	movs	r3, #0
 8003fba:	4620      	mov	r0, r4
 8003fbc:	4629      	mov	r1, r5
 8003fbe:	f7fc fcf3 	bl	80009a8 <__aeabi_dcmpeq>
 8003fc2:	b108      	cbz	r0, 8003fc8 <__cvt+0x7a>
 8003fc4:	f8cd 901c 	str.w	r9, [sp, #28]
 8003fc8:	2230      	movs	r2, #48	@ 0x30
 8003fca:	9b07      	ldr	r3, [sp, #28]
 8003fcc:	454b      	cmp	r3, r9
 8003fce:	d31e      	bcc.n	800400e <__cvt+0xc0>
 8003fd0:	4638      	mov	r0, r7
 8003fd2:	9b07      	ldr	r3, [sp, #28]
 8003fd4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003fd6:	1bdb      	subs	r3, r3, r7
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	b008      	add	sp, #32
 8003fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003fe4:	eb00 0906 	add.w	r9, r0, r6
 8003fe8:	d1e5      	bne.n	8003fb6 <__cvt+0x68>
 8003fea:	7803      	ldrb	r3, [r0, #0]
 8003fec:	2b30      	cmp	r3, #48	@ 0x30
 8003fee:	d10a      	bne.n	8004006 <__cvt+0xb8>
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	f7fc fcd6 	bl	80009a8 <__aeabi_dcmpeq>
 8003ffc:	b918      	cbnz	r0, 8004006 <__cvt+0xb8>
 8003ffe:	f1c6 0601 	rsb	r6, r6, #1
 8004002:	f8ca 6000 	str.w	r6, [sl]
 8004006:	f8da 3000 	ldr.w	r3, [sl]
 800400a:	4499      	add	r9, r3
 800400c:	e7d3      	b.n	8003fb6 <__cvt+0x68>
 800400e:	1c59      	adds	r1, r3, #1
 8004010:	9107      	str	r1, [sp, #28]
 8004012:	701a      	strb	r2, [r3, #0]
 8004014:	e7d9      	b.n	8003fca <__cvt+0x7c>

08004016 <__exponent>:
 8004016:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004018:	2900      	cmp	r1, #0
 800401a:	bfb6      	itet	lt
 800401c:	232d      	movlt	r3, #45	@ 0x2d
 800401e:	232b      	movge	r3, #43	@ 0x2b
 8004020:	4249      	neglt	r1, r1
 8004022:	2909      	cmp	r1, #9
 8004024:	7002      	strb	r2, [r0, #0]
 8004026:	7043      	strb	r3, [r0, #1]
 8004028:	dd29      	ble.n	800407e <__exponent+0x68>
 800402a:	f10d 0307 	add.w	r3, sp, #7
 800402e:	461d      	mov	r5, r3
 8004030:	270a      	movs	r7, #10
 8004032:	fbb1 f6f7 	udiv	r6, r1, r7
 8004036:	461a      	mov	r2, r3
 8004038:	fb07 1416 	mls	r4, r7, r6, r1
 800403c:	3430      	adds	r4, #48	@ 0x30
 800403e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004042:	460c      	mov	r4, r1
 8004044:	2c63      	cmp	r4, #99	@ 0x63
 8004046:	4631      	mov	r1, r6
 8004048:	f103 33ff 	add.w	r3, r3, #4294967295
 800404c:	dcf1      	bgt.n	8004032 <__exponent+0x1c>
 800404e:	3130      	adds	r1, #48	@ 0x30
 8004050:	1e94      	subs	r4, r2, #2
 8004052:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004056:	4623      	mov	r3, r4
 8004058:	1c41      	adds	r1, r0, #1
 800405a:	42ab      	cmp	r3, r5
 800405c:	d30a      	bcc.n	8004074 <__exponent+0x5e>
 800405e:	f10d 0309 	add.w	r3, sp, #9
 8004062:	1a9b      	subs	r3, r3, r2
 8004064:	42ac      	cmp	r4, r5
 8004066:	bf88      	it	hi
 8004068:	2300      	movhi	r3, #0
 800406a:	3302      	adds	r3, #2
 800406c:	4403      	add	r3, r0
 800406e:	1a18      	subs	r0, r3, r0
 8004070:	b003      	add	sp, #12
 8004072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004074:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004078:	f801 6f01 	strb.w	r6, [r1, #1]!
 800407c:	e7ed      	b.n	800405a <__exponent+0x44>
 800407e:	2330      	movs	r3, #48	@ 0x30
 8004080:	3130      	adds	r1, #48	@ 0x30
 8004082:	7083      	strb	r3, [r0, #2]
 8004084:	70c1      	strb	r1, [r0, #3]
 8004086:	1d03      	adds	r3, r0, #4
 8004088:	e7f1      	b.n	800406e <__exponent+0x58>
	...

0800408c <_printf_float>:
 800408c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004090:	b091      	sub	sp, #68	@ 0x44
 8004092:	460c      	mov	r4, r1
 8004094:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004098:	4616      	mov	r6, r2
 800409a:	461f      	mov	r7, r3
 800409c:	4605      	mov	r5, r0
 800409e:	f000 fce1 	bl	8004a64 <_localeconv_r>
 80040a2:	6803      	ldr	r3, [r0, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	9308      	str	r3, [sp, #32]
 80040a8:	f7fc f852 	bl	8000150 <strlen>
 80040ac:	2300      	movs	r3, #0
 80040ae:	930e      	str	r3, [sp, #56]	@ 0x38
 80040b0:	f8d8 3000 	ldr.w	r3, [r8]
 80040b4:	9009      	str	r0, [sp, #36]	@ 0x24
 80040b6:	3307      	adds	r3, #7
 80040b8:	f023 0307 	bic.w	r3, r3, #7
 80040bc:	f103 0208 	add.w	r2, r3, #8
 80040c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80040c4:	f8d4 b000 	ldr.w	fp, [r4]
 80040c8:	f8c8 2000 	str.w	r2, [r8]
 80040cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80040d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80040d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80040d6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80040da:	f04f 32ff 	mov.w	r2, #4294967295
 80040de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80040e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80040e6:	4b9c      	ldr	r3, [pc, #624]	@ (8004358 <_printf_float+0x2cc>)
 80040e8:	f7fc fc90 	bl	8000a0c <__aeabi_dcmpun>
 80040ec:	bb70      	cbnz	r0, 800414c <_printf_float+0xc0>
 80040ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80040f2:	f04f 32ff 	mov.w	r2, #4294967295
 80040f6:	4b98      	ldr	r3, [pc, #608]	@ (8004358 <_printf_float+0x2cc>)
 80040f8:	f7fc fc6a 	bl	80009d0 <__aeabi_dcmple>
 80040fc:	bb30      	cbnz	r0, 800414c <_printf_float+0xc0>
 80040fe:	2200      	movs	r2, #0
 8004100:	2300      	movs	r3, #0
 8004102:	4640      	mov	r0, r8
 8004104:	4649      	mov	r1, r9
 8004106:	f7fc fc59 	bl	80009bc <__aeabi_dcmplt>
 800410a:	b110      	cbz	r0, 8004112 <_printf_float+0x86>
 800410c:	232d      	movs	r3, #45	@ 0x2d
 800410e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004112:	4a92      	ldr	r2, [pc, #584]	@ (800435c <_printf_float+0x2d0>)
 8004114:	4b92      	ldr	r3, [pc, #584]	@ (8004360 <_printf_float+0x2d4>)
 8004116:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800411a:	bf8c      	ite	hi
 800411c:	4690      	movhi	r8, r2
 800411e:	4698      	movls	r8, r3
 8004120:	2303      	movs	r3, #3
 8004122:	f04f 0900 	mov.w	r9, #0
 8004126:	6123      	str	r3, [r4, #16]
 8004128:	f02b 0304 	bic.w	r3, fp, #4
 800412c:	6023      	str	r3, [r4, #0]
 800412e:	4633      	mov	r3, r6
 8004130:	4621      	mov	r1, r4
 8004132:	4628      	mov	r0, r5
 8004134:	9700      	str	r7, [sp, #0]
 8004136:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004138:	f000 f9d4 	bl	80044e4 <_printf_common>
 800413c:	3001      	adds	r0, #1
 800413e:	f040 8090 	bne.w	8004262 <_printf_float+0x1d6>
 8004142:	f04f 30ff 	mov.w	r0, #4294967295
 8004146:	b011      	add	sp, #68	@ 0x44
 8004148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800414c:	4642      	mov	r2, r8
 800414e:	464b      	mov	r3, r9
 8004150:	4640      	mov	r0, r8
 8004152:	4649      	mov	r1, r9
 8004154:	f7fc fc5a 	bl	8000a0c <__aeabi_dcmpun>
 8004158:	b148      	cbz	r0, 800416e <_printf_float+0xe2>
 800415a:	464b      	mov	r3, r9
 800415c:	2b00      	cmp	r3, #0
 800415e:	bfb8      	it	lt
 8004160:	232d      	movlt	r3, #45	@ 0x2d
 8004162:	4a80      	ldr	r2, [pc, #512]	@ (8004364 <_printf_float+0x2d8>)
 8004164:	bfb8      	it	lt
 8004166:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800416a:	4b7f      	ldr	r3, [pc, #508]	@ (8004368 <_printf_float+0x2dc>)
 800416c:	e7d3      	b.n	8004116 <_printf_float+0x8a>
 800416e:	6863      	ldr	r3, [r4, #4]
 8004170:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	d13f      	bne.n	80041f8 <_printf_float+0x16c>
 8004178:	2306      	movs	r3, #6
 800417a:	6063      	str	r3, [r4, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004182:	6023      	str	r3, [r4, #0]
 8004184:	9206      	str	r2, [sp, #24]
 8004186:	aa0e      	add	r2, sp, #56	@ 0x38
 8004188:	e9cd a204 	strd	sl, r2, [sp, #16]
 800418c:	aa0d      	add	r2, sp, #52	@ 0x34
 800418e:	9203      	str	r2, [sp, #12]
 8004190:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004194:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004198:	6863      	ldr	r3, [r4, #4]
 800419a:	4642      	mov	r2, r8
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	4628      	mov	r0, r5
 80041a0:	464b      	mov	r3, r9
 80041a2:	910a      	str	r1, [sp, #40]	@ 0x28
 80041a4:	f7ff fed3 	bl	8003f4e <__cvt>
 80041a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80041aa:	4680      	mov	r8, r0
 80041ac:	2947      	cmp	r1, #71	@ 0x47
 80041ae:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80041b0:	d128      	bne.n	8004204 <_printf_float+0x178>
 80041b2:	1cc8      	adds	r0, r1, #3
 80041b4:	db02      	blt.n	80041bc <_printf_float+0x130>
 80041b6:	6863      	ldr	r3, [r4, #4]
 80041b8:	4299      	cmp	r1, r3
 80041ba:	dd40      	ble.n	800423e <_printf_float+0x1b2>
 80041bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80041c0:	fa5f fa8a 	uxtb.w	sl, sl
 80041c4:	4652      	mov	r2, sl
 80041c6:	3901      	subs	r1, #1
 80041c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80041cc:	910d      	str	r1, [sp, #52]	@ 0x34
 80041ce:	f7ff ff22 	bl	8004016 <__exponent>
 80041d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80041d4:	4681      	mov	r9, r0
 80041d6:	1813      	adds	r3, r2, r0
 80041d8:	2a01      	cmp	r2, #1
 80041da:	6123      	str	r3, [r4, #16]
 80041dc:	dc02      	bgt.n	80041e4 <_printf_float+0x158>
 80041de:	6822      	ldr	r2, [r4, #0]
 80041e0:	07d2      	lsls	r2, r2, #31
 80041e2:	d501      	bpl.n	80041e8 <_printf_float+0x15c>
 80041e4:	3301      	adds	r3, #1
 80041e6:	6123      	str	r3, [r4, #16]
 80041e8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d09e      	beq.n	800412e <_printf_float+0xa2>
 80041f0:	232d      	movs	r3, #45	@ 0x2d
 80041f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041f6:	e79a      	b.n	800412e <_printf_float+0xa2>
 80041f8:	2947      	cmp	r1, #71	@ 0x47
 80041fa:	d1bf      	bne.n	800417c <_printf_float+0xf0>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1bd      	bne.n	800417c <_printf_float+0xf0>
 8004200:	2301      	movs	r3, #1
 8004202:	e7ba      	b.n	800417a <_printf_float+0xee>
 8004204:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004208:	d9dc      	bls.n	80041c4 <_printf_float+0x138>
 800420a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800420e:	d118      	bne.n	8004242 <_printf_float+0x1b6>
 8004210:	2900      	cmp	r1, #0
 8004212:	6863      	ldr	r3, [r4, #4]
 8004214:	dd0b      	ble.n	800422e <_printf_float+0x1a2>
 8004216:	6121      	str	r1, [r4, #16]
 8004218:	b913      	cbnz	r3, 8004220 <_printf_float+0x194>
 800421a:	6822      	ldr	r2, [r4, #0]
 800421c:	07d0      	lsls	r0, r2, #31
 800421e:	d502      	bpl.n	8004226 <_printf_float+0x19a>
 8004220:	3301      	adds	r3, #1
 8004222:	440b      	add	r3, r1
 8004224:	6123      	str	r3, [r4, #16]
 8004226:	f04f 0900 	mov.w	r9, #0
 800422a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800422c:	e7dc      	b.n	80041e8 <_printf_float+0x15c>
 800422e:	b913      	cbnz	r3, 8004236 <_printf_float+0x1aa>
 8004230:	6822      	ldr	r2, [r4, #0]
 8004232:	07d2      	lsls	r2, r2, #31
 8004234:	d501      	bpl.n	800423a <_printf_float+0x1ae>
 8004236:	3302      	adds	r3, #2
 8004238:	e7f4      	b.n	8004224 <_printf_float+0x198>
 800423a:	2301      	movs	r3, #1
 800423c:	e7f2      	b.n	8004224 <_printf_float+0x198>
 800423e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004242:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004244:	4299      	cmp	r1, r3
 8004246:	db05      	blt.n	8004254 <_printf_float+0x1c8>
 8004248:	6823      	ldr	r3, [r4, #0]
 800424a:	6121      	str	r1, [r4, #16]
 800424c:	07d8      	lsls	r0, r3, #31
 800424e:	d5ea      	bpl.n	8004226 <_printf_float+0x19a>
 8004250:	1c4b      	adds	r3, r1, #1
 8004252:	e7e7      	b.n	8004224 <_printf_float+0x198>
 8004254:	2900      	cmp	r1, #0
 8004256:	bfcc      	ite	gt
 8004258:	2201      	movgt	r2, #1
 800425a:	f1c1 0202 	rsble	r2, r1, #2
 800425e:	4413      	add	r3, r2
 8004260:	e7e0      	b.n	8004224 <_printf_float+0x198>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	055a      	lsls	r2, r3, #21
 8004266:	d407      	bmi.n	8004278 <_printf_float+0x1ec>
 8004268:	6923      	ldr	r3, [r4, #16]
 800426a:	4642      	mov	r2, r8
 800426c:	4631      	mov	r1, r6
 800426e:	4628      	mov	r0, r5
 8004270:	47b8      	blx	r7
 8004272:	3001      	adds	r0, #1
 8004274:	d12b      	bne.n	80042ce <_printf_float+0x242>
 8004276:	e764      	b.n	8004142 <_printf_float+0xb6>
 8004278:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800427c:	f240 80dc 	bls.w	8004438 <_printf_float+0x3ac>
 8004280:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004284:	2200      	movs	r2, #0
 8004286:	2300      	movs	r3, #0
 8004288:	f7fc fb8e 	bl	80009a8 <__aeabi_dcmpeq>
 800428c:	2800      	cmp	r0, #0
 800428e:	d033      	beq.n	80042f8 <_printf_float+0x26c>
 8004290:	2301      	movs	r3, #1
 8004292:	4631      	mov	r1, r6
 8004294:	4628      	mov	r0, r5
 8004296:	4a35      	ldr	r2, [pc, #212]	@ (800436c <_printf_float+0x2e0>)
 8004298:	47b8      	blx	r7
 800429a:	3001      	adds	r0, #1
 800429c:	f43f af51 	beq.w	8004142 <_printf_float+0xb6>
 80042a0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80042a4:	4543      	cmp	r3, r8
 80042a6:	db02      	blt.n	80042ae <_printf_float+0x222>
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	07d8      	lsls	r0, r3, #31
 80042ac:	d50f      	bpl.n	80042ce <_printf_float+0x242>
 80042ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80042b2:	4631      	mov	r1, r6
 80042b4:	4628      	mov	r0, r5
 80042b6:	47b8      	blx	r7
 80042b8:	3001      	adds	r0, #1
 80042ba:	f43f af42 	beq.w	8004142 <_printf_float+0xb6>
 80042be:	f04f 0900 	mov.w	r9, #0
 80042c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80042c6:	f104 0a1a 	add.w	sl, r4, #26
 80042ca:	45c8      	cmp	r8, r9
 80042cc:	dc09      	bgt.n	80042e2 <_printf_float+0x256>
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	079b      	lsls	r3, r3, #30
 80042d2:	f100 8102 	bmi.w	80044da <_printf_float+0x44e>
 80042d6:	68e0      	ldr	r0, [r4, #12]
 80042d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80042da:	4298      	cmp	r0, r3
 80042dc:	bfb8      	it	lt
 80042de:	4618      	movlt	r0, r3
 80042e0:	e731      	b.n	8004146 <_printf_float+0xba>
 80042e2:	2301      	movs	r3, #1
 80042e4:	4652      	mov	r2, sl
 80042e6:	4631      	mov	r1, r6
 80042e8:	4628      	mov	r0, r5
 80042ea:	47b8      	blx	r7
 80042ec:	3001      	adds	r0, #1
 80042ee:	f43f af28 	beq.w	8004142 <_printf_float+0xb6>
 80042f2:	f109 0901 	add.w	r9, r9, #1
 80042f6:	e7e8      	b.n	80042ca <_printf_float+0x23e>
 80042f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	dc38      	bgt.n	8004370 <_printf_float+0x2e4>
 80042fe:	2301      	movs	r3, #1
 8004300:	4631      	mov	r1, r6
 8004302:	4628      	mov	r0, r5
 8004304:	4a19      	ldr	r2, [pc, #100]	@ (800436c <_printf_float+0x2e0>)
 8004306:	47b8      	blx	r7
 8004308:	3001      	adds	r0, #1
 800430a:	f43f af1a 	beq.w	8004142 <_printf_float+0xb6>
 800430e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004312:	ea59 0303 	orrs.w	r3, r9, r3
 8004316:	d102      	bne.n	800431e <_printf_float+0x292>
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	07d9      	lsls	r1, r3, #31
 800431c:	d5d7      	bpl.n	80042ce <_printf_float+0x242>
 800431e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004322:	4631      	mov	r1, r6
 8004324:	4628      	mov	r0, r5
 8004326:	47b8      	blx	r7
 8004328:	3001      	adds	r0, #1
 800432a:	f43f af0a 	beq.w	8004142 <_printf_float+0xb6>
 800432e:	f04f 0a00 	mov.w	sl, #0
 8004332:	f104 0b1a 	add.w	fp, r4, #26
 8004336:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004338:	425b      	negs	r3, r3
 800433a:	4553      	cmp	r3, sl
 800433c:	dc01      	bgt.n	8004342 <_printf_float+0x2b6>
 800433e:	464b      	mov	r3, r9
 8004340:	e793      	b.n	800426a <_printf_float+0x1de>
 8004342:	2301      	movs	r3, #1
 8004344:	465a      	mov	r2, fp
 8004346:	4631      	mov	r1, r6
 8004348:	4628      	mov	r0, r5
 800434a:	47b8      	blx	r7
 800434c:	3001      	adds	r0, #1
 800434e:	f43f aef8 	beq.w	8004142 <_printf_float+0xb6>
 8004352:	f10a 0a01 	add.w	sl, sl, #1
 8004356:	e7ee      	b.n	8004336 <_printf_float+0x2aa>
 8004358:	7fefffff 	.word	0x7fefffff
 800435c:	08007f2c 	.word	0x08007f2c
 8004360:	08007f28 	.word	0x08007f28
 8004364:	08007f34 	.word	0x08007f34
 8004368:	08007f30 	.word	0x08007f30
 800436c:	08007f38 	.word	0x08007f38
 8004370:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004372:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004376:	4553      	cmp	r3, sl
 8004378:	bfa8      	it	ge
 800437a:	4653      	movge	r3, sl
 800437c:	2b00      	cmp	r3, #0
 800437e:	4699      	mov	r9, r3
 8004380:	dc36      	bgt.n	80043f0 <_printf_float+0x364>
 8004382:	f04f 0b00 	mov.w	fp, #0
 8004386:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800438a:	f104 021a 	add.w	r2, r4, #26
 800438e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004390:	930a      	str	r3, [sp, #40]	@ 0x28
 8004392:	eba3 0309 	sub.w	r3, r3, r9
 8004396:	455b      	cmp	r3, fp
 8004398:	dc31      	bgt.n	80043fe <_printf_float+0x372>
 800439a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800439c:	459a      	cmp	sl, r3
 800439e:	dc3a      	bgt.n	8004416 <_printf_float+0x38a>
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	07da      	lsls	r2, r3, #31
 80043a4:	d437      	bmi.n	8004416 <_printf_float+0x38a>
 80043a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80043a8:	ebaa 0903 	sub.w	r9, sl, r3
 80043ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80043ae:	ebaa 0303 	sub.w	r3, sl, r3
 80043b2:	4599      	cmp	r9, r3
 80043b4:	bfa8      	it	ge
 80043b6:	4699      	movge	r9, r3
 80043b8:	f1b9 0f00 	cmp.w	r9, #0
 80043bc:	dc33      	bgt.n	8004426 <_printf_float+0x39a>
 80043be:	f04f 0800 	mov.w	r8, #0
 80043c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043c6:	f104 0b1a 	add.w	fp, r4, #26
 80043ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80043cc:	ebaa 0303 	sub.w	r3, sl, r3
 80043d0:	eba3 0309 	sub.w	r3, r3, r9
 80043d4:	4543      	cmp	r3, r8
 80043d6:	f77f af7a 	ble.w	80042ce <_printf_float+0x242>
 80043da:	2301      	movs	r3, #1
 80043dc:	465a      	mov	r2, fp
 80043de:	4631      	mov	r1, r6
 80043e0:	4628      	mov	r0, r5
 80043e2:	47b8      	blx	r7
 80043e4:	3001      	adds	r0, #1
 80043e6:	f43f aeac 	beq.w	8004142 <_printf_float+0xb6>
 80043ea:	f108 0801 	add.w	r8, r8, #1
 80043ee:	e7ec      	b.n	80043ca <_printf_float+0x33e>
 80043f0:	4642      	mov	r2, r8
 80043f2:	4631      	mov	r1, r6
 80043f4:	4628      	mov	r0, r5
 80043f6:	47b8      	blx	r7
 80043f8:	3001      	adds	r0, #1
 80043fa:	d1c2      	bne.n	8004382 <_printf_float+0x2f6>
 80043fc:	e6a1      	b.n	8004142 <_printf_float+0xb6>
 80043fe:	2301      	movs	r3, #1
 8004400:	4631      	mov	r1, r6
 8004402:	4628      	mov	r0, r5
 8004404:	920a      	str	r2, [sp, #40]	@ 0x28
 8004406:	47b8      	blx	r7
 8004408:	3001      	adds	r0, #1
 800440a:	f43f ae9a 	beq.w	8004142 <_printf_float+0xb6>
 800440e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004410:	f10b 0b01 	add.w	fp, fp, #1
 8004414:	e7bb      	b.n	800438e <_printf_float+0x302>
 8004416:	4631      	mov	r1, r6
 8004418:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800441c:	4628      	mov	r0, r5
 800441e:	47b8      	blx	r7
 8004420:	3001      	adds	r0, #1
 8004422:	d1c0      	bne.n	80043a6 <_printf_float+0x31a>
 8004424:	e68d      	b.n	8004142 <_printf_float+0xb6>
 8004426:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004428:	464b      	mov	r3, r9
 800442a:	4631      	mov	r1, r6
 800442c:	4628      	mov	r0, r5
 800442e:	4442      	add	r2, r8
 8004430:	47b8      	blx	r7
 8004432:	3001      	adds	r0, #1
 8004434:	d1c3      	bne.n	80043be <_printf_float+0x332>
 8004436:	e684      	b.n	8004142 <_printf_float+0xb6>
 8004438:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800443c:	f1ba 0f01 	cmp.w	sl, #1
 8004440:	dc01      	bgt.n	8004446 <_printf_float+0x3ba>
 8004442:	07db      	lsls	r3, r3, #31
 8004444:	d536      	bpl.n	80044b4 <_printf_float+0x428>
 8004446:	2301      	movs	r3, #1
 8004448:	4642      	mov	r2, r8
 800444a:	4631      	mov	r1, r6
 800444c:	4628      	mov	r0, r5
 800444e:	47b8      	blx	r7
 8004450:	3001      	adds	r0, #1
 8004452:	f43f ae76 	beq.w	8004142 <_printf_float+0xb6>
 8004456:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800445a:	4631      	mov	r1, r6
 800445c:	4628      	mov	r0, r5
 800445e:	47b8      	blx	r7
 8004460:	3001      	adds	r0, #1
 8004462:	f43f ae6e 	beq.w	8004142 <_printf_float+0xb6>
 8004466:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800446a:	2200      	movs	r2, #0
 800446c:	2300      	movs	r3, #0
 800446e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004472:	f7fc fa99 	bl	80009a8 <__aeabi_dcmpeq>
 8004476:	b9c0      	cbnz	r0, 80044aa <_printf_float+0x41e>
 8004478:	4653      	mov	r3, sl
 800447a:	f108 0201 	add.w	r2, r8, #1
 800447e:	4631      	mov	r1, r6
 8004480:	4628      	mov	r0, r5
 8004482:	47b8      	blx	r7
 8004484:	3001      	adds	r0, #1
 8004486:	d10c      	bne.n	80044a2 <_printf_float+0x416>
 8004488:	e65b      	b.n	8004142 <_printf_float+0xb6>
 800448a:	2301      	movs	r3, #1
 800448c:	465a      	mov	r2, fp
 800448e:	4631      	mov	r1, r6
 8004490:	4628      	mov	r0, r5
 8004492:	47b8      	blx	r7
 8004494:	3001      	adds	r0, #1
 8004496:	f43f ae54 	beq.w	8004142 <_printf_float+0xb6>
 800449a:	f108 0801 	add.w	r8, r8, #1
 800449e:	45d0      	cmp	r8, sl
 80044a0:	dbf3      	blt.n	800448a <_printf_float+0x3fe>
 80044a2:	464b      	mov	r3, r9
 80044a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80044a8:	e6e0      	b.n	800426c <_printf_float+0x1e0>
 80044aa:	f04f 0800 	mov.w	r8, #0
 80044ae:	f104 0b1a 	add.w	fp, r4, #26
 80044b2:	e7f4      	b.n	800449e <_printf_float+0x412>
 80044b4:	2301      	movs	r3, #1
 80044b6:	4642      	mov	r2, r8
 80044b8:	e7e1      	b.n	800447e <_printf_float+0x3f2>
 80044ba:	2301      	movs	r3, #1
 80044bc:	464a      	mov	r2, r9
 80044be:	4631      	mov	r1, r6
 80044c0:	4628      	mov	r0, r5
 80044c2:	47b8      	blx	r7
 80044c4:	3001      	adds	r0, #1
 80044c6:	f43f ae3c 	beq.w	8004142 <_printf_float+0xb6>
 80044ca:	f108 0801 	add.w	r8, r8, #1
 80044ce:	68e3      	ldr	r3, [r4, #12]
 80044d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80044d2:	1a5b      	subs	r3, r3, r1
 80044d4:	4543      	cmp	r3, r8
 80044d6:	dcf0      	bgt.n	80044ba <_printf_float+0x42e>
 80044d8:	e6fd      	b.n	80042d6 <_printf_float+0x24a>
 80044da:	f04f 0800 	mov.w	r8, #0
 80044de:	f104 0919 	add.w	r9, r4, #25
 80044e2:	e7f4      	b.n	80044ce <_printf_float+0x442>

080044e4 <_printf_common>:
 80044e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044e8:	4616      	mov	r6, r2
 80044ea:	4698      	mov	r8, r3
 80044ec:	688a      	ldr	r2, [r1, #8]
 80044ee:	690b      	ldr	r3, [r1, #16]
 80044f0:	4607      	mov	r7, r0
 80044f2:	4293      	cmp	r3, r2
 80044f4:	bfb8      	it	lt
 80044f6:	4613      	movlt	r3, r2
 80044f8:	6033      	str	r3, [r6, #0]
 80044fa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80044fe:	460c      	mov	r4, r1
 8004500:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004504:	b10a      	cbz	r2, 800450a <_printf_common+0x26>
 8004506:	3301      	adds	r3, #1
 8004508:	6033      	str	r3, [r6, #0]
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	0699      	lsls	r1, r3, #26
 800450e:	bf42      	ittt	mi
 8004510:	6833      	ldrmi	r3, [r6, #0]
 8004512:	3302      	addmi	r3, #2
 8004514:	6033      	strmi	r3, [r6, #0]
 8004516:	6825      	ldr	r5, [r4, #0]
 8004518:	f015 0506 	ands.w	r5, r5, #6
 800451c:	d106      	bne.n	800452c <_printf_common+0x48>
 800451e:	f104 0a19 	add.w	sl, r4, #25
 8004522:	68e3      	ldr	r3, [r4, #12]
 8004524:	6832      	ldr	r2, [r6, #0]
 8004526:	1a9b      	subs	r3, r3, r2
 8004528:	42ab      	cmp	r3, r5
 800452a:	dc2b      	bgt.n	8004584 <_printf_common+0xa0>
 800452c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004530:	6822      	ldr	r2, [r4, #0]
 8004532:	3b00      	subs	r3, #0
 8004534:	bf18      	it	ne
 8004536:	2301      	movne	r3, #1
 8004538:	0692      	lsls	r2, r2, #26
 800453a:	d430      	bmi.n	800459e <_printf_common+0xba>
 800453c:	4641      	mov	r1, r8
 800453e:	4638      	mov	r0, r7
 8004540:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004544:	47c8      	blx	r9
 8004546:	3001      	adds	r0, #1
 8004548:	d023      	beq.n	8004592 <_printf_common+0xae>
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	6922      	ldr	r2, [r4, #16]
 800454e:	f003 0306 	and.w	r3, r3, #6
 8004552:	2b04      	cmp	r3, #4
 8004554:	bf14      	ite	ne
 8004556:	2500      	movne	r5, #0
 8004558:	6833      	ldreq	r3, [r6, #0]
 800455a:	f04f 0600 	mov.w	r6, #0
 800455e:	bf08      	it	eq
 8004560:	68e5      	ldreq	r5, [r4, #12]
 8004562:	f104 041a 	add.w	r4, r4, #26
 8004566:	bf08      	it	eq
 8004568:	1aed      	subeq	r5, r5, r3
 800456a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800456e:	bf08      	it	eq
 8004570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004574:	4293      	cmp	r3, r2
 8004576:	bfc4      	itt	gt
 8004578:	1a9b      	subgt	r3, r3, r2
 800457a:	18ed      	addgt	r5, r5, r3
 800457c:	42b5      	cmp	r5, r6
 800457e:	d11a      	bne.n	80045b6 <_printf_common+0xd2>
 8004580:	2000      	movs	r0, #0
 8004582:	e008      	b.n	8004596 <_printf_common+0xb2>
 8004584:	2301      	movs	r3, #1
 8004586:	4652      	mov	r2, sl
 8004588:	4641      	mov	r1, r8
 800458a:	4638      	mov	r0, r7
 800458c:	47c8      	blx	r9
 800458e:	3001      	adds	r0, #1
 8004590:	d103      	bne.n	800459a <_printf_common+0xb6>
 8004592:	f04f 30ff 	mov.w	r0, #4294967295
 8004596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800459a:	3501      	adds	r5, #1
 800459c:	e7c1      	b.n	8004522 <_printf_common+0x3e>
 800459e:	2030      	movs	r0, #48	@ 0x30
 80045a0:	18e1      	adds	r1, r4, r3
 80045a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045ac:	4422      	add	r2, r4
 80045ae:	3302      	adds	r3, #2
 80045b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80045b4:	e7c2      	b.n	800453c <_printf_common+0x58>
 80045b6:	2301      	movs	r3, #1
 80045b8:	4622      	mov	r2, r4
 80045ba:	4641      	mov	r1, r8
 80045bc:	4638      	mov	r0, r7
 80045be:	47c8      	blx	r9
 80045c0:	3001      	adds	r0, #1
 80045c2:	d0e6      	beq.n	8004592 <_printf_common+0xae>
 80045c4:	3601      	adds	r6, #1
 80045c6:	e7d9      	b.n	800457c <_printf_common+0x98>

080045c8 <_printf_i>:
 80045c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045cc:	7e0f      	ldrb	r7, [r1, #24]
 80045ce:	4691      	mov	r9, r2
 80045d0:	2f78      	cmp	r7, #120	@ 0x78
 80045d2:	4680      	mov	r8, r0
 80045d4:	460c      	mov	r4, r1
 80045d6:	469a      	mov	sl, r3
 80045d8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80045da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80045de:	d807      	bhi.n	80045f0 <_printf_i+0x28>
 80045e0:	2f62      	cmp	r7, #98	@ 0x62
 80045e2:	d80a      	bhi.n	80045fa <_printf_i+0x32>
 80045e4:	2f00      	cmp	r7, #0
 80045e6:	f000 80d1 	beq.w	800478c <_printf_i+0x1c4>
 80045ea:	2f58      	cmp	r7, #88	@ 0x58
 80045ec:	f000 80b8 	beq.w	8004760 <_printf_i+0x198>
 80045f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80045f8:	e03a      	b.n	8004670 <_printf_i+0xa8>
 80045fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80045fe:	2b15      	cmp	r3, #21
 8004600:	d8f6      	bhi.n	80045f0 <_printf_i+0x28>
 8004602:	a101      	add	r1, pc, #4	@ (adr r1, 8004608 <_printf_i+0x40>)
 8004604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004608:	08004661 	.word	0x08004661
 800460c:	08004675 	.word	0x08004675
 8004610:	080045f1 	.word	0x080045f1
 8004614:	080045f1 	.word	0x080045f1
 8004618:	080045f1 	.word	0x080045f1
 800461c:	080045f1 	.word	0x080045f1
 8004620:	08004675 	.word	0x08004675
 8004624:	080045f1 	.word	0x080045f1
 8004628:	080045f1 	.word	0x080045f1
 800462c:	080045f1 	.word	0x080045f1
 8004630:	080045f1 	.word	0x080045f1
 8004634:	08004773 	.word	0x08004773
 8004638:	0800469f 	.word	0x0800469f
 800463c:	0800472d 	.word	0x0800472d
 8004640:	080045f1 	.word	0x080045f1
 8004644:	080045f1 	.word	0x080045f1
 8004648:	08004795 	.word	0x08004795
 800464c:	080045f1 	.word	0x080045f1
 8004650:	0800469f 	.word	0x0800469f
 8004654:	080045f1 	.word	0x080045f1
 8004658:	080045f1 	.word	0x080045f1
 800465c:	08004735 	.word	0x08004735
 8004660:	6833      	ldr	r3, [r6, #0]
 8004662:	1d1a      	adds	r2, r3, #4
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6032      	str	r2, [r6, #0]
 8004668:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800466c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004670:	2301      	movs	r3, #1
 8004672:	e09c      	b.n	80047ae <_printf_i+0x1e6>
 8004674:	6833      	ldr	r3, [r6, #0]
 8004676:	6820      	ldr	r0, [r4, #0]
 8004678:	1d19      	adds	r1, r3, #4
 800467a:	6031      	str	r1, [r6, #0]
 800467c:	0606      	lsls	r6, r0, #24
 800467e:	d501      	bpl.n	8004684 <_printf_i+0xbc>
 8004680:	681d      	ldr	r5, [r3, #0]
 8004682:	e003      	b.n	800468c <_printf_i+0xc4>
 8004684:	0645      	lsls	r5, r0, #25
 8004686:	d5fb      	bpl.n	8004680 <_printf_i+0xb8>
 8004688:	f9b3 5000 	ldrsh.w	r5, [r3]
 800468c:	2d00      	cmp	r5, #0
 800468e:	da03      	bge.n	8004698 <_printf_i+0xd0>
 8004690:	232d      	movs	r3, #45	@ 0x2d
 8004692:	426d      	negs	r5, r5
 8004694:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004698:	230a      	movs	r3, #10
 800469a:	4858      	ldr	r0, [pc, #352]	@ (80047fc <_printf_i+0x234>)
 800469c:	e011      	b.n	80046c2 <_printf_i+0xfa>
 800469e:	6821      	ldr	r1, [r4, #0]
 80046a0:	6833      	ldr	r3, [r6, #0]
 80046a2:	0608      	lsls	r0, r1, #24
 80046a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80046a8:	d402      	bmi.n	80046b0 <_printf_i+0xe8>
 80046aa:	0649      	lsls	r1, r1, #25
 80046ac:	bf48      	it	mi
 80046ae:	b2ad      	uxthmi	r5, r5
 80046b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80046b2:	6033      	str	r3, [r6, #0]
 80046b4:	bf14      	ite	ne
 80046b6:	230a      	movne	r3, #10
 80046b8:	2308      	moveq	r3, #8
 80046ba:	4850      	ldr	r0, [pc, #320]	@ (80047fc <_printf_i+0x234>)
 80046bc:	2100      	movs	r1, #0
 80046be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80046c2:	6866      	ldr	r6, [r4, #4]
 80046c4:	2e00      	cmp	r6, #0
 80046c6:	60a6      	str	r6, [r4, #8]
 80046c8:	db05      	blt.n	80046d6 <_printf_i+0x10e>
 80046ca:	6821      	ldr	r1, [r4, #0]
 80046cc:	432e      	orrs	r6, r5
 80046ce:	f021 0104 	bic.w	r1, r1, #4
 80046d2:	6021      	str	r1, [r4, #0]
 80046d4:	d04b      	beq.n	800476e <_printf_i+0x1a6>
 80046d6:	4616      	mov	r6, r2
 80046d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80046dc:	fb03 5711 	mls	r7, r3, r1, r5
 80046e0:	5dc7      	ldrb	r7, [r0, r7]
 80046e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046e6:	462f      	mov	r7, r5
 80046e8:	42bb      	cmp	r3, r7
 80046ea:	460d      	mov	r5, r1
 80046ec:	d9f4      	bls.n	80046d8 <_printf_i+0x110>
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	d10b      	bne.n	800470a <_printf_i+0x142>
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	07df      	lsls	r7, r3, #31
 80046f6:	d508      	bpl.n	800470a <_printf_i+0x142>
 80046f8:	6923      	ldr	r3, [r4, #16]
 80046fa:	6861      	ldr	r1, [r4, #4]
 80046fc:	4299      	cmp	r1, r3
 80046fe:	bfde      	ittt	le
 8004700:	2330      	movle	r3, #48	@ 0x30
 8004702:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004706:	f106 36ff 	addle.w	r6, r6, #4294967295
 800470a:	1b92      	subs	r2, r2, r6
 800470c:	6122      	str	r2, [r4, #16]
 800470e:	464b      	mov	r3, r9
 8004710:	4621      	mov	r1, r4
 8004712:	4640      	mov	r0, r8
 8004714:	f8cd a000 	str.w	sl, [sp]
 8004718:	aa03      	add	r2, sp, #12
 800471a:	f7ff fee3 	bl	80044e4 <_printf_common>
 800471e:	3001      	adds	r0, #1
 8004720:	d14a      	bne.n	80047b8 <_printf_i+0x1f0>
 8004722:	f04f 30ff 	mov.w	r0, #4294967295
 8004726:	b004      	add	sp, #16
 8004728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	f043 0320 	orr.w	r3, r3, #32
 8004732:	6023      	str	r3, [r4, #0]
 8004734:	2778      	movs	r7, #120	@ 0x78
 8004736:	4832      	ldr	r0, [pc, #200]	@ (8004800 <_printf_i+0x238>)
 8004738:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	6831      	ldr	r1, [r6, #0]
 8004740:	061f      	lsls	r7, r3, #24
 8004742:	f851 5b04 	ldr.w	r5, [r1], #4
 8004746:	d402      	bmi.n	800474e <_printf_i+0x186>
 8004748:	065f      	lsls	r7, r3, #25
 800474a:	bf48      	it	mi
 800474c:	b2ad      	uxthmi	r5, r5
 800474e:	6031      	str	r1, [r6, #0]
 8004750:	07d9      	lsls	r1, r3, #31
 8004752:	bf44      	itt	mi
 8004754:	f043 0320 	orrmi.w	r3, r3, #32
 8004758:	6023      	strmi	r3, [r4, #0]
 800475a:	b11d      	cbz	r5, 8004764 <_printf_i+0x19c>
 800475c:	2310      	movs	r3, #16
 800475e:	e7ad      	b.n	80046bc <_printf_i+0xf4>
 8004760:	4826      	ldr	r0, [pc, #152]	@ (80047fc <_printf_i+0x234>)
 8004762:	e7e9      	b.n	8004738 <_printf_i+0x170>
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	f023 0320 	bic.w	r3, r3, #32
 800476a:	6023      	str	r3, [r4, #0]
 800476c:	e7f6      	b.n	800475c <_printf_i+0x194>
 800476e:	4616      	mov	r6, r2
 8004770:	e7bd      	b.n	80046ee <_printf_i+0x126>
 8004772:	6833      	ldr	r3, [r6, #0]
 8004774:	6825      	ldr	r5, [r4, #0]
 8004776:	1d18      	adds	r0, r3, #4
 8004778:	6961      	ldr	r1, [r4, #20]
 800477a:	6030      	str	r0, [r6, #0]
 800477c:	062e      	lsls	r6, r5, #24
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	d501      	bpl.n	8004786 <_printf_i+0x1be>
 8004782:	6019      	str	r1, [r3, #0]
 8004784:	e002      	b.n	800478c <_printf_i+0x1c4>
 8004786:	0668      	lsls	r0, r5, #25
 8004788:	d5fb      	bpl.n	8004782 <_printf_i+0x1ba>
 800478a:	8019      	strh	r1, [r3, #0]
 800478c:	2300      	movs	r3, #0
 800478e:	4616      	mov	r6, r2
 8004790:	6123      	str	r3, [r4, #16]
 8004792:	e7bc      	b.n	800470e <_printf_i+0x146>
 8004794:	6833      	ldr	r3, [r6, #0]
 8004796:	2100      	movs	r1, #0
 8004798:	1d1a      	adds	r2, r3, #4
 800479a:	6032      	str	r2, [r6, #0]
 800479c:	681e      	ldr	r6, [r3, #0]
 800479e:	6862      	ldr	r2, [r4, #4]
 80047a0:	4630      	mov	r0, r6
 80047a2:	f000 f9d6 	bl	8004b52 <memchr>
 80047a6:	b108      	cbz	r0, 80047ac <_printf_i+0x1e4>
 80047a8:	1b80      	subs	r0, r0, r6
 80047aa:	6060      	str	r0, [r4, #4]
 80047ac:	6863      	ldr	r3, [r4, #4]
 80047ae:	6123      	str	r3, [r4, #16]
 80047b0:	2300      	movs	r3, #0
 80047b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047b6:	e7aa      	b.n	800470e <_printf_i+0x146>
 80047b8:	4632      	mov	r2, r6
 80047ba:	4649      	mov	r1, r9
 80047bc:	4640      	mov	r0, r8
 80047be:	6923      	ldr	r3, [r4, #16]
 80047c0:	47d0      	blx	sl
 80047c2:	3001      	adds	r0, #1
 80047c4:	d0ad      	beq.n	8004722 <_printf_i+0x15a>
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	079b      	lsls	r3, r3, #30
 80047ca:	d413      	bmi.n	80047f4 <_printf_i+0x22c>
 80047cc:	68e0      	ldr	r0, [r4, #12]
 80047ce:	9b03      	ldr	r3, [sp, #12]
 80047d0:	4298      	cmp	r0, r3
 80047d2:	bfb8      	it	lt
 80047d4:	4618      	movlt	r0, r3
 80047d6:	e7a6      	b.n	8004726 <_printf_i+0x15e>
 80047d8:	2301      	movs	r3, #1
 80047da:	4632      	mov	r2, r6
 80047dc:	4649      	mov	r1, r9
 80047de:	4640      	mov	r0, r8
 80047e0:	47d0      	blx	sl
 80047e2:	3001      	adds	r0, #1
 80047e4:	d09d      	beq.n	8004722 <_printf_i+0x15a>
 80047e6:	3501      	adds	r5, #1
 80047e8:	68e3      	ldr	r3, [r4, #12]
 80047ea:	9903      	ldr	r1, [sp, #12]
 80047ec:	1a5b      	subs	r3, r3, r1
 80047ee:	42ab      	cmp	r3, r5
 80047f0:	dcf2      	bgt.n	80047d8 <_printf_i+0x210>
 80047f2:	e7eb      	b.n	80047cc <_printf_i+0x204>
 80047f4:	2500      	movs	r5, #0
 80047f6:	f104 0619 	add.w	r6, r4, #25
 80047fa:	e7f5      	b.n	80047e8 <_printf_i+0x220>
 80047fc:	08007f3a 	.word	0x08007f3a
 8004800:	08007f4b 	.word	0x08007f4b

08004804 <std>:
 8004804:	2300      	movs	r3, #0
 8004806:	b510      	push	{r4, lr}
 8004808:	4604      	mov	r4, r0
 800480a:	e9c0 3300 	strd	r3, r3, [r0]
 800480e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004812:	6083      	str	r3, [r0, #8]
 8004814:	8181      	strh	r1, [r0, #12]
 8004816:	6643      	str	r3, [r0, #100]	@ 0x64
 8004818:	81c2      	strh	r2, [r0, #14]
 800481a:	6183      	str	r3, [r0, #24]
 800481c:	4619      	mov	r1, r3
 800481e:	2208      	movs	r2, #8
 8004820:	305c      	adds	r0, #92	@ 0x5c
 8004822:	f000 f916 	bl	8004a52 <memset>
 8004826:	4b0d      	ldr	r3, [pc, #52]	@ (800485c <std+0x58>)
 8004828:	6224      	str	r4, [r4, #32]
 800482a:	6263      	str	r3, [r4, #36]	@ 0x24
 800482c:	4b0c      	ldr	r3, [pc, #48]	@ (8004860 <std+0x5c>)
 800482e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004830:	4b0c      	ldr	r3, [pc, #48]	@ (8004864 <std+0x60>)
 8004832:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004834:	4b0c      	ldr	r3, [pc, #48]	@ (8004868 <std+0x64>)
 8004836:	6323      	str	r3, [r4, #48]	@ 0x30
 8004838:	4b0c      	ldr	r3, [pc, #48]	@ (800486c <std+0x68>)
 800483a:	429c      	cmp	r4, r3
 800483c:	d006      	beq.n	800484c <std+0x48>
 800483e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004842:	4294      	cmp	r4, r2
 8004844:	d002      	beq.n	800484c <std+0x48>
 8004846:	33d0      	adds	r3, #208	@ 0xd0
 8004848:	429c      	cmp	r4, r3
 800484a:	d105      	bne.n	8004858 <std+0x54>
 800484c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004854:	f000 b97a 	b.w	8004b4c <__retarget_lock_init_recursive>
 8004858:	bd10      	pop	{r4, pc}
 800485a:	bf00      	nop
 800485c:	080049cd 	.word	0x080049cd
 8004860:	080049ef 	.word	0x080049ef
 8004864:	08004a27 	.word	0x08004a27
 8004868:	08004a4b 	.word	0x08004a4b
 800486c:	2000065c 	.word	0x2000065c

08004870 <stdio_exit_handler>:
 8004870:	4a02      	ldr	r2, [pc, #8]	@ (800487c <stdio_exit_handler+0xc>)
 8004872:	4903      	ldr	r1, [pc, #12]	@ (8004880 <stdio_exit_handler+0x10>)
 8004874:	4803      	ldr	r0, [pc, #12]	@ (8004884 <stdio_exit_handler+0x14>)
 8004876:	f000 b869 	b.w	800494c <_fwalk_sglue>
 800487a:	bf00      	nop
 800487c:	20000014 	.word	0x20000014
 8004880:	080064c9 	.word	0x080064c9
 8004884:	20000024 	.word	0x20000024

08004888 <cleanup_stdio>:
 8004888:	6841      	ldr	r1, [r0, #4]
 800488a:	4b0c      	ldr	r3, [pc, #48]	@ (80048bc <cleanup_stdio+0x34>)
 800488c:	b510      	push	{r4, lr}
 800488e:	4299      	cmp	r1, r3
 8004890:	4604      	mov	r4, r0
 8004892:	d001      	beq.n	8004898 <cleanup_stdio+0x10>
 8004894:	f001 fe18 	bl	80064c8 <_fflush_r>
 8004898:	68a1      	ldr	r1, [r4, #8]
 800489a:	4b09      	ldr	r3, [pc, #36]	@ (80048c0 <cleanup_stdio+0x38>)
 800489c:	4299      	cmp	r1, r3
 800489e:	d002      	beq.n	80048a6 <cleanup_stdio+0x1e>
 80048a0:	4620      	mov	r0, r4
 80048a2:	f001 fe11 	bl	80064c8 <_fflush_r>
 80048a6:	68e1      	ldr	r1, [r4, #12]
 80048a8:	4b06      	ldr	r3, [pc, #24]	@ (80048c4 <cleanup_stdio+0x3c>)
 80048aa:	4299      	cmp	r1, r3
 80048ac:	d004      	beq.n	80048b8 <cleanup_stdio+0x30>
 80048ae:	4620      	mov	r0, r4
 80048b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048b4:	f001 be08 	b.w	80064c8 <_fflush_r>
 80048b8:	bd10      	pop	{r4, pc}
 80048ba:	bf00      	nop
 80048bc:	2000065c 	.word	0x2000065c
 80048c0:	200006c4 	.word	0x200006c4
 80048c4:	2000072c 	.word	0x2000072c

080048c8 <global_stdio_init.part.0>:
 80048c8:	b510      	push	{r4, lr}
 80048ca:	4b0b      	ldr	r3, [pc, #44]	@ (80048f8 <global_stdio_init.part.0+0x30>)
 80048cc:	4c0b      	ldr	r4, [pc, #44]	@ (80048fc <global_stdio_init.part.0+0x34>)
 80048ce:	4a0c      	ldr	r2, [pc, #48]	@ (8004900 <global_stdio_init.part.0+0x38>)
 80048d0:	4620      	mov	r0, r4
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	2104      	movs	r1, #4
 80048d6:	2200      	movs	r2, #0
 80048d8:	f7ff ff94 	bl	8004804 <std>
 80048dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80048e0:	2201      	movs	r2, #1
 80048e2:	2109      	movs	r1, #9
 80048e4:	f7ff ff8e 	bl	8004804 <std>
 80048e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80048ec:	2202      	movs	r2, #2
 80048ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048f2:	2112      	movs	r1, #18
 80048f4:	f7ff bf86 	b.w	8004804 <std>
 80048f8:	20000794 	.word	0x20000794
 80048fc:	2000065c 	.word	0x2000065c
 8004900:	08004871 	.word	0x08004871

08004904 <__sfp_lock_acquire>:
 8004904:	4801      	ldr	r0, [pc, #4]	@ (800490c <__sfp_lock_acquire+0x8>)
 8004906:	f000 b922 	b.w	8004b4e <__retarget_lock_acquire_recursive>
 800490a:	bf00      	nop
 800490c:	2000079d 	.word	0x2000079d

08004910 <__sfp_lock_release>:
 8004910:	4801      	ldr	r0, [pc, #4]	@ (8004918 <__sfp_lock_release+0x8>)
 8004912:	f000 b91d 	b.w	8004b50 <__retarget_lock_release_recursive>
 8004916:	bf00      	nop
 8004918:	2000079d 	.word	0x2000079d

0800491c <__sinit>:
 800491c:	b510      	push	{r4, lr}
 800491e:	4604      	mov	r4, r0
 8004920:	f7ff fff0 	bl	8004904 <__sfp_lock_acquire>
 8004924:	6a23      	ldr	r3, [r4, #32]
 8004926:	b11b      	cbz	r3, 8004930 <__sinit+0x14>
 8004928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800492c:	f7ff bff0 	b.w	8004910 <__sfp_lock_release>
 8004930:	4b04      	ldr	r3, [pc, #16]	@ (8004944 <__sinit+0x28>)
 8004932:	6223      	str	r3, [r4, #32]
 8004934:	4b04      	ldr	r3, [pc, #16]	@ (8004948 <__sinit+0x2c>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1f5      	bne.n	8004928 <__sinit+0xc>
 800493c:	f7ff ffc4 	bl	80048c8 <global_stdio_init.part.0>
 8004940:	e7f2      	b.n	8004928 <__sinit+0xc>
 8004942:	bf00      	nop
 8004944:	08004889 	.word	0x08004889
 8004948:	20000794 	.word	0x20000794

0800494c <_fwalk_sglue>:
 800494c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004950:	4607      	mov	r7, r0
 8004952:	4688      	mov	r8, r1
 8004954:	4614      	mov	r4, r2
 8004956:	2600      	movs	r6, #0
 8004958:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800495c:	f1b9 0901 	subs.w	r9, r9, #1
 8004960:	d505      	bpl.n	800496e <_fwalk_sglue+0x22>
 8004962:	6824      	ldr	r4, [r4, #0]
 8004964:	2c00      	cmp	r4, #0
 8004966:	d1f7      	bne.n	8004958 <_fwalk_sglue+0xc>
 8004968:	4630      	mov	r0, r6
 800496a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800496e:	89ab      	ldrh	r3, [r5, #12]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d907      	bls.n	8004984 <_fwalk_sglue+0x38>
 8004974:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004978:	3301      	adds	r3, #1
 800497a:	d003      	beq.n	8004984 <_fwalk_sglue+0x38>
 800497c:	4629      	mov	r1, r5
 800497e:	4638      	mov	r0, r7
 8004980:	47c0      	blx	r8
 8004982:	4306      	orrs	r6, r0
 8004984:	3568      	adds	r5, #104	@ 0x68
 8004986:	e7e9      	b.n	800495c <_fwalk_sglue+0x10>

08004988 <siprintf>:
 8004988:	b40e      	push	{r1, r2, r3}
 800498a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800498e:	b510      	push	{r4, lr}
 8004990:	2400      	movs	r4, #0
 8004992:	b09d      	sub	sp, #116	@ 0x74
 8004994:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004996:	9002      	str	r0, [sp, #8]
 8004998:	9006      	str	r0, [sp, #24]
 800499a:	9107      	str	r1, [sp, #28]
 800499c:	9104      	str	r1, [sp, #16]
 800499e:	4809      	ldr	r0, [pc, #36]	@ (80049c4 <siprintf+0x3c>)
 80049a0:	4909      	ldr	r1, [pc, #36]	@ (80049c8 <siprintf+0x40>)
 80049a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80049a6:	9105      	str	r1, [sp, #20]
 80049a8:	6800      	ldr	r0, [r0, #0]
 80049aa:	a902      	add	r1, sp, #8
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	941b      	str	r4, [sp, #108]	@ 0x6c
 80049b0:	f001 fc0e 	bl	80061d0 <_svfiprintf_r>
 80049b4:	9b02      	ldr	r3, [sp, #8]
 80049b6:	701c      	strb	r4, [r3, #0]
 80049b8:	b01d      	add	sp, #116	@ 0x74
 80049ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049be:	b003      	add	sp, #12
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	20000020 	.word	0x20000020
 80049c8:	ffff0208 	.word	0xffff0208

080049cc <__sread>:
 80049cc:	b510      	push	{r4, lr}
 80049ce:	460c      	mov	r4, r1
 80049d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049d4:	f000 f86c 	bl	8004ab0 <_read_r>
 80049d8:	2800      	cmp	r0, #0
 80049da:	bfab      	itete	ge
 80049dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80049de:	89a3      	ldrhlt	r3, [r4, #12]
 80049e0:	181b      	addge	r3, r3, r0
 80049e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80049e6:	bfac      	ite	ge
 80049e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80049ea:	81a3      	strhlt	r3, [r4, #12]
 80049ec:	bd10      	pop	{r4, pc}

080049ee <__swrite>:
 80049ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f2:	461f      	mov	r7, r3
 80049f4:	898b      	ldrh	r3, [r1, #12]
 80049f6:	4605      	mov	r5, r0
 80049f8:	05db      	lsls	r3, r3, #23
 80049fa:	460c      	mov	r4, r1
 80049fc:	4616      	mov	r6, r2
 80049fe:	d505      	bpl.n	8004a0c <__swrite+0x1e>
 8004a00:	2302      	movs	r3, #2
 8004a02:	2200      	movs	r2, #0
 8004a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a08:	f000 f840 	bl	8004a8c <_lseek_r>
 8004a0c:	89a3      	ldrh	r3, [r4, #12]
 8004a0e:	4632      	mov	r2, r6
 8004a10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a14:	81a3      	strh	r3, [r4, #12]
 8004a16:	4628      	mov	r0, r5
 8004a18:	463b      	mov	r3, r7
 8004a1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a22:	f000 b857 	b.w	8004ad4 <_write_r>

08004a26 <__sseek>:
 8004a26:	b510      	push	{r4, lr}
 8004a28:	460c      	mov	r4, r1
 8004a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a2e:	f000 f82d 	bl	8004a8c <_lseek_r>
 8004a32:	1c43      	adds	r3, r0, #1
 8004a34:	89a3      	ldrh	r3, [r4, #12]
 8004a36:	bf15      	itete	ne
 8004a38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004a3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004a3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004a42:	81a3      	strheq	r3, [r4, #12]
 8004a44:	bf18      	it	ne
 8004a46:	81a3      	strhne	r3, [r4, #12]
 8004a48:	bd10      	pop	{r4, pc}

08004a4a <__sclose>:
 8004a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a4e:	f000 b80d 	b.w	8004a6c <_close_r>

08004a52 <memset>:
 8004a52:	4603      	mov	r3, r0
 8004a54:	4402      	add	r2, r0
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d100      	bne.n	8004a5c <memset+0xa>
 8004a5a:	4770      	bx	lr
 8004a5c:	f803 1b01 	strb.w	r1, [r3], #1
 8004a60:	e7f9      	b.n	8004a56 <memset+0x4>
	...

08004a64 <_localeconv_r>:
 8004a64:	4800      	ldr	r0, [pc, #0]	@ (8004a68 <_localeconv_r+0x4>)
 8004a66:	4770      	bx	lr
 8004a68:	20000160 	.word	0x20000160

08004a6c <_close_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	2300      	movs	r3, #0
 8004a70:	4d05      	ldr	r5, [pc, #20]	@ (8004a88 <_close_r+0x1c>)
 8004a72:	4604      	mov	r4, r0
 8004a74:	4608      	mov	r0, r1
 8004a76:	602b      	str	r3, [r5, #0]
 8004a78:	f7ff f9d7 	bl	8003e2a <_close>
 8004a7c:	1c43      	adds	r3, r0, #1
 8004a7e:	d102      	bne.n	8004a86 <_close_r+0x1a>
 8004a80:	682b      	ldr	r3, [r5, #0]
 8004a82:	b103      	cbz	r3, 8004a86 <_close_r+0x1a>
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	bd38      	pop	{r3, r4, r5, pc}
 8004a88:	20000798 	.word	0x20000798

08004a8c <_lseek_r>:
 8004a8c:	b538      	push	{r3, r4, r5, lr}
 8004a8e:	4604      	mov	r4, r0
 8004a90:	4608      	mov	r0, r1
 8004a92:	4611      	mov	r1, r2
 8004a94:	2200      	movs	r2, #0
 8004a96:	4d05      	ldr	r5, [pc, #20]	@ (8004aac <_lseek_r+0x20>)
 8004a98:	602a      	str	r2, [r5, #0]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f7ff f9e9 	bl	8003e72 <_lseek>
 8004aa0:	1c43      	adds	r3, r0, #1
 8004aa2:	d102      	bne.n	8004aaa <_lseek_r+0x1e>
 8004aa4:	682b      	ldr	r3, [r5, #0]
 8004aa6:	b103      	cbz	r3, 8004aaa <_lseek_r+0x1e>
 8004aa8:	6023      	str	r3, [r4, #0]
 8004aaa:	bd38      	pop	{r3, r4, r5, pc}
 8004aac:	20000798 	.word	0x20000798

08004ab0 <_read_r>:
 8004ab0:	b538      	push	{r3, r4, r5, lr}
 8004ab2:	4604      	mov	r4, r0
 8004ab4:	4608      	mov	r0, r1
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	2200      	movs	r2, #0
 8004aba:	4d05      	ldr	r5, [pc, #20]	@ (8004ad0 <_read_r+0x20>)
 8004abc:	602a      	str	r2, [r5, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f7ff f97a 	bl	8003db8 <_read>
 8004ac4:	1c43      	adds	r3, r0, #1
 8004ac6:	d102      	bne.n	8004ace <_read_r+0x1e>
 8004ac8:	682b      	ldr	r3, [r5, #0]
 8004aca:	b103      	cbz	r3, 8004ace <_read_r+0x1e>
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	bd38      	pop	{r3, r4, r5, pc}
 8004ad0:	20000798 	.word	0x20000798

08004ad4 <_write_r>:
 8004ad4:	b538      	push	{r3, r4, r5, lr}
 8004ad6:	4604      	mov	r4, r0
 8004ad8:	4608      	mov	r0, r1
 8004ada:	4611      	mov	r1, r2
 8004adc:	2200      	movs	r2, #0
 8004ade:	4d05      	ldr	r5, [pc, #20]	@ (8004af4 <_write_r+0x20>)
 8004ae0:	602a      	str	r2, [r5, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f7ff f985 	bl	8003df2 <_write>
 8004ae8:	1c43      	adds	r3, r0, #1
 8004aea:	d102      	bne.n	8004af2 <_write_r+0x1e>
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	b103      	cbz	r3, 8004af2 <_write_r+0x1e>
 8004af0:	6023      	str	r3, [r4, #0]
 8004af2:	bd38      	pop	{r3, r4, r5, pc}
 8004af4:	20000798 	.word	0x20000798

08004af8 <__errno>:
 8004af8:	4b01      	ldr	r3, [pc, #4]	@ (8004b00 <__errno+0x8>)
 8004afa:	6818      	ldr	r0, [r3, #0]
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	20000020 	.word	0x20000020

08004b04 <__libc_init_array>:
 8004b04:	b570      	push	{r4, r5, r6, lr}
 8004b06:	2600      	movs	r6, #0
 8004b08:	4d0c      	ldr	r5, [pc, #48]	@ (8004b3c <__libc_init_array+0x38>)
 8004b0a:	4c0d      	ldr	r4, [pc, #52]	@ (8004b40 <__libc_init_array+0x3c>)
 8004b0c:	1b64      	subs	r4, r4, r5
 8004b0e:	10a4      	asrs	r4, r4, #2
 8004b10:	42a6      	cmp	r6, r4
 8004b12:	d109      	bne.n	8004b28 <__libc_init_array+0x24>
 8004b14:	f002 f874 	bl	8006c00 <_init>
 8004b18:	2600      	movs	r6, #0
 8004b1a:	4d0a      	ldr	r5, [pc, #40]	@ (8004b44 <__libc_init_array+0x40>)
 8004b1c:	4c0a      	ldr	r4, [pc, #40]	@ (8004b48 <__libc_init_array+0x44>)
 8004b1e:	1b64      	subs	r4, r4, r5
 8004b20:	10a4      	asrs	r4, r4, #2
 8004b22:	42a6      	cmp	r6, r4
 8004b24:	d105      	bne.n	8004b32 <__libc_init_array+0x2e>
 8004b26:	bd70      	pop	{r4, r5, r6, pc}
 8004b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b2c:	4798      	blx	r3
 8004b2e:	3601      	adds	r6, #1
 8004b30:	e7ee      	b.n	8004b10 <__libc_init_array+0xc>
 8004b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b36:	4798      	blx	r3
 8004b38:	3601      	adds	r6, #1
 8004b3a:	e7f2      	b.n	8004b22 <__libc_init_array+0x1e>
 8004b3c:	080082a4 	.word	0x080082a4
 8004b40:	080082a4 	.word	0x080082a4
 8004b44:	080082a4 	.word	0x080082a4
 8004b48:	080082a8 	.word	0x080082a8

08004b4c <__retarget_lock_init_recursive>:
 8004b4c:	4770      	bx	lr

08004b4e <__retarget_lock_acquire_recursive>:
 8004b4e:	4770      	bx	lr

08004b50 <__retarget_lock_release_recursive>:
 8004b50:	4770      	bx	lr

08004b52 <memchr>:
 8004b52:	4603      	mov	r3, r0
 8004b54:	b510      	push	{r4, lr}
 8004b56:	b2c9      	uxtb	r1, r1
 8004b58:	4402      	add	r2, r0
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	d101      	bne.n	8004b64 <memchr+0x12>
 8004b60:	2000      	movs	r0, #0
 8004b62:	e003      	b.n	8004b6c <memchr+0x1a>
 8004b64:	7804      	ldrb	r4, [r0, #0]
 8004b66:	3301      	adds	r3, #1
 8004b68:	428c      	cmp	r4, r1
 8004b6a:	d1f6      	bne.n	8004b5a <memchr+0x8>
 8004b6c:	bd10      	pop	{r4, pc}

08004b6e <quorem>:
 8004b6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b72:	6903      	ldr	r3, [r0, #16]
 8004b74:	690c      	ldr	r4, [r1, #16]
 8004b76:	4607      	mov	r7, r0
 8004b78:	42a3      	cmp	r3, r4
 8004b7a:	db7e      	blt.n	8004c7a <quorem+0x10c>
 8004b7c:	3c01      	subs	r4, #1
 8004b7e:	00a3      	lsls	r3, r4, #2
 8004b80:	f100 0514 	add.w	r5, r0, #20
 8004b84:	f101 0814 	add.w	r8, r1, #20
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b8e:	9301      	str	r3, [sp, #4]
 8004b90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ba0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ba4:	d32e      	bcc.n	8004c04 <quorem+0x96>
 8004ba6:	f04f 0a00 	mov.w	sl, #0
 8004baa:	46c4      	mov	ip, r8
 8004bac:	46ae      	mov	lr, r5
 8004bae:	46d3      	mov	fp, sl
 8004bb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004bb4:	b298      	uxth	r0, r3
 8004bb6:	fb06 a000 	mla	r0, r6, r0, sl
 8004bba:	0c1b      	lsrs	r3, r3, #16
 8004bbc:	0c02      	lsrs	r2, r0, #16
 8004bbe:	fb06 2303 	mla	r3, r6, r3, r2
 8004bc2:	f8de 2000 	ldr.w	r2, [lr]
 8004bc6:	b280      	uxth	r0, r0
 8004bc8:	b292      	uxth	r2, r2
 8004bca:	1a12      	subs	r2, r2, r0
 8004bcc:	445a      	add	r2, fp
 8004bce:	f8de 0000 	ldr.w	r0, [lr]
 8004bd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004bdc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004be0:	b292      	uxth	r2, r2
 8004be2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004be6:	45e1      	cmp	r9, ip
 8004be8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004bec:	f84e 2b04 	str.w	r2, [lr], #4
 8004bf0:	d2de      	bcs.n	8004bb0 <quorem+0x42>
 8004bf2:	9b00      	ldr	r3, [sp, #0]
 8004bf4:	58eb      	ldr	r3, [r5, r3]
 8004bf6:	b92b      	cbnz	r3, 8004c04 <quorem+0x96>
 8004bf8:	9b01      	ldr	r3, [sp, #4]
 8004bfa:	3b04      	subs	r3, #4
 8004bfc:	429d      	cmp	r5, r3
 8004bfe:	461a      	mov	r2, r3
 8004c00:	d32f      	bcc.n	8004c62 <quorem+0xf4>
 8004c02:	613c      	str	r4, [r7, #16]
 8004c04:	4638      	mov	r0, r7
 8004c06:	f001 f97f 	bl	8005f08 <__mcmp>
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	db25      	blt.n	8004c5a <quorem+0xec>
 8004c0e:	4629      	mov	r1, r5
 8004c10:	2000      	movs	r0, #0
 8004c12:	f858 2b04 	ldr.w	r2, [r8], #4
 8004c16:	f8d1 c000 	ldr.w	ip, [r1]
 8004c1a:	fa1f fe82 	uxth.w	lr, r2
 8004c1e:	fa1f f38c 	uxth.w	r3, ip
 8004c22:	eba3 030e 	sub.w	r3, r3, lr
 8004c26:	4403      	add	r3, r0
 8004c28:	0c12      	lsrs	r2, r2, #16
 8004c2a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004c2e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c38:	45c1      	cmp	r9, r8
 8004c3a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004c3e:	f841 3b04 	str.w	r3, [r1], #4
 8004c42:	d2e6      	bcs.n	8004c12 <quorem+0xa4>
 8004c44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c4c:	b922      	cbnz	r2, 8004c58 <quorem+0xea>
 8004c4e:	3b04      	subs	r3, #4
 8004c50:	429d      	cmp	r5, r3
 8004c52:	461a      	mov	r2, r3
 8004c54:	d30b      	bcc.n	8004c6e <quorem+0x100>
 8004c56:	613c      	str	r4, [r7, #16]
 8004c58:	3601      	adds	r6, #1
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	b003      	add	sp, #12
 8004c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	3b04      	subs	r3, #4
 8004c66:	2a00      	cmp	r2, #0
 8004c68:	d1cb      	bne.n	8004c02 <quorem+0x94>
 8004c6a:	3c01      	subs	r4, #1
 8004c6c:	e7c6      	b.n	8004bfc <quorem+0x8e>
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	3b04      	subs	r3, #4
 8004c72:	2a00      	cmp	r2, #0
 8004c74:	d1ef      	bne.n	8004c56 <quorem+0xe8>
 8004c76:	3c01      	subs	r4, #1
 8004c78:	e7ea      	b.n	8004c50 <quorem+0xe2>
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	e7ee      	b.n	8004c5c <quorem+0xee>
	...

08004c80 <_dtoa_r>:
 8004c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c84:	4614      	mov	r4, r2
 8004c86:	461d      	mov	r5, r3
 8004c88:	69c7      	ldr	r7, [r0, #28]
 8004c8a:	b097      	sub	sp, #92	@ 0x5c
 8004c8c:	4681      	mov	r9, r0
 8004c8e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004c92:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004c94:	b97f      	cbnz	r7, 8004cb6 <_dtoa_r+0x36>
 8004c96:	2010      	movs	r0, #16
 8004c98:	f000 fe0e 	bl	80058b8 <malloc>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	f8c9 001c 	str.w	r0, [r9, #28]
 8004ca2:	b920      	cbnz	r0, 8004cae <_dtoa_r+0x2e>
 8004ca4:	21ef      	movs	r1, #239	@ 0xef
 8004ca6:	4bac      	ldr	r3, [pc, #688]	@ (8004f58 <_dtoa_r+0x2d8>)
 8004ca8:	48ac      	ldr	r0, [pc, #688]	@ (8004f5c <_dtoa_r+0x2dc>)
 8004caa:	f001 fc6d 	bl	8006588 <__assert_func>
 8004cae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004cb2:	6007      	str	r7, [r0, #0]
 8004cb4:	60c7      	str	r7, [r0, #12]
 8004cb6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004cba:	6819      	ldr	r1, [r3, #0]
 8004cbc:	b159      	cbz	r1, 8004cd6 <_dtoa_r+0x56>
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	4093      	lsls	r3, r2
 8004cc4:	604a      	str	r2, [r1, #4]
 8004cc6:	608b      	str	r3, [r1, #8]
 8004cc8:	4648      	mov	r0, r9
 8004cca:	f000 feeb 	bl	8005aa4 <_Bfree>
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	1e2b      	subs	r3, r5, #0
 8004cd8:	bfaf      	iteee	ge
 8004cda:	2300      	movge	r3, #0
 8004cdc:	2201      	movlt	r2, #1
 8004cde:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004ce2:	9307      	strlt	r3, [sp, #28]
 8004ce4:	bfa8      	it	ge
 8004ce6:	6033      	strge	r3, [r6, #0]
 8004ce8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8004cec:	4b9c      	ldr	r3, [pc, #624]	@ (8004f60 <_dtoa_r+0x2e0>)
 8004cee:	bfb8      	it	lt
 8004cf0:	6032      	strlt	r2, [r6, #0]
 8004cf2:	ea33 0308 	bics.w	r3, r3, r8
 8004cf6:	d112      	bne.n	8004d1e <_dtoa_r+0x9e>
 8004cf8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004cfc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004d04:	4323      	orrs	r3, r4
 8004d06:	f000 855e 	beq.w	80057c6 <_dtoa_r+0xb46>
 8004d0a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004d0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004f64 <_dtoa_r+0x2e4>
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8560 	beq.w	80057d6 <_dtoa_r+0xb56>
 8004d16:	f10a 0303 	add.w	r3, sl, #3
 8004d1a:	f000 bd5a 	b.w	80057d2 <_dtoa_r+0xb52>
 8004d1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d22:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004d26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f7fb fe3b 	bl	80009a8 <__aeabi_dcmpeq>
 8004d32:	4607      	mov	r7, r0
 8004d34:	b158      	cbz	r0, 8004d4e <_dtoa_r+0xce>
 8004d36:	2301      	movs	r3, #1
 8004d38:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004d3e:	b113      	cbz	r3, 8004d46 <_dtoa_r+0xc6>
 8004d40:	4b89      	ldr	r3, [pc, #548]	@ (8004f68 <_dtoa_r+0x2e8>)
 8004d42:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8004f6c <_dtoa_r+0x2ec>
 8004d4a:	f000 bd44 	b.w	80057d6 <_dtoa_r+0xb56>
 8004d4e:	ab14      	add	r3, sp, #80	@ 0x50
 8004d50:	9301      	str	r3, [sp, #4]
 8004d52:	ab15      	add	r3, sp, #84	@ 0x54
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	4648      	mov	r0, r9
 8004d58:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004d5c:	f001 f984 	bl	8006068 <__d2b>
 8004d60:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004d64:	9003      	str	r0, [sp, #12]
 8004d66:	2e00      	cmp	r6, #0
 8004d68:	d078      	beq.n	8004e5c <_dtoa_r+0x1dc>
 8004d6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d70:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d78:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004d7c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004d80:	9712      	str	r7, [sp, #72]	@ 0x48
 8004d82:	4619      	mov	r1, r3
 8004d84:	2200      	movs	r2, #0
 8004d86:	4b7a      	ldr	r3, [pc, #488]	@ (8004f70 <_dtoa_r+0x2f0>)
 8004d88:	f7fb f9ee 	bl	8000168 <__aeabi_dsub>
 8004d8c:	a36c      	add	r3, pc, #432	@ (adr r3, 8004f40 <_dtoa_r+0x2c0>)
 8004d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d92:	f7fb fba1 	bl	80004d8 <__aeabi_dmul>
 8004d96:	a36c      	add	r3, pc, #432	@ (adr r3, 8004f48 <_dtoa_r+0x2c8>)
 8004d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9c:	f7fb f9e6 	bl	800016c <__adddf3>
 8004da0:	4604      	mov	r4, r0
 8004da2:	4630      	mov	r0, r6
 8004da4:	460d      	mov	r5, r1
 8004da6:	f7fb fb2d 	bl	8000404 <__aeabi_i2d>
 8004daa:	a369      	add	r3, pc, #420	@ (adr r3, 8004f50 <_dtoa_r+0x2d0>)
 8004dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db0:	f7fb fb92 	bl	80004d8 <__aeabi_dmul>
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4620      	mov	r0, r4
 8004dba:	4629      	mov	r1, r5
 8004dbc:	f7fb f9d6 	bl	800016c <__adddf3>
 8004dc0:	4604      	mov	r4, r0
 8004dc2:	460d      	mov	r5, r1
 8004dc4:	f7fb fe38 	bl	8000a38 <__aeabi_d2iz>
 8004dc8:	2200      	movs	r2, #0
 8004dca:	4607      	mov	r7, r0
 8004dcc:	2300      	movs	r3, #0
 8004dce:	4620      	mov	r0, r4
 8004dd0:	4629      	mov	r1, r5
 8004dd2:	f7fb fdf3 	bl	80009bc <__aeabi_dcmplt>
 8004dd6:	b140      	cbz	r0, 8004dea <_dtoa_r+0x16a>
 8004dd8:	4638      	mov	r0, r7
 8004dda:	f7fb fb13 	bl	8000404 <__aeabi_i2d>
 8004dde:	4622      	mov	r2, r4
 8004de0:	462b      	mov	r3, r5
 8004de2:	f7fb fde1 	bl	80009a8 <__aeabi_dcmpeq>
 8004de6:	b900      	cbnz	r0, 8004dea <_dtoa_r+0x16a>
 8004de8:	3f01      	subs	r7, #1
 8004dea:	2f16      	cmp	r7, #22
 8004dec:	d854      	bhi.n	8004e98 <_dtoa_r+0x218>
 8004dee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004df2:	4b60      	ldr	r3, [pc, #384]	@ (8004f74 <_dtoa_r+0x2f4>)
 8004df4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfc:	f7fb fdde 	bl	80009bc <__aeabi_dcmplt>
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d04b      	beq.n	8004e9c <_dtoa_r+0x21c>
 8004e04:	2300      	movs	r3, #0
 8004e06:	3f01      	subs	r7, #1
 8004e08:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004e0a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004e0c:	1b9b      	subs	r3, r3, r6
 8004e0e:	1e5a      	subs	r2, r3, #1
 8004e10:	bf49      	itett	mi
 8004e12:	f1c3 0301 	rsbmi	r3, r3, #1
 8004e16:	2300      	movpl	r3, #0
 8004e18:	9304      	strmi	r3, [sp, #16]
 8004e1a:	2300      	movmi	r3, #0
 8004e1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e1e:	bf54      	ite	pl
 8004e20:	9304      	strpl	r3, [sp, #16]
 8004e22:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004e24:	2f00      	cmp	r7, #0
 8004e26:	db3b      	blt.n	8004ea0 <_dtoa_r+0x220>
 8004e28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e2a:	970e      	str	r7, [sp, #56]	@ 0x38
 8004e2c:	443b      	add	r3, r7
 8004e2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e30:	2300      	movs	r3, #0
 8004e32:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e34:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e36:	2b09      	cmp	r3, #9
 8004e38:	d865      	bhi.n	8004f06 <_dtoa_r+0x286>
 8004e3a:	2b05      	cmp	r3, #5
 8004e3c:	bfc4      	itt	gt
 8004e3e:	3b04      	subgt	r3, #4
 8004e40:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004e42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e44:	bfc8      	it	gt
 8004e46:	2400      	movgt	r4, #0
 8004e48:	f1a3 0302 	sub.w	r3, r3, #2
 8004e4c:	bfd8      	it	le
 8004e4e:	2401      	movle	r4, #1
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d864      	bhi.n	8004f1e <_dtoa_r+0x29e>
 8004e54:	e8df f003 	tbb	[pc, r3]
 8004e58:	2c385553 	.word	0x2c385553
 8004e5c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004e60:	441e      	add	r6, r3
 8004e62:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004e66:	2b20      	cmp	r3, #32
 8004e68:	bfc1      	itttt	gt
 8004e6a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004e6e:	fa08 f803 	lslgt.w	r8, r8, r3
 8004e72:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004e76:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004e7a:	bfd6      	itet	le
 8004e7c:	f1c3 0320 	rsble	r3, r3, #32
 8004e80:	ea48 0003 	orrgt.w	r0, r8, r3
 8004e84:	fa04 f003 	lslle.w	r0, r4, r3
 8004e88:	f7fb faac 	bl	80003e4 <__aeabi_ui2d>
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004e92:	3e01      	subs	r6, #1
 8004e94:	9212      	str	r2, [sp, #72]	@ 0x48
 8004e96:	e774      	b.n	8004d82 <_dtoa_r+0x102>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e7b5      	b.n	8004e08 <_dtoa_r+0x188>
 8004e9c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004e9e:	e7b4      	b.n	8004e0a <_dtoa_r+0x18a>
 8004ea0:	9b04      	ldr	r3, [sp, #16]
 8004ea2:	1bdb      	subs	r3, r3, r7
 8004ea4:	9304      	str	r3, [sp, #16]
 8004ea6:	427b      	negs	r3, r7
 8004ea8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004eaa:	2300      	movs	r3, #0
 8004eac:	930e      	str	r3, [sp, #56]	@ 0x38
 8004eae:	e7c1      	b.n	8004e34 <_dtoa_r+0x1b4>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004eb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004eb6:	eb07 0b03 	add.w	fp, r7, r3
 8004eba:	f10b 0301 	add.w	r3, fp, #1
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	9308      	str	r3, [sp, #32]
 8004ec2:	bfb8      	it	lt
 8004ec4:	2301      	movlt	r3, #1
 8004ec6:	e006      	b.n	8004ed6 <_dtoa_r+0x256>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ecc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	dd28      	ble.n	8004f24 <_dtoa_r+0x2a4>
 8004ed2:	469b      	mov	fp, r3
 8004ed4:	9308      	str	r3, [sp, #32]
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	2204      	movs	r2, #4
 8004eda:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004ede:	f102 0514 	add.w	r5, r2, #20
 8004ee2:	429d      	cmp	r5, r3
 8004ee4:	d926      	bls.n	8004f34 <_dtoa_r+0x2b4>
 8004ee6:	6041      	str	r1, [r0, #4]
 8004ee8:	4648      	mov	r0, r9
 8004eea:	f000 fd9b 	bl	8005a24 <_Balloc>
 8004eee:	4682      	mov	sl, r0
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d143      	bne.n	8004f7c <_dtoa_r+0x2fc>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	f240 11af 	movw	r1, #431	@ 0x1af
 8004efa:	4b1f      	ldr	r3, [pc, #124]	@ (8004f78 <_dtoa_r+0x2f8>)
 8004efc:	e6d4      	b.n	8004ca8 <_dtoa_r+0x28>
 8004efe:	2300      	movs	r3, #0
 8004f00:	e7e3      	b.n	8004eca <_dtoa_r+0x24a>
 8004f02:	2300      	movs	r3, #0
 8004f04:	e7d5      	b.n	8004eb2 <_dtoa_r+0x232>
 8004f06:	2401      	movs	r4, #1
 8004f08:	2300      	movs	r3, #0
 8004f0a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004f0c:	9320      	str	r3, [sp, #128]	@ 0x80
 8004f0e:	f04f 3bff 	mov.w	fp, #4294967295
 8004f12:	2200      	movs	r2, #0
 8004f14:	2312      	movs	r3, #18
 8004f16:	f8cd b020 	str.w	fp, [sp, #32]
 8004f1a:	9221      	str	r2, [sp, #132]	@ 0x84
 8004f1c:	e7db      	b.n	8004ed6 <_dtoa_r+0x256>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f22:	e7f4      	b.n	8004f0e <_dtoa_r+0x28e>
 8004f24:	f04f 0b01 	mov.w	fp, #1
 8004f28:	465b      	mov	r3, fp
 8004f2a:	f8cd b020 	str.w	fp, [sp, #32]
 8004f2e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8004f32:	e7d0      	b.n	8004ed6 <_dtoa_r+0x256>
 8004f34:	3101      	adds	r1, #1
 8004f36:	0052      	lsls	r2, r2, #1
 8004f38:	e7d1      	b.n	8004ede <_dtoa_r+0x25e>
 8004f3a:	bf00      	nop
 8004f3c:	f3af 8000 	nop.w
 8004f40:	636f4361 	.word	0x636f4361
 8004f44:	3fd287a7 	.word	0x3fd287a7
 8004f48:	8b60c8b3 	.word	0x8b60c8b3
 8004f4c:	3fc68a28 	.word	0x3fc68a28
 8004f50:	509f79fb 	.word	0x509f79fb
 8004f54:	3fd34413 	.word	0x3fd34413
 8004f58:	08007f69 	.word	0x08007f69
 8004f5c:	08007f80 	.word	0x08007f80
 8004f60:	7ff00000 	.word	0x7ff00000
 8004f64:	08007f65 	.word	0x08007f65
 8004f68:	08007f39 	.word	0x08007f39
 8004f6c:	08007f38 	.word	0x08007f38
 8004f70:	3ff80000 	.word	0x3ff80000
 8004f74:	080080d0 	.word	0x080080d0
 8004f78:	08007fd8 	.word	0x08007fd8
 8004f7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004f80:	6018      	str	r0, [r3, #0]
 8004f82:	9b08      	ldr	r3, [sp, #32]
 8004f84:	2b0e      	cmp	r3, #14
 8004f86:	f200 80a1 	bhi.w	80050cc <_dtoa_r+0x44c>
 8004f8a:	2c00      	cmp	r4, #0
 8004f8c:	f000 809e 	beq.w	80050cc <_dtoa_r+0x44c>
 8004f90:	2f00      	cmp	r7, #0
 8004f92:	dd33      	ble.n	8004ffc <_dtoa_r+0x37c>
 8004f94:	4b9c      	ldr	r3, [pc, #624]	@ (8005208 <_dtoa_r+0x588>)
 8004f96:	f007 020f 	and.w	r2, r7, #15
 8004f9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f9e:	05f8      	lsls	r0, r7, #23
 8004fa0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fa4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8004fa8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004fac:	d516      	bpl.n	8004fdc <_dtoa_r+0x35c>
 8004fae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004fb2:	4b96      	ldr	r3, [pc, #600]	@ (800520c <_dtoa_r+0x58c>)
 8004fb4:	2603      	movs	r6, #3
 8004fb6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fba:	f7fb fbb7 	bl	800072c <__aeabi_ddiv>
 8004fbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004fc2:	f004 040f 	and.w	r4, r4, #15
 8004fc6:	4d91      	ldr	r5, [pc, #580]	@ (800520c <_dtoa_r+0x58c>)
 8004fc8:	b954      	cbnz	r4, 8004fe0 <_dtoa_r+0x360>
 8004fca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004fce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fd2:	f7fb fbab 	bl	800072c <__aeabi_ddiv>
 8004fd6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004fda:	e028      	b.n	800502e <_dtoa_r+0x3ae>
 8004fdc:	2602      	movs	r6, #2
 8004fde:	e7f2      	b.n	8004fc6 <_dtoa_r+0x346>
 8004fe0:	07e1      	lsls	r1, r4, #31
 8004fe2:	d508      	bpl.n	8004ff6 <_dtoa_r+0x376>
 8004fe4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004fe8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004fec:	f7fb fa74 	bl	80004d8 <__aeabi_dmul>
 8004ff0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004ff4:	3601      	adds	r6, #1
 8004ff6:	1064      	asrs	r4, r4, #1
 8004ff8:	3508      	adds	r5, #8
 8004ffa:	e7e5      	b.n	8004fc8 <_dtoa_r+0x348>
 8004ffc:	f000 80af 	beq.w	800515e <_dtoa_r+0x4de>
 8005000:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005004:	427c      	negs	r4, r7
 8005006:	4b80      	ldr	r3, [pc, #512]	@ (8005208 <_dtoa_r+0x588>)
 8005008:	f004 020f 	and.w	r2, r4, #15
 800500c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	f7fb fa60 	bl	80004d8 <__aeabi_dmul>
 8005018:	2602      	movs	r6, #2
 800501a:	2300      	movs	r3, #0
 800501c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005020:	4d7a      	ldr	r5, [pc, #488]	@ (800520c <_dtoa_r+0x58c>)
 8005022:	1124      	asrs	r4, r4, #4
 8005024:	2c00      	cmp	r4, #0
 8005026:	f040 808f 	bne.w	8005148 <_dtoa_r+0x4c8>
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1d3      	bne.n	8004fd6 <_dtoa_r+0x356>
 800502e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005032:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 8094 	beq.w	8005162 <_dtoa_r+0x4e2>
 800503a:	2200      	movs	r2, #0
 800503c:	4620      	mov	r0, r4
 800503e:	4629      	mov	r1, r5
 8005040:	4b73      	ldr	r3, [pc, #460]	@ (8005210 <_dtoa_r+0x590>)
 8005042:	f7fb fcbb 	bl	80009bc <__aeabi_dcmplt>
 8005046:	2800      	cmp	r0, #0
 8005048:	f000 808b 	beq.w	8005162 <_dtoa_r+0x4e2>
 800504c:	9b08      	ldr	r3, [sp, #32]
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 8087 	beq.w	8005162 <_dtoa_r+0x4e2>
 8005054:	f1bb 0f00 	cmp.w	fp, #0
 8005058:	dd34      	ble.n	80050c4 <_dtoa_r+0x444>
 800505a:	4620      	mov	r0, r4
 800505c:	2200      	movs	r2, #0
 800505e:	4629      	mov	r1, r5
 8005060:	4b6c      	ldr	r3, [pc, #432]	@ (8005214 <_dtoa_r+0x594>)
 8005062:	f7fb fa39 	bl	80004d8 <__aeabi_dmul>
 8005066:	465c      	mov	r4, fp
 8005068:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800506c:	f107 38ff 	add.w	r8, r7, #4294967295
 8005070:	3601      	adds	r6, #1
 8005072:	4630      	mov	r0, r6
 8005074:	f7fb f9c6 	bl	8000404 <__aeabi_i2d>
 8005078:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800507c:	f7fb fa2c 	bl	80004d8 <__aeabi_dmul>
 8005080:	2200      	movs	r2, #0
 8005082:	4b65      	ldr	r3, [pc, #404]	@ (8005218 <_dtoa_r+0x598>)
 8005084:	f7fb f872 	bl	800016c <__adddf3>
 8005088:	4605      	mov	r5, r0
 800508a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800508e:	2c00      	cmp	r4, #0
 8005090:	d16a      	bne.n	8005168 <_dtoa_r+0x4e8>
 8005092:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005096:	2200      	movs	r2, #0
 8005098:	4b60      	ldr	r3, [pc, #384]	@ (800521c <_dtoa_r+0x59c>)
 800509a:	f7fb f865 	bl	8000168 <__aeabi_dsub>
 800509e:	4602      	mov	r2, r0
 80050a0:	460b      	mov	r3, r1
 80050a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80050a6:	462a      	mov	r2, r5
 80050a8:	4633      	mov	r3, r6
 80050aa:	f7fb fca5 	bl	80009f8 <__aeabi_dcmpgt>
 80050ae:	2800      	cmp	r0, #0
 80050b0:	f040 8298 	bne.w	80055e4 <_dtoa_r+0x964>
 80050b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050b8:	462a      	mov	r2, r5
 80050ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80050be:	f7fb fc7d 	bl	80009bc <__aeabi_dcmplt>
 80050c2:	bb38      	cbnz	r0, 8005114 <_dtoa_r+0x494>
 80050c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80050c8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80050cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f2c0 8157 	blt.w	8005382 <_dtoa_r+0x702>
 80050d4:	2f0e      	cmp	r7, #14
 80050d6:	f300 8154 	bgt.w	8005382 <_dtoa_r+0x702>
 80050da:	4b4b      	ldr	r3, [pc, #300]	@ (8005208 <_dtoa_r+0x588>)
 80050dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80050e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80050e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f280 80e5 	bge.w	80052ba <_dtoa_r+0x63a>
 80050f0:	9b08      	ldr	r3, [sp, #32]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f300 80e1 	bgt.w	80052ba <_dtoa_r+0x63a>
 80050f8:	d10c      	bne.n	8005114 <_dtoa_r+0x494>
 80050fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050fe:	2200      	movs	r2, #0
 8005100:	4b46      	ldr	r3, [pc, #280]	@ (800521c <_dtoa_r+0x59c>)
 8005102:	f7fb f9e9 	bl	80004d8 <__aeabi_dmul>
 8005106:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800510a:	f7fb fc6b 	bl	80009e4 <__aeabi_dcmpge>
 800510e:	2800      	cmp	r0, #0
 8005110:	f000 8266 	beq.w	80055e0 <_dtoa_r+0x960>
 8005114:	2400      	movs	r4, #0
 8005116:	4625      	mov	r5, r4
 8005118:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800511a:	4656      	mov	r6, sl
 800511c:	ea6f 0803 	mvn.w	r8, r3
 8005120:	2700      	movs	r7, #0
 8005122:	4621      	mov	r1, r4
 8005124:	4648      	mov	r0, r9
 8005126:	f000 fcbd 	bl	8005aa4 <_Bfree>
 800512a:	2d00      	cmp	r5, #0
 800512c:	f000 80bd 	beq.w	80052aa <_dtoa_r+0x62a>
 8005130:	b12f      	cbz	r7, 800513e <_dtoa_r+0x4be>
 8005132:	42af      	cmp	r7, r5
 8005134:	d003      	beq.n	800513e <_dtoa_r+0x4be>
 8005136:	4639      	mov	r1, r7
 8005138:	4648      	mov	r0, r9
 800513a:	f000 fcb3 	bl	8005aa4 <_Bfree>
 800513e:	4629      	mov	r1, r5
 8005140:	4648      	mov	r0, r9
 8005142:	f000 fcaf 	bl	8005aa4 <_Bfree>
 8005146:	e0b0      	b.n	80052aa <_dtoa_r+0x62a>
 8005148:	07e2      	lsls	r2, r4, #31
 800514a:	d505      	bpl.n	8005158 <_dtoa_r+0x4d8>
 800514c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005150:	f7fb f9c2 	bl	80004d8 <__aeabi_dmul>
 8005154:	2301      	movs	r3, #1
 8005156:	3601      	adds	r6, #1
 8005158:	1064      	asrs	r4, r4, #1
 800515a:	3508      	adds	r5, #8
 800515c:	e762      	b.n	8005024 <_dtoa_r+0x3a4>
 800515e:	2602      	movs	r6, #2
 8005160:	e765      	b.n	800502e <_dtoa_r+0x3ae>
 8005162:	46b8      	mov	r8, r7
 8005164:	9c08      	ldr	r4, [sp, #32]
 8005166:	e784      	b.n	8005072 <_dtoa_r+0x3f2>
 8005168:	4b27      	ldr	r3, [pc, #156]	@ (8005208 <_dtoa_r+0x588>)
 800516a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800516c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005170:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005174:	4454      	add	r4, sl
 8005176:	2900      	cmp	r1, #0
 8005178:	d054      	beq.n	8005224 <_dtoa_r+0x5a4>
 800517a:	2000      	movs	r0, #0
 800517c:	4928      	ldr	r1, [pc, #160]	@ (8005220 <_dtoa_r+0x5a0>)
 800517e:	f7fb fad5 	bl	800072c <__aeabi_ddiv>
 8005182:	4633      	mov	r3, r6
 8005184:	462a      	mov	r2, r5
 8005186:	f7fa ffef 	bl	8000168 <__aeabi_dsub>
 800518a:	4656      	mov	r6, sl
 800518c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005190:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005194:	f7fb fc50 	bl	8000a38 <__aeabi_d2iz>
 8005198:	4605      	mov	r5, r0
 800519a:	f7fb f933 	bl	8000404 <__aeabi_i2d>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051a6:	f7fa ffdf 	bl	8000168 <__aeabi_dsub>
 80051aa:	4602      	mov	r2, r0
 80051ac:	460b      	mov	r3, r1
 80051ae:	3530      	adds	r5, #48	@ 0x30
 80051b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80051b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80051b8:	f806 5b01 	strb.w	r5, [r6], #1
 80051bc:	f7fb fbfe 	bl	80009bc <__aeabi_dcmplt>
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d172      	bne.n	80052aa <_dtoa_r+0x62a>
 80051c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80051c8:	2000      	movs	r0, #0
 80051ca:	4911      	ldr	r1, [pc, #68]	@ (8005210 <_dtoa_r+0x590>)
 80051cc:	f7fa ffcc 	bl	8000168 <__aeabi_dsub>
 80051d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80051d4:	f7fb fbf2 	bl	80009bc <__aeabi_dcmplt>
 80051d8:	2800      	cmp	r0, #0
 80051da:	f040 80b4 	bne.w	8005346 <_dtoa_r+0x6c6>
 80051de:	42a6      	cmp	r6, r4
 80051e0:	f43f af70 	beq.w	80050c4 <_dtoa_r+0x444>
 80051e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80051e8:	2200      	movs	r2, #0
 80051ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005214 <_dtoa_r+0x594>)
 80051ec:	f7fb f974 	bl	80004d8 <__aeabi_dmul>
 80051f0:	2200      	movs	r2, #0
 80051f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80051f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051fa:	4b06      	ldr	r3, [pc, #24]	@ (8005214 <_dtoa_r+0x594>)
 80051fc:	f7fb f96c 	bl	80004d8 <__aeabi_dmul>
 8005200:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005204:	e7c4      	b.n	8005190 <_dtoa_r+0x510>
 8005206:	bf00      	nop
 8005208:	080080d0 	.word	0x080080d0
 800520c:	080080a8 	.word	0x080080a8
 8005210:	3ff00000 	.word	0x3ff00000
 8005214:	40240000 	.word	0x40240000
 8005218:	401c0000 	.word	0x401c0000
 800521c:	40140000 	.word	0x40140000
 8005220:	3fe00000 	.word	0x3fe00000
 8005224:	4631      	mov	r1, r6
 8005226:	4628      	mov	r0, r5
 8005228:	f7fb f956 	bl	80004d8 <__aeabi_dmul>
 800522c:	4656      	mov	r6, sl
 800522e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005232:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005234:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005238:	f7fb fbfe 	bl	8000a38 <__aeabi_d2iz>
 800523c:	4605      	mov	r5, r0
 800523e:	f7fb f8e1 	bl	8000404 <__aeabi_i2d>
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800524a:	f7fa ff8d 	bl	8000168 <__aeabi_dsub>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	3530      	adds	r5, #48	@ 0x30
 8005254:	f806 5b01 	strb.w	r5, [r6], #1
 8005258:	42a6      	cmp	r6, r4
 800525a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	d124      	bne.n	80052ae <_dtoa_r+0x62e>
 8005264:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005268:	4bae      	ldr	r3, [pc, #696]	@ (8005524 <_dtoa_r+0x8a4>)
 800526a:	f7fa ff7f 	bl	800016c <__adddf3>
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005276:	f7fb fbbf 	bl	80009f8 <__aeabi_dcmpgt>
 800527a:	2800      	cmp	r0, #0
 800527c:	d163      	bne.n	8005346 <_dtoa_r+0x6c6>
 800527e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005282:	2000      	movs	r0, #0
 8005284:	49a7      	ldr	r1, [pc, #668]	@ (8005524 <_dtoa_r+0x8a4>)
 8005286:	f7fa ff6f 	bl	8000168 <__aeabi_dsub>
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005292:	f7fb fb93 	bl	80009bc <__aeabi_dcmplt>
 8005296:	2800      	cmp	r0, #0
 8005298:	f43f af14 	beq.w	80050c4 <_dtoa_r+0x444>
 800529c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800529e:	1e73      	subs	r3, r6, #1
 80052a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80052a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80052a6:	2b30      	cmp	r3, #48	@ 0x30
 80052a8:	d0f8      	beq.n	800529c <_dtoa_r+0x61c>
 80052aa:	4647      	mov	r7, r8
 80052ac:	e03b      	b.n	8005326 <_dtoa_r+0x6a6>
 80052ae:	4b9e      	ldr	r3, [pc, #632]	@ (8005528 <_dtoa_r+0x8a8>)
 80052b0:	f7fb f912 	bl	80004d8 <__aeabi_dmul>
 80052b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80052b8:	e7bc      	b.n	8005234 <_dtoa_r+0x5b4>
 80052ba:	4656      	mov	r6, sl
 80052bc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80052c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052c4:	4620      	mov	r0, r4
 80052c6:	4629      	mov	r1, r5
 80052c8:	f7fb fa30 	bl	800072c <__aeabi_ddiv>
 80052cc:	f7fb fbb4 	bl	8000a38 <__aeabi_d2iz>
 80052d0:	4680      	mov	r8, r0
 80052d2:	f7fb f897 	bl	8000404 <__aeabi_i2d>
 80052d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052da:	f7fb f8fd 	bl	80004d8 <__aeabi_dmul>
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	4620      	mov	r0, r4
 80052e4:	4629      	mov	r1, r5
 80052e6:	f7fa ff3f 	bl	8000168 <__aeabi_dsub>
 80052ea:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80052ee:	9d08      	ldr	r5, [sp, #32]
 80052f0:	f806 4b01 	strb.w	r4, [r6], #1
 80052f4:	eba6 040a 	sub.w	r4, r6, sl
 80052f8:	42a5      	cmp	r5, r4
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	d133      	bne.n	8005368 <_dtoa_r+0x6e8>
 8005300:	f7fa ff34 	bl	800016c <__adddf3>
 8005304:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005308:	4604      	mov	r4, r0
 800530a:	460d      	mov	r5, r1
 800530c:	f7fb fb74 	bl	80009f8 <__aeabi_dcmpgt>
 8005310:	b9c0      	cbnz	r0, 8005344 <_dtoa_r+0x6c4>
 8005312:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005316:	4620      	mov	r0, r4
 8005318:	4629      	mov	r1, r5
 800531a:	f7fb fb45 	bl	80009a8 <__aeabi_dcmpeq>
 800531e:	b110      	cbz	r0, 8005326 <_dtoa_r+0x6a6>
 8005320:	f018 0f01 	tst.w	r8, #1
 8005324:	d10e      	bne.n	8005344 <_dtoa_r+0x6c4>
 8005326:	4648      	mov	r0, r9
 8005328:	9903      	ldr	r1, [sp, #12]
 800532a:	f000 fbbb 	bl	8005aa4 <_Bfree>
 800532e:	2300      	movs	r3, #0
 8005330:	7033      	strb	r3, [r6, #0]
 8005332:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005334:	3701      	adds	r7, #1
 8005336:	601f      	str	r7, [r3, #0]
 8005338:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 824b 	beq.w	80057d6 <_dtoa_r+0xb56>
 8005340:	601e      	str	r6, [r3, #0]
 8005342:	e248      	b.n	80057d6 <_dtoa_r+0xb56>
 8005344:	46b8      	mov	r8, r7
 8005346:	4633      	mov	r3, r6
 8005348:	461e      	mov	r6, r3
 800534a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800534e:	2a39      	cmp	r2, #57	@ 0x39
 8005350:	d106      	bne.n	8005360 <_dtoa_r+0x6e0>
 8005352:	459a      	cmp	sl, r3
 8005354:	d1f8      	bne.n	8005348 <_dtoa_r+0x6c8>
 8005356:	2230      	movs	r2, #48	@ 0x30
 8005358:	f108 0801 	add.w	r8, r8, #1
 800535c:	f88a 2000 	strb.w	r2, [sl]
 8005360:	781a      	ldrb	r2, [r3, #0]
 8005362:	3201      	adds	r2, #1
 8005364:	701a      	strb	r2, [r3, #0]
 8005366:	e7a0      	b.n	80052aa <_dtoa_r+0x62a>
 8005368:	2200      	movs	r2, #0
 800536a:	4b6f      	ldr	r3, [pc, #444]	@ (8005528 <_dtoa_r+0x8a8>)
 800536c:	f7fb f8b4 	bl	80004d8 <__aeabi_dmul>
 8005370:	2200      	movs	r2, #0
 8005372:	2300      	movs	r3, #0
 8005374:	4604      	mov	r4, r0
 8005376:	460d      	mov	r5, r1
 8005378:	f7fb fb16 	bl	80009a8 <__aeabi_dcmpeq>
 800537c:	2800      	cmp	r0, #0
 800537e:	d09f      	beq.n	80052c0 <_dtoa_r+0x640>
 8005380:	e7d1      	b.n	8005326 <_dtoa_r+0x6a6>
 8005382:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005384:	2a00      	cmp	r2, #0
 8005386:	f000 80ea 	beq.w	800555e <_dtoa_r+0x8de>
 800538a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800538c:	2a01      	cmp	r2, #1
 800538e:	f300 80cd 	bgt.w	800552c <_dtoa_r+0x8ac>
 8005392:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005394:	2a00      	cmp	r2, #0
 8005396:	f000 80c1 	beq.w	800551c <_dtoa_r+0x89c>
 800539a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800539e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80053a0:	9e04      	ldr	r6, [sp, #16]
 80053a2:	9a04      	ldr	r2, [sp, #16]
 80053a4:	2101      	movs	r1, #1
 80053a6:	441a      	add	r2, r3
 80053a8:	9204      	str	r2, [sp, #16]
 80053aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053ac:	4648      	mov	r0, r9
 80053ae:	441a      	add	r2, r3
 80053b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80053b2:	f000 fc2b 	bl	8005c0c <__i2b>
 80053b6:	4605      	mov	r5, r0
 80053b8:	b166      	cbz	r6, 80053d4 <_dtoa_r+0x754>
 80053ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053bc:	2b00      	cmp	r3, #0
 80053be:	dd09      	ble.n	80053d4 <_dtoa_r+0x754>
 80053c0:	42b3      	cmp	r3, r6
 80053c2:	bfa8      	it	ge
 80053c4:	4633      	movge	r3, r6
 80053c6:	9a04      	ldr	r2, [sp, #16]
 80053c8:	1af6      	subs	r6, r6, r3
 80053ca:	1ad2      	subs	r2, r2, r3
 80053cc:	9204      	str	r2, [sp, #16]
 80053ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80053d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053d6:	b30b      	cbz	r3, 800541c <_dtoa_r+0x79c>
 80053d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 80c6 	beq.w	800556c <_dtoa_r+0x8ec>
 80053e0:	2c00      	cmp	r4, #0
 80053e2:	f000 80c0 	beq.w	8005566 <_dtoa_r+0x8e6>
 80053e6:	4629      	mov	r1, r5
 80053e8:	4622      	mov	r2, r4
 80053ea:	4648      	mov	r0, r9
 80053ec:	f000 fcc6 	bl	8005d7c <__pow5mult>
 80053f0:	9a03      	ldr	r2, [sp, #12]
 80053f2:	4601      	mov	r1, r0
 80053f4:	4605      	mov	r5, r0
 80053f6:	4648      	mov	r0, r9
 80053f8:	f000 fc1e 	bl	8005c38 <__multiply>
 80053fc:	9903      	ldr	r1, [sp, #12]
 80053fe:	4680      	mov	r8, r0
 8005400:	4648      	mov	r0, r9
 8005402:	f000 fb4f 	bl	8005aa4 <_Bfree>
 8005406:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005408:	1b1b      	subs	r3, r3, r4
 800540a:	930a      	str	r3, [sp, #40]	@ 0x28
 800540c:	f000 80b1 	beq.w	8005572 <_dtoa_r+0x8f2>
 8005410:	4641      	mov	r1, r8
 8005412:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005414:	4648      	mov	r0, r9
 8005416:	f000 fcb1 	bl	8005d7c <__pow5mult>
 800541a:	9003      	str	r0, [sp, #12]
 800541c:	2101      	movs	r1, #1
 800541e:	4648      	mov	r0, r9
 8005420:	f000 fbf4 	bl	8005c0c <__i2b>
 8005424:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005426:	4604      	mov	r4, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 81d8 	beq.w	80057de <_dtoa_r+0xb5e>
 800542e:	461a      	mov	r2, r3
 8005430:	4601      	mov	r1, r0
 8005432:	4648      	mov	r0, r9
 8005434:	f000 fca2 	bl	8005d7c <__pow5mult>
 8005438:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800543a:	4604      	mov	r4, r0
 800543c:	2b01      	cmp	r3, #1
 800543e:	f300 809f 	bgt.w	8005580 <_dtoa_r+0x900>
 8005442:	9b06      	ldr	r3, [sp, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	f040 8097 	bne.w	8005578 <_dtoa_r+0x8f8>
 800544a:	9b07      	ldr	r3, [sp, #28]
 800544c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005450:	2b00      	cmp	r3, #0
 8005452:	f040 8093 	bne.w	800557c <_dtoa_r+0x8fc>
 8005456:	9b07      	ldr	r3, [sp, #28]
 8005458:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800545c:	0d1b      	lsrs	r3, r3, #20
 800545e:	051b      	lsls	r3, r3, #20
 8005460:	b133      	cbz	r3, 8005470 <_dtoa_r+0x7f0>
 8005462:	9b04      	ldr	r3, [sp, #16]
 8005464:	3301      	adds	r3, #1
 8005466:	9304      	str	r3, [sp, #16]
 8005468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800546a:	3301      	adds	r3, #1
 800546c:	9309      	str	r3, [sp, #36]	@ 0x24
 800546e:	2301      	movs	r3, #1
 8005470:	930a      	str	r3, [sp, #40]	@ 0x28
 8005472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 81b8 	beq.w	80057ea <_dtoa_r+0xb6a>
 800547a:	6923      	ldr	r3, [r4, #16]
 800547c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005480:	6918      	ldr	r0, [r3, #16]
 8005482:	f000 fb77 	bl	8005b74 <__hi0bits>
 8005486:	f1c0 0020 	rsb	r0, r0, #32
 800548a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800548c:	4418      	add	r0, r3
 800548e:	f010 001f 	ands.w	r0, r0, #31
 8005492:	f000 8082 	beq.w	800559a <_dtoa_r+0x91a>
 8005496:	f1c0 0320 	rsb	r3, r0, #32
 800549a:	2b04      	cmp	r3, #4
 800549c:	dd73      	ble.n	8005586 <_dtoa_r+0x906>
 800549e:	9b04      	ldr	r3, [sp, #16]
 80054a0:	f1c0 001c 	rsb	r0, r0, #28
 80054a4:	4403      	add	r3, r0
 80054a6:	9304      	str	r3, [sp, #16]
 80054a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054aa:	4406      	add	r6, r0
 80054ac:	4403      	add	r3, r0
 80054ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80054b0:	9b04      	ldr	r3, [sp, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	dd05      	ble.n	80054c2 <_dtoa_r+0x842>
 80054b6:	461a      	mov	r2, r3
 80054b8:	4648      	mov	r0, r9
 80054ba:	9903      	ldr	r1, [sp, #12]
 80054bc:	f000 fcb8 	bl	8005e30 <__lshift>
 80054c0:	9003      	str	r0, [sp, #12]
 80054c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	dd05      	ble.n	80054d4 <_dtoa_r+0x854>
 80054c8:	4621      	mov	r1, r4
 80054ca:	461a      	mov	r2, r3
 80054cc:	4648      	mov	r0, r9
 80054ce:	f000 fcaf 	bl	8005e30 <__lshift>
 80054d2:	4604      	mov	r4, r0
 80054d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d061      	beq.n	800559e <_dtoa_r+0x91e>
 80054da:	4621      	mov	r1, r4
 80054dc:	9803      	ldr	r0, [sp, #12]
 80054de:	f000 fd13 	bl	8005f08 <__mcmp>
 80054e2:	2800      	cmp	r0, #0
 80054e4:	da5b      	bge.n	800559e <_dtoa_r+0x91e>
 80054e6:	2300      	movs	r3, #0
 80054e8:	220a      	movs	r2, #10
 80054ea:	4648      	mov	r0, r9
 80054ec:	9903      	ldr	r1, [sp, #12]
 80054ee:	f000 fafb 	bl	8005ae8 <__multadd>
 80054f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054f4:	f107 38ff 	add.w	r8, r7, #4294967295
 80054f8:	9003      	str	r0, [sp, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 8177 	beq.w	80057ee <_dtoa_r+0xb6e>
 8005500:	4629      	mov	r1, r5
 8005502:	2300      	movs	r3, #0
 8005504:	220a      	movs	r2, #10
 8005506:	4648      	mov	r0, r9
 8005508:	f000 faee 	bl	8005ae8 <__multadd>
 800550c:	f1bb 0f00 	cmp.w	fp, #0
 8005510:	4605      	mov	r5, r0
 8005512:	dc6f      	bgt.n	80055f4 <_dtoa_r+0x974>
 8005514:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005516:	2b02      	cmp	r3, #2
 8005518:	dc49      	bgt.n	80055ae <_dtoa_r+0x92e>
 800551a:	e06b      	b.n	80055f4 <_dtoa_r+0x974>
 800551c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800551e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005522:	e73c      	b.n	800539e <_dtoa_r+0x71e>
 8005524:	3fe00000 	.word	0x3fe00000
 8005528:	40240000 	.word	0x40240000
 800552c:	9b08      	ldr	r3, [sp, #32]
 800552e:	1e5c      	subs	r4, r3, #1
 8005530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005532:	42a3      	cmp	r3, r4
 8005534:	db09      	blt.n	800554a <_dtoa_r+0x8ca>
 8005536:	1b1c      	subs	r4, r3, r4
 8005538:	9b08      	ldr	r3, [sp, #32]
 800553a:	2b00      	cmp	r3, #0
 800553c:	f6bf af30 	bge.w	80053a0 <_dtoa_r+0x720>
 8005540:	9b04      	ldr	r3, [sp, #16]
 8005542:	9a08      	ldr	r2, [sp, #32]
 8005544:	1a9e      	subs	r6, r3, r2
 8005546:	2300      	movs	r3, #0
 8005548:	e72b      	b.n	80053a2 <_dtoa_r+0x722>
 800554a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800554c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800554e:	1ae3      	subs	r3, r4, r3
 8005550:	441a      	add	r2, r3
 8005552:	940a      	str	r4, [sp, #40]	@ 0x28
 8005554:	9e04      	ldr	r6, [sp, #16]
 8005556:	2400      	movs	r4, #0
 8005558:	9b08      	ldr	r3, [sp, #32]
 800555a:	920e      	str	r2, [sp, #56]	@ 0x38
 800555c:	e721      	b.n	80053a2 <_dtoa_r+0x722>
 800555e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005560:	9e04      	ldr	r6, [sp, #16]
 8005562:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005564:	e728      	b.n	80053b8 <_dtoa_r+0x738>
 8005566:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800556a:	e751      	b.n	8005410 <_dtoa_r+0x790>
 800556c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800556e:	9903      	ldr	r1, [sp, #12]
 8005570:	e750      	b.n	8005414 <_dtoa_r+0x794>
 8005572:	f8cd 800c 	str.w	r8, [sp, #12]
 8005576:	e751      	b.n	800541c <_dtoa_r+0x79c>
 8005578:	2300      	movs	r3, #0
 800557a:	e779      	b.n	8005470 <_dtoa_r+0x7f0>
 800557c:	9b06      	ldr	r3, [sp, #24]
 800557e:	e777      	b.n	8005470 <_dtoa_r+0x7f0>
 8005580:	2300      	movs	r3, #0
 8005582:	930a      	str	r3, [sp, #40]	@ 0x28
 8005584:	e779      	b.n	800547a <_dtoa_r+0x7fa>
 8005586:	d093      	beq.n	80054b0 <_dtoa_r+0x830>
 8005588:	9a04      	ldr	r2, [sp, #16]
 800558a:	331c      	adds	r3, #28
 800558c:	441a      	add	r2, r3
 800558e:	9204      	str	r2, [sp, #16]
 8005590:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005592:	441e      	add	r6, r3
 8005594:	441a      	add	r2, r3
 8005596:	9209      	str	r2, [sp, #36]	@ 0x24
 8005598:	e78a      	b.n	80054b0 <_dtoa_r+0x830>
 800559a:	4603      	mov	r3, r0
 800559c:	e7f4      	b.n	8005588 <_dtoa_r+0x908>
 800559e:	9b08      	ldr	r3, [sp, #32]
 80055a0:	46b8      	mov	r8, r7
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	dc20      	bgt.n	80055e8 <_dtoa_r+0x968>
 80055a6:	469b      	mov	fp, r3
 80055a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	dd1e      	ble.n	80055ec <_dtoa_r+0x96c>
 80055ae:	f1bb 0f00 	cmp.w	fp, #0
 80055b2:	f47f adb1 	bne.w	8005118 <_dtoa_r+0x498>
 80055b6:	4621      	mov	r1, r4
 80055b8:	465b      	mov	r3, fp
 80055ba:	2205      	movs	r2, #5
 80055bc:	4648      	mov	r0, r9
 80055be:	f000 fa93 	bl	8005ae8 <__multadd>
 80055c2:	4601      	mov	r1, r0
 80055c4:	4604      	mov	r4, r0
 80055c6:	9803      	ldr	r0, [sp, #12]
 80055c8:	f000 fc9e 	bl	8005f08 <__mcmp>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	f77f ada3 	ble.w	8005118 <_dtoa_r+0x498>
 80055d2:	4656      	mov	r6, sl
 80055d4:	2331      	movs	r3, #49	@ 0x31
 80055d6:	f108 0801 	add.w	r8, r8, #1
 80055da:	f806 3b01 	strb.w	r3, [r6], #1
 80055de:	e59f      	b.n	8005120 <_dtoa_r+0x4a0>
 80055e0:	46b8      	mov	r8, r7
 80055e2:	9c08      	ldr	r4, [sp, #32]
 80055e4:	4625      	mov	r5, r4
 80055e6:	e7f4      	b.n	80055d2 <_dtoa_r+0x952>
 80055e8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80055ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 8101 	beq.w	80057f6 <_dtoa_r+0xb76>
 80055f4:	2e00      	cmp	r6, #0
 80055f6:	dd05      	ble.n	8005604 <_dtoa_r+0x984>
 80055f8:	4629      	mov	r1, r5
 80055fa:	4632      	mov	r2, r6
 80055fc:	4648      	mov	r0, r9
 80055fe:	f000 fc17 	bl	8005e30 <__lshift>
 8005602:	4605      	mov	r5, r0
 8005604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005606:	2b00      	cmp	r3, #0
 8005608:	d05c      	beq.n	80056c4 <_dtoa_r+0xa44>
 800560a:	4648      	mov	r0, r9
 800560c:	6869      	ldr	r1, [r5, #4]
 800560e:	f000 fa09 	bl	8005a24 <_Balloc>
 8005612:	4606      	mov	r6, r0
 8005614:	b928      	cbnz	r0, 8005622 <_dtoa_r+0x9a2>
 8005616:	4602      	mov	r2, r0
 8005618:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800561c:	4b80      	ldr	r3, [pc, #512]	@ (8005820 <_dtoa_r+0xba0>)
 800561e:	f7ff bb43 	b.w	8004ca8 <_dtoa_r+0x28>
 8005622:	692a      	ldr	r2, [r5, #16]
 8005624:	f105 010c 	add.w	r1, r5, #12
 8005628:	3202      	adds	r2, #2
 800562a:	0092      	lsls	r2, r2, #2
 800562c:	300c      	adds	r0, #12
 800562e:	f000 ff9d 	bl	800656c <memcpy>
 8005632:	2201      	movs	r2, #1
 8005634:	4631      	mov	r1, r6
 8005636:	4648      	mov	r0, r9
 8005638:	f000 fbfa 	bl	8005e30 <__lshift>
 800563c:	462f      	mov	r7, r5
 800563e:	4605      	mov	r5, r0
 8005640:	f10a 0301 	add.w	r3, sl, #1
 8005644:	9304      	str	r3, [sp, #16]
 8005646:	eb0a 030b 	add.w	r3, sl, fp
 800564a:	930a      	str	r3, [sp, #40]	@ 0x28
 800564c:	9b06      	ldr	r3, [sp, #24]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	9309      	str	r3, [sp, #36]	@ 0x24
 8005654:	9b04      	ldr	r3, [sp, #16]
 8005656:	4621      	mov	r1, r4
 8005658:	9803      	ldr	r0, [sp, #12]
 800565a:	f103 3bff 	add.w	fp, r3, #4294967295
 800565e:	f7ff fa86 	bl	8004b6e <quorem>
 8005662:	4603      	mov	r3, r0
 8005664:	4639      	mov	r1, r7
 8005666:	3330      	adds	r3, #48	@ 0x30
 8005668:	9006      	str	r0, [sp, #24]
 800566a:	9803      	ldr	r0, [sp, #12]
 800566c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800566e:	f000 fc4b 	bl	8005f08 <__mcmp>
 8005672:	462a      	mov	r2, r5
 8005674:	9008      	str	r0, [sp, #32]
 8005676:	4621      	mov	r1, r4
 8005678:	4648      	mov	r0, r9
 800567a:	f000 fc61 	bl	8005f40 <__mdiff>
 800567e:	68c2      	ldr	r2, [r0, #12]
 8005680:	4606      	mov	r6, r0
 8005682:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005684:	bb02      	cbnz	r2, 80056c8 <_dtoa_r+0xa48>
 8005686:	4601      	mov	r1, r0
 8005688:	9803      	ldr	r0, [sp, #12]
 800568a:	f000 fc3d 	bl	8005f08 <__mcmp>
 800568e:	4602      	mov	r2, r0
 8005690:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005692:	4631      	mov	r1, r6
 8005694:	4648      	mov	r0, r9
 8005696:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800569a:	f000 fa03 	bl	8005aa4 <_Bfree>
 800569e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80056a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80056a2:	9e04      	ldr	r6, [sp, #16]
 80056a4:	ea42 0103 	orr.w	r1, r2, r3
 80056a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056aa:	4319      	orrs	r1, r3
 80056ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056ae:	d10d      	bne.n	80056cc <_dtoa_r+0xa4c>
 80056b0:	2b39      	cmp	r3, #57	@ 0x39
 80056b2:	d027      	beq.n	8005704 <_dtoa_r+0xa84>
 80056b4:	9a08      	ldr	r2, [sp, #32]
 80056b6:	2a00      	cmp	r2, #0
 80056b8:	dd01      	ble.n	80056be <_dtoa_r+0xa3e>
 80056ba:	9b06      	ldr	r3, [sp, #24]
 80056bc:	3331      	adds	r3, #49	@ 0x31
 80056be:	f88b 3000 	strb.w	r3, [fp]
 80056c2:	e52e      	b.n	8005122 <_dtoa_r+0x4a2>
 80056c4:	4628      	mov	r0, r5
 80056c6:	e7b9      	b.n	800563c <_dtoa_r+0x9bc>
 80056c8:	2201      	movs	r2, #1
 80056ca:	e7e2      	b.n	8005692 <_dtoa_r+0xa12>
 80056cc:	9908      	ldr	r1, [sp, #32]
 80056ce:	2900      	cmp	r1, #0
 80056d0:	db04      	blt.n	80056dc <_dtoa_r+0xa5c>
 80056d2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80056d4:	4301      	orrs	r1, r0
 80056d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80056d8:	4301      	orrs	r1, r0
 80056da:	d120      	bne.n	800571e <_dtoa_r+0xa9e>
 80056dc:	2a00      	cmp	r2, #0
 80056de:	ddee      	ble.n	80056be <_dtoa_r+0xa3e>
 80056e0:	2201      	movs	r2, #1
 80056e2:	9903      	ldr	r1, [sp, #12]
 80056e4:	4648      	mov	r0, r9
 80056e6:	9304      	str	r3, [sp, #16]
 80056e8:	f000 fba2 	bl	8005e30 <__lshift>
 80056ec:	4621      	mov	r1, r4
 80056ee:	9003      	str	r0, [sp, #12]
 80056f0:	f000 fc0a 	bl	8005f08 <__mcmp>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	9b04      	ldr	r3, [sp, #16]
 80056f8:	dc02      	bgt.n	8005700 <_dtoa_r+0xa80>
 80056fa:	d1e0      	bne.n	80056be <_dtoa_r+0xa3e>
 80056fc:	07da      	lsls	r2, r3, #31
 80056fe:	d5de      	bpl.n	80056be <_dtoa_r+0xa3e>
 8005700:	2b39      	cmp	r3, #57	@ 0x39
 8005702:	d1da      	bne.n	80056ba <_dtoa_r+0xa3a>
 8005704:	2339      	movs	r3, #57	@ 0x39
 8005706:	f88b 3000 	strb.w	r3, [fp]
 800570a:	4633      	mov	r3, r6
 800570c:	461e      	mov	r6, r3
 800570e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005712:	3b01      	subs	r3, #1
 8005714:	2a39      	cmp	r2, #57	@ 0x39
 8005716:	d04e      	beq.n	80057b6 <_dtoa_r+0xb36>
 8005718:	3201      	adds	r2, #1
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	e501      	b.n	8005122 <_dtoa_r+0x4a2>
 800571e:	2a00      	cmp	r2, #0
 8005720:	dd03      	ble.n	800572a <_dtoa_r+0xaaa>
 8005722:	2b39      	cmp	r3, #57	@ 0x39
 8005724:	d0ee      	beq.n	8005704 <_dtoa_r+0xa84>
 8005726:	3301      	adds	r3, #1
 8005728:	e7c9      	b.n	80056be <_dtoa_r+0xa3e>
 800572a:	9a04      	ldr	r2, [sp, #16]
 800572c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800572e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005732:	428a      	cmp	r2, r1
 8005734:	d028      	beq.n	8005788 <_dtoa_r+0xb08>
 8005736:	2300      	movs	r3, #0
 8005738:	220a      	movs	r2, #10
 800573a:	9903      	ldr	r1, [sp, #12]
 800573c:	4648      	mov	r0, r9
 800573e:	f000 f9d3 	bl	8005ae8 <__multadd>
 8005742:	42af      	cmp	r7, r5
 8005744:	9003      	str	r0, [sp, #12]
 8005746:	f04f 0300 	mov.w	r3, #0
 800574a:	f04f 020a 	mov.w	r2, #10
 800574e:	4639      	mov	r1, r7
 8005750:	4648      	mov	r0, r9
 8005752:	d107      	bne.n	8005764 <_dtoa_r+0xae4>
 8005754:	f000 f9c8 	bl	8005ae8 <__multadd>
 8005758:	4607      	mov	r7, r0
 800575a:	4605      	mov	r5, r0
 800575c:	9b04      	ldr	r3, [sp, #16]
 800575e:	3301      	adds	r3, #1
 8005760:	9304      	str	r3, [sp, #16]
 8005762:	e777      	b.n	8005654 <_dtoa_r+0x9d4>
 8005764:	f000 f9c0 	bl	8005ae8 <__multadd>
 8005768:	4629      	mov	r1, r5
 800576a:	4607      	mov	r7, r0
 800576c:	2300      	movs	r3, #0
 800576e:	220a      	movs	r2, #10
 8005770:	4648      	mov	r0, r9
 8005772:	f000 f9b9 	bl	8005ae8 <__multadd>
 8005776:	4605      	mov	r5, r0
 8005778:	e7f0      	b.n	800575c <_dtoa_r+0xadc>
 800577a:	f1bb 0f00 	cmp.w	fp, #0
 800577e:	bfcc      	ite	gt
 8005780:	465e      	movgt	r6, fp
 8005782:	2601      	movle	r6, #1
 8005784:	2700      	movs	r7, #0
 8005786:	4456      	add	r6, sl
 8005788:	2201      	movs	r2, #1
 800578a:	9903      	ldr	r1, [sp, #12]
 800578c:	4648      	mov	r0, r9
 800578e:	9304      	str	r3, [sp, #16]
 8005790:	f000 fb4e 	bl	8005e30 <__lshift>
 8005794:	4621      	mov	r1, r4
 8005796:	9003      	str	r0, [sp, #12]
 8005798:	f000 fbb6 	bl	8005f08 <__mcmp>
 800579c:	2800      	cmp	r0, #0
 800579e:	dcb4      	bgt.n	800570a <_dtoa_r+0xa8a>
 80057a0:	d102      	bne.n	80057a8 <_dtoa_r+0xb28>
 80057a2:	9b04      	ldr	r3, [sp, #16]
 80057a4:	07db      	lsls	r3, r3, #31
 80057a6:	d4b0      	bmi.n	800570a <_dtoa_r+0xa8a>
 80057a8:	4633      	mov	r3, r6
 80057aa:	461e      	mov	r6, r3
 80057ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057b0:	2a30      	cmp	r2, #48	@ 0x30
 80057b2:	d0fa      	beq.n	80057aa <_dtoa_r+0xb2a>
 80057b4:	e4b5      	b.n	8005122 <_dtoa_r+0x4a2>
 80057b6:	459a      	cmp	sl, r3
 80057b8:	d1a8      	bne.n	800570c <_dtoa_r+0xa8c>
 80057ba:	2331      	movs	r3, #49	@ 0x31
 80057bc:	f108 0801 	add.w	r8, r8, #1
 80057c0:	f88a 3000 	strb.w	r3, [sl]
 80057c4:	e4ad      	b.n	8005122 <_dtoa_r+0x4a2>
 80057c6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80057c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005824 <_dtoa_r+0xba4>
 80057cc:	b11b      	cbz	r3, 80057d6 <_dtoa_r+0xb56>
 80057ce:	f10a 0308 	add.w	r3, sl, #8
 80057d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	4650      	mov	r0, sl
 80057d8:	b017      	add	sp, #92	@ 0x5c
 80057da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	f77f ae2e 	ble.w	8005442 <_dtoa_r+0x7c2>
 80057e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80057ea:	2001      	movs	r0, #1
 80057ec:	e64d      	b.n	800548a <_dtoa_r+0x80a>
 80057ee:	f1bb 0f00 	cmp.w	fp, #0
 80057f2:	f77f aed9 	ble.w	80055a8 <_dtoa_r+0x928>
 80057f6:	4656      	mov	r6, sl
 80057f8:	4621      	mov	r1, r4
 80057fa:	9803      	ldr	r0, [sp, #12]
 80057fc:	f7ff f9b7 	bl	8004b6e <quorem>
 8005800:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005804:	f806 3b01 	strb.w	r3, [r6], #1
 8005808:	eba6 020a 	sub.w	r2, r6, sl
 800580c:	4593      	cmp	fp, r2
 800580e:	ddb4      	ble.n	800577a <_dtoa_r+0xafa>
 8005810:	2300      	movs	r3, #0
 8005812:	220a      	movs	r2, #10
 8005814:	4648      	mov	r0, r9
 8005816:	9903      	ldr	r1, [sp, #12]
 8005818:	f000 f966 	bl	8005ae8 <__multadd>
 800581c:	9003      	str	r0, [sp, #12]
 800581e:	e7eb      	b.n	80057f8 <_dtoa_r+0xb78>
 8005820:	08007fd8 	.word	0x08007fd8
 8005824:	08007f5c 	.word	0x08007f5c

08005828 <_free_r>:
 8005828:	b538      	push	{r3, r4, r5, lr}
 800582a:	4605      	mov	r5, r0
 800582c:	2900      	cmp	r1, #0
 800582e:	d040      	beq.n	80058b2 <_free_r+0x8a>
 8005830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005834:	1f0c      	subs	r4, r1, #4
 8005836:	2b00      	cmp	r3, #0
 8005838:	bfb8      	it	lt
 800583a:	18e4      	addlt	r4, r4, r3
 800583c:	f000 f8e6 	bl	8005a0c <__malloc_lock>
 8005840:	4a1c      	ldr	r2, [pc, #112]	@ (80058b4 <_free_r+0x8c>)
 8005842:	6813      	ldr	r3, [r2, #0]
 8005844:	b933      	cbnz	r3, 8005854 <_free_r+0x2c>
 8005846:	6063      	str	r3, [r4, #4]
 8005848:	6014      	str	r4, [r2, #0]
 800584a:	4628      	mov	r0, r5
 800584c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005850:	f000 b8e2 	b.w	8005a18 <__malloc_unlock>
 8005854:	42a3      	cmp	r3, r4
 8005856:	d908      	bls.n	800586a <_free_r+0x42>
 8005858:	6820      	ldr	r0, [r4, #0]
 800585a:	1821      	adds	r1, r4, r0
 800585c:	428b      	cmp	r3, r1
 800585e:	bf01      	itttt	eq
 8005860:	6819      	ldreq	r1, [r3, #0]
 8005862:	685b      	ldreq	r3, [r3, #4]
 8005864:	1809      	addeq	r1, r1, r0
 8005866:	6021      	streq	r1, [r4, #0]
 8005868:	e7ed      	b.n	8005846 <_free_r+0x1e>
 800586a:	461a      	mov	r2, r3
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	b10b      	cbz	r3, 8005874 <_free_r+0x4c>
 8005870:	42a3      	cmp	r3, r4
 8005872:	d9fa      	bls.n	800586a <_free_r+0x42>
 8005874:	6811      	ldr	r1, [r2, #0]
 8005876:	1850      	adds	r0, r2, r1
 8005878:	42a0      	cmp	r0, r4
 800587a:	d10b      	bne.n	8005894 <_free_r+0x6c>
 800587c:	6820      	ldr	r0, [r4, #0]
 800587e:	4401      	add	r1, r0
 8005880:	1850      	adds	r0, r2, r1
 8005882:	4283      	cmp	r3, r0
 8005884:	6011      	str	r1, [r2, #0]
 8005886:	d1e0      	bne.n	800584a <_free_r+0x22>
 8005888:	6818      	ldr	r0, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	4408      	add	r0, r1
 800588e:	6010      	str	r0, [r2, #0]
 8005890:	6053      	str	r3, [r2, #4]
 8005892:	e7da      	b.n	800584a <_free_r+0x22>
 8005894:	d902      	bls.n	800589c <_free_r+0x74>
 8005896:	230c      	movs	r3, #12
 8005898:	602b      	str	r3, [r5, #0]
 800589a:	e7d6      	b.n	800584a <_free_r+0x22>
 800589c:	6820      	ldr	r0, [r4, #0]
 800589e:	1821      	adds	r1, r4, r0
 80058a0:	428b      	cmp	r3, r1
 80058a2:	bf01      	itttt	eq
 80058a4:	6819      	ldreq	r1, [r3, #0]
 80058a6:	685b      	ldreq	r3, [r3, #4]
 80058a8:	1809      	addeq	r1, r1, r0
 80058aa:	6021      	streq	r1, [r4, #0]
 80058ac:	6063      	str	r3, [r4, #4]
 80058ae:	6054      	str	r4, [r2, #4]
 80058b0:	e7cb      	b.n	800584a <_free_r+0x22>
 80058b2:	bd38      	pop	{r3, r4, r5, pc}
 80058b4:	200007a4 	.word	0x200007a4

080058b8 <malloc>:
 80058b8:	4b02      	ldr	r3, [pc, #8]	@ (80058c4 <malloc+0xc>)
 80058ba:	4601      	mov	r1, r0
 80058bc:	6818      	ldr	r0, [r3, #0]
 80058be:	f000 b825 	b.w	800590c <_malloc_r>
 80058c2:	bf00      	nop
 80058c4:	20000020 	.word	0x20000020

080058c8 <sbrk_aligned>:
 80058c8:	b570      	push	{r4, r5, r6, lr}
 80058ca:	4e0f      	ldr	r6, [pc, #60]	@ (8005908 <sbrk_aligned+0x40>)
 80058cc:	460c      	mov	r4, r1
 80058ce:	6831      	ldr	r1, [r6, #0]
 80058d0:	4605      	mov	r5, r0
 80058d2:	b911      	cbnz	r1, 80058da <sbrk_aligned+0x12>
 80058d4:	f000 fe3a 	bl	800654c <_sbrk_r>
 80058d8:	6030      	str	r0, [r6, #0]
 80058da:	4621      	mov	r1, r4
 80058dc:	4628      	mov	r0, r5
 80058de:	f000 fe35 	bl	800654c <_sbrk_r>
 80058e2:	1c43      	adds	r3, r0, #1
 80058e4:	d103      	bne.n	80058ee <sbrk_aligned+0x26>
 80058e6:	f04f 34ff 	mov.w	r4, #4294967295
 80058ea:	4620      	mov	r0, r4
 80058ec:	bd70      	pop	{r4, r5, r6, pc}
 80058ee:	1cc4      	adds	r4, r0, #3
 80058f0:	f024 0403 	bic.w	r4, r4, #3
 80058f4:	42a0      	cmp	r0, r4
 80058f6:	d0f8      	beq.n	80058ea <sbrk_aligned+0x22>
 80058f8:	1a21      	subs	r1, r4, r0
 80058fa:	4628      	mov	r0, r5
 80058fc:	f000 fe26 	bl	800654c <_sbrk_r>
 8005900:	3001      	adds	r0, #1
 8005902:	d1f2      	bne.n	80058ea <sbrk_aligned+0x22>
 8005904:	e7ef      	b.n	80058e6 <sbrk_aligned+0x1e>
 8005906:	bf00      	nop
 8005908:	200007a0 	.word	0x200007a0

0800590c <_malloc_r>:
 800590c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005910:	1ccd      	adds	r5, r1, #3
 8005912:	f025 0503 	bic.w	r5, r5, #3
 8005916:	3508      	adds	r5, #8
 8005918:	2d0c      	cmp	r5, #12
 800591a:	bf38      	it	cc
 800591c:	250c      	movcc	r5, #12
 800591e:	2d00      	cmp	r5, #0
 8005920:	4606      	mov	r6, r0
 8005922:	db01      	blt.n	8005928 <_malloc_r+0x1c>
 8005924:	42a9      	cmp	r1, r5
 8005926:	d904      	bls.n	8005932 <_malloc_r+0x26>
 8005928:	230c      	movs	r3, #12
 800592a:	6033      	str	r3, [r6, #0]
 800592c:	2000      	movs	r0, #0
 800592e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005932:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a08 <_malloc_r+0xfc>
 8005936:	f000 f869 	bl	8005a0c <__malloc_lock>
 800593a:	f8d8 3000 	ldr.w	r3, [r8]
 800593e:	461c      	mov	r4, r3
 8005940:	bb44      	cbnz	r4, 8005994 <_malloc_r+0x88>
 8005942:	4629      	mov	r1, r5
 8005944:	4630      	mov	r0, r6
 8005946:	f7ff ffbf 	bl	80058c8 <sbrk_aligned>
 800594a:	1c43      	adds	r3, r0, #1
 800594c:	4604      	mov	r4, r0
 800594e:	d158      	bne.n	8005a02 <_malloc_r+0xf6>
 8005950:	f8d8 4000 	ldr.w	r4, [r8]
 8005954:	4627      	mov	r7, r4
 8005956:	2f00      	cmp	r7, #0
 8005958:	d143      	bne.n	80059e2 <_malloc_r+0xd6>
 800595a:	2c00      	cmp	r4, #0
 800595c:	d04b      	beq.n	80059f6 <_malloc_r+0xea>
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	4639      	mov	r1, r7
 8005962:	4630      	mov	r0, r6
 8005964:	eb04 0903 	add.w	r9, r4, r3
 8005968:	f000 fdf0 	bl	800654c <_sbrk_r>
 800596c:	4581      	cmp	r9, r0
 800596e:	d142      	bne.n	80059f6 <_malloc_r+0xea>
 8005970:	6821      	ldr	r1, [r4, #0]
 8005972:	4630      	mov	r0, r6
 8005974:	1a6d      	subs	r5, r5, r1
 8005976:	4629      	mov	r1, r5
 8005978:	f7ff ffa6 	bl	80058c8 <sbrk_aligned>
 800597c:	3001      	adds	r0, #1
 800597e:	d03a      	beq.n	80059f6 <_malloc_r+0xea>
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	442b      	add	r3, r5
 8005984:	6023      	str	r3, [r4, #0]
 8005986:	f8d8 3000 	ldr.w	r3, [r8]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	bb62      	cbnz	r2, 80059e8 <_malloc_r+0xdc>
 800598e:	f8c8 7000 	str.w	r7, [r8]
 8005992:	e00f      	b.n	80059b4 <_malloc_r+0xa8>
 8005994:	6822      	ldr	r2, [r4, #0]
 8005996:	1b52      	subs	r2, r2, r5
 8005998:	d420      	bmi.n	80059dc <_malloc_r+0xd0>
 800599a:	2a0b      	cmp	r2, #11
 800599c:	d917      	bls.n	80059ce <_malloc_r+0xc2>
 800599e:	1961      	adds	r1, r4, r5
 80059a0:	42a3      	cmp	r3, r4
 80059a2:	6025      	str	r5, [r4, #0]
 80059a4:	bf18      	it	ne
 80059a6:	6059      	strne	r1, [r3, #4]
 80059a8:	6863      	ldr	r3, [r4, #4]
 80059aa:	bf08      	it	eq
 80059ac:	f8c8 1000 	streq.w	r1, [r8]
 80059b0:	5162      	str	r2, [r4, r5]
 80059b2:	604b      	str	r3, [r1, #4]
 80059b4:	4630      	mov	r0, r6
 80059b6:	f000 f82f 	bl	8005a18 <__malloc_unlock>
 80059ba:	f104 000b 	add.w	r0, r4, #11
 80059be:	1d23      	adds	r3, r4, #4
 80059c0:	f020 0007 	bic.w	r0, r0, #7
 80059c4:	1ac2      	subs	r2, r0, r3
 80059c6:	bf1c      	itt	ne
 80059c8:	1a1b      	subne	r3, r3, r0
 80059ca:	50a3      	strne	r3, [r4, r2]
 80059cc:	e7af      	b.n	800592e <_malloc_r+0x22>
 80059ce:	6862      	ldr	r2, [r4, #4]
 80059d0:	42a3      	cmp	r3, r4
 80059d2:	bf0c      	ite	eq
 80059d4:	f8c8 2000 	streq.w	r2, [r8]
 80059d8:	605a      	strne	r2, [r3, #4]
 80059da:	e7eb      	b.n	80059b4 <_malloc_r+0xa8>
 80059dc:	4623      	mov	r3, r4
 80059de:	6864      	ldr	r4, [r4, #4]
 80059e0:	e7ae      	b.n	8005940 <_malloc_r+0x34>
 80059e2:	463c      	mov	r4, r7
 80059e4:	687f      	ldr	r7, [r7, #4]
 80059e6:	e7b6      	b.n	8005956 <_malloc_r+0x4a>
 80059e8:	461a      	mov	r2, r3
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	42a3      	cmp	r3, r4
 80059ee:	d1fb      	bne.n	80059e8 <_malloc_r+0xdc>
 80059f0:	2300      	movs	r3, #0
 80059f2:	6053      	str	r3, [r2, #4]
 80059f4:	e7de      	b.n	80059b4 <_malloc_r+0xa8>
 80059f6:	230c      	movs	r3, #12
 80059f8:	4630      	mov	r0, r6
 80059fa:	6033      	str	r3, [r6, #0]
 80059fc:	f000 f80c 	bl	8005a18 <__malloc_unlock>
 8005a00:	e794      	b.n	800592c <_malloc_r+0x20>
 8005a02:	6005      	str	r5, [r0, #0]
 8005a04:	e7d6      	b.n	80059b4 <_malloc_r+0xa8>
 8005a06:	bf00      	nop
 8005a08:	200007a4 	.word	0x200007a4

08005a0c <__malloc_lock>:
 8005a0c:	4801      	ldr	r0, [pc, #4]	@ (8005a14 <__malloc_lock+0x8>)
 8005a0e:	f7ff b89e 	b.w	8004b4e <__retarget_lock_acquire_recursive>
 8005a12:	bf00      	nop
 8005a14:	2000079c 	.word	0x2000079c

08005a18 <__malloc_unlock>:
 8005a18:	4801      	ldr	r0, [pc, #4]	@ (8005a20 <__malloc_unlock+0x8>)
 8005a1a:	f7ff b899 	b.w	8004b50 <__retarget_lock_release_recursive>
 8005a1e:	bf00      	nop
 8005a20:	2000079c 	.word	0x2000079c

08005a24 <_Balloc>:
 8005a24:	b570      	push	{r4, r5, r6, lr}
 8005a26:	69c6      	ldr	r6, [r0, #28]
 8005a28:	4604      	mov	r4, r0
 8005a2a:	460d      	mov	r5, r1
 8005a2c:	b976      	cbnz	r6, 8005a4c <_Balloc+0x28>
 8005a2e:	2010      	movs	r0, #16
 8005a30:	f7ff ff42 	bl	80058b8 <malloc>
 8005a34:	4602      	mov	r2, r0
 8005a36:	61e0      	str	r0, [r4, #28]
 8005a38:	b920      	cbnz	r0, 8005a44 <_Balloc+0x20>
 8005a3a:	216b      	movs	r1, #107	@ 0x6b
 8005a3c:	4b17      	ldr	r3, [pc, #92]	@ (8005a9c <_Balloc+0x78>)
 8005a3e:	4818      	ldr	r0, [pc, #96]	@ (8005aa0 <_Balloc+0x7c>)
 8005a40:	f000 fda2 	bl	8006588 <__assert_func>
 8005a44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a48:	6006      	str	r6, [r0, #0]
 8005a4a:	60c6      	str	r6, [r0, #12]
 8005a4c:	69e6      	ldr	r6, [r4, #28]
 8005a4e:	68f3      	ldr	r3, [r6, #12]
 8005a50:	b183      	cbz	r3, 8005a74 <_Balloc+0x50>
 8005a52:	69e3      	ldr	r3, [r4, #28]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a5a:	b9b8      	cbnz	r0, 8005a8c <_Balloc+0x68>
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	fa01 f605 	lsl.w	r6, r1, r5
 8005a62:	1d72      	adds	r2, r6, #5
 8005a64:	4620      	mov	r0, r4
 8005a66:	0092      	lsls	r2, r2, #2
 8005a68:	f000 fdac 	bl	80065c4 <_calloc_r>
 8005a6c:	b160      	cbz	r0, 8005a88 <_Balloc+0x64>
 8005a6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a72:	e00e      	b.n	8005a92 <_Balloc+0x6e>
 8005a74:	2221      	movs	r2, #33	@ 0x21
 8005a76:	2104      	movs	r1, #4
 8005a78:	4620      	mov	r0, r4
 8005a7a:	f000 fda3 	bl	80065c4 <_calloc_r>
 8005a7e:	69e3      	ldr	r3, [r4, #28]
 8005a80:	60f0      	str	r0, [r6, #12]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1e4      	bne.n	8005a52 <_Balloc+0x2e>
 8005a88:	2000      	movs	r0, #0
 8005a8a:	bd70      	pop	{r4, r5, r6, pc}
 8005a8c:	6802      	ldr	r2, [r0, #0]
 8005a8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a92:	2300      	movs	r3, #0
 8005a94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a98:	e7f7      	b.n	8005a8a <_Balloc+0x66>
 8005a9a:	bf00      	nop
 8005a9c:	08007f69 	.word	0x08007f69
 8005aa0:	08007fe9 	.word	0x08007fe9

08005aa4 <_Bfree>:
 8005aa4:	b570      	push	{r4, r5, r6, lr}
 8005aa6:	69c6      	ldr	r6, [r0, #28]
 8005aa8:	4605      	mov	r5, r0
 8005aaa:	460c      	mov	r4, r1
 8005aac:	b976      	cbnz	r6, 8005acc <_Bfree+0x28>
 8005aae:	2010      	movs	r0, #16
 8005ab0:	f7ff ff02 	bl	80058b8 <malloc>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	61e8      	str	r0, [r5, #28]
 8005ab8:	b920      	cbnz	r0, 8005ac4 <_Bfree+0x20>
 8005aba:	218f      	movs	r1, #143	@ 0x8f
 8005abc:	4b08      	ldr	r3, [pc, #32]	@ (8005ae0 <_Bfree+0x3c>)
 8005abe:	4809      	ldr	r0, [pc, #36]	@ (8005ae4 <_Bfree+0x40>)
 8005ac0:	f000 fd62 	bl	8006588 <__assert_func>
 8005ac4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ac8:	6006      	str	r6, [r0, #0]
 8005aca:	60c6      	str	r6, [r0, #12]
 8005acc:	b13c      	cbz	r4, 8005ade <_Bfree+0x3a>
 8005ace:	69eb      	ldr	r3, [r5, #28]
 8005ad0:	6862      	ldr	r2, [r4, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ad8:	6021      	str	r1, [r4, #0]
 8005ada:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005ade:	bd70      	pop	{r4, r5, r6, pc}
 8005ae0:	08007f69 	.word	0x08007f69
 8005ae4:	08007fe9 	.word	0x08007fe9

08005ae8 <__multadd>:
 8005ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aec:	4607      	mov	r7, r0
 8005aee:	460c      	mov	r4, r1
 8005af0:	461e      	mov	r6, r3
 8005af2:	2000      	movs	r0, #0
 8005af4:	690d      	ldr	r5, [r1, #16]
 8005af6:	f101 0c14 	add.w	ip, r1, #20
 8005afa:	f8dc 3000 	ldr.w	r3, [ip]
 8005afe:	3001      	adds	r0, #1
 8005b00:	b299      	uxth	r1, r3
 8005b02:	fb02 6101 	mla	r1, r2, r1, r6
 8005b06:	0c1e      	lsrs	r6, r3, #16
 8005b08:	0c0b      	lsrs	r3, r1, #16
 8005b0a:	fb02 3306 	mla	r3, r2, r6, r3
 8005b0e:	b289      	uxth	r1, r1
 8005b10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b14:	4285      	cmp	r5, r0
 8005b16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b1a:	f84c 1b04 	str.w	r1, [ip], #4
 8005b1e:	dcec      	bgt.n	8005afa <__multadd+0x12>
 8005b20:	b30e      	cbz	r6, 8005b66 <__multadd+0x7e>
 8005b22:	68a3      	ldr	r3, [r4, #8]
 8005b24:	42ab      	cmp	r3, r5
 8005b26:	dc19      	bgt.n	8005b5c <__multadd+0x74>
 8005b28:	6861      	ldr	r1, [r4, #4]
 8005b2a:	4638      	mov	r0, r7
 8005b2c:	3101      	adds	r1, #1
 8005b2e:	f7ff ff79 	bl	8005a24 <_Balloc>
 8005b32:	4680      	mov	r8, r0
 8005b34:	b928      	cbnz	r0, 8005b42 <__multadd+0x5a>
 8005b36:	4602      	mov	r2, r0
 8005b38:	21ba      	movs	r1, #186	@ 0xba
 8005b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005b6c <__multadd+0x84>)
 8005b3c:	480c      	ldr	r0, [pc, #48]	@ (8005b70 <__multadd+0x88>)
 8005b3e:	f000 fd23 	bl	8006588 <__assert_func>
 8005b42:	6922      	ldr	r2, [r4, #16]
 8005b44:	f104 010c 	add.w	r1, r4, #12
 8005b48:	3202      	adds	r2, #2
 8005b4a:	0092      	lsls	r2, r2, #2
 8005b4c:	300c      	adds	r0, #12
 8005b4e:	f000 fd0d 	bl	800656c <memcpy>
 8005b52:	4621      	mov	r1, r4
 8005b54:	4638      	mov	r0, r7
 8005b56:	f7ff ffa5 	bl	8005aa4 <_Bfree>
 8005b5a:	4644      	mov	r4, r8
 8005b5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b60:	3501      	adds	r5, #1
 8005b62:	615e      	str	r6, [r3, #20]
 8005b64:	6125      	str	r5, [r4, #16]
 8005b66:	4620      	mov	r0, r4
 8005b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b6c:	08007fd8 	.word	0x08007fd8
 8005b70:	08007fe9 	.word	0x08007fe9

08005b74 <__hi0bits>:
 8005b74:	4603      	mov	r3, r0
 8005b76:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005b7a:	bf3a      	itte	cc
 8005b7c:	0403      	lslcc	r3, r0, #16
 8005b7e:	2010      	movcc	r0, #16
 8005b80:	2000      	movcs	r0, #0
 8005b82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b86:	bf3c      	itt	cc
 8005b88:	021b      	lslcc	r3, r3, #8
 8005b8a:	3008      	addcc	r0, #8
 8005b8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b90:	bf3c      	itt	cc
 8005b92:	011b      	lslcc	r3, r3, #4
 8005b94:	3004      	addcc	r0, #4
 8005b96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b9a:	bf3c      	itt	cc
 8005b9c:	009b      	lslcc	r3, r3, #2
 8005b9e:	3002      	addcc	r0, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	db05      	blt.n	8005bb0 <__hi0bits+0x3c>
 8005ba4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005ba8:	f100 0001 	add.w	r0, r0, #1
 8005bac:	bf08      	it	eq
 8005bae:	2020      	moveq	r0, #32
 8005bb0:	4770      	bx	lr

08005bb2 <__lo0bits>:
 8005bb2:	6803      	ldr	r3, [r0, #0]
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	f013 0007 	ands.w	r0, r3, #7
 8005bba:	d00b      	beq.n	8005bd4 <__lo0bits+0x22>
 8005bbc:	07d9      	lsls	r1, r3, #31
 8005bbe:	d421      	bmi.n	8005c04 <__lo0bits+0x52>
 8005bc0:	0798      	lsls	r0, r3, #30
 8005bc2:	bf49      	itett	mi
 8005bc4:	085b      	lsrmi	r3, r3, #1
 8005bc6:	089b      	lsrpl	r3, r3, #2
 8005bc8:	2001      	movmi	r0, #1
 8005bca:	6013      	strmi	r3, [r2, #0]
 8005bcc:	bf5c      	itt	pl
 8005bce:	2002      	movpl	r0, #2
 8005bd0:	6013      	strpl	r3, [r2, #0]
 8005bd2:	4770      	bx	lr
 8005bd4:	b299      	uxth	r1, r3
 8005bd6:	b909      	cbnz	r1, 8005bdc <__lo0bits+0x2a>
 8005bd8:	2010      	movs	r0, #16
 8005bda:	0c1b      	lsrs	r3, r3, #16
 8005bdc:	b2d9      	uxtb	r1, r3
 8005bde:	b909      	cbnz	r1, 8005be4 <__lo0bits+0x32>
 8005be0:	3008      	adds	r0, #8
 8005be2:	0a1b      	lsrs	r3, r3, #8
 8005be4:	0719      	lsls	r1, r3, #28
 8005be6:	bf04      	itt	eq
 8005be8:	091b      	lsreq	r3, r3, #4
 8005bea:	3004      	addeq	r0, #4
 8005bec:	0799      	lsls	r1, r3, #30
 8005bee:	bf04      	itt	eq
 8005bf0:	089b      	lsreq	r3, r3, #2
 8005bf2:	3002      	addeq	r0, #2
 8005bf4:	07d9      	lsls	r1, r3, #31
 8005bf6:	d403      	bmi.n	8005c00 <__lo0bits+0x4e>
 8005bf8:	085b      	lsrs	r3, r3, #1
 8005bfa:	f100 0001 	add.w	r0, r0, #1
 8005bfe:	d003      	beq.n	8005c08 <__lo0bits+0x56>
 8005c00:	6013      	str	r3, [r2, #0]
 8005c02:	4770      	bx	lr
 8005c04:	2000      	movs	r0, #0
 8005c06:	4770      	bx	lr
 8005c08:	2020      	movs	r0, #32
 8005c0a:	4770      	bx	lr

08005c0c <__i2b>:
 8005c0c:	b510      	push	{r4, lr}
 8005c0e:	460c      	mov	r4, r1
 8005c10:	2101      	movs	r1, #1
 8005c12:	f7ff ff07 	bl	8005a24 <_Balloc>
 8005c16:	4602      	mov	r2, r0
 8005c18:	b928      	cbnz	r0, 8005c26 <__i2b+0x1a>
 8005c1a:	f240 1145 	movw	r1, #325	@ 0x145
 8005c1e:	4b04      	ldr	r3, [pc, #16]	@ (8005c30 <__i2b+0x24>)
 8005c20:	4804      	ldr	r0, [pc, #16]	@ (8005c34 <__i2b+0x28>)
 8005c22:	f000 fcb1 	bl	8006588 <__assert_func>
 8005c26:	2301      	movs	r3, #1
 8005c28:	6144      	str	r4, [r0, #20]
 8005c2a:	6103      	str	r3, [r0, #16]
 8005c2c:	bd10      	pop	{r4, pc}
 8005c2e:	bf00      	nop
 8005c30:	08007fd8 	.word	0x08007fd8
 8005c34:	08007fe9 	.word	0x08007fe9

08005c38 <__multiply>:
 8005c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c3c:	4617      	mov	r7, r2
 8005c3e:	690a      	ldr	r2, [r1, #16]
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	4689      	mov	r9, r1
 8005c44:	429a      	cmp	r2, r3
 8005c46:	bfa2      	ittt	ge
 8005c48:	463b      	movge	r3, r7
 8005c4a:	460f      	movge	r7, r1
 8005c4c:	4699      	movge	r9, r3
 8005c4e:	693d      	ldr	r5, [r7, #16]
 8005c50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	eb05 060a 	add.w	r6, r5, sl
 8005c5c:	42b3      	cmp	r3, r6
 8005c5e:	b085      	sub	sp, #20
 8005c60:	bfb8      	it	lt
 8005c62:	3101      	addlt	r1, #1
 8005c64:	f7ff fede 	bl	8005a24 <_Balloc>
 8005c68:	b930      	cbnz	r0, 8005c78 <__multiply+0x40>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005c70:	4b40      	ldr	r3, [pc, #256]	@ (8005d74 <__multiply+0x13c>)
 8005c72:	4841      	ldr	r0, [pc, #260]	@ (8005d78 <__multiply+0x140>)
 8005c74:	f000 fc88 	bl	8006588 <__assert_func>
 8005c78:	f100 0414 	add.w	r4, r0, #20
 8005c7c:	4623      	mov	r3, r4
 8005c7e:	2200      	movs	r2, #0
 8005c80:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005c84:	4573      	cmp	r3, lr
 8005c86:	d320      	bcc.n	8005cca <__multiply+0x92>
 8005c88:	f107 0814 	add.w	r8, r7, #20
 8005c8c:	f109 0114 	add.w	r1, r9, #20
 8005c90:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005c94:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005c98:	9302      	str	r3, [sp, #8]
 8005c9a:	1beb      	subs	r3, r5, r7
 8005c9c:	3b15      	subs	r3, #21
 8005c9e:	f023 0303 	bic.w	r3, r3, #3
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	3715      	adds	r7, #21
 8005ca6:	42bd      	cmp	r5, r7
 8005ca8:	bf38      	it	cc
 8005caa:	2304      	movcc	r3, #4
 8005cac:	9301      	str	r3, [sp, #4]
 8005cae:	9b02      	ldr	r3, [sp, #8]
 8005cb0:	9103      	str	r1, [sp, #12]
 8005cb2:	428b      	cmp	r3, r1
 8005cb4:	d80c      	bhi.n	8005cd0 <__multiply+0x98>
 8005cb6:	2e00      	cmp	r6, #0
 8005cb8:	dd03      	ble.n	8005cc2 <__multiply+0x8a>
 8005cba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d055      	beq.n	8005d6e <__multiply+0x136>
 8005cc2:	6106      	str	r6, [r0, #16]
 8005cc4:	b005      	add	sp, #20
 8005cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cca:	f843 2b04 	str.w	r2, [r3], #4
 8005cce:	e7d9      	b.n	8005c84 <__multiply+0x4c>
 8005cd0:	f8b1 a000 	ldrh.w	sl, [r1]
 8005cd4:	f1ba 0f00 	cmp.w	sl, #0
 8005cd8:	d01f      	beq.n	8005d1a <__multiply+0xe2>
 8005cda:	46c4      	mov	ip, r8
 8005cdc:	46a1      	mov	r9, r4
 8005cde:	2700      	movs	r7, #0
 8005ce0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005ce4:	f8d9 3000 	ldr.w	r3, [r9]
 8005ce8:	fa1f fb82 	uxth.w	fp, r2
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	fb0a 330b 	mla	r3, sl, fp, r3
 8005cf2:	443b      	add	r3, r7
 8005cf4:	f8d9 7000 	ldr.w	r7, [r9]
 8005cf8:	0c12      	lsrs	r2, r2, #16
 8005cfa:	0c3f      	lsrs	r7, r7, #16
 8005cfc:	fb0a 7202 	mla	r2, sl, r2, r7
 8005d00:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d0a:	4565      	cmp	r5, ip
 8005d0c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005d10:	f849 3b04 	str.w	r3, [r9], #4
 8005d14:	d8e4      	bhi.n	8005ce0 <__multiply+0xa8>
 8005d16:	9b01      	ldr	r3, [sp, #4]
 8005d18:	50e7      	str	r7, [r4, r3]
 8005d1a:	9b03      	ldr	r3, [sp, #12]
 8005d1c:	3104      	adds	r1, #4
 8005d1e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005d22:	f1b9 0f00 	cmp.w	r9, #0
 8005d26:	d020      	beq.n	8005d6a <__multiply+0x132>
 8005d28:	4647      	mov	r7, r8
 8005d2a:	46a4      	mov	ip, r4
 8005d2c:	f04f 0a00 	mov.w	sl, #0
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	f8b7 b000 	ldrh.w	fp, [r7]
 8005d36:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	fb09 220b 	mla	r2, r9, fp, r2
 8005d40:	4452      	add	r2, sl
 8005d42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d46:	f84c 3b04 	str.w	r3, [ip], #4
 8005d4a:	f857 3b04 	ldr.w	r3, [r7], #4
 8005d4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d52:	f8bc 3000 	ldrh.w	r3, [ip]
 8005d56:	42bd      	cmp	r5, r7
 8005d58:	fb09 330a 	mla	r3, r9, sl, r3
 8005d5c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005d60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d64:	d8e5      	bhi.n	8005d32 <__multiply+0xfa>
 8005d66:	9a01      	ldr	r2, [sp, #4]
 8005d68:	50a3      	str	r3, [r4, r2]
 8005d6a:	3404      	adds	r4, #4
 8005d6c:	e79f      	b.n	8005cae <__multiply+0x76>
 8005d6e:	3e01      	subs	r6, #1
 8005d70:	e7a1      	b.n	8005cb6 <__multiply+0x7e>
 8005d72:	bf00      	nop
 8005d74:	08007fd8 	.word	0x08007fd8
 8005d78:	08007fe9 	.word	0x08007fe9

08005d7c <__pow5mult>:
 8005d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d80:	4615      	mov	r5, r2
 8005d82:	f012 0203 	ands.w	r2, r2, #3
 8005d86:	4607      	mov	r7, r0
 8005d88:	460e      	mov	r6, r1
 8005d8a:	d007      	beq.n	8005d9c <__pow5mult+0x20>
 8005d8c:	4c25      	ldr	r4, [pc, #148]	@ (8005e24 <__pow5mult+0xa8>)
 8005d8e:	3a01      	subs	r2, #1
 8005d90:	2300      	movs	r3, #0
 8005d92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d96:	f7ff fea7 	bl	8005ae8 <__multadd>
 8005d9a:	4606      	mov	r6, r0
 8005d9c:	10ad      	asrs	r5, r5, #2
 8005d9e:	d03d      	beq.n	8005e1c <__pow5mult+0xa0>
 8005da0:	69fc      	ldr	r4, [r7, #28]
 8005da2:	b97c      	cbnz	r4, 8005dc4 <__pow5mult+0x48>
 8005da4:	2010      	movs	r0, #16
 8005da6:	f7ff fd87 	bl	80058b8 <malloc>
 8005daa:	4602      	mov	r2, r0
 8005dac:	61f8      	str	r0, [r7, #28]
 8005dae:	b928      	cbnz	r0, 8005dbc <__pow5mult+0x40>
 8005db0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005db4:	4b1c      	ldr	r3, [pc, #112]	@ (8005e28 <__pow5mult+0xac>)
 8005db6:	481d      	ldr	r0, [pc, #116]	@ (8005e2c <__pow5mult+0xb0>)
 8005db8:	f000 fbe6 	bl	8006588 <__assert_func>
 8005dbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005dc0:	6004      	str	r4, [r0, #0]
 8005dc2:	60c4      	str	r4, [r0, #12]
 8005dc4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005dc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005dcc:	b94c      	cbnz	r4, 8005de2 <__pow5mult+0x66>
 8005dce:	f240 2171 	movw	r1, #625	@ 0x271
 8005dd2:	4638      	mov	r0, r7
 8005dd4:	f7ff ff1a 	bl	8005c0c <__i2b>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	4604      	mov	r4, r0
 8005ddc:	f8c8 0008 	str.w	r0, [r8, #8]
 8005de0:	6003      	str	r3, [r0, #0]
 8005de2:	f04f 0900 	mov.w	r9, #0
 8005de6:	07eb      	lsls	r3, r5, #31
 8005de8:	d50a      	bpl.n	8005e00 <__pow5mult+0x84>
 8005dea:	4631      	mov	r1, r6
 8005dec:	4622      	mov	r2, r4
 8005dee:	4638      	mov	r0, r7
 8005df0:	f7ff ff22 	bl	8005c38 <__multiply>
 8005df4:	4680      	mov	r8, r0
 8005df6:	4631      	mov	r1, r6
 8005df8:	4638      	mov	r0, r7
 8005dfa:	f7ff fe53 	bl	8005aa4 <_Bfree>
 8005dfe:	4646      	mov	r6, r8
 8005e00:	106d      	asrs	r5, r5, #1
 8005e02:	d00b      	beq.n	8005e1c <__pow5mult+0xa0>
 8005e04:	6820      	ldr	r0, [r4, #0]
 8005e06:	b938      	cbnz	r0, 8005e18 <__pow5mult+0x9c>
 8005e08:	4622      	mov	r2, r4
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	4638      	mov	r0, r7
 8005e0e:	f7ff ff13 	bl	8005c38 <__multiply>
 8005e12:	6020      	str	r0, [r4, #0]
 8005e14:	f8c0 9000 	str.w	r9, [r0]
 8005e18:	4604      	mov	r4, r0
 8005e1a:	e7e4      	b.n	8005de6 <__pow5mult+0x6a>
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e22:	bf00      	nop
 8005e24:	0800809c 	.word	0x0800809c
 8005e28:	08007f69 	.word	0x08007f69
 8005e2c:	08007fe9 	.word	0x08007fe9

08005e30 <__lshift>:
 8005e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e34:	460c      	mov	r4, r1
 8005e36:	4607      	mov	r7, r0
 8005e38:	4691      	mov	r9, r2
 8005e3a:	6923      	ldr	r3, [r4, #16]
 8005e3c:	6849      	ldr	r1, [r1, #4]
 8005e3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e42:	68a3      	ldr	r3, [r4, #8]
 8005e44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e48:	f108 0601 	add.w	r6, r8, #1
 8005e4c:	42b3      	cmp	r3, r6
 8005e4e:	db0b      	blt.n	8005e68 <__lshift+0x38>
 8005e50:	4638      	mov	r0, r7
 8005e52:	f7ff fde7 	bl	8005a24 <_Balloc>
 8005e56:	4605      	mov	r5, r0
 8005e58:	b948      	cbnz	r0, 8005e6e <__lshift+0x3e>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005e60:	4b27      	ldr	r3, [pc, #156]	@ (8005f00 <__lshift+0xd0>)
 8005e62:	4828      	ldr	r0, [pc, #160]	@ (8005f04 <__lshift+0xd4>)
 8005e64:	f000 fb90 	bl	8006588 <__assert_func>
 8005e68:	3101      	adds	r1, #1
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	e7ee      	b.n	8005e4c <__lshift+0x1c>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f100 0114 	add.w	r1, r0, #20
 8005e74:	f100 0210 	add.w	r2, r0, #16
 8005e78:	4618      	mov	r0, r3
 8005e7a:	4553      	cmp	r3, sl
 8005e7c:	db33      	blt.n	8005ee6 <__lshift+0xb6>
 8005e7e:	6920      	ldr	r0, [r4, #16]
 8005e80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e84:	f104 0314 	add.w	r3, r4, #20
 8005e88:	f019 091f 	ands.w	r9, r9, #31
 8005e8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005e94:	d02b      	beq.n	8005eee <__lshift+0xbe>
 8005e96:	468a      	mov	sl, r1
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f1c9 0e20 	rsb	lr, r9, #32
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	fa00 f009 	lsl.w	r0, r0, r9
 8005ea4:	4310      	orrs	r0, r2
 8005ea6:	f84a 0b04 	str.w	r0, [sl], #4
 8005eaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eae:	459c      	cmp	ip, r3
 8005eb0:	fa22 f20e 	lsr.w	r2, r2, lr
 8005eb4:	d8f3      	bhi.n	8005e9e <__lshift+0x6e>
 8005eb6:	ebac 0304 	sub.w	r3, ip, r4
 8005eba:	3b15      	subs	r3, #21
 8005ebc:	f023 0303 	bic.w	r3, r3, #3
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	f104 0015 	add.w	r0, r4, #21
 8005ec6:	4560      	cmp	r0, ip
 8005ec8:	bf88      	it	hi
 8005eca:	2304      	movhi	r3, #4
 8005ecc:	50ca      	str	r2, [r1, r3]
 8005ece:	b10a      	cbz	r2, 8005ed4 <__lshift+0xa4>
 8005ed0:	f108 0602 	add.w	r6, r8, #2
 8005ed4:	3e01      	subs	r6, #1
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	4621      	mov	r1, r4
 8005eda:	612e      	str	r6, [r5, #16]
 8005edc:	f7ff fde2 	bl	8005aa4 <_Bfree>
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee6:	f842 0f04 	str.w	r0, [r2, #4]!
 8005eea:	3301      	adds	r3, #1
 8005eec:	e7c5      	b.n	8005e7a <__lshift+0x4a>
 8005eee:	3904      	subs	r1, #4
 8005ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ef4:	459c      	cmp	ip, r3
 8005ef6:	f841 2f04 	str.w	r2, [r1, #4]!
 8005efa:	d8f9      	bhi.n	8005ef0 <__lshift+0xc0>
 8005efc:	e7ea      	b.n	8005ed4 <__lshift+0xa4>
 8005efe:	bf00      	nop
 8005f00:	08007fd8 	.word	0x08007fd8
 8005f04:	08007fe9 	.word	0x08007fe9

08005f08 <__mcmp>:
 8005f08:	4603      	mov	r3, r0
 8005f0a:	690a      	ldr	r2, [r1, #16]
 8005f0c:	6900      	ldr	r0, [r0, #16]
 8005f0e:	b530      	push	{r4, r5, lr}
 8005f10:	1a80      	subs	r0, r0, r2
 8005f12:	d10e      	bne.n	8005f32 <__mcmp+0x2a>
 8005f14:	3314      	adds	r3, #20
 8005f16:	3114      	adds	r1, #20
 8005f18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005f1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005f20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f28:	4295      	cmp	r5, r2
 8005f2a:	d003      	beq.n	8005f34 <__mcmp+0x2c>
 8005f2c:	d205      	bcs.n	8005f3a <__mcmp+0x32>
 8005f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f32:	bd30      	pop	{r4, r5, pc}
 8005f34:	42a3      	cmp	r3, r4
 8005f36:	d3f3      	bcc.n	8005f20 <__mcmp+0x18>
 8005f38:	e7fb      	b.n	8005f32 <__mcmp+0x2a>
 8005f3a:	2001      	movs	r0, #1
 8005f3c:	e7f9      	b.n	8005f32 <__mcmp+0x2a>
	...

08005f40 <__mdiff>:
 8005f40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f44:	4689      	mov	r9, r1
 8005f46:	4606      	mov	r6, r0
 8005f48:	4611      	mov	r1, r2
 8005f4a:	4648      	mov	r0, r9
 8005f4c:	4614      	mov	r4, r2
 8005f4e:	f7ff ffdb 	bl	8005f08 <__mcmp>
 8005f52:	1e05      	subs	r5, r0, #0
 8005f54:	d112      	bne.n	8005f7c <__mdiff+0x3c>
 8005f56:	4629      	mov	r1, r5
 8005f58:	4630      	mov	r0, r6
 8005f5a:	f7ff fd63 	bl	8005a24 <_Balloc>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	b928      	cbnz	r0, 8005f6e <__mdiff+0x2e>
 8005f62:	f240 2137 	movw	r1, #567	@ 0x237
 8005f66:	4b3e      	ldr	r3, [pc, #248]	@ (8006060 <__mdiff+0x120>)
 8005f68:	483e      	ldr	r0, [pc, #248]	@ (8006064 <__mdiff+0x124>)
 8005f6a:	f000 fb0d 	bl	8006588 <__assert_func>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f74:	4610      	mov	r0, r2
 8005f76:	b003      	add	sp, #12
 8005f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f7c:	bfbc      	itt	lt
 8005f7e:	464b      	movlt	r3, r9
 8005f80:	46a1      	movlt	r9, r4
 8005f82:	4630      	mov	r0, r6
 8005f84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005f88:	bfba      	itte	lt
 8005f8a:	461c      	movlt	r4, r3
 8005f8c:	2501      	movlt	r5, #1
 8005f8e:	2500      	movge	r5, #0
 8005f90:	f7ff fd48 	bl	8005a24 <_Balloc>
 8005f94:	4602      	mov	r2, r0
 8005f96:	b918      	cbnz	r0, 8005fa0 <__mdiff+0x60>
 8005f98:	f240 2145 	movw	r1, #581	@ 0x245
 8005f9c:	4b30      	ldr	r3, [pc, #192]	@ (8006060 <__mdiff+0x120>)
 8005f9e:	e7e3      	b.n	8005f68 <__mdiff+0x28>
 8005fa0:	f100 0b14 	add.w	fp, r0, #20
 8005fa4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005fa8:	f109 0310 	add.w	r3, r9, #16
 8005fac:	60c5      	str	r5, [r0, #12]
 8005fae:	f04f 0c00 	mov.w	ip, #0
 8005fb2:	f109 0514 	add.w	r5, r9, #20
 8005fb6:	46d9      	mov	r9, fp
 8005fb8:	6926      	ldr	r6, [r4, #16]
 8005fba:	f104 0e14 	add.w	lr, r4, #20
 8005fbe:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005fc2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005fc6:	9301      	str	r3, [sp, #4]
 8005fc8:	9b01      	ldr	r3, [sp, #4]
 8005fca:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005fce:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005fd2:	b281      	uxth	r1, r0
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	fa1f f38a 	uxth.w	r3, sl
 8005fda:	1a5b      	subs	r3, r3, r1
 8005fdc:	0c00      	lsrs	r0, r0, #16
 8005fde:	4463      	add	r3, ip
 8005fe0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005fe4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005fee:	4576      	cmp	r6, lr
 8005ff0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005ff4:	f849 3b04 	str.w	r3, [r9], #4
 8005ff8:	d8e6      	bhi.n	8005fc8 <__mdiff+0x88>
 8005ffa:	1b33      	subs	r3, r6, r4
 8005ffc:	3b15      	subs	r3, #21
 8005ffe:	f023 0303 	bic.w	r3, r3, #3
 8006002:	3415      	adds	r4, #21
 8006004:	3304      	adds	r3, #4
 8006006:	42a6      	cmp	r6, r4
 8006008:	bf38      	it	cc
 800600a:	2304      	movcc	r3, #4
 800600c:	441d      	add	r5, r3
 800600e:	445b      	add	r3, fp
 8006010:	461e      	mov	r6, r3
 8006012:	462c      	mov	r4, r5
 8006014:	4544      	cmp	r4, r8
 8006016:	d30e      	bcc.n	8006036 <__mdiff+0xf6>
 8006018:	f108 0103 	add.w	r1, r8, #3
 800601c:	1b49      	subs	r1, r1, r5
 800601e:	f021 0103 	bic.w	r1, r1, #3
 8006022:	3d03      	subs	r5, #3
 8006024:	45a8      	cmp	r8, r5
 8006026:	bf38      	it	cc
 8006028:	2100      	movcc	r1, #0
 800602a:	440b      	add	r3, r1
 800602c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006030:	b199      	cbz	r1, 800605a <__mdiff+0x11a>
 8006032:	6117      	str	r7, [r2, #16]
 8006034:	e79e      	b.n	8005f74 <__mdiff+0x34>
 8006036:	46e6      	mov	lr, ip
 8006038:	f854 1b04 	ldr.w	r1, [r4], #4
 800603c:	fa1f fc81 	uxth.w	ip, r1
 8006040:	44f4      	add	ip, lr
 8006042:	0c08      	lsrs	r0, r1, #16
 8006044:	4471      	add	r1, lr
 8006046:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800604a:	b289      	uxth	r1, r1
 800604c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006050:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006054:	f846 1b04 	str.w	r1, [r6], #4
 8006058:	e7dc      	b.n	8006014 <__mdiff+0xd4>
 800605a:	3f01      	subs	r7, #1
 800605c:	e7e6      	b.n	800602c <__mdiff+0xec>
 800605e:	bf00      	nop
 8006060:	08007fd8 	.word	0x08007fd8
 8006064:	08007fe9 	.word	0x08007fe9

08006068 <__d2b>:
 8006068:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800606c:	2101      	movs	r1, #1
 800606e:	4690      	mov	r8, r2
 8006070:	4699      	mov	r9, r3
 8006072:	9e08      	ldr	r6, [sp, #32]
 8006074:	f7ff fcd6 	bl	8005a24 <_Balloc>
 8006078:	4604      	mov	r4, r0
 800607a:	b930      	cbnz	r0, 800608a <__d2b+0x22>
 800607c:	4602      	mov	r2, r0
 800607e:	f240 310f 	movw	r1, #783	@ 0x30f
 8006082:	4b23      	ldr	r3, [pc, #140]	@ (8006110 <__d2b+0xa8>)
 8006084:	4823      	ldr	r0, [pc, #140]	@ (8006114 <__d2b+0xac>)
 8006086:	f000 fa7f 	bl	8006588 <__assert_func>
 800608a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800608e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006092:	b10d      	cbz	r5, 8006098 <__d2b+0x30>
 8006094:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006098:	9301      	str	r3, [sp, #4]
 800609a:	f1b8 0300 	subs.w	r3, r8, #0
 800609e:	d024      	beq.n	80060ea <__d2b+0x82>
 80060a0:	4668      	mov	r0, sp
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	f7ff fd85 	bl	8005bb2 <__lo0bits>
 80060a8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80060ac:	b1d8      	cbz	r0, 80060e6 <__d2b+0x7e>
 80060ae:	f1c0 0320 	rsb	r3, r0, #32
 80060b2:	fa02 f303 	lsl.w	r3, r2, r3
 80060b6:	430b      	orrs	r3, r1
 80060b8:	40c2      	lsrs	r2, r0
 80060ba:	6163      	str	r3, [r4, #20]
 80060bc:	9201      	str	r2, [sp, #4]
 80060be:	9b01      	ldr	r3, [sp, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	bf0c      	ite	eq
 80060c4:	2201      	moveq	r2, #1
 80060c6:	2202      	movne	r2, #2
 80060c8:	61a3      	str	r3, [r4, #24]
 80060ca:	6122      	str	r2, [r4, #16]
 80060cc:	b1ad      	cbz	r5, 80060fa <__d2b+0x92>
 80060ce:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80060d2:	4405      	add	r5, r0
 80060d4:	6035      	str	r5, [r6, #0]
 80060d6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80060da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060dc:	6018      	str	r0, [r3, #0]
 80060de:	4620      	mov	r0, r4
 80060e0:	b002      	add	sp, #8
 80060e2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80060e6:	6161      	str	r1, [r4, #20]
 80060e8:	e7e9      	b.n	80060be <__d2b+0x56>
 80060ea:	a801      	add	r0, sp, #4
 80060ec:	f7ff fd61 	bl	8005bb2 <__lo0bits>
 80060f0:	9b01      	ldr	r3, [sp, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	6163      	str	r3, [r4, #20]
 80060f6:	3020      	adds	r0, #32
 80060f8:	e7e7      	b.n	80060ca <__d2b+0x62>
 80060fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80060fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006102:	6030      	str	r0, [r6, #0]
 8006104:	6918      	ldr	r0, [r3, #16]
 8006106:	f7ff fd35 	bl	8005b74 <__hi0bits>
 800610a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800610e:	e7e4      	b.n	80060da <__d2b+0x72>
 8006110:	08007fd8 	.word	0x08007fd8
 8006114:	08007fe9 	.word	0x08007fe9

08006118 <__ssputs_r>:
 8006118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800611c:	461f      	mov	r7, r3
 800611e:	688e      	ldr	r6, [r1, #8]
 8006120:	4682      	mov	sl, r0
 8006122:	42be      	cmp	r6, r7
 8006124:	460c      	mov	r4, r1
 8006126:	4690      	mov	r8, r2
 8006128:	680b      	ldr	r3, [r1, #0]
 800612a:	d82d      	bhi.n	8006188 <__ssputs_r+0x70>
 800612c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006130:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006134:	d026      	beq.n	8006184 <__ssputs_r+0x6c>
 8006136:	6965      	ldr	r5, [r4, #20]
 8006138:	6909      	ldr	r1, [r1, #16]
 800613a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800613e:	eba3 0901 	sub.w	r9, r3, r1
 8006142:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006146:	1c7b      	adds	r3, r7, #1
 8006148:	444b      	add	r3, r9
 800614a:	106d      	asrs	r5, r5, #1
 800614c:	429d      	cmp	r5, r3
 800614e:	bf38      	it	cc
 8006150:	461d      	movcc	r5, r3
 8006152:	0553      	lsls	r3, r2, #21
 8006154:	d527      	bpl.n	80061a6 <__ssputs_r+0x8e>
 8006156:	4629      	mov	r1, r5
 8006158:	f7ff fbd8 	bl	800590c <_malloc_r>
 800615c:	4606      	mov	r6, r0
 800615e:	b360      	cbz	r0, 80061ba <__ssputs_r+0xa2>
 8006160:	464a      	mov	r2, r9
 8006162:	6921      	ldr	r1, [r4, #16]
 8006164:	f000 fa02 	bl	800656c <memcpy>
 8006168:	89a3      	ldrh	r3, [r4, #12]
 800616a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800616e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006172:	81a3      	strh	r3, [r4, #12]
 8006174:	6126      	str	r6, [r4, #16]
 8006176:	444e      	add	r6, r9
 8006178:	6026      	str	r6, [r4, #0]
 800617a:	463e      	mov	r6, r7
 800617c:	6165      	str	r5, [r4, #20]
 800617e:	eba5 0509 	sub.w	r5, r5, r9
 8006182:	60a5      	str	r5, [r4, #8]
 8006184:	42be      	cmp	r6, r7
 8006186:	d900      	bls.n	800618a <__ssputs_r+0x72>
 8006188:	463e      	mov	r6, r7
 800618a:	4632      	mov	r2, r6
 800618c:	4641      	mov	r1, r8
 800618e:	6820      	ldr	r0, [r4, #0]
 8006190:	f000 f9c2 	bl	8006518 <memmove>
 8006194:	2000      	movs	r0, #0
 8006196:	68a3      	ldr	r3, [r4, #8]
 8006198:	1b9b      	subs	r3, r3, r6
 800619a:	60a3      	str	r3, [r4, #8]
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	4433      	add	r3, r6
 80061a0:	6023      	str	r3, [r4, #0]
 80061a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061a6:	462a      	mov	r2, r5
 80061a8:	f000 fa32 	bl	8006610 <_realloc_r>
 80061ac:	4606      	mov	r6, r0
 80061ae:	2800      	cmp	r0, #0
 80061b0:	d1e0      	bne.n	8006174 <__ssputs_r+0x5c>
 80061b2:	4650      	mov	r0, sl
 80061b4:	6921      	ldr	r1, [r4, #16]
 80061b6:	f7ff fb37 	bl	8005828 <_free_r>
 80061ba:	230c      	movs	r3, #12
 80061bc:	f8ca 3000 	str.w	r3, [sl]
 80061c0:	89a3      	ldrh	r3, [r4, #12]
 80061c2:	f04f 30ff 	mov.w	r0, #4294967295
 80061c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061ca:	81a3      	strh	r3, [r4, #12]
 80061cc:	e7e9      	b.n	80061a2 <__ssputs_r+0x8a>
	...

080061d0 <_svfiprintf_r>:
 80061d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d4:	4698      	mov	r8, r3
 80061d6:	898b      	ldrh	r3, [r1, #12]
 80061d8:	4607      	mov	r7, r0
 80061da:	061b      	lsls	r3, r3, #24
 80061dc:	460d      	mov	r5, r1
 80061de:	4614      	mov	r4, r2
 80061e0:	b09d      	sub	sp, #116	@ 0x74
 80061e2:	d510      	bpl.n	8006206 <_svfiprintf_r+0x36>
 80061e4:	690b      	ldr	r3, [r1, #16]
 80061e6:	b973      	cbnz	r3, 8006206 <_svfiprintf_r+0x36>
 80061e8:	2140      	movs	r1, #64	@ 0x40
 80061ea:	f7ff fb8f 	bl	800590c <_malloc_r>
 80061ee:	6028      	str	r0, [r5, #0]
 80061f0:	6128      	str	r0, [r5, #16]
 80061f2:	b930      	cbnz	r0, 8006202 <_svfiprintf_r+0x32>
 80061f4:	230c      	movs	r3, #12
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	f04f 30ff 	mov.w	r0, #4294967295
 80061fc:	b01d      	add	sp, #116	@ 0x74
 80061fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006202:	2340      	movs	r3, #64	@ 0x40
 8006204:	616b      	str	r3, [r5, #20]
 8006206:	2300      	movs	r3, #0
 8006208:	9309      	str	r3, [sp, #36]	@ 0x24
 800620a:	2320      	movs	r3, #32
 800620c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006210:	2330      	movs	r3, #48	@ 0x30
 8006212:	f04f 0901 	mov.w	r9, #1
 8006216:	f8cd 800c 	str.w	r8, [sp, #12]
 800621a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80063b4 <_svfiprintf_r+0x1e4>
 800621e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006222:	4623      	mov	r3, r4
 8006224:	469a      	mov	sl, r3
 8006226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800622a:	b10a      	cbz	r2, 8006230 <_svfiprintf_r+0x60>
 800622c:	2a25      	cmp	r2, #37	@ 0x25
 800622e:	d1f9      	bne.n	8006224 <_svfiprintf_r+0x54>
 8006230:	ebba 0b04 	subs.w	fp, sl, r4
 8006234:	d00b      	beq.n	800624e <_svfiprintf_r+0x7e>
 8006236:	465b      	mov	r3, fp
 8006238:	4622      	mov	r2, r4
 800623a:	4629      	mov	r1, r5
 800623c:	4638      	mov	r0, r7
 800623e:	f7ff ff6b 	bl	8006118 <__ssputs_r>
 8006242:	3001      	adds	r0, #1
 8006244:	f000 80a7 	beq.w	8006396 <_svfiprintf_r+0x1c6>
 8006248:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800624a:	445a      	add	r2, fp
 800624c:	9209      	str	r2, [sp, #36]	@ 0x24
 800624e:	f89a 3000 	ldrb.w	r3, [sl]
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 809f 	beq.w	8006396 <_svfiprintf_r+0x1c6>
 8006258:	2300      	movs	r3, #0
 800625a:	f04f 32ff 	mov.w	r2, #4294967295
 800625e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006262:	f10a 0a01 	add.w	sl, sl, #1
 8006266:	9304      	str	r3, [sp, #16]
 8006268:	9307      	str	r3, [sp, #28]
 800626a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800626e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006270:	4654      	mov	r4, sl
 8006272:	2205      	movs	r2, #5
 8006274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006278:	484e      	ldr	r0, [pc, #312]	@ (80063b4 <_svfiprintf_r+0x1e4>)
 800627a:	f7fe fc6a 	bl	8004b52 <memchr>
 800627e:	9a04      	ldr	r2, [sp, #16]
 8006280:	b9d8      	cbnz	r0, 80062ba <_svfiprintf_r+0xea>
 8006282:	06d0      	lsls	r0, r2, #27
 8006284:	bf44      	itt	mi
 8006286:	2320      	movmi	r3, #32
 8006288:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800628c:	0711      	lsls	r1, r2, #28
 800628e:	bf44      	itt	mi
 8006290:	232b      	movmi	r3, #43	@ 0x2b
 8006292:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006296:	f89a 3000 	ldrb.w	r3, [sl]
 800629a:	2b2a      	cmp	r3, #42	@ 0x2a
 800629c:	d015      	beq.n	80062ca <_svfiprintf_r+0xfa>
 800629e:	4654      	mov	r4, sl
 80062a0:	2000      	movs	r0, #0
 80062a2:	f04f 0c0a 	mov.w	ip, #10
 80062a6:	9a07      	ldr	r2, [sp, #28]
 80062a8:	4621      	mov	r1, r4
 80062aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062ae:	3b30      	subs	r3, #48	@ 0x30
 80062b0:	2b09      	cmp	r3, #9
 80062b2:	d94b      	bls.n	800634c <_svfiprintf_r+0x17c>
 80062b4:	b1b0      	cbz	r0, 80062e4 <_svfiprintf_r+0x114>
 80062b6:	9207      	str	r2, [sp, #28]
 80062b8:	e014      	b.n	80062e4 <_svfiprintf_r+0x114>
 80062ba:	eba0 0308 	sub.w	r3, r0, r8
 80062be:	fa09 f303 	lsl.w	r3, r9, r3
 80062c2:	4313      	orrs	r3, r2
 80062c4:	46a2      	mov	sl, r4
 80062c6:	9304      	str	r3, [sp, #16]
 80062c8:	e7d2      	b.n	8006270 <_svfiprintf_r+0xa0>
 80062ca:	9b03      	ldr	r3, [sp, #12]
 80062cc:	1d19      	adds	r1, r3, #4
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	9103      	str	r1, [sp, #12]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	bfbb      	ittet	lt
 80062d6:	425b      	neglt	r3, r3
 80062d8:	f042 0202 	orrlt.w	r2, r2, #2
 80062dc:	9307      	strge	r3, [sp, #28]
 80062de:	9307      	strlt	r3, [sp, #28]
 80062e0:	bfb8      	it	lt
 80062e2:	9204      	strlt	r2, [sp, #16]
 80062e4:	7823      	ldrb	r3, [r4, #0]
 80062e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80062e8:	d10a      	bne.n	8006300 <_svfiprintf_r+0x130>
 80062ea:	7863      	ldrb	r3, [r4, #1]
 80062ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80062ee:	d132      	bne.n	8006356 <_svfiprintf_r+0x186>
 80062f0:	9b03      	ldr	r3, [sp, #12]
 80062f2:	3402      	adds	r4, #2
 80062f4:	1d1a      	adds	r2, r3, #4
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	9203      	str	r2, [sp, #12]
 80062fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80062fe:	9305      	str	r3, [sp, #20]
 8006300:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80063b8 <_svfiprintf_r+0x1e8>
 8006304:	2203      	movs	r2, #3
 8006306:	4650      	mov	r0, sl
 8006308:	7821      	ldrb	r1, [r4, #0]
 800630a:	f7fe fc22 	bl	8004b52 <memchr>
 800630e:	b138      	cbz	r0, 8006320 <_svfiprintf_r+0x150>
 8006310:	2240      	movs	r2, #64	@ 0x40
 8006312:	9b04      	ldr	r3, [sp, #16]
 8006314:	eba0 000a 	sub.w	r0, r0, sl
 8006318:	4082      	lsls	r2, r0
 800631a:	4313      	orrs	r3, r2
 800631c:	3401      	adds	r4, #1
 800631e:	9304      	str	r3, [sp, #16]
 8006320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006324:	2206      	movs	r2, #6
 8006326:	4825      	ldr	r0, [pc, #148]	@ (80063bc <_svfiprintf_r+0x1ec>)
 8006328:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800632c:	f7fe fc11 	bl	8004b52 <memchr>
 8006330:	2800      	cmp	r0, #0
 8006332:	d036      	beq.n	80063a2 <_svfiprintf_r+0x1d2>
 8006334:	4b22      	ldr	r3, [pc, #136]	@ (80063c0 <_svfiprintf_r+0x1f0>)
 8006336:	bb1b      	cbnz	r3, 8006380 <_svfiprintf_r+0x1b0>
 8006338:	9b03      	ldr	r3, [sp, #12]
 800633a:	3307      	adds	r3, #7
 800633c:	f023 0307 	bic.w	r3, r3, #7
 8006340:	3308      	adds	r3, #8
 8006342:	9303      	str	r3, [sp, #12]
 8006344:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006346:	4433      	add	r3, r6
 8006348:	9309      	str	r3, [sp, #36]	@ 0x24
 800634a:	e76a      	b.n	8006222 <_svfiprintf_r+0x52>
 800634c:	460c      	mov	r4, r1
 800634e:	2001      	movs	r0, #1
 8006350:	fb0c 3202 	mla	r2, ip, r2, r3
 8006354:	e7a8      	b.n	80062a8 <_svfiprintf_r+0xd8>
 8006356:	2300      	movs	r3, #0
 8006358:	f04f 0c0a 	mov.w	ip, #10
 800635c:	4619      	mov	r1, r3
 800635e:	3401      	adds	r4, #1
 8006360:	9305      	str	r3, [sp, #20]
 8006362:	4620      	mov	r0, r4
 8006364:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006368:	3a30      	subs	r2, #48	@ 0x30
 800636a:	2a09      	cmp	r2, #9
 800636c:	d903      	bls.n	8006376 <_svfiprintf_r+0x1a6>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d0c6      	beq.n	8006300 <_svfiprintf_r+0x130>
 8006372:	9105      	str	r1, [sp, #20]
 8006374:	e7c4      	b.n	8006300 <_svfiprintf_r+0x130>
 8006376:	4604      	mov	r4, r0
 8006378:	2301      	movs	r3, #1
 800637a:	fb0c 2101 	mla	r1, ip, r1, r2
 800637e:	e7f0      	b.n	8006362 <_svfiprintf_r+0x192>
 8006380:	ab03      	add	r3, sp, #12
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	462a      	mov	r2, r5
 8006386:	4638      	mov	r0, r7
 8006388:	4b0e      	ldr	r3, [pc, #56]	@ (80063c4 <_svfiprintf_r+0x1f4>)
 800638a:	a904      	add	r1, sp, #16
 800638c:	f7fd fe7e 	bl	800408c <_printf_float>
 8006390:	1c42      	adds	r2, r0, #1
 8006392:	4606      	mov	r6, r0
 8006394:	d1d6      	bne.n	8006344 <_svfiprintf_r+0x174>
 8006396:	89ab      	ldrh	r3, [r5, #12]
 8006398:	065b      	lsls	r3, r3, #25
 800639a:	f53f af2d 	bmi.w	80061f8 <_svfiprintf_r+0x28>
 800639e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063a0:	e72c      	b.n	80061fc <_svfiprintf_r+0x2c>
 80063a2:	ab03      	add	r3, sp, #12
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	462a      	mov	r2, r5
 80063a8:	4638      	mov	r0, r7
 80063aa:	4b06      	ldr	r3, [pc, #24]	@ (80063c4 <_svfiprintf_r+0x1f4>)
 80063ac:	a904      	add	r1, sp, #16
 80063ae:	f7fe f90b 	bl	80045c8 <_printf_i>
 80063b2:	e7ed      	b.n	8006390 <_svfiprintf_r+0x1c0>
 80063b4:	08008042 	.word	0x08008042
 80063b8:	08008048 	.word	0x08008048
 80063bc:	0800804c 	.word	0x0800804c
 80063c0:	0800408d 	.word	0x0800408d
 80063c4:	08006119 	.word	0x08006119

080063c8 <__sflush_r>:
 80063c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80063cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ce:	0716      	lsls	r6, r2, #28
 80063d0:	4605      	mov	r5, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	d454      	bmi.n	8006480 <__sflush_r+0xb8>
 80063d6:	684b      	ldr	r3, [r1, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	dc02      	bgt.n	80063e2 <__sflush_r+0x1a>
 80063dc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80063de:	2b00      	cmp	r3, #0
 80063e0:	dd48      	ble.n	8006474 <__sflush_r+0xac>
 80063e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80063e4:	2e00      	cmp	r6, #0
 80063e6:	d045      	beq.n	8006474 <__sflush_r+0xac>
 80063e8:	2300      	movs	r3, #0
 80063ea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80063ee:	682f      	ldr	r7, [r5, #0]
 80063f0:	6a21      	ldr	r1, [r4, #32]
 80063f2:	602b      	str	r3, [r5, #0]
 80063f4:	d030      	beq.n	8006458 <__sflush_r+0x90>
 80063f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80063f8:	89a3      	ldrh	r3, [r4, #12]
 80063fa:	0759      	lsls	r1, r3, #29
 80063fc:	d505      	bpl.n	800640a <__sflush_r+0x42>
 80063fe:	6863      	ldr	r3, [r4, #4]
 8006400:	1ad2      	subs	r2, r2, r3
 8006402:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006404:	b10b      	cbz	r3, 800640a <__sflush_r+0x42>
 8006406:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006408:	1ad2      	subs	r2, r2, r3
 800640a:	2300      	movs	r3, #0
 800640c:	4628      	mov	r0, r5
 800640e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006410:	6a21      	ldr	r1, [r4, #32]
 8006412:	47b0      	blx	r6
 8006414:	1c43      	adds	r3, r0, #1
 8006416:	89a3      	ldrh	r3, [r4, #12]
 8006418:	d106      	bne.n	8006428 <__sflush_r+0x60>
 800641a:	6829      	ldr	r1, [r5, #0]
 800641c:	291d      	cmp	r1, #29
 800641e:	d82b      	bhi.n	8006478 <__sflush_r+0xb0>
 8006420:	4a28      	ldr	r2, [pc, #160]	@ (80064c4 <__sflush_r+0xfc>)
 8006422:	40ca      	lsrs	r2, r1
 8006424:	07d6      	lsls	r6, r2, #31
 8006426:	d527      	bpl.n	8006478 <__sflush_r+0xb0>
 8006428:	2200      	movs	r2, #0
 800642a:	6062      	str	r2, [r4, #4]
 800642c:	6922      	ldr	r2, [r4, #16]
 800642e:	04d9      	lsls	r1, r3, #19
 8006430:	6022      	str	r2, [r4, #0]
 8006432:	d504      	bpl.n	800643e <__sflush_r+0x76>
 8006434:	1c42      	adds	r2, r0, #1
 8006436:	d101      	bne.n	800643c <__sflush_r+0x74>
 8006438:	682b      	ldr	r3, [r5, #0]
 800643a:	b903      	cbnz	r3, 800643e <__sflush_r+0x76>
 800643c:	6560      	str	r0, [r4, #84]	@ 0x54
 800643e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006440:	602f      	str	r7, [r5, #0]
 8006442:	b1b9      	cbz	r1, 8006474 <__sflush_r+0xac>
 8006444:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006448:	4299      	cmp	r1, r3
 800644a:	d002      	beq.n	8006452 <__sflush_r+0x8a>
 800644c:	4628      	mov	r0, r5
 800644e:	f7ff f9eb 	bl	8005828 <_free_r>
 8006452:	2300      	movs	r3, #0
 8006454:	6363      	str	r3, [r4, #52]	@ 0x34
 8006456:	e00d      	b.n	8006474 <__sflush_r+0xac>
 8006458:	2301      	movs	r3, #1
 800645a:	4628      	mov	r0, r5
 800645c:	47b0      	blx	r6
 800645e:	4602      	mov	r2, r0
 8006460:	1c50      	adds	r0, r2, #1
 8006462:	d1c9      	bne.n	80063f8 <__sflush_r+0x30>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d0c6      	beq.n	80063f8 <__sflush_r+0x30>
 800646a:	2b1d      	cmp	r3, #29
 800646c:	d001      	beq.n	8006472 <__sflush_r+0xaa>
 800646e:	2b16      	cmp	r3, #22
 8006470:	d11d      	bne.n	80064ae <__sflush_r+0xe6>
 8006472:	602f      	str	r7, [r5, #0]
 8006474:	2000      	movs	r0, #0
 8006476:	e021      	b.n	80064bc <__sflush_r+0xf4>
 8006478:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800647c:	b21b      	sxth	r3, r3
 800647e:	e01a      	b.n	80064b6 <__sflush_r+0xee>
 8006480:	690f      	ldr	r7, [r1, #16]
 8006482:	2f00      	cmp	r7, #0
 8006484:	d0f6      	beq.n	8006474 <__sflush_r+0xac>
 8006486:	0793      	lsls	r3, r2, #30
 8006488:	bf18      	it	ne
 800648a:	2300      	movne	r3, #0
 800648c:	680e      	ldr	r6, [r1, #0]
 800648e:	bf08      	it	eq
 8006490:	694b      	ldreq	r3, [r1, #20]
 8006492:	1bf6      	subs	r6, r6, r7
 8006494:	600f      	str	r7, [r1, #0]
 8006496:	608b      	str	r3, [r1, #8]
 8006498:	2e00      	cmp	r6, #0
 800649a:	ddeb      	ble.n	8006474 <__sflush_r+0xac>
 800649c:	4633      	mov	r3, r6
 800649e:	463a      	mov	r2, r7
 80064a0:	4628      	mov	r0, r5
 80064a2:	6a21      	ldr	r1, [r4, #32]
 80064a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80064a8:	47e0      	blx	ip
 80064aa:	2800      	cmp	r0, #0
 80064ac:	dc07      	bgt.n	80064be <__sflush_r+0xf6>
 80064ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064b6:	f04f 30ff 	mov.w	r0, #4294967295
 80064ba:	81a3      	strh	r3, [r4, #12]
 80064bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064be:	4407      	add	r7, r0
 80064c0:	1a36      	subs	r6, r6, r0
 80064c2:	e7e9      	b.n	8006498 <__sflush_r+0xd0>
 80064c4:	20400001 	.word	0x20400001

080064c8 <_fflush_r>:
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	690b      	ldr	r3, [r1, #16]
 80064cc:	4605      	mov	r5, r0
 80064ce:	460c      	mov	r4, r1
 80064d0:	b913      	cbnz	r3, 80064d8 <_fflush_r+0x10>
 80064d2:	2500      	movs	r5, #0
 80064d4:	4628      	mov	r0, r5
 80064d6:	bd38      	pop	{r3, r4, r5, pc}
 80064d8:	b118      	cbz	r0, 80064e2 <_fflush_r+0x1a>
 80064da:	6a03      	ldr	r3, [r0, #32]
 80064dc:	b90b      	cbnz	r3, 80064e2 <_fflush_r+0x1a>
 80064de:	f7fe fa1d 	bl	800491c <__sinit>
 80064e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d0f3      	beq.n	80064d2 <_fflush_r+0xa>
 80064ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80064ec:	07d0      	lsls	r0, r2, #31
 80064ee:	d404      	bmi.n	80064fa <_fflush_r+0x32>
 80064f0:	0599      	lsls	r1, r3, #22
 80064f2:	d402      	bmi.n	80064fa <_fflush_r+0x32>
 80064f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064f6:	f7fe fb2a 	bl	8004b4e <__retarget_lock_acquire_recursive>
 80064fa:	4628      	mov	r0, r5
 80064fc:	4621      	mov	r1, r4
 80064fe:	f7ff ff63 	bl	80063c8 <__sflush_r>
 8006502:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006504:	4605      	mov	r5, r0
 8006506:	07da      	lsls	r2, r3, #31
 8006508:	d4e4      	bmi.n	80064d4 <_fflush_r+0xc>
 800650a:	89a3      	ldrh	r3, [r4, #12]
 800650c:	059b      	lsls	r3, r3, #22
 800650e:	d4e1      	bmi.n	80064d4 <_fflush_r+0xc>
 8006510:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006512:	f7fe fb1d 	bl	8004b50 <__retarget_lock_release_recursive>
 8006516:	e7dd      	b.n	80064d4 <_fflush_r+0xc>

08006518 <memmove>:
 8006518:	4288      	cmp	r0, r1
 800651a:	b510      	push	{r4, lr}
 800651c:	eb01 0402 	add.w	r4, r1, r2
 8006520:	d902      	bls.n	8006528 <memmove+0x10>
 8006522:	4284      	cmp	r4, r0
 8006524:	4623      	mov	r3, r4
 8006526:	d807      	bhi.n	8006538 <memmove+0x20>
 8006528:	1e43      	subs	r3, r0, #1
 800652a:	42a1      	cmp	r1, r4
 800652c:	d008      	beq.n	8006540 <memmove+0x28>
 800652e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006532:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006536:	e7f8      	b.n	800652a <memmove+0x12>
 8006538:	4601      	mov	r1, r0
 800653a:	4402      	add	r2, r0
 800653c:	428a      	cmp	r2, r1
 800653e:	d100      	bne.n	8006542 <memmove+0x2a>
 8006540:	bd10      	pop	{r4, pc}
 8006542:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006546:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800654a:	e7f7      	b.n	800653c <memmove+0x24>

0800654c <_sbrk_r>:
 800654c:	b538      	push	{r3, r4, r5, lr}
 800654e:	2300      	movs	r3, #0
 8006550:	4d05      	ldr	r5, [pc, #20]	@ (8006568 <_sbrk_r+0x1c>)
 8006552:	4604      	mov	r4, r0
 8006554:	4608      	mov	r0, r1
 8006556:	602b      	str	r3, [r5, #0]
 8006558:	f7fd fc98 	bl	8003e8c <_sbrk>
 800655c:	1c43      	adds	r3, r0, #1
 800655e:	d102      	bne.n	8006566 <_sbrk_r+0x1a>
 8006560:	682b      	ldr	r3, [r5, #0]
 8006562:	b103      	cbz	r3, 8006566 <_sbrk_r+0x1a>
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	bd38      	pop	{r3, r4, r5, pc}
 8006568:	20000798 	.word	0x20000798

0800656c <memcpy>:
 800656c:	440a      	add	r2, r1
 800656e:	4291      	cmp	r1, r2
 8006570:	f100 33ff 	add.w	r3, r0, #4294967295
 8006574:	d100      	bne.n	8006578 <memcpy+0xc>
 8006576:	4770      	bx	lr
 8006578:	b510      	push	{r4, lr}
 800657a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800657e:	4291      	cmp	r1, r2
 8006580:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006584:	d1f9      	bne.n	800657a <memcpy+0xe>
 8006586:	bd10      	pop	{r4, pc}

08006588 <__assert_func>:
 8006588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800658a:	4614      	mov	r4, r2
 800658c:	461a      	mov	r2, r3
 800658e:	4b09      	ldr	r3, [pc, #36]	@ (80065b4 <__assert_func+0x2c>)
 8006590:	4605      	mov	r5, r0
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68d8      	ldr	r0, [r3, #12]
 8006596:	b14c      	cbz	r4, 80065ac <__assert_func+0x24>
 8006598:	4b07      	ldr	r3, [pc, #28]	@ (80065b8 <__assert_func+0x30>)
 800659a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800659e:	9100      	str	r1, [sp, #0]
 80065a0:	462b      	mov	r3, r5
 80065a2:	4906      	ldr	r1, [pc, #24]	@ (80065bc <__assert_func+0x34>)
 80065a4:	f000 f870 	bl	8006688 <fiprintf>
 80065a8:	f000 f880 	bl	80066ac <abort>
 80065ac:	4b04      	ldr	r3, [pc, #16]	@ (80065c0 <__assert_func+0x38>)
 80065ae:	461c      	mov	r4, r3
 80065b0:	e7f3      	b.n	800659a <__assert_func+0x12>
 80065b2:	bf00      	nop
 80065b4:	20000020 	.word	0x20000020
 80065b8:	0800805d 	.word	0x0800805d
 80065bc:	0800806a 	.word	0x0800806a
 80065c0:	08008098 	.word	0x08008098

080065c4 <_calloc_r>:
 80065c4:	b570      	push	{r4, r5, r6, lr}
 80065c6:	fba1 5402 	umull	r5, r4, r1, r2
 80065ca:	b934      	cbnz	r4, 80065da <_calloc_r+0x16>
 80065cc:	4629      	mov	r1, r5
 80065ce:	f7ff f99d 	bl	800590c <_malloc_r>
 80065d2:	4606      	mov	r6, r0
 80065d4:	b928      	cbnz	r0, 80065e2 <_calloc_r+0x1e>
 80065d6:	4630      	mov	r0, r6
 80065d8:	bd70      	pop	{r4, r5, r6, pc}
 80065da:	220c      	movs	r2, #12
 80065dc:	2600      	movs	r6, #0
 80065de:	6002      	str	r2, [r0, #0]
 80065e0:	e7f9      	b.n	80065d6 <_calloc_r+0x12>
 80065e2:	462a      	mov	r2, r5
 80065e4:	4621      	mov	r1, r4
 80065e6:	f7fe fa34 	bl	8004a52 <memset>
 80065ea:	e7f4      	b.n	80065d6 <_calloc_r+0x12>

080065ec <__ascii_mbtowc>:
 80065ec:	b082      	sub	sp, #8
 80065ee:	b901      	cbnz	r1, 80065f2 <__ascii_mbtowc+0x6>
 80065f0:	a901      	add	r1, sp, #4
 80065f2:	b142      	cbz	r2, 8006606 <__ascii_mbtowc+0x1a>
 80065f4:	b14b      	cbz	r3, 800660a <__ascii_mbtowc+0x1e>
 80065f6:	7813      	ldrb	r3, [r2, #0]
 80065f8:	600b      	str	r3, [r1, #0]
 80065fa:	7812      	ldrb	r2, [r2, #0]
 80065fc:	1e10      	subs	r0, r2, #0
 80065fe:	bf18      	it	ne
 8006600:	2001      	movne	r0, #1
 8006602:	b002      	add	sp, #8
 8006604:	4770      	bx	lr
 8006606:	4610      	mov	r0, r2
 8006608:	e7fb      	b.n	8006602 <__ascii_mbtowc+0x16>
 800660a:	f06f 0001 	mvn.w	r0, #1
 800660e:	e7f8      	b.n	8006602 <__ascii_mbtowc+0x16>

08006610 <_realloc_r>:
 8006610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006614:	4607      	mov	r7, r0
 8006616:	4614      	mov	r4, r2
 8006618:	460d      	mov	r5, r1
 800661a:	b921      	cbnz	r1, 8006626 <_realloc_r+0x16>
 800661c:	4611      	mov	r1, r2
 800661e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006622:	f7ff b973 	b.w	800590c <_malloc_r>
 8006626:	b92a      	cbnz	r2, 8006634 <_realloc_r+0x24>
 8006628:	f7ff f8fe 	bl	8005828 <_free_r>
 800662c:	4625      	mov	r5, r4
 800662e:	4628      	mov	r0, r5
 8006630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006634:	f000 f841 	bl	80066ba <_malloc_usable_size_r>
 8006638:	4284      	cmp	r4, r0
 800663a:	4606      	mov	r6, r0
 800663c:	d802      	bhi.n	8006644 <_realloc_r+0x34>
 800663e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006642:	d8f4      	bhi.n	800662e <_realloc_r+0x1e>
 8006644:	4621      	mov	r1, r4
 8006646:	4638      	mov	r0, r7
 8006648:	f7ff f960 	bl	800590c <_malloc_r>
 800664c:	4680      	mov	r8, r0
 800664e:	b908      	cbnz	r0, 8006654 <_realloc_r+0x44>
 8006650:	4645      	mov	r5, r8
 8006652:	e7ec      	b.n	800662e <_realloc_r+0x1e>
 8006654:	42b4      	cmp	r4, r6
 8006656:	4622      	mov	r2, r4
 8006658:	4629      	mov	r1, r5
 800665a:	bf28      	it	cs
 800665c:	4632      	movcs	r2, r6
 800665e:	f7ff ff85 	bl	800656c <memcpy>
 8006662:	4629      	mov	r1, r5
 8006664:	4638      	mov	r0, r7
 8006666:	f7ff f8df 	bl	8005828 <_free_r>
 800666a:	e7f1      	b.n	8006650 <_realloc_r+0x40>

0800666c <__ascii_wctomb>:
 800666c:	4603      	mov	r3, r0
 800666e:	4608      	mov	r0, r1
 8006670:	b141      	cbz	r1, 8006684 <__ascii_wctomb+0x18>
 8006672:	2aff      	cmp	r2, #255	@ 0xff
 8006674:	d904      	bls.n	8006680 <__ascii_wctomb+0x14>
 8006676:	228a      	movs	r2, #138	@ 0x8a
 8006678:	f04f 30ff 	mov.w	r0, #4294967295
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	4770      	bx	lr
 8006680:	2001      	movs	r0, #1
 8006682:	700a      	strb	r2, [r1, #0]
 8006684:	4770      	bx	lr
	...

08006688 <fiprintf>:
 8006688:	b40e      	push	{r1, r2, r3}
 800668a:	b503      	push	{r0, r1, lr}
 800668c:	4601      	mov	r1, r0
 800668e:	ab03      	add	r3, sp, #12
 8006690:	4805      	ldr	r0, [pc, #20]	@ (80066a8 <fiprintf+0x20>)
 8006692:	f853 2b04 	ldr.w	r2, [r3], #4
 8006696:	6800      	ldr	r0, [r0, #0]
 8006698:	9301      	str	r3, [sp, #4]
 800669a:	f000 f83d 	bl	8006718 <_vfiprintf_r>
 800669e:	b002      	add	sp, #8
 80066a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80066a4:	b003      	add	sp, #12
 80066a6:	4770      	bx	lr
 80066a8:	20000020 	.word	0x20000020

080066ac <abort>:
 80066ac:	2006      	movs	r0, #6
 80066ae:	b508      	push	{r3, lr}
 80066b0:	f000 fa06 	bl	8006ac0 <raise>
 80066b4:	2001      	movs	r0, #1
 80066b6:	f7fd fb74 	bl	8003da2 <_exit>

080066ba <_malloc_usable_size_r>:
 80066ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066be:	1f18      	subs	r0, r3, #4
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	bfbc      	itt	lt
 80066c4:	580b      	ldrlt	r3, [r1, r0]
 80066c6:	18c0      	addlt	r0, r0, r3
 80066c8:	4770      	bx	lr

080066ca <__sfputc_r>:
 80066ca:	6893      	ldr	r3, [r2, #8]
 80066cc:	b410      	push	{r4}
 80066ce:	3b01      	subs	r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	6093      	str	r3, [r2, #8]
 80066d4:	da07      	bge.n	80066e6 <__sfputc_r+0x1c>
 80066d6:	6994      	ldr	r4, [r2, #24]
 80066d8:	42a3      	cmp	r3, r4
 80066da:	db01      	blt.n	80066e0 <__sfputc_r+0x16>
 80066dc:	290a      	cmp	r1, #10
 80066de:	d102      	bne.n	80066e6 <__sfputc_r+0x1c>
 80066e0:	bc10      	pop	{r4}
 80066e2:	f000 b931 	b.w	8006948 <__swbuf_r>
 80066e6:	6813      	ldr	r3, [r2, #0]
 80066e8:	1c58      	adds	r0, r3, #1
 80066ea:	6010      	str	r0, [r2, #0]
 80066ec:	7019      	strb	r1, [r3, #0]
 80066ee:	4608      	mov	r0, r1
 80066f0:	bc10      	pop	{r4}
 80066f2:	4770      	bx	lr

080066f4 <__sfputs_r>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	4606      	mov	r6, r0
 80066f8:	460f      	mov	r7, r1
 80066fa:	4614      	mov	r4, r2
 80066fc:	18d5      	adds	r5, r2, r3
 80066fe:	42ac      	cmp	r4, r5
 8006700:	d101      	bne.n	8006706 <__sfputs_r+0x12>
 8006702:	2000      	movs	r0, #0
 8006704:	e007      	b.n	8006716 <__sfputs_r+0x22>
 8006706:	463a      	mov	r2, r7
 8006708:	4630      	mov	r0, r6
 800670a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800670e:	f7ff ffdc 	bl	80066ca <__sfputc_r>
 8006712:	1c43      	adds	r3, r0, #1
 8006714:	d1f3      	bne.n	80066fe <__sfputs_r+0xa>
 8006716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006718 <_vfiprintf_r>:
 8006718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671c:	460d      	mov	r5, r1
 800671e:	4614      	mov	r4, r2
 8006720:	4698      	mov	r8, r3
 8006722:	4606      	mov	r6, r0
 8006724:	b09d      	sub	sp, #116	@ 0x74
 8006726:	b118      	cbz	r0, 8006730 <_vfiprintf_r+0x18>
 8006728:	6a03      	ldr	r3, [r0, #32]
 800672a:	b90b      	cbnz	r3, 8006730 <_vfiprintf_r+0x18>
 800672c:	f7fe f8f6 	bl	800491c <__sinit>
 8006730:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006732:	07d9      	lsls	r1, r3, #31
 8006734:	d405      	bmi.n	8006742 <_vfiprintf_r+0x2a>
 8006736:	89ab      	ldrh	r3, [r5, #12]
 8006738:	059a      	lsls	r2, r3, #22
 800673a:	d402      	bmi.n	8006742 <_vfiprintf_r+0x2a>
 800673c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800673e:	f7fe fa06 	bl	8004b4e <__retarget_lock_acquire_recursive>
 8006742:	89ab      	ldrh	r3, [r5, #12]
 8006744:	071b      	lsls	r3, r3, #28
 8006746:	d501      	bpl.n	800674c <_vfiprintf_r+0x34>
 8006748:	692b      	ldr	r3, [r5, #16]
 800674a:	b99b      	cbnz	r3, 8006774 <_vfiprintf_r+0x5c>
 800674c:	4629      	mov	r1, r5
 800674e:	4630      	mov	r0, r6
 8006750:	f000 f938 	bl	80069c4 <__swsetup_r>
 8006754:	b170      	cbz	r0, 8006774 <_vfiprintf_r+0x5c>
 8006756:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006758:	07dc      	lsls	r4, r3, #31
 800675a:	d504      	bpl.n	8006766 <_vfiprintf_r+0x4e>
 800675c:	f04f 30ff 	mov.w	r0, #4294967295
 8006760:	b01d      	add	sp, #116	@ 0x74
 8006762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006766:	89ab      	ldrh	r3, [r5, #12]
 8006768:	0598      	lsls	r0, r3, #22
 800676a:	d4f7      	bmi.n	800675c <_vfiprintf_r+0x44>
 800676c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800676e:	f7fe f9ef 	bl	8004b50 <__retarget_lock_release_recursive>
 8006772:	e7f3      	b.n	800675c <_vfiprintf_r+0x44>
 8006774:	2300      	movs	r3, #0
 8006776:	9309      	str	r3, [sp, #36]	@ 0x24
 8006778:	2320      	movs	r3, #32
 800677a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800677e:	2330      	movs	r3, #48	@ 0x30
 8006780:	f04f 0901 	mov.w	r9, #1
 8006784:	f8cd 800c 	str.w	r8, [sp, #12]
 8006788:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006934 <_vfiprintf_r+0x21c>
 800678c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006790:	4623      	mov	r3, r4
 8006792:	469a      	mov	sl, r3
 8006794:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006798:	b10a      	cbz	r2, 800679e <_vfiprintf_r+0x86>
 800679a:	2a25      	cmp	r2, #37	@ 0x25
 800679c:	d1f9      	bne.n	8006792 <_vfiprintf_r+0x7a>
 800679e:	ebba 0b04 	subs.w	fp, sl, r4
 80067a2:	d00b      	beq.n	80067bc <_vfiprintf_r+0xa4>
 80067a4:	465b      	mov	r3, fp
 80067a6:	4622      	mov	r2, r4
 80067a8:	4629      	mov	r1, r5
 80067aa:	4630      	mov	r0, r6
 80067ac:	f7ff ffa2 	bl	80066f4 <__sfputs_r>
 80067b0:	3001      	adds	r0, #1
 80067b2:	f000 80a7 	beq.w	8006904 <_vfiprintf_r+0x1ec>
 80067b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067b8:	445a      	add	r2, fp
 80067ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80067bc:	f89a 3000 	ldrb.w	r3, [sl]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 809f 	beq.w	8006904 <_vfiprintf_r+0x1ec>
 80067c6:	2300      	movs	r3, #0
 80067c8:	f04f 32ff 	mov.w	r2, #4294967295
 80067cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067d0:	f10a 0a01 	add.w	sl, sl, #1
 80067d4:	9304      	str	r3, [sp, #16]
 80067d6:	9307      	str	r3, [sp, #28]
 80067d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80067dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80067de:	4654      	mov	r4, sl
 80067e0:	2205      	movs	r2, #5
 80067e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067e6:	4853      	ldr	r0, [pc, #332]	@ (8006934 <_vfiprintf_r+0x21c>)
 80067e8:	f7fe f9b3 	bl	8004b52 <memchr>
 80067ec:	9a04      	ldr	r2, [sp, #16]
 80067ee:	b9d8      	cbnz	r0, 8006828 <_vfiprintf_r+0x110>
 80067f0:	06d1      	lsls	r1, r2, #27
 80067f2:	bf44      	itt	mi
 80067f4:	2320      	movmi	r3, #32
 80067f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067fa:	0713      	lsls	r3, r2, #28
 80067fc:	bf44      	itt	mi
 80067fe:	232b      	movmi	r3, #43	@ 0x2b
 8006800:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006804:	f89a 3000 	ldrb.w	r3, [sl]
 8006808:	2b2a      	cmp	r3, #42	@ 0x2a
 800680a:	d015      	beq.n	8006838 <_vfiprintf_r+0x120>
 800680c:	4654      	mov	r4, sl
 800680e:	2000      	movs	r0, #0
 8006810:	f04f 0c0a 	mov.w	ip, #10
 8006814:	9a07      	ldr	r2, [sp, #28]
 8006816:	4621      	mov	r1, r4
 8006818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800681c:	3b30      	subs	r3, #48	@ 0x30
 800681e:	2b09      	cmp	r3, #9
 8006820:	d94b      	bls.n	80068ba <_vfiprintf_r+0x1a2>
 8006822:	b1b0      	cbz	r0, 8006852 <_vfiprintf_r+0x13a>
 8006824:	9207      	str	r2, [sp, #28]
 8006826:	e014      	b.n	8006852 <_vfiprintf_r+0x13a>
 8006828:	eba0 0308 	sub.w	r3, r0, r8
 800682c:	fa09 f303 	lsl.w	r3, r9, r3
 8006830:	4313      	orrs	r3, r2
 8006832:	46a2      	mov	sl, r4
 8006834:	9304      	str	r3, [sp, #16]
 8006836:	e7d2      	b.n	80067de <_vfiprintf_r+0xc6>
 8006838:	9b03      	ldr	r3, [sp, #12]
 800683a:	1d19      	adds	r1, r3, #4
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	9103      	str	r1, [sp, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	bfbb      	ittet	lt
 8006844:	425b      	neglt	r3, r3
 8006846:	f042 0202 	orrlt.w	r2, r2, #2
 800684a:	9307      	strge	r3, [sp, #28]
 800684c:	9307      	strlt	r3, [sp, #28]
 800684e:	bfb8      	it	lt
 8006850:	9204      	strlt	r2, [sp, #16]
 8006852:	7823      	ldrb	r3, [r4, #0]
 8006854:	2b2e      	cmp	r3, #46	@ 0x2e
 8006856:	d10a      	bne.n	800686e <_vfiprintf_r+0x156>
 8006858:	7863      	ldrb	r3, [r4, #1]
 800685a:	2b2a      	cmp	r3, #42	@ 0x2a
 800685c:	d132      	bne.n	80068c4 <_vfiprintf_r+0x1ac>
 800685e:	9b03      	ldr	r3, [sp, #12]
 8006860:	3402      	adds	r4, #2
 8006862:	1d1a      	adds	r2, r3, #4
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	9203      	str	r2, [sp, #12]
 8006868:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800686c:	9305      	str	r3, [sp, #20]
 800686e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006938 <_vfiprintf_r+0x220>
 8006872:	2203      	movs	r2, #3
 8006874:	4650      	mov	r0, sl
 8006876:	7821      	ldrb	r1, [r4, #0]
 8006878:	f7fe f96b 	bl	8004b52 <memchr>
 800687c:	b138      	cbz	r0, 800688e <_vfiprintf_r+0x176>
 800687e:	2240      	movs	r2, #64	@ 0x40
 8006880:	9b04      	ldr	r3, [sp, #16]
 8006882:	eba0 000a 	sub.w	r0, r0, sl
 8006886:	4082      	lsls	r2, r0
 8006888:	4313      	orrs	r3, r2
 800688a:	3401      	adds	r4, #1
 800688c:	9304      	str	r3, [sp, #16]
 800688e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006892:	2206      	movs	r2, #6
 8006894:	4829      	ldr	r0, [pc, #164]	@ (800693c <_vfiprintf_r+0x224>)
 8006896:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800689a:	f7fe f95a 	bl	8004b52 <memchr>
 800689e:	2800      	cmp	r0, #0
 80068a0:	d03f      	beq.n	8006922 <_vfiprintf_r+0x20a>
 80068a2:	4b27      	ldr	r3, [pc, #156]	@ (8006940 <_vfiprintf_r+0x228>)
 80068a4:	bb1b      	cbnz	r3, 80068ee <_vfiprintf_r+0x1d6>
 80068a6:	9b03      	ldr	r3, [sp, #12]
 80068a8:	3307      	adds	r3, #7
 80068aa:	f023 0307 	bic.w	r3, r3, #7
 80068ae:	3308      	adds	r3, #8
 80068b0:	9303      	str	r3, [sp, #12]
 80068b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b4:	443b      	add	r3, r7
 80068b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80068b8:	e76a      	b.n	8006790 <_vfiprintf_r+0x78>
 80068ba:	460c      	mov	r4, r1
 80068bc:	2001      	movs	r0, #1
 80068be:	fb0c 3202 	mla	r2, ip, r2, r3
 80068c2:	e7a8      	b.n	8006816 <_vfiprintf_r+0xfe>
 80068c4:	2300      	movs	r3, #0
 80068c6:	f04f 0c0a 	mov.w	ip, #10
 80068ca:	4619      	mov	r1, r3
 80068cc:	3401      	adds	r4, #1
 80068ce:	9305      	str	r3, [sp, #20]
 80068d0:	4620      	mov	r0, r4
 80068d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068d6:	3a30      	subs	r2, #48	@ 0x30
 80068d8:	2a09      	cmp	r2, #9
 80068da:	d903      	bls.n	80068e4 <_vfiprintf_r+0x1cc>
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0c6      	beq.n	800686e <_vfiprintf_r+0x156>
 80068e0:	9105      	str	r1, [sp, #20]
 80068e2:	e7c4      	b.n	800686e <_vfiprintf_r+0x156>
 80068e4:	4604      	mov	r4, r0
 80068e6:	2301      	movs	r3, #1
 80068e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80068ec:	e7f0      	b.n	80068d0 <_vfiprintf_r+0x1b8>
 80068ee:	ab03      	add	r3, sp, #12
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	462a      	mov	r2, r5
 80068f4:	4630      	mov	r0, r6
 80068f6:	4b13      	ldr	r3, [pc, #76]	@ (8006944 <_vfiprintf_r+0x22c>)
 80068f8:	a904      	add	r1, sp, #16
 80068fa:	f7fd fbc7 	bl	800408c <_printf_float>
 80068fe:	4607      	mov	r7, r0
 8006900:	1c78      	adds	r0, r7, #1
 8006902:	d1d6      	bne.n	80068b2 <_vfiprintf_r+0x19a>
 8006904:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006906:	07d9      	lsls	r1, r3, #31
 8006908:	d405      	bmi.n	8006916 <_vfiprintf_r+0x1fe>
 800690a:	89ab      	ldrh	r3, [r5, #12]
 800690c:	059a      	lsls	r2, r3, #22
 800690e:	d402      	bmi.n	8006916 <_vfiprintf_r+0x1fe>
 8006910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006912:	f7fe f91d 	bl	8004b50 <__retarget_lock_release_recursive>
 8006916:	89ab      	ldrh	r3, [r5, #12]
 8006918:	065b      	lsls	r3, r3, #25
 800691a:	f53f af1f 	bmi.w	800675c <_vfiprintf_r+0x44>
 800691e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006920:	e71e      	b.n	8006760 <_vfiprintf_r+0x48>
 8006922:	ab03      	add	r3, sp, #12
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	462a      	mov	r2, r5
 8006928:	4630      	mov	r0, r6
 800692a:	4b06      	ldr	r3, [pc, #24]	@ (8006944 <_vfiprintf_r+0x22c>)
 800692c:	a904      	add	r1, sp, #16
 800692e:	f7fd fe4b 	bl	80045c8 <_printf_i>
 8006932:	e7e4      	b.n	80068fe <_vfiprintf_r+0x1e6>
 8006934:	08008042 	.word	0x08008042
 8006938:	08008048 	.word	0x08008048
 800693c:	0800804c 	.word	0x0800804c
 8006940:	0800408d 	.word	0x0800408d
 8006944:	080066f5 	.word	0x080066f5

08006948 <__swbuf_r>:
 8006948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694a:	460e      	mov	r6, r1
 800694c:	4614      	mov	r4, r2
 800694e:	4605      	mov	r5, r0
 8006950:	b118      	cbz	r0, 800695a <__swbuf_r+0x12>
 8006952:	6a03      	ldr	r3, [r0, #32]
 8006954:	b90b      	cbnz	r3, 800695a <__swbuf_r+0x12>
 8006956:	f7fd ffe1 	bl	800491c <__sinit>
 800695a:	69a3      	ldr	r3, [r4, #24]
 800695c:	60a3      	str	r3, [r4, #8]
 800695e:	89a3      	ldrh	r3, [r4, #12]
 8006960:	071a      	lsls	r2, r3, #28
 8006962:	d501      	bpl.n	8006968 <__swbuf_r+0x20>
 8006964:	6923      	ldr	r3, [r4, #16]
 8006966:	b943      	cbnz	r3, 800697a <__swbuf_r+0x32>
 8006968:	4621      	mov	r1, r4
 800696a:	4628      	mov	r0, r5
 800696c:	f000 f82a 	bl	80069c4 <__swsetup_r>
 8006970:	b118      	cbz	r0, 800697a <__swbuf_r+0x32>
 8006972:	f04f 37ff 	mov.w	r7, #4294967295
 8006976:	4638      	mov	r0, r7
 8006978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	6922      	ldr	r2, [r4, #16]
 800697e:	b2f6      	uxtb	r6, r6
 8006980:	1a98      	subs	r0, r3, r2
 8006982:	6963      	ldr	r3, [r4, #20]
 8006984:	4637      	mov	r7, r6
 8006986:	4283      	cmp	r3, r0
 8006988:	dc05      	bgt.n	8006996 <__swbuf_r+0x4e>
 800698a:	4621      	mov	r1, r4
 800698c:	4628      	mov	r0, r5
 800698e:	f7ff fd9b 	bl	80064c8 <_fflush_r>
 8006992:	2800      	cmp	r0, #0
 8006994:	d1ed      	bne.n	8006972 <__swbuf_r+0x2a>
 8006996:	68a3      	ldr	r3, [r4, #8]
 8006998:	3b01      	subs	r3, #1
 800699a:	60a3      	str	r3, [r4, #8]
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	6022      	str	r2, [r4, #0]
 80069a2:	701e      	strb	r6, [r3, #0]
 80069a4:	6962      	ldr	r2, [r4, #20]
 80069a6:	1c43      	adds	r3, r0, #1
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d004      	beq.n	80069b6 <__swbuf_r+0x6e>
 80069ac:	89a3      	ldrh	r3, [r4, #12]
 80069ae:	07db      	lsls	r3, r3, #31
 80069b0:	d5e1      	bpl.n	8006976 <__swbuf_r+0x2e>
 80069b2:	2e0a      	cmp	r6, #10
 80069b4:	d1df      	bne.n	8006976 <__swbuf_r+0x2e>
 80069b6:	4621      	mov	r1, r4
 80069b8:	4628      	mov	r0, r5
 80069ba:	f7ff fd85 	bl	80064c8 <_fflush_r>
 80069be:	2800      	cmp	r0, #0
 80069c0:	d0d9      	beq.n	8006976 <__swbuf_r+0x2e>
 80069c2:	e7d6      	b.n	8006972 <__swbuf_r+0x2a>

080069c4 <__swsetup_r>:
 80069c4:	b538      	push	{r3, r4, r5, lr}
 80069c6:	4b29      	ldr	r3, [pc, #164]	@ (8006a6c <__swsetup_r+0xa8>)
 80069c8:	4605      	mov	r5, r0
 80069ca:	6818      	ldr	r0, [r3, #0]
 80069cc:	460c      	mov	r4, r1
 80069ce:	b118      	cbz	r0, 80069d8 <__swsetup_r+0x14>
 80069d0:	6a03      	ldr	r3, [r0, #32]
 80069d2:	b90b      	cbnz	r3, 80069d8 <__swsetup_r+0x14>
 80069d4:	f7fd ffa2 	bl	800491c <__sinit>
 80069d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069dc:	0719      	lsls	r1, r3, #28
 80069de:	d422      	bmi.n	8006a26 <__swsetup_r+0x62>
 80069e0:	06da      	lsls	r2, r3, #27
 80069e2:	d407      	bmi.n	80069f4 <__swsetup_r+0x30>
 80069e4:	2209      	movs	r2, #9
 80069e6:	602a      	str	r2, [r5, #0]
 80069e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069ec:	f04f 30ff 	mov.w	r0, #4294967295
 80069f0:	81a3      	strh	r3, [r4, #12]
 80069f2:	e033      	b.n	8006a5c <__swsetup_r+0x98>
 80069f4:	0758      	lsls	r0, r3, #29
 80069f6:	d512      	bpl.n	8006a1e <__swsetup_r+0x5a>
 80069f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069fa:	b141      	cbz	r1, 8006a0e <__swsetup_r+0x4a>
 80069fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a00:	4299      	cmp	r1, r3
 8006a02:	d002      	beq.n	8006a0a <__swsetup_r+0x46>
 8006a04:	4628      	mov	r0, r5
 8006a06:	f7fe ff0f 	bl	8005828 <_free_r>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a0e:	89a3      	ldrh	r3, [r4, #12]
 8006a10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a14:	81a3      	strh	r3, [r4, #12]
 8006a16:	2300      	movs	r3, #0
 8006a18:	6063      	str	r3, [r4, #4]
 8006a1a:	6923      	ldr	r3, [r4, #16]
 8006a1c:	6023      	str	r3, [r4, #0]
 8006a1e:	89a3      	ldrh	r3, [r4, #12]
 8006a20:	f043 0308 	orr.w	r3, r3, #8
 8006a24:	81a3      	strh	r3, [r4, #12]
 8006a26:	6923      	ldr	r3, [r4, #16]
 8006a28:	b94b      	cbnz	r3, 8006a3e <__swsetup_r+0x7a>
 8006a2a:	89a3      	ldrh	r3, [r4, #12]
 8006a2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a34:	d003      	beq.n	8006a3e <__swsetup_r+0x7a>
 8006a36:	4621      	mov	r1, r4
 8006a38:	4628      	mov	r0, r5
 8006a3a:	f000 f882 	bl	8006b42 <__smakebuf_r>
 8006a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a42:	f013 0201 	ands.w	r2, r3, #1
 8006a46:	d00a      	beq.n	8006a5e <__swsetup_r+0x9a>
 8006a48:	2200      	movs	r2, #0
 8006a4a:	60a2      	str	r2, [r4, #8]
 8006a4c:	6962      	ldr	r2, [r4, #20]
 8006a4e:	4252      	negs	r2, r2
 8006a50:	61a2      	str	r2, [r4, #24]
 8006a52:	6922      	ldr	r2, [r4, #16]
 8006a54:	b942      	cbnz	r2, 8006a68 <__swsetup_r+0xa4>
 8006a56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a5a:	d1c5      	bne.n	80069e8 <__swsetup_r+0x24>
 8006a5c:	bd38      	pop	{r3, r4, r5, pc}
 8006a5e:	0799      	lsls	r1, r3, #30
 8006a60:	bf58      	it	pl
 8006a62:	6962      	ldrpl	r2, [r4, #20]
 8006a64:	60a2      	str	r2, [r4, #8]
 8006a66:	e7f4      	b.n	8006a52 <__swsetup_r+0x8e>
 8006a68:	2000      	movs	r0, #0
 8006a6a:	e7f7      	b.n	8006a5c <__swsetup_r+0x98>
 8006a6c:	20000020 	.word	0x20000020

08006a70 <_raise_r>:
 8006a70:	291f      	cmp	r1, #31
 8006a72:	b538      	push	{r3, r4, r5, lr}
 8006a74:	4605      	mov	r5, r0
 8006a76:	460c      	mov	r4, r1
 8006a78:	d904      	bls.n	8006a84 <_raise_r+0x14>
 8006a7a:	2316      	movs	r3, #22
 8006a7c:	6003      	str	r3, [r0, #0]
 8006a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a82:	bd38      	pop	{r3, r4, r5, pc}
 8006a84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006a86:	b112      	cbz	r2, 8006a8e <_raise_r+0x1e>
 8006a88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a8c:	b94b      	cbnz	r3, 8006aa2 <_raise_r+0x32>
 8006a8e:	4628      	mov	r0, r5
 8006a90:	f000 f830 	bl	8006af4 <_getpid_r>
 8006a94:	4622      	mov	r2, r4
 8006a96:	4601      	mov	r1, r0
 8006a98:	4628      	mov	r0, r5
 8006a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a9e:	f000 b817 	b.w	8006ad0 <_kill_r>
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d00a      	beq.n	8006abc <_raise_r+0x4c>
 8006aa6:	1c59      	adds	r1, r3, #1
 8006aa8:	d103      	bne.n	8006ab2 <_raise_r+0x42>
 8006aaa:	2316      	movs	r3, #22
 8006aac:	6003      	str	r3, [r0, #0]
 8006aae:	2001      	movs	r0, #1
 8006ab0:	e7e7      	b.n	8006a82 <_raise_r+0x12>
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006aba:	4798      	blx	r3
 8006abc:	2000      	movs	r0, #0
 8006abe:	e7e0      	b.n	8006a82 <_raise_r+0x12>

08006ac0 <raise>:
 8006ac0:	4b02      	ldr	r3, [pc, #8]	@ (8006acc <raise+0xc>)
 8006ac2:	4601      	mov	r1, r0
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	f7ff bfd3 	b.w	8006a70 <_raise_r>
 8006aca:	bf00      	nop
 8006acc:	20000020 	.word	0x20000020

08006ad0 <_kill_r>:
 8006ad0:	b538      	push	{r3, r4, r5, lr}
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	4d06      	ldr	r5, [pc, #24]	@ (8006af0 <_kill_r+0x20>)
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	4608      	mov	r0, r1
 8006ada:	4611      	mov	r1, r2
 8006adc:	602b      	str	r3, [r5, #0]
 8006ade:	f7fd f950 	bl	8003d82 <_kill>
 8006ae2:	1c43      	adds	r3, r0, #1
 8006ae4:	d102      	bne.n	8006aec <_kill_r+0x1c>
 8006ae6:	682b      	ldr	r3, [r5, #0]
 8006ae8:	b103      	cbz	r3, 8006aec <_kill_r+0x1c>
 8006aea:	6023      	str	r3, [r4, #0]
 8006aec:	bd38      	pop	{r3, r4, r5, pc}
 8006aee:	bf00      	nop
 8006af0:	20000798 	.word	0x20000798

08006af4 <_getpid_r>:
 8006af4:	f7fd b93e 	b.w	8003d74 <_getpid>

08006af8 <__swhatbuf_r>:
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	460c      	mov	r4, r1
 8006afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b00:	4615      	mov	r5, r2
 8006b02:	2900      	cmp	r1, #0
 8006b04:	461e      	mov	r6, r3
 8006b06:	b096      	sub	sp, #88	@ 0x58
 8006b08:	da0c      	bge.n	8006b24 <__swhatbuf_r+0x2c>
 8006b0a:	89a3      	ldrh	r3, [r4, #12]
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b12:	bf14      	ite	ne
 8006b14:	2340      	movne	r3, #64	@ 0x40
 8006b16:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	6031      	str	r1, [r6, #0]
 8006b1e:	602b      	str	r3, [r5, #0]
 8006b20:	b016      	add	sp, #88	@ 0x58
 8006b22:	bd70      	pop	{r4, r5, r6, pc}
 8006b24:	466a      	mov	r2, sp
 8006b26:	f000 f849 	bl	8006bbc <_fstat_r>
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	dbed      	blt.n	8006b0a <__swhatbuf_r+0x12>
 8006b2e:	9901      	ldr	r1, [sp, #4]
 8006b30:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b34:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b38:	4259      	negs	r1, r3
 8006b3a:	4159      	adcs	r1, r3
 8006b3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b40:	e7eb      	b.n	8006b1a <__swhatbuf_r+0x22>

08006b42 <__smakebuf_r>:
 8006b42:	898b      	ldrh	r3, [r1, #12]
 8006b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b46:	079d      	lsls	r5, r3, #30
 8006b48:	4606      	mov	r6, r0
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	d507      	bpl.n	8006b5e <__smakebuf_r+0x1c>
 8006b4e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b52:	6023      	str	r3, [r4, #0]
 8006b54:	6123      	str	r3, [r4, #16]
 8006b56:	2301      	movs	r3, #1
 8006b58:	6163      	str	r3, [r4, #20]
 8006b5a:	b003      	add	sp, #12
 8006b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b5e:	466a      	mov	r2, sp
 8006b60:	ab01      	add	r3, sp, #4
 8006b62:	f7ff ffc9 	bl	8006af8 <__swhatbuf_r>
 8006b66:	9f00      	ldr	r7, [sp, #0]
 8006b68:	4605      	mov	r5, r0
 8006b6a:	4639      	mov	r1, r7
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	f7fe fecd 	bl	800590c <_malloc_r>
 8006b72:	b948      	cbnz	r0, 8006b88 <__smakebuf_r+0x46>
 8006b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b78:	059a      	lsls	r2, r3, #22
 8006b7a:	d4ee      	bmi.n	8006b5a <__smakebuf_r+0x18>
 8006b7c:	f023 0303 	bic.w	r3, r3, #3
 8006b80:	f043 0302 	orr.w	r3, r3, #2
 8006b84:	81a3      	strh	r3, [r4, #12]
 8006b86:	e7e2      	b.n	8006b4e <__smakebuf_r+0xc>
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006b8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b92:	81a3      	strh	r3, [r4, #12]
 8006b94:	9b01      	ldr	r3, [sp, #4]
 8006b96:	6020      	str	r0, [r4, #0]
 8006b98:	b15b      	cbz	r3, 8006bb2 <__smakebuf_r+0x70>
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ba0:	f000 f81e 	bl	8006be0 <_isatty_r>
 8006ba4:	b128      	cbz	r0, 8006bb2 <__smakebuf_r+0x70>
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	f023 0303 	bic.w	r3, r3, #3
 8006bac:	f043 0301 	orr.w	r3, r3, #1
 8006bb0:	81a3      	strh	r3, [r4, #12]
 8006bb2:	89a3      	ldrh	r3, [r4, #12]
 8006bb4:	431d      	orrs	r5, r3
 8006bb6:	81a5      	strh	r5, [r4, #12]
 8006bb8:	e7cf      	b.n	8006b5a <__smakebuf_r+0x18>
	...

08006bbc <_fstat_r>:
 8006bbc:	b538      	push	{r3, r4, r5, lr}
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	4d06      	ldr	r5, [pc, #24]	@ (8006bdc <_fstat_r+0x20>)
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	4608      	mov	r0, r1
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	602b      	str	r3, [r5, #0]
 8006bca:	f7fd f939 	bl	8003e40 <_fstat>
 8006bce:	1c43      	adds	r3, r0, #1
 8006bd0:	d102      	bne.n	8006bd8 <_fstat_r+0x1c>
 8006bd2:	682b      	ldr	r3, [r5, #0]
 8006bd4:	b103      	cbz	r3, 8006bd8 <_fstat_r+0x1c>
 8006bd6:	6023      	str	r3, [r4, #0]
 8006bd8:	bd38      	pop	{r3, r4, r5, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000798 	.word	0x20000798

08006be0 <_isatty_r>:
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	2300      	movs	r3, #0
 8006be4:	4d05      	ldr	r5, [pc, #20]	@ (8006bfc <_isatty_r+0x1c>)
 8006be6:	4604      	mov	r4, r0
 8006be8:	4608      	mov	r0, r1
 8006bea:	602b      	str	r3, [r5, #0]
 8006bec:	f7fd f937 	bl	8003e5e <_isatty>
 8006bf0:	1c43      	adds	r3, r0, #1
 8006bf2:	d102      	bne.n	8006bfa <_isatty_r+0x1a>
 8006bf4:	682b      	ldr	r3, [r5, #0]
 8006bf6:	b103      	cbz	r3, 8006bfa <_isatty_r+0x1a>
 8006bf8:	6023      	str	r3, [r4, #0]
 8006bfa:	bd38      	pop	{r3, r4, r5, pc}
 8006bfc:	20000798 	.word	0x20000798

08006c00 <_init>:
 8006c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c02:	bf00      	nop
 8006c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c06:	bc08      	pop	{r3}
 8006c08:	469e      	mov	lr, r3
 8006c0a:	4770      	bx	lr

08006c0c <_fini>:
 8006c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0e:	bf00      	nop
 8006c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c12:	bc08      	pop	{r3}
 8006c14:	469e      	mov	lr, r3
 8006c16:	4770      	bx	lr
